.test_mr_rules:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
      allow_failure: true
      when: always
    - when: always
  stage: test

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

build_image:
  extends: [.test_mr_rules]
  tags:
    - ${TAG}
  image: docker:26.1.4-dind
  timeout: 45m
  parallel:
    matrix:
      - IMAGE: CI_MCORE_IMAGE
        FILE: Dockerfile.ci
        BASE_IMAGE: nvcr.io/nvidia/pytorch:24.01-py3
        TAG: mcore-docker-node-large
      - IMAGE: CI_NEMO_IMAGE
        FILE: Dockerfile.ci
        BASE_IMAGE: nvcr.io/nvidian/nemo:nightly
        TAG: mcore-docker-node-large
      - IMAGE: LINTING_IMAGE
        FILE: Dockerfile.linting
        BASE_IMAGE: python:3.10
        TAG: mcore-docker-node-small
  before_script:
    - echo "$NGC_API_KEY" | docker login nvcr.io -u '$oauthtoken' --password-stdin
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  variables:
    STAGE: main
  script:
    - |
      set -x
      env
      eval "IMAGE=\$$IMAGE"

      docker system prune -a --filter "until=24h" -f || true

      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        ADDITIONAL_PARAMS="--pull"
      fi

      docker pull ${IMAGE}:${CI_PIPELINE_ID} || true
      docker pull ${IMAGE}:${CI_MERGE_REQUEST_IID:-noop} || true
      docker pull ${IMAGE}:buildcache || true

      docker build \
        --secret id=JET_INDEX_URLS \
        --target $STAGE \
        -f $FILE \
        -t ${IMAGE}:${CI_PIPELINE_ID} \
        -t ${IMAGE}:${CI_MERGE_REQUEST_IID:-noop} \
        --build-arg CACHEBUST=$(cat /proc/sys/kernel/random/uuid) \
        --cache-to type=inline \
        --cache-from type=registry,ref=${IMAGE}:buildcache \
        --cache-from type=registry,ref=${IMAGE}:${CI_PIPELINE_ID} \
        --cache-from type=registry,ref=${IMAGE}:${CI_MERGE_REQUEST_IID:-noop} \
        --build-arg FROM_IMAGE_NAME=$BASE_IMAGE \
        ${ADDITIONAL_PARAMS} .

      docker push ${IMAGE}:${CI_PIPELINE_ID}
      docker push ${IMAGE}:${CI_MERGE_REQUEST_IID:-noop}

      if [[ "$CI_COMMIT_BRANCH" == "ci-nightly-a100" ]]; then
        docker tag ${IMAGE}:${CI_PIPELINE_ID} ${IMAGE}:nightly
        docker push ${IMAGE}:nightly
      fi

      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag ${IMAGE}:${CI_PIPELINE_ID} ${IMAGE}:buildcache
        docker push ${IMAGE}:buildcache
      fi

  retry:
    max: 2

unit_tests:
  # This job runs both test suite of ToT and of a historic ref against
  # the current code. This is a form of backwards compatibility testing
  # and helps in providing stable interfaces.
  extends: [.test_mr_rules]
  image: ${CI_MCORE_IMAGE}:${CI_PIPELINE_ID}
  needs: [build_image]
  timeout: 180m
  parallel:
    matrix:
      - TAG: latest
      - TAG: 8fc755388a03bae05cb740857008b8916e01a63c
  tags: [8xL40S]
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    - |
      if [[ $TAG != latest ]]; then
        git checkout $TAG
        rm -rf /opt/megatron-lm/tests
        cp -r tests/ /opt/megatron-lm
      fi
  script:
    - |
      cd /opt/megatron-lm
      if [[ $UNIT_TEST_REPEAT -eq 0 ]]; then
        exit 0
      fi

      for i in $(seq $UNIT_TEST_REPEAT); do
        SEED=$((RANDOM % 9000 + 1000));
        SKIPPED=()
        if [[ $TAG != latest ]]; then
          SKIPPED+=(-m "not internal")
        fi
        timeout ${UNIT_TEST_TIMEOUT}m torchrun --nproc_per_node=8 -m pytest --random-order --random-order-seed ${SEED} -xvs --cov-report=term --cov-report=html --cov=megatron/core --no-cov-on-fail "${SKIPPED[@]}" tests/unit_tests
      done
  artifacts:
    paths:
      - coverage
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
      allow_failure: true
      when: always
    - if: '$TAG != "latest"'
      allow_failure: true
    - when: always

docs_build_test:
  extends: [.test_mr_rules]
  image: ${CI_MCORE_IMAGE}:${CI_PIPELINE_ID}
  tags: [mcore-docker-node-small]
  needs: [build_image]
  script:
    - cd ..
    - rm -rf documentation && git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_ENDPOINT}/nemo-megatron-core-tme/documentation.git
    - mv megatron-lm/ documentation/
    - cd documentation/
    - ./repo docs

formatting:
  extends: [.test_mr_rules]
  image: ${LINTING_IMAGE}:${CI_PIPELINE_ID}
  tags: [mcore-docker-node-small]
  needs: [build_image]
  script:
    - env
    - git fetch origin main
    - BASE_REF="$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" CHECK_ONLY=true SKIP_DOCS=$([[ "$CI_MERGE_REQUEST_LABELS" == *"Skip docs"* ]] && echo "true" || echo "false") bash tools/autoformat.sh

copyright:
  extends: [.test_mr_rules]
  tags: [mcore-docker-node-small]
  image: ${CI_MCORE_IMAGE}:${CI_PIPELINE_ID}
  needs: [build_image]
  script:
    - git fetch origin main
    - bash tools/copyright.sh

secret_detection:
  tags: [mcore-docker-node-small]
  variables:
    GIT_DEPTH: 0
    SECRET_DETECTION_LOG_OPTIONS: ${CI_MERGE_REQUEST_DIFF_BASE_SHA}..${CI_COMMIT_SHA}
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - apk add jq
    - /analyzer run
    - |
      if [[ $(cat gl-secret-detection-report.json | jq '.vulnerabilities | length > 0') == true ]]; then
        echo "Atleast one vulnerability has been found"
        cat gl-secret-detection-report.json | jq '.'
        exit 1
      fi
