diff --git a/megatron/core/optimizer/__init__.py b/megatron/core/optimizer/__init__.py
index 1846907e9..7fd0554c4 100644
--- a/megatron/core/optimizer/__init__.py
+++ b/megatron/core/optimizer/__init__.py
@@ -55,6 +55,7 @@ def _get_param_groups(
     decoupled_lr: Optional[float],
     decoupled_min_lr: Optional[float],
     default_skip_embedding_weight_decay: bool = False,
+    vision_ration = 1.0,
 ) -> List[Dict]:
     """Create parameter groups for optimizer.
 
@@ -106,6 +107,8 @@ def _get_param_groups(
                     or len(param.shape) == 1
                     or (default_skip_embedding_weight_decay and "embedding" in name)
                 )
+                # NOTE(lizhiyu): hack for qwen2.5vl
+                # no_wd = name.endswith(".bias")
 
             if scale_lr_cond is not None:
                 scale_lr = scale_lr_cond(name, param)
@@ -128,8 +131,14 @@ def _get_param_groups(
                 param, 'is_embedding_or_output_parameter', False
             ):
                 is_decoupled_lr = True
+            
+            is_vision_model_param = False
+            if "vision_model" in name:
+                is_vision_model_param = True
+            else:
+                is_vision_model_param = False
 
-            key = (wd_mult, _lr_mult, is_expert_parallel, is_decoupled_lr)
+            key = (wd_mult, _lr_mult, is_expert_parallel, is_decoupled_lr, is_vision_model_param)
             if key not in params_map:
                 params_map[key] = []
             params_map[key].append(param)
@@ -147,7 +156,7 @@ def _get_param_groups(
 
     param_groups = []
     for key in params_key:
-        wd_mult, _lr_mult, is_expert_parallel, is_decoupled_lr = key
+        wd_mult, _lr_mult, is_expert_parallel, is_decoupled_lr, is_vision_model_param = key
         params = params_map[key] if key in params_map else []
         param_group = {
             'params': params,
@@ -155,6 +164,7 @@ def _get_param_groups(
             'lr_mult': _lr_mult,
             'is_expert_parallel': is_expert_parallel,
             'is_decoupled_lr': is_decoupled_lr,
+            'is_vision_model_param': is_vision_model_param,
         }
         # Ensure param_group has required keys for matching when loading optimizer state
         # See MegatronOptimizer._filter_and_reorder_param_groups.
@@ -167,6 +177,7 @@ def _get_param_groups(
         min_lr=min_lr,
         decoupled_lr=decoupled_lr,
         decoupled_min_lr=decoupled_min_lr,
+        vision_ration=vision_ration,
     )
 
     return param_groups
@@ -178,6 +189,7 @@ def _update_min_and_max_lr_in_param_groups(
     min_lr: float,
     decoupled_lr: Optional[float],
     decoupled_min_lr: Optional[float],
+    vision_ration = 0.1,
 ) -> List[Dict]:
     """
     Updates `max_lr` and `min_lr` values in each parameter group, and returns new list.
@@ -206,7 +218,7 @@ def _update_min_and_max_lr_in_param_groups(
             param_group['max_lr'] = decoupled_lr
             param_group['min_lr'] = decoupled_min_lr
         else:
-            param_group['max_lr'] = lr
+            param_group['max_lr'] = lr if not param_group['is_vision_model_param'] else lr * vision_ration # NOTE(lizhiyu): change the ration here
             param_group['min_lr'] = min_lr
     return param_groups
 
@@ -255,6 +267,7 @@ def _get_param_groups_and_buffers(
         decoupled_lr=config.decoupled_lr,
         decoupled_min_lr=config.decoupled_min_lr,
         default_skip_embedding_weight_decay=default_skip_embedding_weight_decay,
+        vision_ration=config.vision_ration, # NOTE(lizhiyu): The vision ration is used to scale the learning rate for vision model parameters. Added by FlagScale.
     )
     param_groups = list(filter(filter_fn, param_groups))
     buffers = {}
@@ -511,6 +524,10 @@ def get_megatron_optimizer(
     intra_dp_cp_group = process_groups['intra_dp_cp_group']
     intra_expt_dp_group = process_groups['intra_expt_dp_group']
     mp_group = process_groups['mp_group']
+    ########## FlagScale Begin ##########
+    mp_group = [mp_group] if not isinstance(mp_group, list) else mp_group
+    model_parallel_rank = mp_group[0].rank()
+    ########## FlagScale End ##########
     expt_tp_pp_group = process_groups['expt_tp_pp_group']
     intra_dp_cp_group_gloo = process_groups['intra_dp_cp_group_gloo']
     intra_expt_dp_group_gloo = process_groups['intra_expt_dp_group_gloo']
@@ -609,7 +626,11 @@ def get_megatron_optimizer(
         default_skip_embedding_weight_decay=default_skip_embedding_weight_decay,
     )
     if len(moe_param_groups) > 0:
-        expt_model_parallel_rank = get_pg_rank(expt_tp_pp_group)
+        if not isinstance(expt_tp_pp_group, list):
+            expt_model_parallel_rank = get_pg_rank(expt_tp_pp_group)
+        else:
+            model_parallel_rank = expt_tp_pp_group[0].rank()
+        
         # Pass Gloo process groups into optimizer only if needed.
         if use_gloo_process_groups:
             expt_data_parallel_group_gloo = intra_expt_dp_group_gloo
