diff --git a/vllm/core/block_manager.py b/vllm/core/block_manager.py
index 4ec5a775f..9fb461145 100644
--- a/vllm/core/block_manager.py
+++ b/vllm/core/block_manager.py
@@ -17,6 +17,7 @@ from vllm.utils import Device
 
 SeqId = int
 EncoderSeqId = str
+NegativeSeqId = int # --- FLAGSCALE MODIFICATION ---
 
 
 class SelfAttnBlockSpaceManager(BlockSpaceManager):
@@ -101,6 +102,7 @@ class SelfAttnBlockSpaceManager(BlockSpaceManager):
 
         self.block_tables: Dict[SeqId, BlockTable] = {}
         self.cross_block_tables: Dict[EncoderSeqId, BlockTable] = {}
+        self.negative_block_tables: Dict[NegativeSeqId, BlockTable] = {} # --- FLAGSCALE MODIFICATION ---
 
         self._computed_blocks_tracker = ComputedBlocksTracker(
             self.block_allocator, self.block_size, self.enable_caching)
@@ -130,6 +132,16 @@ class SelfAttnBlockSpaceManager(BlockSpaceManager):
                 block_size=self.block_size,
             )
 
+        # --- FLAGSCALE MODIFICATION BEG ---
+        if seq_group.has_negative_seqs():
+            negative_seq = seq_group.negative_seqs_dict[seq.seq_id]
+            num_required_blocks += BlockTable.get_num_required_blocks(
+                negative_seq.get_token_ids(),
+                block_size=self.block_size,
+                num_lookahead_slots=num_lookahead_slots,
+            )
+        # --- FLAGSCALE MODIFICATION END ---
+
         if self.max_block_sliding_window is not None:
             num_required_blocks = min(num_required_blocks,
                                       self.max_block_sliding_window)
@@ -196,6 +208,17 @@ class SelfAttnBlockSpaceManager(BlockSpaceManager):
                 not in self.cross_block_tables), \
             "block table already exists"
 
+        # --- FLAGSCALE MODIFICATION BEG ---
+        if seq_group.has_negative_seqs():
+            seq = waiting_seqs[0]
+            negative_seq = seq_group.negative_seqs_dict[seq.seq_id]
+            negative_block_table: BlockTable = self._allocate_sequence(negative_seq)
+            self.negative_block_tables[negative_seq.seq_id] = negative_block_table
+            for seq in waiting_seqs[1:]:
+                negative_seq = seq_group.negative_seqs_dict[seq.seq_id]
+                self.negative_block_tables[negative_seq.seq_id] = negative_block_table.fork()
+        # --- FLAGSCALE MODIFICATION END ---
+
         check_no_caching_or_swa_for_blockmgr_encdec(self, seq_group)
 
         if seq_group.is_encoder_decoder():
@@ -229,6 +252,18 @@ class SelfAttnBlockSpaceManager(BlockSpaceManager):
                     num_lookahead_slots=num_lookahead_slots,
                 ))
 
+            # --- FLAGSCALE MODIFICATION BEG ---
+            if seq_group.has_negative_seqs():
+                negative_seq = seq_group.negative_seqs_dict[seq.seq_id]
+                negative_block_table = self.negative_block_tables[negative_seq.seq_id]
+                num_touched_blocks += (
+                    negative_block_table.get_num_blocks_touched_by_append_slots(
+                        token_ids=negative_block_table.get_unseen_token_ids(
+                            negative_seq.get_token_ids()),
+                        num_lookahead_slots=num_lookahead_slots,
+                    ))
+            # --- FLAGSCALE MODIFICATION END ---
+
         num_free_gpu_blocks = self.block_allocator.get_num_free_blocks(
             Device.GPU)
         return num_touched_blocks <= num_free_gpu_blocks
@@ -237,6 +272,7 @@ class SelfAttnBlockSpaceManager(BlockSpaceManager):
         self,
         seq: Sequence,
         num_lookahead_slots: int,
+        seq_group: SequenceGroup = None, # --- FLAGSCALE MODIFICATION ---
     ) -> List[Tuple[int, int]]:
 
         block_table = self.block_tables[seq.seq_id]
@@ -247,6 +283,19 @@ class SelfAttnBlockSpaceManager(BlockSpaceManager):
             num_computed_slots=seq.data.get_num_computed_tokens(),
             extra_hash=seq.extra_hash(),
         )
+
+        # --- FLAGSCALE MODIFICATION BEG ---
+        if seq_group.has_negative_seqs():
+            negative_seq = seq_group.negative_seqs_dict[seq.seq_id]
+            negative_block_table = self.negative_block_tables[negative_seq.seq_id]
+            negative_block_table.append_token_ids(
+                token_ids=negative_block_table.get_unseen_token_ids(negative_seq.get_token_ids()),
+                num_lookahead_slots=num_lookahead_slots,
+                num_computed_slots=negative_seq.data.get_num_computed_tokens(),
+                extra_hash=negative_seq.extra_hash(),
+            )
+        # --- FLAGSCALE MODIFICATION END ---
+
         # Return any new copy-on-writes.
         new_cows = self.block_allocator.clear_copy_on_writes()
         return new_cows
@@ -270,6 +319,13 @@ class SelfAttnBlockSpaceManager(BlockSpaceManager):
         self.block_tables[seq_id].free()
         del self.block_tables[seq_id]
 
+        # --- FLAGSCALE MODIFICATION BEG ---
+        # Free negative table/blocks
+        if self.negative_block_tables:
+            self.negative_block_tables[seq_id].free()
+            del self.negative_block_tables[seq_id]
+        # --- FLAGSCALE MODIFICATION END ---
+
     def remove_seq_from_computed_blocks_tracker(self, seq: Sequence) -> None:
         seq_id = seq.seq_id
         self._computed_blocks_tracker.remove_seq(seq_id)
@@ -286,6 +342,12 @@ class SelfAttnBlockSpaceManager(BlockSpaceManager):
         block_ids = self.block_tables[seq.seq_id].physical_block_ids
         return block_ids  # type: ignore
 
+    # --- FLAGSCALE MODIFICATION BEG ---
+    def get_negative_block_table(self, seq: Sequence) -> List[int]:
+        block_ids = self.negative_block_tables[seq.seq_id].physical_block_ids
+        return block_ids # type: ignore
+    # --- FLAGSCALE MODIFICATION END ---
+
     def get_cross_block_table(self, seq_group: SequenceGroup) -> List[int]:
         request_id = seq_group.request_id
         assert request_id in self.cross_block_tables
