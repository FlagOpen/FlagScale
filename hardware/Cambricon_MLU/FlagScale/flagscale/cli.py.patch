diff --git a/flagscale/cli.py b/flagscale/cli.py
index 36ec49e0..2f79539b 100644
--- a/flagscale/cli.py
+++ b/flagscale/cli.py
@@ -2,10 +2,14 @@ import os
 import subprocess
 import sys
 
+from urllib.parse import quote
+
 import click
 import yaml
 
-VERSION = "0.6.0"
+from packaging.version import Version
+
+VERSION = "0.8.0"
 
 
 @click.group(context_settings={"help_option_names": ["-h", "--help"]})
@@ -25,7 +29,7 @@ def train(model_name, yaml_path=None):
     """
     Train model from yaml.
     """
-    from run import main as run_main
+    from flag_scale.run import main as run_main
 
     if yaml_path:
         if os.path.isabs(yaml_path):
@@ -58,11 +62,22 @@ def train(model_name, yaml_path=None):
 @flagscale.command()
 @click.argument("model_name", type=str)
 @click.argument("yaml_path", type=click.Path(exists=True), required=False)
-def serve(model_name, yaml_path=None):
+@click.option(
+    "--model-path", "model_path", required=False, type=str, help="The weight path of model"
+)
+@click.option("--port", "port", required=False, type=int, help="The port of serve")
+@click.option(
+    "--engine-args",
+    "engine_args",
+    required=False,
+    type=str,
+    help="Model config as JSON string, e.g. '{\"a\":1, \"b\":2}'",
+)
+def serve(model_name, yaml_path=None, model_path=None, port=None, engine_args=None):
     """
     Serve model from yaml.
     """
-    from run import main as run_main
+    from flag_scale.run import main as run_main
 
     if yaml_path:
         if os.path.isabs(yaml_path):
@@ -91,8 +106,14 @@ def serve(model_name, yaml_path=None):
     config_name = os.path.splitext(os.path.basename(yaml_path))[0]
     click.echo(f"config_path: {config_path}")
     click.echo(f"config_name: {config_name}")
-
-    sys.argv = ["run.py", f"--config-path={config_path}", f"--config-name={config_name}"]
+    args = ["run.py", f"--config-path={config_path}", f"--config-name={config_name}"]
+    if model_path:
+        args.append(f"+experiment.runner.cli_args.model_path={model_path}")
+    if port:
+        args.append(f"+experiment.runner.cli_args.port={port}")
+    if engine_args:
+        args.append(f"+experiment.runner.cli_args.engine_args='{engine_args}'")
+    sys.argv = args
     run_main()
 
 
@@ -376,5 +397,61 @@ def test(
         functional_test_all()
 
 
+@flagscale.command()
+@click.argument("backend", type=str)
+@click.option("--device", default="gpu", help="Device type (e.g., gpu, cpu)")
+def show(backend, device="gpu"):
+    """
+    Show the whl version of backend.
+    """
+    from flag_scale.version import get_whl_version
+
+    versions, compatible_versions = get_whl_version(backend, device)
+    version_list = '\n'.join(versions)
+    click.echo(f"All versions for {backend} on {device}:\n{version_list}")
+    if not compatible_versions:
+        click.echo(f"Warning: No compatible versions found for {backend} on {device}.")
+    else:
+        version_list = '\n'.join(compatible_versions)
+        click.echo(f"All compatible versions for {backend} on your {device}:\n{version_list}")
+
+
+@flagscale.command()
+@click.argument("backend", type=str)
+@click.option("--device", default="gpu", help="Device type (e.g., gpu, cpu)")
+@click.option("--version", default=None)
+def install(backend, device="gpu", version=None):
+    """
+    Install the whl version of backend.
+    """
+    from flag_scale.version import get_whl_version
+
+    if "metax" in device.lower():
+        device = "metax"
+    versions, compatible_versions = get_whl_version(backend, device)
+    if not compatible_versions:
+        raise click.ClickException(f"No compatible versions found for {backend} on {device}.")
+    install_version = None
+    if version:
+        for compatible_version in compatible_versions:
+            if version in compatible_version:
+                install_version = compatible_version
+                break
+    else:
+        versions = [Version(version) for version in compatible_versions]
+        install_version = max(versions)
+        for idx, version in enumerate(versions):
+            if version == install_version:
+                install_version = compatible_versions[idx]
+                break
+        install_version = f"{backend}" + "-" + install_version + ".whl"
+        click.echo(f"Installing {install_version} for {backend} on {device}.")
+        install_version = quote(install_version)
+        ks3_path = f"https://baai-flagscale.ks3-cn-beijing.ksyuncs.com/whl/{backend}/{device}/{install_version}"
+        subprocess.check_call(
+            [sys.executable, "-m", "pip", "install", ks3_path, "--no-build-isolation", "--verbose"]
+        )
+
+
 if __name__ == "__main__":
     flagscale()

