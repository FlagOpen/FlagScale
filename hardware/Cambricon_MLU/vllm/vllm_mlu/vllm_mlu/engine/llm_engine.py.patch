diff --git a/vllm_mlu/vllm_mlu/engine/llm_engine.py b/vllm_mlu/vllm_mlu/engine/llm_engine.py
new file mode 100644
index 000000000..ab753060d
--- /dev/null
+++ b/vllm_mlu/vllm_mlu/engine/llm_engine.py
@@ -0,0 +1,59 @@
+from vllm.engine.llm_engine import LLMEngine
+from vllm.logger import init_logger
+
+from vllm_mlu.mlu_hijack_utils import MluHijackObject
+
+logger = init_logger(__name__)
+
+
+def vllm__engine__llm_engine__LLMEngine__get_latency(self):
+    latency = self.model_executor.get_latency()
+    return latency
+
+
+def vllm__engine__llm_engine__LLMEngine__get_memory_usage(self):
+    return self.model_executor.get_memory_usage()
+
+
+def vllm__engine__llm_engine__LLMEngine__get_block_usage(self):
+    assert len(self.scheduler) == 1, f"Only support pipeline_parallel_size=1."
+    num_free_gpu_blocks = self.scheduler[0].block_manager.get_num_free_gpu_blocks()
+    num_free_cpu_blocks = self.scheduler[0].block_manager.get_num_free_cpu_blocks()
+    return (num_free_gpu_blocks, num_free_cpu_blocks)
+
+
+# for client init/reset server scheduler profile data
+def vllm__engine__llm_engine__LLMEngine__init_scheduler_view(self):
+    for scheduler in self.scheduler:
+        if hasattr(scheduler, "init_scheduler_view"):
+            scheduler.init_scheduler_view()
+        else:
+            logger.warning("Can not find any scheduler view, " +
+                           "please 'export VLLM_SCHEDULER_PROFILE=true' first.")
+
+
+# for client pulling server scheduler profile data
+def vllm__engine__llm_engine__LLMEngine__save_scheduler_view(self):
+    for idx, scheduler in enumerate(self.scheduler):
+        if hasattr(scheduler, "save_scheduler_view"):
+            scheduler.save_scheduler_view(idx)
+        else:
+            logger.warning("Can not find any scheduler view, " +
+                           "please 'export VLLM_SCHEDULER_PROFILE=true' first.")
+
+
+MluHijackObject.apply_hijack(LLMEngine,
+                             "init_scheduler_view",
+                             vllm__engine__llm_engine__LLMEngine__init_scheduler_view)
+MluHijackObject.apply_hijack(LLMEngine,
+                             "save_scheduler_view",
+                             vllm__engine__llm_engine__LLMEngine__save_scheduler_view)
+MluHijackObject.apply_hijack(LLMEngine,
+                             "get_latency",
+                             vllm__engine__llm_engine__LLMEngine__get_latency)
+MluHijackObject.apply_hijack(LLMEngine,
+                             "get_memory_usage",
+                             vllm__engine__llm_engine__LLMEngine__get_memory_usage)
+MluHijackObject.apply_hijack(LLMEngine,
+                             "get_block_usage",
+                             vllm__engine__llm_engine__LLMEngine__get_block_usage)

