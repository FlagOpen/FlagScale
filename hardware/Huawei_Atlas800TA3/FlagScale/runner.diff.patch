diff --git a/runner.diff b/runner.diff
new file mode 100644
index 000000000..fd73586f5
--- /dev/null
+++ b/runner.diff
@@ -0,0 +1,87 @@
+diff --git a/flagscale/runner/runner_train.py b/flagscale/runner/runner_train.py
+index aa8f2f7b9..a756aca3b 100644
+--- a/flagscale/runner/runner_train.py
++++ b/flagscale/runner/runner_train.py
+@@ -171,7 +171,7 @@ def _get_runner_cmd_train(
+     return runner_cmd
+ 
+ 
+-def _generate_run_script_train(config, host, node_rank, cmd, background=True, with_test=False):
++def _generate_run_script_train(config, host, node_rank, cmd, background=True, with_test=False, root_dir=None):
+     system_config = config.train.system
+     logging_config = config.train.system.logging
+ 
+@@ -186,8 +186,11 @@ def _generate_run_script_train(config, host, node_rank, cmd, background=True, wi
+     host_pid_file = os.path.join(logging_config.pids_dir, f"host_{node_rank}_{host}.pid")
+ 
+     os.makedirs(logging_config.scripts_dir, exist_ok=True)
+-
+-    root_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
++    if root_dir is not None:
++        root_dir = os.path.abspath(root_dir)
++    else:
++        root_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
++    assert os.path.exists(root_dir), f"ROOT_DIR {root_dir} does not exist."
+     megatron_dir = os.path.join(root_dir, "third_party", "Megatron-LM")
+     cmds_config = config.experiment.get("cmds", None)
+     if cmds_config:
+@@ -302,6 +305,31 @@ def run_node(
+         cur_envs=cur_envs,
+     )
+ 
++def update_cmd_with_hetero_config(cmd, hetero_extra_config):
++    if len(hetero_extra_config) == 0:
++        return cmd
++    cmd_parts = cmd.split()
++
++    for key, value in hetero_extra_config.items():
++        option = f"--{key}"
++        if option in cmd_parts:
++            idx = cmd_parts.index(option)
++            if value.lower() == "true":
++                continue
++            elif value.lower() == "false":
++                cmd_parts.pop(idx)
++            else:
++                if idx + 1 < len(cmd_parts) and not cmd_parts[idx + 1].startswith("--"):
++                    cmd_parts[idx + 1] = value
++                else:
++                    cmd_parts.insert(idx + 1, value)
++        else:
++            if value.lower() == "true":
++                cmd_parts.append(option)
++            # NOTE: disable adding new options
++            # elif value.lower() != "false":
++            #     cmd_parts.extend([option, value])
++    return " ".join(cmd_parts)
+ 
+ class SSHTrainRunner(RunnerBase):
+     def __init__(self, config: DictConfig):
+@@ -335,7 +363,13 @@ class SSHTrainRunner(RunnerBase):
+     ):
+         export_cmd = []
+ 
++        hetero_extra_config = {}
+         for k, v in cur_envs.items():
++            print(k, v)
++            if k.startswith("HETERO_") or k.startswith("hetero_"):
++                k = k[7:].lower().replace("_", "-")
++                hetero_extra_config[f'{k}'] = f'{v}'
++                continue
+             export_cmd += [f"{k}={v}"]
+ 
+         runner_cmd = _get_runner_cmd_train(
+@@ -350,10 +384,12 @@ class SSHTrainRunner(RunnerBase):
+                 self.user_args += ["--hetero-current-device-type", device_type]
+ 
+         cmd = shlex.join(export_cmd + runner_cmd + [self.user_script] + self.user_args)
++        # update cmd with hetero_extra_config
++        cmd = update_cmd_with_hetero_config(cmd, hetero_extra_config)
+ 
+         logging_config = self.config.train.system.logging
+         host_run_script_file = _generate_run_script_train(
+-            self.config, host, node_rank, cmd, background=True, with_test=with_test
++            self.config, host, node_rank, cmd, background=True, with_test=with_test, root_dir=hetero_extra_config.get("root-dir", None)
+         )
+ 
+         if host != "localhost":

