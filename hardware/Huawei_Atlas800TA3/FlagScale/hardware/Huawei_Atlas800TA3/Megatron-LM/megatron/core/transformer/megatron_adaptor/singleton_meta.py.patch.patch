diff --git a/hardware/Huawei_Atlas800TA3/Megatron-LM/megatron/core/transformer/megatron_adaptor/singleton_meta.py.patch b/hardware/Huawei_Atlas800TA3/Megatron-LM/megatron/core/transformer/megatron_adaptor/singleton_meta.py.patch
new file mode 100644
index 00000000..d9c73b67
--- /dev/null
+++ b/hardware/Huawei_Atlas800TA3/Megatron-LM/megatron/core/transformer/megatron_adaptor/singleton_meta.py.patch
@@ -0,0 +1,34 @@
+diff --git a/megatron/core/transformer/megatron_adaptor/singleton_meta.py b/megatron/core/transformer/megatron_adaptor/singleton_meta.py
+new file mode 100644
+index 000000000..e24676724
+--- /dev/null
++++ b/megatron/core/transformer/megatron_adaptor/singleton_meta.py
+@@ -0,0 +1,27 @@
++# Copyright 2024 Huawei Technologies Co., Ltd
++#
++# Licensed under the Apache License, Version 2.0 (the "License");
++# you may not use this file except in compliance with the License.
++# You may obtain a copy of the License at
++#
++# http://www.apache.org/licenses/LICENSE-2.0
++#
++# Unless required by applicable law or agreed to in writing, software
++# distributed under the License is distributed on an "AS IS" BASIS,
++# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++# See the License for the specific language governing permissions and
++# limitations under the License.
++# ============================================================================
++import threading
++ 
++ 
++class SingletonMeta(type):
++    _instances = {}
++    _lock = threading.Lock()
++ 
++    def __call__(cls, *args, **kwargs):
++        with cls._lock:
++            if cls not in cls._instances:
++                instance = super().__call__(*args, **kwargs)
++                cls._instances[cls] = instance
++        return cls._instances[cls]
+

