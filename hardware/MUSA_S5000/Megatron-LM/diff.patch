diff --git a/.coveragerc b/.coveragerc
deleted file mode 100644
index 0e37a5470..000000000
--- a/.coveragerc
+++ /dev/null
@@ -1,6 +0,0 @@
-[html]
-directory = coverage
-
-[run]
-data_file = .coverage_$LOCAL_RANK
-relative_files = true
diff --git a/.flake8 b/.flake8
deleted file mode 100644
index 1e35e0c49..000000000
--- a/.flake8
+++ /dev/null
@@ -1,4 +0,0 @@
-[flake8]
-max-line-length = 100
-extend-ignore = E203,E501,F401,E402,E714
-per-file-ignores = __init__.py:F401
\ No newline at end of file
diff --git a/.github/ISSUE_TEMPLATE/bug.md b/.github/ISSUE_TEMPLATE/bug.md
deleted file mode 100644
index b639acd3c..000000000
--- a/.github/ISSUE_TEMPLATE/bug.md
+++ /dev/null
@@ -1,32 +0,0 @@
----
-name: BUG
-about: Report a bug that needs attention
-title: "[BUG]"
-labels: ''
-assignees: ''
-
----
-
-**Describe the bug**
-A clear and concise description of what the bug is.
-
-**To Reproduce**
-Steps to reproduce the behavior. The easier it is to reproduce the faster it will get maintainer attention.
-
-**Expected behavior**
-A clear and concise description of what you expected to happen.
-
-**Stack trace/logs**
-If applicable, add the stack trace or logs from the time of the error.
-
-**Environment (please complete the following information):**
- - Megatron-LM commit ID
- - PyTorch version
- - CUDA version
- - NCCL version
-
-**Proposed fix**
-If you have a proposal for how to fix the issue state it here or link to a PR.
-
-**Additional context**
-Add any other context about the problem here.
diff --git a/.github/ISSUE_TEMPLATE/enhancement.md b/.github/ISSUE_TEMPLATE/enhancement.md
deleted file mode 100644
index 076f7195b..000000000
--- a/.github/ISSUE_TEMPLATE/enhancement.md
+++ /dev/null
@@ -1,23 +0,0 @@
----
-name: ENHANCEMENT
-about: Suggest an idea to improve this project
-title: "[ENHANCEMENT]"
-labels: ''
-assignees: ''
-
----
-
-**Is your feature request related to a problem? Please describe.**
-A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
-
-**Describe the solution you'd like**
-A clear and concise description of what you want to happen.
-
-**Describe alternatives you've considered**
-A clear and concise description of any alternative solutions or features you've considered.
-
-**Proposed implementation**
-If you have a proposed implementation for the feature state it here or link to a PR.
-
-**Additional context**
-Add any other context or screenshots about the feature request here.
diff --git a/.github/ISSUE_TEMPLATE/question.md b/.github/ISSUE_TEMPLATE/question.md
deleted file mode 100644
index b3d89a0ac..000000000
--- a/.github/ISSUE_TEMPLATE/question.md
+++ /dev/null
@@ -1,12 +0,0 @@
----
-name: QUESTION
-about: Ask a question about Megatron-LM that is not a bug, regression or enhancement
-  request
-title: "[QUESTION]"
-labels: ''
-assignees: ''
-
----
-
-**Your question**
-Ask a clear and concise question about Megatron-LM.
diff --git a/.github/ISSUE_TEMPLATE/regression.md b/.github/ISSUE_TEMPLATE/regression.md
deleted file mode 100644
index 10078d23a..000000000
--- a/.github/ISSUE_TEMPLATE/regression.md
+++ /dev/null
@@ -1,39 +0,0 @@
----
-name: REGRESSION
-about: Report a regression in speed or accuracy due to a Megatron-LM update
-title: "[REGRESSION]"
-labels: ''
-assignees: ''
-
----
-
-**Describe the regression**
-A clear and concise description of what the regression is.
-
-**To Reproduce**
-Steps to reproduce the behavior. The easier it is to reproduce the faster it will get maintainer attention.
-
-**Previous performance**
-What speed or accuracy did you previously see.
-
-**New performance**
-What speed or accuracy do you see after the update.
-
-**Stack trace/logs**
-If applicable, add the stack trace or logs related to the regression.
-
-**Environment (please complete the following information):**
- - Previous Megatron-LM commit ID
- - New Megatron-LM commit ID
- - Previous PyTorch version
- - New PyTorch version
- - Previous CUDA version
- - New CUDA version
- - Previous NCCL version
- - New NCCL version
-
-**Proposed fix**
-If you have a proposal for how to fix the issue state it here or link to a PR.
-
-**Additional context**
-Add any other context about the problem here.
diff --git a/.github/workflows/stale.yml b/.github/workflows/stale.yml
deleted file mode 100644
index 58ba38e06..000000000
--- a/.github/workflows/stale.yml
+++ /dev/null
@@ -1,31 +0,0 @@
-# This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.
-#
-# You can adjust the behavior by modifying this file.
-# For more information, see:
-# https://github.com/actions/stale
-name: Mark stale issues and pull requests
-
-on:
-  schedule:
-  - cron: '15 18 * * *'
-
-jobs:
-  stale:
-
-    runs-on: ubuntu-latest
-    permissions:
-      issues: write
-      pull-requests: write
-
-    steps:
-    - uses: actions/stale@v5
-      with:
-        repo-token: ${{ secrets.GITHUB_TOKEN }}
-        days-before-stale: 60
-        stale-issue-message: 'Marking as stale. No activity in 60 days.'
-        stale-pr-message: 'Marking as stale. No activity in 60 days.'
-        stale-issue-label: 'stale'
-        stale-pr-label: 'stale'
-        remove-stale-when-updated: true
-        operations-per-run: 1000
-        days-before-close: -1
diff --git a/.gitignore b/.gitignore
deleted file mode 100644
index fd081062e..000000000
--- a/.gitignore
+++ /dev/null
@@ -1,14 +0,0 @@
-__pycache__
-*.so
-build
-.coverage_*
-*.egg-info
-*~
-slurm*
-logs
-.vscode
-local/
-.gitmodules
-wandb/
-onelogger.log
-onelogger.err
\ No newline at end of file
diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
deleted file mode 100644
index 3b2e4e150..000000000
--- a/.gitlab-ci.yml
+++ /dev/null
@@ -1,141 +0,0 @@
-workflow:
-  rules:
-    - if: $CI_PROJECT_NAMESPACE != "ADLR"
-      when: never
-    - if: $CI_COMMIT_BRANCH =~ /ci-/ && $CI_PIPELINE_SOURCE != "schedule"
-      when: never
-    - if: $CI_PIPELINE_SOURCE == "schedule"
-      auto_cancel:
-        on_new_commit: none
-    - if: $CI_PIPELINE_SOURCE == "web"
-    - if: $CI_COMMIT_REF_PROTECTED == "true"
-      variables:
-        FUNCTIONAL_TEST: 'no'
-    - if: $CI_MERGE_REQUEST_LABELS =~ /Run tests/ && $CI_MERGE_REQUEST_TARGET_BRANCH_SHA != ""
-      variables:
-        UNIT_TEST_REPEAT: 1
-        UNIT_TEST_TIMEOUT: 15
-        FUNCTIONAL_TEST: 'yes'
-        FUNCTIONAL_TEST_SCOPE: mr
-        FUNCTIONAL_TEST_REPEAT: 5
-        FUNCTIONAL_TEST_TIME_LIMIT: 2700
-        FUNCTIONAL_TEST_CLUSTER_A100: ''
-        FUNCTIONAL_TEST_CLUSTER_H100: ''
-        PUBLISH: 'no'
-    - if: $CI_MERGE_REQUEST_LABELS =~ /Run nightly/ && $CI_MERGE_REQUEST_TARGET_BRANCH_SHA != ""
-      variables:
-        UNIT_TEST_REPEAT: 1
-        UNIT_TEST_TIMEOUT: 15
-        FUNCTIONAL_TEST: 'yes'
-        FUNCTIONAL_TEST_SCOPE: nightly
-        FUNCTIONAL_TEST_REPEAT: 5
-        FUNCTIONAL_TEST_TIME_LIMIT: 2700
-        FUNCTIONAL_TEST_CLUSTER_A100: ''
-        FUNCTIONAL_TEST_CLUSTER_H100: ''
-        PUBLISH: 'no'
-    - if: $CI_MERGE_REQUEST_LABELS =~ /Run weekly/ && $CI_MERGE_REQUEST_TARGET_BRANCH_SHA != ""
-      variables:
-        UNIT_TEST_REPEAT: 1
-        UNIT_TEST_TIMEOUT: 15
-        FUNCTIONAL_TEST: 'yes'
-        FUNCTIONAL_TEST_SCOPE: weekly
-        FUNCTIONAL_TEST_REPEAT: 1
-        FUNCTIONAL_TEST_TIME_LIMIT: 9000
-        FUNCTIONAL_TEST_CLUSTER_A100: ''
-        FUNCTIONAL_TEST_CLUSTER_H100: ''
-        PUBLISH: 'no'
-    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_SHA != ""
-      variables:
-        FUNCTIONAL_TEST: 'no'
-        PUBLISH: 'no'
-    - when: never
-  auto_cancel:
-    on_new_commit: interruptible
-    # on_job_failure: all
-
-stages:
-  - test
-  - functional_tests
-  - publish
-
-default:
-  interruptible: true
-  retry:
-    max: 2
-    when: runner_system_failure
-
-variables:
-  UNIT_TEST:
-    value: 'yes'
-    options:
-      - 'yes'
-      - 'no'
-    description: To run the funtional test suite
-  UNIT_TEST_REPEAT:
-    value: '1'
-    description: 'Number of repetitions'
-  UNIT_TEST_TIMEOUT:
-    value: '30'
-    description: Timeout (minutes) for Unit tests (all repeats)
-  FUNCTIONAL_TEST:
-    value: 'yes'
-    options:
-      - 'yes'
-      - 'no'
-    description: To run the funtional test suite
-  FUNCTIONAL_TEST_SCOPE:
-    value: 'mr'
-    options:
-      - 'mr'
-      - 'nightly'
-      - 'weekly'
-      - 'pre-release'
-      - 'release'
-    description: 'Testsuite to run (only for FUNCTIONAL_TEST=yes)'
-  FUNCTIONAL_TEST_REPEAT:
-    value: '5'
-    description: 'Number of repetitions per test'
-  FUNCTIONAL_TEST_TIME_LIMIT:
-    value: '2700'
-    description: 'Timeout in seconds per test'
-  FUNCTIONAL_TEST_CASES:
-    value: 'all'
-    description: "Comma-separated list of test_cases to run. Use 'all' to run the full suite."
-  FUNCTIONAL_TEST_CLUSTER_A100:
-    value: 'dgxa100_dracooci'
-    options:
-      - 'dgxa100_dracooci'
-      - 'dgxa100_dracooci-ord'
-    description: 'Cluster for A100 workloads'
-  FUNCTIONAL_TEST_CLUSTER_H100:
-    value: 'dgxh100_eos'
-    options:
-      - 'dgxh100_coreweave'
-      - 'dgxh100_eos'
-    description: 'Cluster for H100 workloads'
-  FUNCTIONAL_TEST_NAME:
-    description: 'Name of functional test run (only for pre-release and release)'
-  PUBLISH:
-    value: 'no'
-    options:
-      - 'yes'
-      - 'no'
-    description: Build and publish a wheel to PyPi
-  PUBLISH_SCOPE:
-    value: 'code-freeze'
-    options:
-      - 'code-freeze'
-      - 'release'
-    description: Type of publish (freeze or final release)
-
-  # CI wide variables
-  CI_MCORE_LTS_IMAGE: ${GITLAB_ENDPOINT}:5005/adlr/megatron-lm/mcore_ci_lts
-  CI_MCORE_DEV_IMAGE: ${GITLAB_ENDPOINT}:5005/adlr/megatron-lm/mcore_ci_dev
-  CI_NEMO_IMAGE: ${GITLAB_ENDPOINT}:5005/adlr/megatron-lm/nemo_ci
-  UTILITY_IMAGE: ${GITLAB_ENDPOINT}:5005/adlr/megatron-lm/mcore_utility
-
-include:
-  - .gitlab/stages/00.pre.yml
-  - .gitlab/stages/01.test.yml
-  - .gitlab/stages/02.functional-tests.yml
-  - .gitlab/stages/03.publish.yml
diff --git a/.gitlab/labeler-config.yml b/.gitlab/labeler-config.yml
deleted file mode 100644
index 3dc4001cd..000000000
--- a/.gitlab/labeler-config.yml
+++ /dev/null
@@ -1,33 +0,0 @@
-CI:
-- .gitlab-ci.yml
-- Dockerfile.ci.lts
-- Dockerfile.ci.dev
-- .github/**
-- .gitlab/**
-
-Datasets:
-- megatron/core/datasets/**
-
-BERT:
-- megatron/core/models/bert/**
-
-GPT:
-- megatron/core/models/gpt/**
-
-RETRO:
-- megatron/core/models/retro/**
-
-Dist-Ckpt:
-- megatron/core/dist_checkpointing
-
-Dist-Opt:
-- megatron/core/optimizer/distrib_optimizer 
-
-Inference:
-- megatron/core/inference
-
-MoE:
-- megatron/core/transformer/moe
-
-Tests:
-- tests/**
\ No newline at end of file
diff --git a/.gitlab/stages/00.pre.yml b/.gitlab/stages/00.pre.yml
deleted file mode 100644
index b5af2eeb8..000000000
--- a/.gitlab/stages/00.pre.yml
+++ /dev/null
@@ -1,199 +0,0 @@
-include:
-  - template: Security/Secret-Detection.gitlab-ci.yml
-
-.pre_rules:
-  rules:
-    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: always
-    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
-    - when: never
-  stage: .pre
-
-.dind_rules:
-  image: docker:26.1.4-dind
-  variables:
-    DOCKER_HOST: unix:///var/run/docker.sock
-  before_script:
-    - docker system prune -a --filter "until=36h" -f || true
-    - echo "$NGC_API_KEY" | docker login nvcr.io -u '$oauthtoken' --password-stdin
-    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
-
-pre:mirror_to_github:
-  rules:
-    - if: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_PIPELINE_SOURCE == "push"'
-    - when: never
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  stage: .pre
-  image: python:3.10
-  variables:
-    GIT_STRATEGY: 'clone'
-  script:
-    - git checkout $CI_COMMIT_BRANCH
-    - git remote add github https://ko3n1g:$GH_TOKEN@github.com/NVIDIA/Megatron-LM.git || true
-    - git push -u github $CI_COMMIT_BRANCH
-
-pre:create_ci_branches:
-  rules:
-    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
-    - when: never
-  parallel:
-    matrix:
-      - branch: ci-unit-test-extended
-      - branch: ci-rebuild-mcore-nemo-image
-      - branch: ci-mr
-      - branch: ci-nightly
-      - branch: ci-weekly
-      - branch: ci-pre-release
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  stage: .pre
-  image: python:3.10
-  variables:
-    GIT_STRATEGY: 'clone'
-  script:
-    - git remote set-url origin "https://gitlab-ci-token:${PROJECT_ACCESS_TOKEN_MCORE}@${GITLAB_ENDPOINT}/adlr/megatron-lm.git"
-    - git switch --force-create $branch
-    - git push --force -u origin $branch
-
-pre:label_merge_request:
-  extends: [.pre_rules]
-  image: golang:1.22
-  tags:
-    - mcore-docker-node-small
-  before_script:
-    - git clone -b nv https://${GITLAB_ENDPOINT}/okoenig/gitlab-mr-labeler.git
-    - cd gitlab-mr-labeler
-    - go install .
-    - cd ..
-    - go install github.com/itchyny/gojq/cmd/gojq@latest
-    - |
-      echo LABELS=$(curl --header "PRIVATE-TOKEN: ${PROJECT_ACCESS_TOKEN_MCORE}" --url "https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}" | gojq '.labels | join(",")') > labels
-  script:
-    - gitlab-mr-labeler -f .gitlab/labeler-config.yml -t ${PROJECT_ACCESS_TOKEN_MCORE} --debug true
-  after_script:
-    - |
-      source labels
-      curl --header "PRIVATE-TOKEN: ${PROJECT_ACCESS_TOKEN_MCORE}" --url "https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}" --data-urlencode "add_labels=$LABELS" -X PUT
-
-pre:maybe_cherry_pick_commit:
-  rules:
-    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
-    - when: never
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  stage: .pre
-  image: nentangso/alpine-git-curl-jq
-  variables:
-    GIT_STRATEGY: 'clone'
-  script:
-    - set -x
-    - set +e
-    - SHA=$(git rev-list --no-merges -n 1 HEAD)
-    - MESSAGE=$(git log -n 1 --pretty=format:%s $SHA)
-    - MR_ID=$(echo $MESSAGE | awk -F'!' '{print $2}' | awk '{print $1}' )
-    - git remote set-url origin "https://gitlab-ci-token:${PROJECT_ACCESS_TOKEN_MCORE}@${GITLAB_ENDPOINT}/$CI_PROJECT_NAMESPACE/megatron-lm.git"
-    - git config --global user.email "mcore-bot@nvidia.com"
-    - git config --global user.name "Mcore Bot"
-    - |
-      MR=$(curl --header "PRIVATE-TOKEN: ${PROJECT_ACCESS_TOKEN_MCORE}" --url "https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${MR_ID}")
-
-      LABELS=$(echo -E $MR | jq '.labels | join(",")' | tr -d '"')
-      AUTHOR_ID=$(echo -E $MR | jq '.author.id' | tr -d '"')
-      AUTHOR_NAME=$(echo -E $MR | jq '.author.username' | tr -d '"')
-      TITLE=$(echo -E $MR | jq '.title' | tr -d '"')
-      MILESTONE_ID=$(echo -E $MR | jq '.milestone.id' | tr -d '"')
-      TARGET_BRANCHES=$(echo "$LABELS" | grep -o 'core_[^,]*')
-
-      if [[ $TARGET_BRANCHES == "" ]]; then
-        echo Nothing to cherry pick
-        exit 0
-      fi
-
-      echo $TARGET_BRANCHES | while read -r RELEASE_BRANCH ; do
-        TARGET_BRANCH_EXISTS_OK=$([[ "$(git ls-remote --heads origin refs/heads/$RELEASE_BRANCH)" != "" ]] && echo true || echo false)
-
-        if [[ "$TARGET_BRANCH_EXISTS_OK" == "false" ]]; then
-          echo Release branch does not yet exist, will not  cherry-pick
-          continue
-        fi
-        
-        (
-          git fetch origin $RELEASE_BRANCH:$RELEASE_BRANCH
-          git switch --force-create cherry-pick-$MR_ID-$RELEASE_BRANCH $RELEASE_BRANCH
-          git cherry-pick $SHA
-          git push -u origin --force cherry-pick-$MR_ID-$RELEASE_BRANCH
-          git checkout ${CI_DEFAULT_BRANCH:-main}
-        )
-
-        CHERRYPICK_SUCCESSFUL=$?
-
-        if [[ $CHERRYPICK_SUCCESSFUL -eq 0 ]]; then
-          curl \
-            --header "PRIVATE-TOKEN: $PAT" \
-            --url https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests \
-            -d "source_branch=cherry-pick-$MR_ID-$RELEASE_BRANCH" \
-            -d "target_branch=$RELEASE_BRANCH" \
-            -d "title=Cherry pick \`$TITLE ($MR_ID)\` into \`$RELEASE_BRANCH\`" \
-            -d "labels=cherry-pick" \
-            -d "reviewer_ids=$AUTHOR_ID" \
-            -d "milestone_id=$MILESTONE_ID" \
-            -d "description=[🤖]: Hi @$AUTHOR_NAME 👋,<br><br>we've cherry picked \`$TITLE ($MR_ID)\` into \`$RELEASE_BRANCH\` for you! 🚀<br><br>Please review and approve this cherry pick by your convenience\!"
-
-        else
-          URL=https://${GITLAB_ENDPOINT}/ADLR/megatron-lm/-/merge_requests/$MR_ID
-
-          MESSAGE='{
-            "blocks": [
-              {
-                "type": "section",
-                "text": {
-                  "type": "mrkdwn",
-                  "text": "beep boop 🤖: Cherry-pick of <'$URL'|!'$MR_ID'> failed\ncc '$SLACK_ADMIN'"
-                }
-              }
-            ]
-          }'
-
-          curl -X POST -H "Content-type: application/json" --data "$MESSAGE" ${MCORE_NOTIFICATION_HOOK}
-
-        fi
-
-      done
-  interruptible: false
-
-pre:check_milestone:
-  extends: [.pre_rules]
-  image: badouralix/curl-jq
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  script:
-    - env
-    - |
-      MILESTONE=$(curl --header "PRIVATE-TOKEN: ${PROJECT_ACCESS_TOKEN_MCORE}" --url "https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}" | jq '.milestone')
-    - |
-      if [[ "$MILESTONE" == "null" ]]; then
-        echo Please assign a Milestone to this MR!
-        exit 1
-      fi
diff --git a/.gitlab/stages/01.test.yml b/.gitlab/stages/01.test.yml
deleted file mode 100644
index 50d38fd7e..000000000
--- a/.gitlab/stages/01.test.yml
+++ /dev/null
@@ -1,611 +0,0 @@
-.test_rules:
-  rules:
-    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: on_success
-    - when: on_success
-  stage: test
-
-include:
-  - template: Security/Secret-Detection.gitlab-ci.yml
-
-test:build_image:
-  extends: [.test_rules, .dind_rules]
-  tags:
-    - arch/amd64
-    - origin/jet-fleet
-    - env/prod
-    - ${TAG}
-  services:
-    - name: docker:24.0.5-dind
-      variables:
-        HEALTHCHECK_TCP_PORT: '2376'
-  timeout: 45m
-  parallel:
-    matrix:
-      - IMAGE: CI_MCORE_LTS_IMAGE
-        FILE: Dockerfile.ci.lts
-        BASE_IMAGE: nvcr.io/nvidia/pytorch:24.01-py3
-      - IMAGE: CI_MCORE_DEV_IMAGE
-        FILE: Dockerfile.ci.dev
-        BASE_IMAGE: nvcr.io/nvidia/pytorch:24.10-py3
-      - IMAGE: CI_NEMO_IMAGE
-        FILE: Dockerfile.ci.dev
-        BASE_IMAGE: nvcr.io/nvidian/nemo:nightly
-      - IMAGE: UTILITY_IMAGE
-        FILE: Dockerfile.linting
-        BASE_IMAGE: python:3.10
-  variables:
-    DOCKER_HOST: tcp://docker:2376
-    DOCKER_TLS_CERTDIR: '/certs'
-    DOCKER_TLS_VERIFY: 1
-    DOCKER_CERT_PATH: '$DOCKER_TLS_CERTDIR/client'
-    TAG: purpose/builder-large
-    STAGE: jet
-    MCORE_BACKWARDS_REF: core_r0.11.0
-  script:
-    - apk add bash
-    - |
-      bash -c '
-        set -x
-        env
-        eval "IMAGE=\$$IMAGE"
-        
-        docker context create tls-environment
-        docker buildx create --name container --driver=docker-container --use tls-environment
-
-        ADDITIONAL_PARAMS=()
-
-        if [[ "$CI_COMMIT_BRANCH" == "ci-rebuild-mcore-nemo-image" || "$CI_COMMIT_BRANCH" == "main" ]]; then
-          ADDITIONAL_PARAMS+=("--pull")
-          ADDITIONAL_PARAMS+=("--cache-to type=registry,ref=${IMAGE}-buildcache:main")
-        fi
-
-        if [[ "$CI_COMMIT_BRANCH" == "ci-nightly" ]]; then
-          ADDITIONAL_PARAMS+=("-t ${IMAGE}:nightly")
-        fi
-
-        echo $(git rev-parse HEAD)
-
-        DOCKER_BUILDKIT=1 docker build \
-          --secret id=JET_INDEX_URLS \
-          --secret id=LOGGER_INDEX_URL \
-          --target $STAGE \
-          -f $FILE \
-          -t ${IMAGE}:${CI_PIPELINE_ID} \
-          --builder=container \
-          --build-arg CACHEBUST=$(cat /proc/sys/kernel/random/uuid) \
-          --build-arg MCORE_REPO=${CI_REPOSITORY_URL} \
-          --build-arg MCORE_REF=$CI_COMMIT_SHA \
-          --build-arg MCORE_BACKWARDS_REF=$MCORE_BACKWARDS_REF \
-          --cache-to type=registry,ref=${IMAGE}-buildcache:${CI_PIPELINE_ID} \
-          --cache-to type=registry,ref=${IMAGE}-buildcache:${CI_MERGE_REQUEST_IID:-noop} \
-          --cache-from type=registry,ref=${IMAGE}-buildcache:main \
-          --cache-from type=registry,ref=${IMAGE}-buildcache:${CI_PIPELINE_ID} \
-          --cache-from type=registry,ref=${IMAGE}-buildcache:${CI_MERGE_REQUEST_IID:-noop} \
-          --build-arg FROM_IMAGE_NAME=$BASE_IMAGE \
-          --push \
-          ${ADDITIONAL_PARAMS[@]} .
-        '
-  retry:
-    max: 2
-
-test:unit_tests_configure:
-  extends: [.test_rules]
-  needs:
-    - test:build_image
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  before_script:
-    - git rm -r tests/test_utils/local_recipes || true
-    - git submodule add --force https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_ENDPOINT}/ADLR/megatron-lm-convergence-tests.git tests/test_utils/local_recipes
-    - ls tests/test_utils/local_recipes
-  script:
-    - set -x
-    - |
-      A100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_A100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_A100 || echo $DEFAULT_A100_CLUSTER)
-      H100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_H100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_H100 || echo $DEFAULT_H100_CLUSTER)
-    - |
-      ARGS=(
-        "--scope unit-tests"
-        "--n-repeat ${UNIT_TEST_REPEAT}"
-        "--time-limit $(( UNIT_TEST_TIMEOUT * 60 ))"
-        "--test-cases all"
-        "--a100-cluster dgxa100_dracooci-ord"
-        "--h100-cluster dgxh100_coreweave"
-        "--h100-partition batch_short,batch"
-        "--container-image ${UTILITY_IMAGE}"
-        "--container-tag ${CI_PIPELINE_ID}"
-        "--dependent-job test:unit_tests_configure"
-        "--slurm-account ${CI_SLURM_ACCOUNT}"
-      )
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment "lts" \
-        --tag "legacy" \
-        --output-path "unit-test-job-lts-legacy.yaml"
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment "lts" \
-        --tag "latest" \
-        --output-path "unit-test-job-lts-latest.yaml"
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment "dev" \
-        --tag "legacy" \
-        --output-path "unit-test-job-dev-legacy.yaml"
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment "dev" \
-        --tag "latest" \
-        --output-path "unit-test-job-dev-latest.yaml"
-  rules:
-    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: on_success
-    - if: $UNIT_TEST == 'yes' && $UNIT_TEST_REPEAT != '0'
-      when: on_success
-  artifacts:
-    paths:
-      - unit-test-job-dev-legacy.yaml
-      - unit-test-job-dev-latest.yaml
-      - unit-test-job-lts-legacy.yaml
-      - unit-test-job-lts-latest.yaml
-      - tests/test_utils/local_recipes
-
-.unit_tests_run:
-  needs:
-    - test:formatting
-    - test:copyright
-    - job: test:secret_detection
-      optional: true
-    - test:unit_tests_configure
-  extends: [.test_rules]
-  trigger:
-    include:
-      - artifact: unit-test-job-$ENVIRONMENT-$TAG.yaml
-        job: test:unit_tests_configure
-    strategy: depend
-  variables:
-    RO_API_TOKEN: $PAT
-    CONTAINER_TAG: $CI_PIPELINE_ID
-    CI_MCORE_LTS_IMAGE: $CI_MCORE_LTS_IMAGE
-    GITLAB_ENDPOINT: $GITLAB_ENDPOINT
-    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
-  inherit:
-    variables: true
-  rules:
-    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: on_success
-    - if: $UNIT_TEST == 'yes' && $UNIT_TEST_REPEAT != '0'
-      when: on_success
-
-test:unit_tests_pyt(DEV)_mcore(legacy):
-  extends: [.unit_tests_run]
-  variables:
-    ENVIRONMENT: dev
-    TAG: legacy
-
-test:unit_tests_pyt(LTS)_mcore(legacy):
-  extends: [.unit_tests_run]
-  variables:
-    ENVIRONMENT: lts
-    TAG: legacy
-
-test:unit_tests_pyt(DEV)_mcore(latest):
-  extends: [.unit_tests_run]
-  variables:
-    ENVIRONMENT: dev
-    TAG: latest
-
-test:unit_tests_pyt(LTS)_mcore(latest):
-  extends: [.unit_tests_run]
-  variables:
-    ENVIRONMENT: lts
-    TAG: latest
-
-test:notify_unit_tests:
-  extends: [.test_rules]
-  image: badouralix/curl-jq
-  needs:
-    - test:unit_tests_pyt(DEV)_mcore(latest)
-    - test:unit_tests_pyt(LTS)_mcore(latest)
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  script:
-    - apk add bash
-    - apk add --update coreutils
-    - env
-    - export WEBHOOK_URL=${MCORE_NOTIFICATION_HOOK}
-    - export RO_API_TOKEN=${PROJECT_ACCESS_TOKEN_MCORE}
-    - export GITLAB_ENDPOINT
-    - export CONTEXT="unit-tests-extended"
-    - export DATE=$(date +"%Y-%m-%d")
-    - bash tests/test_utils/shell_scripts/notify.sh ${CI_PIPELINE_ID} "test:unit_tests_pyt"
-  artifacts:
-    when: always
-    paths:
-      - scripts
-  rules:
-    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "ci-unit-test-extended"
-      when: always
-    - when: never
-
-test:docs_build:
-  extends: [.test_rules]
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  needs: [test:build_image]
-  script:
-    - cd ..
-    - rm -rf documentation && git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_ENDPOINT}/nemo-megatron-core-tme/documentation.git
-    - mv megatron-lm/ documentation/
-    - cd documentation/
-    - ./repo docs
-
-test:formatting:
-  extends: [.test_rules]
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  needs: [test:build_image]
-  variables:
-    GIT_STRATEGY: 'clone'
-  script:
-    - |
-      if [[ "$CI_PIPELINE_SOURCE" != "merge_request_event" ]]; then
-        exit 0
-      fi
-    - set +e
-    - git fetch origin main:main
-    - |
-      if [[ "$CI_MERGE_REQUEST_PROJECT_PATH" == "$CI_MERGE_REQUEST_SOURCE_PROJECT_PATH" ]]; then 
-        bash tools/autoformat.sh
-        set -e
-        git fetch origin $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
-        git checkout $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
-        git config --global user.email "mcore-bot@nvidia.com"
-        git config --global user.name "Mcore Bot"
-        git remote set-url origin "https://gitlab-ci-token:${PAT}@${GITLAB_ENDPOINT}/$CI_PROJECT_NAMESPACE/megatron-lm.git"
-        git add -A .
-        git commit -m "chore: Format files" || true
-        git push -u origin $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
-      fi
-    - env
-    - BASE_REF="$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" CHECK_ONLY=true SKIP_DOCS=$([[ "$CI_MERGE_REQUEST_LABELS" == *"Skip docs"* ]] && echo "true" || echo "false") bash tools/autoformat.sh
-
-test:copyright:
-  extends: [.test_rules]
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  needs: [test:build_image]
-  script:
-    - git fetch origin main
-    - bash tools/copyright.sh
-
-# Override from template
-secret_detection:
-  rules:
-    - when: never
-
-# Inherit and modify template
-test:secret_detection:
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  extends: ['.secret-analyzer']
-  variables:
-    GIT_DEPTH: 0
-    SECRET_DETECTION_LOG_OPTIONS: ${CI_MERGE_REQUEST_DIFF_BASE_SHA}..${CI_COMMIT_SHA}
-  allow_failure: true
-  rules:
-    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
-    - when: never
-  script:
-    - apk add jq
-    - /analyzer run
-    - |
-      if [[ $(cat gl-secret-detection-report.json | jq '.vulnerabilities | length > 0') == true ]]; then
-        echo "Atleast one vulnerability has been found"
-        cat gl-secret-detection-report.json | jq '.'
-        exit 1
-      fi
-
-test:pypi_build_wheel:
-  extends: [.test_rules]
-  image:
-    name: quay.io/pypa/manylinux_2_28_x86_64
-    entrypoint: ['']
-  services:
-    - name: docker:24.0.5-dind
-      variables:
-        HEALTHCHECK_TCP_PORT: '2376'
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/builder-small
-    - team/megatron
-  variables:
-    PUBLISH_DRYRUN: 'yes'
-    PY_ENV: pytorch_24.10
-  script:
-    - echo $PUBLISH_DRYRUN
-    - >
-      if [ "$PUBLISH_DRYRUN" = "yes" ]; then
-        PRE_RELEASE=$(sed -n "s/.*PRE_RELEASE = '\(.*\)'/\1/p" megatron/core/package_info.py)
-        sed -i "/^PRE_RELEASE/c\PRE_RELEASE = '${PRE_RELEASE}.dev$((RANDOM % 900000 + 100000))'" megatron/core/package_info.py 
-      fi
-
-
-    - /opt/python/cp310-cp310/bin/python -m build
-    - /opt/python/cp311-cp311/bin/python -m build
-    - auditwheel repair dist/*.whl
-    - rm -rf dist/*.whl
-
-    - pushd megatron/core
-    - EXPECTED_RELEASE_NUMBER=$(/opt/python/cp311-cp311/bin/python -c "import package_info; print(package_info.__version__)")
-    - popd
-    - echo "EXPECTED_RELEASE_NUMBER=$EXPECTED_RELEASE_NUMBER" | tee -a build.env
-  artifacts:
-    paths:
-      - megatron/core/package_info.py
-      - wheelhouse/
-      - dist/
-    reports:
-      dotenv: build.env
-
-test:pypi_test_wheel:
-  extends: [.test_rules]
-  image: 
-    name: python:3.11
-    entrypoint: ['']
-  needs: [test:pypi_build_wheel]
-  services:
-    - name: docker:24.0.5-dind
-      variables:
-        HEALTHCHECK_TCP_PORT: '2376'
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/builder-small
-    - team/megatron
-  variables:
-    PUBLISH_DRYRUN: 'yes'
-  script:
-    - rm -rf megatron
-    - pip install --no-cache-dir wheelhouse/*cp311*.whl
-
-    - RELEASE_NUMBER=$(python -c "from megatron import core; print(core.__version__)")
-    - >
-      echo "$EXPECTED_RELEASE_NUMBER" == "$RELEASE_NUMBER"
-
-
-    - test "$EXPECTED_RELEASE_NUMBER" == "$RELEASE_NUMBER"
-    - echo "RELEASE_NUMBER=$EXPECTED_RELEASE_NUMBER" | tee -a build.env
-  artifacts:
-    reports:
-      dotenv: build.env
-    paths:
-      - wheelhouse/
-      - dist/
-
-test:pypi_push_wheel:
-  extends: [.test_rules]
-  image: python:3.11
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  needs: [test:pypi_test_wheel]
-  variables:
-    PUBLISH_DRYRUN: 'yes'
-  timeout: 3m
-  script:
-    - >
-      if [ "$PUBLISH_DRYRUN" = "yes" ]; then
-        REPOSITORY=testpypi
-        export TWINE_USERNAME=$TWINE_TEST_USERNAME
-        export TWINE_PASSWORT=$TWINE_TEST_PASSWORD
-      else
-        REPOSITORY=pypi
-        export TWINE_USERNAME=$TWINE_PROD_USERNAME
-        export TWINE_PASSWORT=$TWINE_PROD_PASSWORD
-      fi
-
-    - ls -al dist/
-    - ls -al wheelhouse/
-    - pip install twine
-    - twine upload --verbose -u $TWINE_USERNAME -p $TWINE_PASSWORT --repository $REPOSITORY wheelhouse/* dist/*
-  
-  rules:
-    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: on_success
-    - when: on_success
-      allow_failure: true
-
-test:gh_release:
-  extends: [.test_rules]
-  needs: [test:pypi_test_wheel]
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  image: badouralix/curl-jq
-  variables:
-    PUBLISH_DRYRUN: 'yes'
-  script:
-    - NAME="NVIDIA Megatron Core $RELEASE_NUMBER"
-    - IS_PRERELEASE=$([[ "$RELEASE_NUMBER" == *rc* ]] && echo "true" || echo "false")
-    - >
-      if [[ "$IS_PRERELEASE" == "true" ]]; then
-        DATE=$(date +"%Y-%m-%d")
-        CHANGELOG="Prerelease: $NAME ($DATE)"
-      else
-        CHANGELOG=$(awk '/^## '"$NAME"'/{flag=1; next} /^## /{flag=0} flag' CHANGELOG.md)
-        CHANGELOG=$(echo "$CHANGELOG" | sed '/./!d')
-      fi
-    - >
-      PAYLOAD=$(jq -nc \
-                  --arg TAG_NAME "v${RELEASE_NUMBER}" \
-                  --arg CI_COMMIT_SHA "$CI_COMMIT_SHA" \
-                  --arg NAME "$NAME" \
-                  --arg BODY "$CHANGELOG" \
-                  --argjson PRERELEASE "$IS_PRERELEASE" \
-                  '{
-                      "tag_name": $TAG_NAME,
-                      "target_commitish": $CI_COMMIT_SHA,
-                      "name": $NAME,
-                      "body": $BODY,
-                      "draft": false,
-                      "prerelease": $PRERELEASE,
-                      "generate_release_notes": false
-                  }'
-              )
-      echo -E "$PAYLOAD" > payload.txt
-    - cat payload.txt
-    - >
-      CMD=$(echo -E 'curl -L \
-        -X POST \
-        -H "Accept: application/vnd.github+json" \
-        -H "Authorization: Bearer '"$GH_TOKEN"'" \
-        -H "X-GitHub-Api-Version: 2022-11-28" \
-        https://api.github.com/repos/NVIDIA/Megatron-LM/releases \
-        -d @payload.txt
-      ')
-
-    - >
-      if [[ "$PUBLISH_DRYRUN" == "yes" ]]; then
-        echo -E "$CMD"
-      else
-        eval "$CMD"
-      fi
-
-
-test:notify_release:
-  needs: [test:pypi_test_wheel, test:pypi_push_wheel, test:gh_release]
-  extends: [.test_rules]
-  image: badouralix/curl-jq
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  variables:
-    PUBLISH_DRYRUN: 'yes'
-  script:
-    - URL="https://github.com/NVIDIA/Megatron-LM/releases/tag/core_r$RELEASE_NUMBER"
-    - >
-      MESSAGE='{
-          "blocks": [
-            {
-              "type": "section",
-              "text": {
-                "type": "mrkdwn",
-                    "text": "Releasebot 🤖: Megatron-Core released <'$URL'|core_r'"$RELEASE_NUMBER"'> 🚀"
-              }
-            }
-          ]
-        }'
-
-
-    - echo "$MESSAGE"
-    - >
-      CMD=$(echo curl \
-        -X POST \
-        -H "Content-type: application/json" \
-        --data "$MESSAGE" ${MCORE_NOTIFICATION_HOOK_MAIN}
-      )
-      
-      if [[ "$PUBLISH_DRYRUN" == "yes" ]]; then
-        echo "$CMD"
-      else
-        eval "$CMD"
-      fi
-
-test:generate_coverage_report:
-  extends: [.test_rules]
-  needs:
-    - test:unit_tests_pyt(DEV)_mcore(latest)
-    - test:unit_tests_pyt(LTS)_mcore(latest)
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  script:
-    - env
-    - export RO_API_TOKEN=${PROJECT_ACCESS_TOKEN_MCORE}
-    - export GITLAB_ENDPOINT
-    - python tests/test_utils/python_scripts/download_coverage_results.py --pipeline-id ${CI_PIPELINE_ID}
-    - coverage combine --keep $(ls coverage_results/*/coverage_report)
-    - coverage report
-    - coverage xml
-  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
-  artifacts:
-    reports:
-      coverage_report:
-        coverage_format: cobertura
-        path: coverage.xml
-  rules:
-    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: on_success
-    - if: $UNIT_TEST == 'yes' && $UNIT_TEST_REPEAT != '0'
-      when: on_success
\ No newline at end of file
diff --git a/.gitlab/stages/02.functional-tests.yml b/.gitlab/stages/02.functional-tests.yml
deleted file mode 100644
index ac13ee028..000000000
--- a/.gitlab/stages/02.functional-tests.yml
+++ /dev/null
@@ -1,188 +0,0 @@
-.functional_tests_rules:
-  stage: functional_tests
-  rules:
-    - if: $FUNCTIONAL_TEST == "yes" && ($CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true")
-      allow_failure: true
-    - if: $FUNCTIONAL_TEST == "yes"
-    - when: never
-
-default:
-  id_tokens:
-    VAULT_JWT_TOKEN:
-      aud: https://stg.vault.nvidia.com
-
-include:
-  - project: dl/jet/gitlab-templates
-    ref: main
-    file: downstreams.yml
-
-functional:configure:
-  needs:
-    - test:build_image
-    - job: test:unit_tests_pyt(DEV)_mcore(latest)
-      optional: true
-    - job: test:unit_tests_pyt(LTS)_mcore(latest)
-      optional: true
-  extends: [.functional_tests_rules]
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  before_script:
-    - git rm -r tests/test_utils/local_recipes || true
-    - git submodule add --force https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_ENDPOINT}/ADLR/megatron-lm-convergence-tests.git tests/test_utils/local_recipes
-    - ls tests/test_utils/local_recipes
-  script:
-    - set -x
-    - |
-      A100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_A100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_A100 || echo $DEFAULT_A100_CLUSTER)
-      H100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_H100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_H100 || echo $DEFAULT_H100_CLUSTER)
-    - |
-      RECORD_CHECKPOINTS=$([[ "$CI_MERGE_REQUEST_LABELS" == *"Record checkpoints"* ]] && echo "true" || echo "false")
-    - |
-      if [[ "$FUNCTIONAL_TEST_SCOPE" == "release" || "$FUNCTIONAL_TEST_SCOPE" == "pre-release" ]]; then
-        FUNCTIONAL_TEST_NAME=$(eval echo $FUNCTIONAL_TEST_NAME)
-        RELEASE_ARGS=(
-          "--run-name"
-          $FUNCTIONAL_TEST_NAME
-          "--wandb-experiment"
-          $(echo $FUNCTIONAL_TEST_NAME | tr '/' '-')
-        )
-      else
-        RELEASE_ARGS=()
-      fi
-    - |
-      ARGS=(
-        "--scope $FUNCTIONAL_TEST_SCOPE"
-        "--n-repeat $FUNCTIONAL_TEST_REPEAT"
-        "--time-limit $FUNCTIONAL_TEST_TIME_LIMIT"
-        "--test-cases $FUNCTIONAL_TEST_CASES"
-        "--a100-cluster $A100_CLUSTER"
-        "--h100-cluster $H100_CLUSTER"
-        "--container-image ${UTILITY_IMAGE}"
-        "--container-tag ${CI_PIPELINE_ID}"
-        "--dependent-job functional:configure"
-        "--record-checkpoints ${RECORD_CHECKPOINTS}"
-        "--slurm-account ${CI_SLURM_ACCOUNT}"
-      )
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment dev \
-        --output-path "functional-test-job-dev.yaml" \
-        ${RELEASE_ARGS[@]}
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment lts \
-        --output-path "functional-test-job-lts.yaml" \
-        ${RELEASE_ARGS[@]}
-  artifacts:
-    paths:
-      - functional-test-job-lts.yaml
-      - functional-test-job-dev.yaml
-      - tests/test_utils/local_recipes
-
-.run:
-  stage: functional_tests
-  needs: [functional:configure]
-  extends: [.functional_tests_rules]
-  trigger:
-    include:
-      - artifact: functional-test-job-$ENVIRONMENT.yaml
-        job: functional:configure
-    strategy: depend
-  variables:
-    RO_API_TOKEN: $PAT
-    CONTAINER_TAG: $CI_PIPELINE_ID
-    CI_MCORE_LTS_IMAGE: $CI_MCORE_LTS_IMAGE
-    GITLAB_ENDPOINT: $GITLAB_ENDPOINT
-    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
-  inherit:
-    variables: true
-
-functional:run_lts:
-  extends: [.run]
-  variables:
-    ENVIRONMENT: lts
-
-functional:run_dev:
-  extends: [.run]
-  variables:
-    ENVIRONMENT: dev
-
-functional:run_nemo:
-  extends: [.functional_tests_rules]
-  trigger:
-    project: 'dl/joc/nemo-ci'
-    branch: main-mirror
-    strategy: depend
-  inherit:
-    variables: true
-  variables:
-    MCORE_COMMIT: $CI_COMMIT_SHA
-    TEST_LLM_MODULE: 'True'
-    TEST_ALIGNER_MODULE: 'False'
-    TEST_DATA_CURATOR_MODULE: 'False'
-    TESTS_TO_RUN_ON_THIS_COMMIT: nightly
-  rules:
-    - if: $FUNCTIONAL_TEST == "yes"
-      when: manual
-      allow_failure: true
-    - when: never
-
-functional:notify:
-  extends: [.functional_tests_rules]
-  image: badouralix/curl-jq
-  needs:
-    - functional:run_lts
-    - functional:run_dev
-  tags:
-    - mcore-docker-node-small
-  variables:
-    WEBHOOK_URL: ${MCORE_NOTIFICATION_HOOK}
-    RO_API_TOKEN: ${PROJECT_ACCESS_TOKEN_MCORE}
-    CONTEXT: $FUNCTIONAL_TEST_SCOPE
-  script:
-    - apk add bash
-    - apk add --update coreutils
-    - env
-    - export WEBHOOK_URL=${MCORE_NOTIFICATION_HOOK}
-    - export RO_API_TOKEN=${PROJECT_ACCESS_TOKEN_MCORE}
-    - export GITLAB_ENDPOINT
-    - export CONTEXT=$FUNCTIONAL_TEST_SCOPE
-    - export DATE=$(date +"%Y-%m-%d")
-    - bash tests/test_utils/shell_scripts/notify.sh ${CI_PIPELINE_ID} "functional:run_"
-  artifacts:
-    when: always
-    paths:
-      - scripts
-  rules:
-    - if: $CI_PIPELINE_SOURCE == "schedule" && $FUNCTIONAL_TEST == "yes"
-      when: always
-    - when: never
-
-functional:download_golden_values:
-  extends: [.functional_tests_rules]
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags:
-    - mcore-docker-node-small
-  script:
-    - env
-    - export RO_API_TOKEN=${PROJECT_ACCESS_TOKEN_MCORE}
-    - export GITLAB_ENDPOINT
-    - python tests/test_utils/python_scripts/download_golden_values.py --pipeline-id ${CI_PIPELINE_ID}
-  artifacts:
-    paths:
-      - tests/
-  rules:
-    - if: $FUNCTIONAL_TEST == "yes"
-      when: manual
-      allow_failure: true
-    - when: never
diff --git a/.gitlab/stages/03.publish.yml b/.gitlab/stages/03.publish.yml
deleted file mode 100644
index 48ea9bfbf..000000000
--- a/.gitlab/stages/03.publish.yml
+++ /dev/null
@@ -1,126 +0,0 @@
-.publish_common_freeze:
-  stage: publish
-  rules:
-    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $PUBLISH == "yes" && $PUBLISH_SCOPE == "code-freeze"
-      when: manual
-    - when: never
-
-.publish_common_release:
-  stage: publish
-  rules:
-    - if: $CI_COMMIT_BRANCH =~ /^core_r/ && $PUBLISH == "yes" && $PUBLISH_SCOPE == "release"
-      when: manual
-    - if: $PUBLISH == "yes" && $PUBLISH_SCOPE == "release"
-      when: manual
-      variables:
-        PUBLISH_DRYRUN: 'yes'
-    - when: never
-
-publish:release_branch:
-  extends: [.publish_common_freeze]
-  image: ${CI_MCORE_LTS_IMAGE}:${CI_PIPELINE_ID}
-  needs: [test:build_image]
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  variables:
-    GIT_STRATEGY: 'none'
-  script:
-    - git fetch origin $CI_DEFAULT_BRANCH
-    - git config --global user.email "mcore-bot@nvidia.com"
-    - git config --global user.name "Mcore Bot"
-    - git remote set-url origin "https://gitlab-ci-token:${PAT}@${GITLAB_ENDPOINT}/$CI_PROJECT_NAMESPACE/megatron-lm.git"
-    - sed -i "/^PRE_RELEASE/c\PRE_RELEASE = ''" megatron/core/package_info.py
-    - VERSION=$(python -c "from megatron import core; print(core.__version__)")
-    - RELEASE_BRANCH=core_r$VERSION
-    - git switch --force-create $RELEASE_BRANCH origin/$CI_DEFAULT_BRANCH
-    - |
-      MESSAGE='{
-        "blocks": [
-          {
-            "type": "section",
-            "text": {
-              "type": "mrkdwn",
-              "text": "Releasebot 🤖: Megatron Core has been frozen 🎉 to branch `'"$RELEASE_BRANCH"'`"
-            }
-          }
-        ]
-      }'
-    - >
-      curl -X POST -H "Content-type: application/json" --data "$MESSAGE" ${MCORE_NOTIFICATION_HOOK_MAIN}
-
-
-    - git switch --force-create bot/chore/bump-version
-    - git add megatron/core/package_info.py
-    - >
-      git commit -m "chore: adjust version version"
-
-
-    - git push -u origin bot/chore/bump-version
-    - >
-      curl \
-        --header "PRIVATE-TOKEN: $PAT" \
-        --url https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests \
-        -d "source_branch=bot/chore/bump-version" \
-        -d "target_branch=$RELEASE_BRANCH" \
-        -d "title=chore: Fix version of \`$RELEASE_BRANCH\`" \
-        -d "description=[🤖]: Hi @okoenig 👋,<br><br>we've adjusted the version number of \`$RELEASE_BRANCH\` for you! 🚀<br><br>Please review and approve this cherry pick by your convenience\!"
-
-publish:pypi_build_wheel:
-  extends: [test:pypi_build_wheel, .publish_common_release]
-  dependencies: []
-  variables:
-    PUBLISH_DRYRUN: 'no'
-
-publish:pypi_test_wheel:
-  extends: [test:pypi_test_wheel, .publish_common_release]
-  needs: [publish:pypi_build_wheel]
-  variables:
-    PUBLISH_DRYRUN: 'no'
-
-publish:pypi_push_wheel:
-  extends: [test:pypi_push_wheel, .publish_common_release]
-  needs: [publish:pypi_test_wheel]
-  dependencies: [publish:pypi_test_wheel]
-  variables:
-    PUBLISH_DRYRUN: 'no'
-
-publish:gh_release:
-  extends: [test:gh_release, .publish_common_release]
-  dependencies: [publish:pypi_test_wheel]
-  needs: [publish:pypi_test_wheel]
-  variables:
-    PUBLISH_DRYRUN: 'no'
-
-publish:notify_release:
-  needs: [publish:pypi_push_wheel, publish:gh_release]
-  extends: [test:notify_release, .publish_common_release]
-  variables:
-    PUBLISH_DRYRUN: 'no'
-
-publish:docs:
-  extends: [.publish_common_release]
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  script:
-    - cd ..
-    - rm -rf documentation && git clone https://gitlab-ci-token:${PROJECT_ACCESS_TOKEN_MCORE}@${GITLAB_ENDPOINT}/nemo-megatron-core-tme/documentation.git
-    - cd documentation/megatron-lm
-      git fetch origin '+refs/merge-requests/*:refs/remotes/merge-requests/*'
-    - git fetch origin $CI_COMMIT_SHA
-    - git checkout $CI_COMMIT_SHA
-    - cd ..
-    - git add megatron-lm
-    - >
-      git commit -m 'feat: Bump mcore'
-    - git push
diff --git a/.pylintrc b/.pylintrc
deleted file mode 100644
index 865f48384..000000000
--- a/.pylintrc
+++ /dev/null
@@ -1,13 +0,0 @@
-[MAIN]
-ignore-paths=tests
-max-line-length=100
-
-[MESSAGES CONTROL]
-disable=all
-
-enable=C0115,C0116,W0611,C0301,E0606
-# C0115: missing-class-docstring
-# C0116: missing-function-docstring
-# W0611: unused-import
-# C0301: line-too-long
-# E0606: possibly-used-before-assignment
\ No newline at end of file
diff --git a/build/lib.linux-x86_64-cpython-310/megatron/core/datasets/helpers_cpp.cpython-310-x86_64-linux-gnu.so b/build/lib.linux-x86_64-cpython-310/megatron/core/datasets/helpers_cpp.cpython-310-x86_64-linux-gnu.so
new file mode 100755
index 0000000000000000000000000000000000000000..6125a7b497de0acd533793e830327b3c3d0f88bc
GIT binary patch
literal 230336
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%0ALPWbD}_{_;Z3s
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
LgA)=YJhJ}-!qX`l

literal 0
HcmV?d00001

diff --git a/build/temp.linux-x86_64-cpython-310/megatron/core/datasets/helpers.o b/build/temp.linux-x86_64-cpython-310/megatron/core/datasets/helpers.o
new file mode 100644
index 0000000000000000000000000000000000000000..2e853bb015b8f54ddf7e207eb6c9561763f21f86
GIT binary patch
literal 379784
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
E0Vkqtd;kCd

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/cuda_patch/__init__.py b/megatron-lm-musa-patch/cuda_patch/__init__.py
new file mode 100644
index 000000000..73d3e5803
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/__init__.py
@@ -0,0 +1,29 @@
+import sys
+import torch
+import torch.utils
+import torch.utils.data
+
+from . import transformer_config
+from . import training
+from . import moe_utils
+from . import multi_latent_attention
+from . import router
+from . import arguments
+from . import theoretical_memory_usage
+
+from . import fused_layer_norm
+
+
+from . import training
+def py_patch():
+    if sys.version_info >= (3.9, 0):
+        return
+    import math
+    def lcm(a, b):
+        return abs(a * b) // math.gcd(a, b)
+    math.lcm = lcm
+    return
+
+# Apply patch
+py_patch()
+
diff --git a/megatron-lm-musa-patch/cuda_patch/__pycache__/__init__.cpython-310.pyc b/megatron-lm-musa-patch/cuda_patch/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..c172a5fba7b49ae1e092034f6c68d5cf9e237b8d
GIT binary patch
literal 295
zcmYk2ziz`I5XQldE2mW?zeVN2rpjDJS-W)U<^`P$iCuxQ_%nF!)AW^CJLMHR<#00O
zPJBPUgF7M2Zud+uUWcC(Apeqij10{YmwQ7IL{LS#8)-*ZpWT@wGm)!}F1mu^%`Z}K
zF4#prFBG+=u{s4O1y`_0%O_)X{S<SzxL9~&`ysxpXoDY>i`9c^1$c<W<~Zk<*ezm}
z{|}Z<_H4l(m|AP5Gn=jXmc4gO%QJW^HA*)+IA~_@{lNMlfZw*9kJIQmZ|5bJ@7jo<
Q<RLxQrC%vYNmEwz3ST8nxc~qF

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/cuda_patch/__pycache__/fused_layer_norm.cpython-310.pyc b/megatron-lm-musa-patch/cuda_patch/__pycache__/fused_layer_norm.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..60e9dcb69943da094a2065bde27938f6b4a8d817
GIT binary patch
literal 3397
zcmaJ@TaO$$6}DZMuD(rrF3FJ9qL}59X-IlVR$9=q3Pd46D{V##ncas5QK~7sd#X}h
z)oWKLno$oA%pmdte*huPJnj$R&-itbP#*UMu>p2D$JO1_GX&hS`}p|SKG)AxwA&2=
z?e6e+@VhI7e1?<d=ECGB&~*lbAcAJ3U;WcQg*nUUi1isoo|8Evx9?io&AgG{_bu&Z
zwNcOyDES!?zNnoLQIj;Sr;TH$--LZMYxUc*Dck8vdL`|IO+lZKZtxOrBs*Pd{9T#r
zLILF_c~ZiE{liE_BUwshuI{QR*MmZhq<T=~gJc-v&gIsgP4usUkOVdFGeP@Koz<PX
zTld6<@TCiSc_NU$sLPsYKyS)m(E2?YP|*_YlXkx@R>YMP(r<{4Y>HLc9Jpdlte?1j
zka9`C4SHWSD~~2xiVva#sdhlC=<kdWJL5RL#Rs^|le{c=#C4JnGsz!(^wazNsZ_bl
zdW{B$c3%zkyO!d7KM_Lap-v7Z--3<Zclnahvt=%l5jZL-^4STT%dzHLgRF>f$HTEs
zvLfdZoFzD14o4QFB#+8Mfl`Iy`2<{;#8Jj|8SN!mQXVXh8cU@UU4|K&73N?F-`XpR
z3=aNCOFmncc{wxB%5f_<Hw&%ee0M+5GfTOijK_s4H81k)0G%OAUJT~;pt-uoKg?vL
z<;)ZDzKoyFZws?LTyl-($$%de6SaH*hudb?NU^ZyP^uz~L0hS$2#3*V6fMlTFVcxF
z`67P&xlD%pproF}`@GzbN*E-ls}@Sl4gyv&$py#LdzGQdXsn87QvYAy#x`sD)>2HX
zM7|W~O0LJ>&*N+&B*t(Qm7r7%3Kyf9i<UeOsUp=NiouOlQgIuRC`%5b5)y@P=~BTZ
zHcc1I@?b1)ahs%=6-!$2hxstcWp8%VWAu~!WC96ubK$O=d>@=ziTv&J{m)+f<sW~&
zxBJM{7ZS#=3^C26;28&!)vWz@nwj<21k1EBvle#5wWVqgfJWGIpld=2DakQ8rDs5v
zQ1r)?k|}*bLgxiZozw-&vy?B`Q>NZ5YiR(ydj7_Y>j3wb1p!xhC&5u|TC?kovLXCR
z=1%}=e|C=PZ)w?_va*%7kD2=Mlnv++n=+7InZj-1m9hh;uTI$?$uVlMwsdcQc`XNk
zg7x(m<a7h|wsKd2bG5t%^qK$-)2qkMY^BotH+F6Pd`*xi0LuVL^_{~t2q(XYO9~xj
zYQK2=1j8Sr%jV4k0{c32{VN!z<dl>&WoPu%5%i3vu3*9u?jP8ZJB5`~Z|Y8+O>#yz
z$PudRr!|ldpw|cN8Btq!Ld8F$M`X&T1SO}ap11Q75R$z73fe9JdhMx{V*s;m!?3b2
z9^g~FZ)z6D-o9&`aq--^BN^q!Q~DEC8o#Pg;|WaNndF^!Ot5G7+<B+#nf5%_%BYlD
z;j5>v<Ise`1kWOsM0qSfg-1rqZ15?0_492JmC@bpgGmWXJyqnxZ7Akc#--jK$zfCi
z>vlG}J(}p~_81FsJD!LrtVoOUOK{m6ADERqN}kD3jkHD3AHvnT1;d+kjc%|N8c>%W
zZeI*jFAVY33&Y-fSpnFr@AWR8@``R9eyfW(mlx$Z*1-dFDd1*RL$OM*5>!-CmdUKU
zX*@tjsZ21x#&}}|xS{Ikm#<qe!CDJnQ-uoORkeb{21+-qv^CAt?IwV~%rriZvWa}C
zRG~~Gfd>y>7f`~~;Jw*{XT=2X15OP=qbe*I5ryffFfDA9jJuaa+H{nJC&FrPUw^H>
zjrZ1o8I^!!f#SFWRbM&^J-npqH(?54u7_cqMOufUx`6_3;cycMJW}6+p-~U0&l;@7
z8ngw!AlLxf2cAzmltZ){wBxqu26ewW-25L=ivfTZ4QYg>2hi=e$dsgDAk+`kL+YF%
zG?COzJwX9<HfMYv`SW51UhOrqw_hjQWjnUW!7nyac(w5{kUFfA-+Iah@cX#t6}f~Z
z>yK{$L)pQ4<_=7Eq3bmme1`t$fZZ*p`aisJ$^OfcGG3C8Cs3<OmJ^l77}|NmSR;a4
zw|oqQbxQyv6?Bv2=o~~+lCspXD18Iq#GO*$cnBq_550Eg9XV6y34+z~TJ6lO_+4k`
zB}U+aPb>zUyWxAdZovT^V!@&7R$27}WT3e5i%AK#RNh&*2ymxR&m$#5kg;Wb4czoK
z>be_Wy6o`UB?rxf;dC^8_fe(Q3Kn7x-?m|B8eupp#3Vzy6^8iE&Q@w+D2f;|*F$w2
zC|BcIsDnCzZ!+V+vu<-)Vc4oN`Voq@XGtH+EQ9UmF@786Y@mIhFeCJLVF-xJ*mXwn
z=YGK$`;s~A-^^wIVjlY^^Vus_Tlpf`exs>yUw2jY;LoCgz10L3ynA`BZ1Szmr#(a<
zTf?@}&Gk8;_TmD*9?J7i`pQO@=f;0*y<u-M-?_M9Fu@OB-GhJlpj*PBU@m7|JQ;#i
kNt(`O(Is!3$254a3c)>09Gm+A3vBj71+Wb__+^Lw2Xn}&9{>OV

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/cuda_patch/arguments.py b/megatron-lm-musa-patch/cuda_patch/arguments.py
new file mode 100644
index 000000000..67094384f
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/arguments.py
@@ -0,0 +1,140 @@
+import dataclasses
+import torch
+import torch.nn.functional as F
+
+import megatron.training.arguments
+from megatron.training.activations import squared_relu
+from .transformer_config import TransformerConfig, MLATransformerConfig
+moe_freq_type = megatron.training.arguments.moe_freq_type
+
+def _add_moe_args(parser):
+    group = parser.add_argument_group(title="moe")
+    # General arguments
+    group.add_argument('--expert-model-parallel-size', type=int, default=1,
+                       help='Degree of expert model parallelism.')
+    group.add_argument('--expert-tensor-parallel-size', type=int, default=None,
+                       help='Degree of expert model parallelism. Default is None, which will be set to the value of --tensor-model-paralle-size.')
+    group.add_argument('--num-experts', type=int, default=None,
+                       help='Number of Experts in MoE (None means no MoE)')
+    group.add_argument('--moe-layer-freq', type=moe_freq_type, default=1,
+                       help='Frequency between MoE layers and Dense layers. Accepts either: '
+                            '- An integer N: Represents a 1:N ratio, meaning one expert layer for every N-1 dense layers '
+                            '- A string containing a Python list expression that defines a custom pattern, e.g.: '
+                            '"([1]*3+[0]*1)*3" evaluates to [1,1,1,0,1,1,1,0,1,1,1,0] '
+                            'where 1 indicates an expert layer and 0 indicates a dense layer. '
+                            'Examples: "([0]+[1]*23)": 1 dense layer followed by 23 experts layers, '
+                            '"([1]*3+[0]*2)*2": Three expert layers followed by two dense layers, repeated twice.')
+    group.add_argument('--moe-ffn-hidden-size', type=int, default=None,
+                       help='The hidden size of each expert\'s feed-forward network (ffn). '
+                       'If not specified, defaults to the ffn_hidden_size.')
+    group.add_argument('--moe-shared-expert-intermediate-size', type=int, default=None,
+                       help='Shared expert total ffn hidden size. '
+                       'It should be equal to "num_shared_experts * ffn_size_of_each_shared_expert" if there are multiple shared experts. '
+                       'None means no shared expert.')
+    group.add_argument('--moe-shared-expert-overlap', action='store_true',
+                       help='Enable overlapping between shared expert computations and dispatcher communications. '
+                       'Without this, the shared epxerts execute after the routed experts. '
+                       'Only effective when moe-shared-expert-intermediate-size is set.')
+    group.add_argument('--moe-grouped-gemm', action='store_true',
+                       help='When there are multiple experts per rank, launch multiple local GEMM kernels in multiple streams to improve the utilization and performance with GroupedLinear in TransformerEngine.')
+    # Router arguments
+    group.add_argument('--moe-router-load-balancing-type', type=str,
+                       choices=['aux_loss', 'seq_aux_loss', 'sinkhorn', 'none'],
+                       default='aux_loss',
+                       help='Determines the load balancing strategy for the router. "aux_loss" corresponds to the load balancing loss used in GShard and SwitchTransformer; "seq_aux_loss" corresponds to the load balancing loss used in DeepSeekV2, which computes the loss for each individual sample; "sinkhorn" corresponds to the balancing algorithm used in S-BASE, and "none" implies no load balancing. The default is "aux_loss".')
+    group.add_argument('--moe-router-topk', type=int, default=2,
+                       help='Number of experts to route to for each token. The default is 2.')
+    group.add_argument('--moe-router-pre-softmax', action='store_true',
+                       help='Enable pre-softmax routing for MoE, which means softmax is before the top-k selection. By default, softmax is done after top-k.')
+    group.add_argument('--moe-router-topk-limited-devices', type=int, default=None, 
+                       help='Number of expert parallel ranks to consider for each token during routing. Perform top-k routing on a subset of expert parallel ranks by first selecting N ranks for each token, then conducting top-k selection among experts on these devices. Default is None, which means no limited devices.')
+    group.add_argument('--moe-router-topk-scaling-factor', type=float, default=None,
+                       help='Scaling factor for routing score in top-k selection, only works when --moe-router-pre-softmax enabled. Defaults to None, which means no scaling.')
+    group.add_argument('--moe-use-legacy-grouped-gemm', action='store_true',
+                       help='Use legacy GroupedMLP rather than TEGroupedMLP. Note: The legacy one will be deprecated soon.')
+    group.add_argument('--moe-aux-loss-coeff', type=float, default=0.0,
+                       help='Scaling coefficient for the aux loss: a starting value of 1e-2 is recommended.')
+    group.add_argument('--moe-device-level-aux-loss-coeff', type=float, default=0.0,
+                       help='Scaling coefficient for the device-level aux loss')
+    group.add_argument('--moe-comm-aux-loss-coeff', type=float, default=0.0,
+                       help='Scaling coefficient for the communication aux loss')
+    group.add_argument('--moe-z-loss-coeff', type=float, default=None,
+                       help='Scaling coefficient for the z-loss: a starting value of 1e-3 is recommended.')
+    group.add_argument('--moe-input-jitter-eps', type=float, default=None,
+                       help='Add noise to the input tensor by applying jitter with a specified epsilon value.')
+    group.add_argument('--moe-token-dispatcher-type', type=str,
+                       choices=['allgather', 'alltoall', 'alltoall_seq'],
+                       default='allgather',
+                       help="The type of token dispatcher to use. The default is 'allgather'. Options are 'allgather', 'alltoall' and 'alltoall_seq'. We recommend using 'alltoall' when applying expert parallelism. For more information, please refer to the documentation in core/moe/README.")
+    group.add_argument('--moe-per-layer-logging', action='store_true',
+                       help='Enable per-layer logging for MoE, currently supports auxiliary loss and z loss.')
+    # Token dropping arguments
+    group.add_argument('--moe-expert-capacity-factor', type=float, default=None,
+                       help='The capacity factor for each expert, None means no token will be dropped.')
+    group.add_argument('--moe-device-level-capacity', action='store_true',
+                       help='Whether to consider the expert capacity of a group together')
+    group.add_argument('--moe-pad-expert-input-to-capacity', action='store_true',
+                       help='Pads the input for each expert to match the expert capacity length, effective only after the --moe-expert-capacity-factor is set.')
+    group.add_argument('--moe-token-drop-policy', type=str, default='probs', choices=['probs', 'position'],
+                       help='The policy to drop tokens. Can be either "probs" or "position". If "probs", the tokens with the lowest probabilities will be dropped. If "position", tokens at the end of each batch will be dropped.')
+    group.add_argument('--moe-layer-recompute', action='store_true',
+                       help='Enable checkpointing for moe_layer, should be used when memory is not sufficient.')
+    group.add_argument('--moe-extended-tp', action='store_true',
+                       help='Deprecated. Use --expert-tensor-parallel-size instead.')
+    group.add_argument('--moe-use-upcycling', action='store_true',
+                       help='Load a checkpoint of a dense model, convert it into an MoE model, and save the converted model to the path specified by --save. '
+                       'Upcycling is implemented on the top of distributed checkpointing, so it supports parallel modes different from the dense model.')
+
+    return parser
+
+
+def core_transformer_config_from_args(args, config_class=None):
+
+    # Config class.
+    config_class = config_class or TransformerConfig
+
+    if args.multi_latent_attention:
+        config_class = MLATransformerConfig
+
+    # Translate args to core transformer configuration
+    kw_args = {}
+    for f in dataclasses.fields(config_class):
+        if hasattr(args, f.name):
+            kw_args[f.name] = getattr(args, f.name)
+    kw_args['persist_layer_norm'] = not args.no_persist_layer_norm
+    kw_args['layernorm_zero_centered_gamma'] = args.apply_layernorm_1p
+    kw_args['layernorm_epsilon'] = args.norm_epsilon
+    kw_args['deallocate_pipeline_outputs'] = True
+    kw_args['pipeline_dtype'] = args.params_dtype
+    kw_args['batch_p2p_comm'] = not args.overlap_p2p_comm
+    kw_args['num_moe_experts'] = args.num_experts
+    kw_args['rotary_interleaved'] = args.rotary_interleaved
+    kw_args['first_pipeline_num_layers']= args.decoder_first_pipeline_num_layers
+    kw_args['last_pipeline_num_layers']= args.decoder_last_pipeline_num_layers
+    if args.swiglu:
+        kw_args['activation_func'] = F.silu
+        kw_args['gated_linear_unit'] = True
+        kw_args['bias_activation_fusion'] = args.bias_swiglu_fusion
+    else:
+        kw_args['bias_activation_fusion'] = args.bias_gelu_fusion
+    if args.squared_relu:
+        assert not args.swiglu
+        kw_args['activation_func'] = squared_relu
+    if args.init_method_xavier_uniform:
+        kw_args['init_method'] = torch.nn.init.xavier_uniform_
+        kw_args['scaled_init_method'] = torch.nn.init.xavier_uniform_
+    if args.group_query_attention:
+        kw_args['num_query_groups'] = args.num_query_groups
+    else:
+        kw_args['num_query_groups'] = None
+    kw_args['config_logger_dir'] = args.config_logger_dir
+
+    if len(args.cp_comm_type) == 1:
+        kw_args['cp_comm_type'] = args.cp_comm_type[0]
+
+    # Return config.
+    return config_class(**kw_args)
+
+
+megatron.training.arguments._add_moe_args = _add_moe_args
+megatron.training.arguments.core_transformer_config_from_args = core_transformer_config_from_args
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/cuda_patch/fused_layer_norm.py b/megatron-lm-musa-patch/cuda_patch/fused_layer_norm.py
new file mode 100644
index 000000000..15a518449
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/fused_layer_norm.py
@@ -0,0 +1,106 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+import numbers
+
+import torch
+from torch import Tensor
+from torch.nn import init
+from torch.nn.parameter import Parameter
+
+from megatron.core.transformer import TransformerConfig
+
+
+
+class FusedLayerNorm(torch.nn.Module):
+
+    """Layer Norm, fused into a single CUDA kernel.
+
+    Args:
+      hidden_size (int): Transformer hidden dimension.
+
+      eps (float): Epsilon added to denominator, for numerical stability.
+
+      persist_layer_norm (bool): Use persistent fused layer norm kernel.
+      This kernel supports only a set of hidden sizes. Please
+      check persist_ln_hidden_sizes if your hidden size is supported.
+
+      zero_centered_gamma (bool): Adjust LayerNorm weights such that they are
+      centered around zero. This improves numerical stability.
+
+      config (TransformerConfig): Transformer config. Include to match custom
+      layer norm interfaces.
+
+      normalization (str): Normalization type, used for Transformer Engine.
+      Must equal 'LayerNorm' here.
+    """
+
+    def __init__(
+        self,
+        config: TransformerConfig,
+        hidden_size: int,
+        eps: float = 1e-5,
+        persist_layer_norm: bool = True,
+        zero_centered_gamma: bool = False,
+        normalization: str = "LayerNorm",  # included to match TE interface
+    ):
+        super().__init__()
+        print("use FusedLayerNorm")
+
+        self.config = config
+
+        self.zero_centered_gamma = self.config.layernorm_zero_centered_gamma
+
+        if self.config.normalization == "LayerNorm":
+            self.norm_impl = torch.layer_norm
+        elif self.config.normalization == "RMSNorm":
+            def naive_rms_norm(hidden_states, hidden_size, weight, eps):        
+                variance = hidden_states.to(torch.float32).pow(2).mean(-1, keepdim=True)
+                hidden_states = hidden_states * torch.rsqrt(variance + eps)
+                # convert into half-precision if necessary
+                if self.weight.dtype in [torch.float16, torch.bfloat16]:
+                    hidden_states = hidden_states.to(self.weight.dtype)
+                hidden_states = weight * hidden_states
+                return hidden_states 
+            self.norm_impl = naive_rms_norm
+        else:
+            raise ValueError(f'({self.config.normalization}) is not supported in FusedLayerNorm')
+
+        if isinstance(hidden_size, numbers.Integral):
+            hidden_size = (hidden_size,)
+        # self.hidden_size = torch.Size(hidden_size)
+        self.hidden_size = hidden_size
+        self.eps = eps
+        self.weight = Parameter(torch.Tensor(*hidden_size))
+        self.bias = Parameter(torch.Tensor(*hidden_size)) if self.config.normalization == "LayerNorm" else None
+        self.reset_parameters()
+        self.sequence_parallel = self.config.sequence_parallel
+
+
+        # set sequence parallelism flag on weight and bias parameters
+        setattr(self.weight, 'sequence_parallel', self.sequence_parallel)
+        if self.config.normalization == "LayerNorm":
+            setattr(self.bias, 'sequence_parallel', self.sequence_parallel)
+
+    def reset_parameters(self):
+
+        if self.zero_centered_gamma:
+            init.zeros_(self.weight)
+            if self.config.normalization == "LayerNorm":
+                init.zeros_(self.bias)
+        else:
+            init.ones_(self.weight)
+            if self.config.normalization == "LayerNorm":
+                init.zeros_(self.bias)
+
+    def forward(self, input: Tensor) -> Tensor:
+
+        weight = self.weight + 1 if self.zero_centered_gamma else self.weight
+        if self.config.normalization == "LayerNorm":
+            output = self.norm_impl(input, self.hidden_size, weight, self.bias, self.eps)
+        else:
+            output = self.norm_impl(input, self.hidden_size, weight, self.eps)
+
+        return output
+
+import megatron.core.fusions.fused_layer_norm
+megatron.core.fusions.fused_layer_norm.FusedLayerNorm = FusedLayerNorm
diff --git a/megatron-lm-musa-patch/cuda_patch/moe_utils.py b/megatron-lm-musa-patch/cuda_patch/moe_utils.py
new file mode 100644
index 000000000..97fbf35b3
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/moe_utils.py
@@ -0,0 +1,299 @@
+
+import math
+from typing import Optional
+
+import torch
+
+from megatron.core import parallel_state
+import megatron.core.transformer.moe.moe_utils
+get_capacity = megatron.core.transformer.moe.moe_utils.get_capacity
+device_limited_topk = megatron.core.transformer.moe.moe_utils.device_limited_topk
+
+
+def node_limited_topk(
+    scores: torch.Tensor,
+    topk: int,
+    num_tokens: int,
+    num_experts: int,
+    moe_router_topk_limited_devices: int,
+    num_node_group: int=None,
+):
+    """Perform top-k routing on a subset of expert parallel ranks.
+
+    Selects N ranks for each token, then conducts top-k selection among experts on these node.
+    See DeepSeek-V3 technical report for details.
+
+    Args:
+        scores (torch.Tensor): Softmax scores from the router.
+        topk (int): The number of experts to select for each token.
+        num_tokens (int): The number of tokens.
+        num_experts (int): The number of experts.
+        moe_router_topk_limited_devices (int): Number of expert parallel ranks to consider for
+            each token during routing. None means no device limitation.
+
+    Returns:
+        Tuple[torch.Tensor, torch.Tensor]: Probs and indices tensor.
+    """
+
+    # Organize the experts into groups
+    if num_node_group is None:
+        ep_size = (
+            parallel_state.get_expert_model_parallel_world_size()
+        )  # num_node_group equals to expert parallel size/8
+        assert ep_size % 8 == 0, f"ep_size should be multiple of 8, but get {ep_size}"
+        num_node_group = ep_size // 8
+    node_k = topk // moe_router_topk_limited_devices #each token select node according to the sum of the highest K/M affinity scores
+    group_scores = (
+                scores.view(num_tokens, num_node_group, -1).topk(node_k, dim=-1)[0].sum(dim = -1)
+            )  # [n, n_group]
+    group_idx = torch.topk(
+                group_scores, k=moe_router_topk_limited_devices, dim=-1, sorted=False
+            )[
+                1
+            ]  # [n, moe_router_topk_limited_devices]
+    group_mask = torch.zeros_like(group_scores)  # [n, n_group]
+    group_mask.scatter_(1, group_idx, 1)  # [n, n_group]
+    score_mask = (
+        group_mask.unsqueeze(-1)
+        .expand(num_tokens, num_node_group, num_experts // num_node_group)
+        .reshape(num_tokens, -1)
+    )  # [n, e]
+    masked_scores = scores.masked_fill(~score_mask.bool(), 0.0)  # [n, e]
+    _, top_indices = torch.topk(masked_scores, k=topk, dim=-1)
+    return top_indices
+
+
+def sequence_load_balancing_loss_func(
+    probs: torch.Tensor,
+    routing_map: torch.Tensor,
+    tokens_per_expert: torch.Tensor,
+    batch_size: int,
+    seq_length: int,
+    topk: int,
+    moe_aux_loss_coeff: float,
+    moe_device_level_aux_loss_coeff: float=None,
+    moe_comm_aux_loss_coeff: float=None,
+    moe_router_topk_limited_devices: float=None,
+    moe_complementary_seq_aux_loss: bool=False,
+    sequence_partition_group=None,
+):
+    """
+    Calculate the auxiliary loss in sequence-level by computing the loss for each individual sample.
+    Refer to the DeepSeek-V2 huggingface repo
+    (https://huggingface.co/deepseek-ai/DeepSeek-V2) for details.
+    """
+    num_sub_sequence = 1
+
+    # If the sequence is partitioned by certain parallelism strategies like Sequence Parallelism
+    # or Context Parallelism, compute the gradient of the auxiliary loss with respect to the full
+    # sequence.
+    if sequence_partition_group is not None:
+        # We can keep `aggregated_probs_per_expert` local since we don't need the gradient for
+        # `tokens_per_expert`, saving one allreduce operation for `aggregated_probs_per_expert`.
+        num_sub_sequence = torch.distributed.get_world_size(sequence_partition_group)
+        torch.distributed.all_reduce(tokens_per_expert, group=sequence_partition_group)
+
+    assert num_sub_sequence == 1, "Do not support sequence aux loss in sequence partition case"
+
+    num_experts = probs.shape[1]
+
+    probs_for_aux_loss = probs.view(seq_length, batch_size, -1)
+    cost_coeff = routing_map.view(seq_length, batch_size, -1).sum(dim=0).float()
+    cost_coeff.div_(seq_length * topk / num_experts)
+    if moe_complementary_seq_aux_loss:
+        assert (
+            (moe_device_level_aux_loss_coeff is None) and 
+            (moe_comm_aux_loss_coeff is None)
+            ), "moe_complementary_seq_aux_loss only used in deepseekV3, which means no other aux loss used"
+        probs_for_aux_loss = probs.view(seq_length, batch_size, -1)
+        sum_value = probs_for_aux_loss.sum(dim=-1, keepdim=True)
+        probs_for_aux_loss = probs_for_aux_loss / (sum_value + 1e-20)
+    seq_aux_loss = (cost_coeff * probs_for_aux_loss.mean(dim=0)).sum(dim=1).mean()
+    seq_aux_loss *= moe_aux_loss_coeff
+
+    if moe_device_level_aux_loss_coeff is not None:
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        device_aux_loss = (cost_coeff.view(batch_size, num_group, -1).mean(dim=2) * 
+                           probs_for_aux_loss.mean(dim=0).view(batch_size, num_group, -1).sum(dim=2)).sum(dim=1).mean()
+        device_aux_loss *= moe_device_level_aux_loss_coeff
+        seq_aux_loss += device_aux_loss
+    if moe_comm_aux_loss_coeff is not None:
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        cost_coeff = routing_map.view(seq_length, batch_size, num_group, -1).any(dim=3).sum(dim=0).float()
+        cost_coeff.div_(seq_length *  moe_router_topk_limited_devices/ num_group)
+        comm_aux_loss = (cost_coeff * 
+                           probs_for_aux_loss.mean(dim=0).view(batch_size, num_group, -1).sum(dim=2)).sum(dim=1).mean()
+        comm_aux_loss *= moe_comm_aux_loss_coeff
+        seq_aux_loss += comm_aux_loss
+        
+    return seq_aux_loss
+
+def topk_softmax_with_capacity(
+    logits: torch.Tensor,
+    topk: int,
+    capacity_factor: Optional[float] = None,
+    pad_to_capacity: bool = False,
+    drop_policy: str = "probs",
+    use_pre_softmax: bool = False,
+    moe_router_topk_limited_devices: int = None,
+    moe_router_topk_scaling_factor: float = None,
+    device_level_capacity: Optional[bool] = False,
+    use_sigmoid: bool = False,
+    norm_topk_prob: bool = False,
+    num_node_group: int = None,
+    e_score_correction_bias: torch.Tensor = None,
+    deterministic_mode: bool = False,
+):
+    """Apply capacity and padding to the top-k selection.
+    Args:
+        logits (torch.Tensor): Logits tensor.
+        topk (int): The number of experts to select for each token.
+        capacity_factor (int): The capacity factor of each expert. Will drop tokens if the number
+                               of tokens exceeds the capacity.
+        pad_to_capacity (bool): Whether to need padding in token drop mode.
+        drop_policy (str): The policy to drop tokens. Can be either "prob" or "position".
+                           If "prob", the tokens with the lowest probabilities will be dropped.
+                           If "position", tokens at the end of each batch will be dropped.
+        use_pre_softmax (bool): Whether to apply softmax before top-k selection.
+        moe_router_topk_limited_devices (int): Number of expert parallel ranks to consider for
+            each token during routing. None means no device limitation.
+        moe_router_topk_scaling_factor (float): Scaling factor for routing score in top-k
+            selection, only works when use_pre_softmax enabled.
+        deterministic_mode (bool): Deprecated.
+    Returns:
+        Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
+            - routing_probs (torch.Tensor): A tensor of shape [num_tokens, num_experts] containing
+              the routing probabilities for each token to each expert.
+            - routing_map (torch.Tensor): A mask tensor of shape [num_tokens, num_experts]
+              indicating which experts were selected for each token. True values represent
+              the selected experts.
+            - tokens_per_expert (torch.Tensor): A tensor of shape [num_experts] containing
+              the number of local tokens assigned to each expert before dropping and padding.
+    """
+    assert logits.dim() == 2, f"Expected 2D logits [num_tokens, num_experts], got {logits.dim()}."
+    num_tokens = logits.shape[0]
+    num_experts = logits.shape[1]
+    if use_pre_softmax:
+        # Pre softmax
+        if use_sigmoid:
+            scores = torch.sigmoid(logits).type_as(logits)
+        else:
+            scores = torch.softmax(logits, dim=-1, dtype=torch.float32).type_as(logits)
+
+        if e_score_correction_bias is not None:
+            scores_gate = scores + e_score_correction_bias.unsqueeze(0)  #correction only used in router not in multiplied ffn output
+        else:
+            scores_gate = scores
+
+        if moe_router_topk_limited_devices:
+            if num_node_group:
+                top_indices = node_limited_topk(
+                    scores_gate, topk, num_tokens, num_experts, moe_router_topk_limited_devices, num_node_group
+                )
+                probs = scores.gather(1, top_indices)
+            else:
+                probs, top_indices = device_limited_topk(
+                    scores, topk, num_tokens, num_experts, moe_router_topk_limited_devices
+                )
+        else:
+            probs, top_indices = torch.topk(scores, k=topk, dim=1)
+
+        # Normalize the probs.
+        if norm_topk_prob:
+            assert use_sigmoid, f"norm_topk_prob only work with use_sigmoid=True, but get {use_sigmoid}"
+            denominator = probs.sum(dim=-1, keepdim=True) + 1e-20
+            probs = probs / denominator
+        if moe_router_topk_scaling_factor:
+            probs = probs * moe_router_topk_scaling_factor
+    else:
+        # Post softmax
+        if topk == 1:
+            # Requires applying softmax before selecting the top-k when k is 1,
+            # since softmax on a [num_tokens, 1] would yield a zero gradient.
+            raise ValueError("Please use --moe-router-pre-softmax when topk is 1.")
+        assert (
+            moe_router_topk_scaling_factor is None
+        ), "moe_router_topk_scaling_factor is not supported with post-softmax"
+        if moe_router_topk_limited_devices:
+            if num_node_group:
+                scores, top_indices = node_limited_topk(
+                    logits, topk, num_tokens, num_experts, moe_router_topk_limited_devices, num_node_group
+                )
+            else:
+                scores, top_indices = device_limited_topk(
+                    logits, topk, num_tokens, num_experts, moe_router_topk_limited_devices
+                )
+        else:
+            scores, top_indices = torch.topk(logits, k=topk, dim=1)
+        probs = torch.softmax(scores, dim=-1, dtype=torch.float32).type_as(logits)
+
+    # TODO Try using element-wise operations instead of scatter?
+    topk_masked_gates = torch.zeros_like(logits).scatter(1, top_indices, probs)
+    topk_map = torch.zeros_like(logits).int().scatter(1, top_indices, 1).bool()
+    tokens_per_expert = topk_map.sum(dim=0)
+
+    if capacity_factor is None:
+        # TopK without capacity
+        return topk_masked_gates, topk_map, tokens_per_expert
+    elif device_level_capacity:
+        assert drop_policy=='probs', f"only support 'probs' for device_level capacity, but get {drop_policy}"
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        device_expert_capacity = get_capacity(
+            num_tokens=num_tokens * topk, num_experts=num_experts, capacity_factor=capacity_factor
+        )*num_experts//num_group
+        # Maskout exceeded tokens
+        if drop_policy == "probs":
+            topk_masked_group_gates = topk_masked_gates.view(num_tokens, num_group, -1)
+            topk_masked_group_gates = topk_masked_group_gates.permute(0,2,1).reshape(-1, num_group)
+            _, capacity_indices = torch.topk(
+                topk_masked_group_gates, k=device_expert_capacity, dim=0, sorted=False
+            )
+            capacity_mask = torch.zeros([num_tokens*num_experts//num_group, num_group], device=logits.device).scatter(0, capacity_indices, 1).bool()
+            capacity_mask = capacity_mask.view(num_tokens, num_experts//num_group, num_group).permute(0,2,1).reshape(num_tokens, -1)
+        else:
+            raise ValueError(f"Invalid drop_policy: {drop_policy}")
+
+        if pad_to_capacity:
+            final_map = capacity_mask
+            final_probs = topk_masked_gates * final_map
+        else:
+            # Get exceed mask and maskout exceeded probs and indices
+            final_map = torch.logical_and(topk_map, capacity_mask)
+            final_probs = topk_masked_gates * final_map
+        return final_probs, final_map, tokens_per_expert
+    else:
+        # TopK with capacity
+        expert_capacity = get_capacity(
+            num_tokens=num_tokens * topk, num_experts=num_experts, capacity_factor=capacity_factor
+        )
+
+        # Maskout exceeded tokens
+        if drop_policy == "probs":
+            _, capacity_indices = torch.topk(
+                topk_masked_gates, k=expert_capacity, dim=0, sorted=False
+            )
+            capacity_mask = torch.zeros_like(logits).scatter(0, capacity_indices, 1).bool()
+        elif drop_policy == "position":
+            _, capacity_indices = torch.topk(topk_map.int(), k=expert_capacity, dim=0, sorted=False)
+            capacity_mask = torch.zeros_like(logits).scatter(0, capacity_indices, 1).bool()
+        else:
+            raise ValueError(f"Invalid drop_policy: {drop_policy}")
+
+        if pad_to_capacity:
+            final_map = capacity_mask
+            final_probs = topk_masked_gates * final_map
+        else:
+            # Get exceed mask and maskout exceeded probs and indices
+            final_map = torch.logical_and(topk_map, capacity_mask)
+            final_probs = topk_masked_gates * final_map
+        return final_probs, final_map, tokens_per_expert
+
+
+megatron.core.transformer.moe.moe_utils.sequence_load_balancing_loss_func = sequence_load_balancing_loss_func
+megatron.core.transformer.moe.moe_utils.topk_softmax_with_capacity = topk_softmax_with_capacity
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/cuda_patch/multi_latent_attention.py b/megatron-lm-musa-patch/cuda_patch/multi_latent_attention.py
new file mode 100644
index 000000000..098b284c2
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/multi_latent_attention.py
@@ -0,0 +1,379 @@
+import math
+from dataclasses import dataclass
+from typing import Union
+
+import torch
+
+from megatron.core import parallel_state
+from megatron.core.models.common.embeddings import (
+    YarnRotaryEmbedding,
+    _yarn_get_mscale,
+    apply_rotary_pos_emb,
+)
+from megatron.core.transformer.attention import Attention
+from megatron.core.transformer.enums import AttnMaskType
+from megatron.core.transformer.spec_utils import ModuleSpec, build_module
+from megatron.core.transformer.transformer_config import MLATransformerConfig
+
+from megatron.core.transformer.multi_latent_attention import MLASelfAttentionSubmodules
+
+class MultiLatentAttention(Attention):
+    """Multi-Latent Attention layer abstract class.
+
+    This layer only contains common modules required for the "self attn" and
+    "cross attn" specializations.
+    """
+
+    def __init__(
+        self,
+        config: MLATransformerConfig,
+        submodules: Union[MLASelfAttentionSubmodules],
+        layer_number: int,
+        attn_mask_type: AttnMaskType,
+        attention_type: str,
+        cp_comm_type: str = None,
+    ) -> None:
+        world_size = parallel_state.get_tensor_model_parallel_world_size()
+        assert (
+            world_size == 1
+        ), "MLA is not supported with Tensor Parallelism yet, \
+        use Expert Parallelism and Pipeline Parallelism for better performance."
+
+        super().__init__(
+            config=config,
+            submodules=submodules,
+            layer_number=layer_number,
+            attention_type=attention_type,
+            attn_mask_type=attn_mask_type,
+        )
+
+        self.query_projection_size = self.config.v_head_dim * self.config.num_attention_heads
+
+        self.q_head_dim = self.config.qk_head_dim + self.config.qk_pos_emb_head_dim
+
+        mscale = _yarn_get_mscale(self.config.rotary_scaling_factor, self.config.mscale)
+        self.softmax_scale = mscale * mscale / math.sqrt(self.q_head_dim)
+
+        self.rotary_pos_emb = YarnRotaryEmbedding(
+            self.config.qk_pos_emb_head_dim,
+            rotary_base=self.config.rotary_base,
+            scaling_factor=self.config.rotary_scaling_factor,
+            original_max_position_embeddings=self.config.max_position_embeddings,
+            beta_fast=self.config.beta_fast,
+            beta_slow=self.config.beta_slow,
+            mscale=self.config.mscale,
+            mscale_all_dim=self.config.mscale_all_dim,
+        )
+
+        self.core_attention = build_module(
+            submodules.core_attention,
+            config=self.config,
+            layer_number=self.layer_number,
+            attn_mask_type=self.attn_mask_type,
+            attention_type=self.attention_type,
+            softmax_scale=self.softmax_scale,
+            k_channels=self.q_head_dim,
+            v_channels=self.config.v_head_dim,
+            cp_comm_type=cp_comm_type,
+        )
+
+        # Output.
+        self.linear_proj = build_module(
+            submodules.linear_proj,
+            self.query_projection_size,
+            self.config.hidden_size,
+            config=self.config,
+            init_method=self.config.output_layer_init_method,
+            bias=self.config.add_bias_linear,
+            input_is_parallel=True,
+            skip_bias_add=True,
+            is_expert=False,
+            tp_comm_buffer_name='proj',
+        )
+
+    def forward(
+        self,
+        hidden_states,
+        attention_mask,
+        key_value_states=None,
+        inference_params=None,
+        rotary_pos_emb=None,
+        rotary_pos_cos=None,
+        rotary_pos_sin=None,
+        attention_bias=None,
+        packed_seq_params=None,
+        position_ids=None,
+        sequence_len_offset=None,
+    ):
+        """Forward pass for multi-latent attention"""
+        assert rotary_pos_emb is None, "Rotary position embeddings should not be passed into MLA."
+        assert attention_bias is None, "Attention bias should not be passed into MLA."
+        assert (
+            rotary_pos_cos is None and rotary_pos_sin is None
+        ), "MLA does not support Flash Decoding"
+
+        # hidden_states: [sq, b, h]
+
+        # =====================
+        # Query, Key, and Value
+        # =====================
+        # Get the query, key and value tensors based on the type of attention -
+        # self or cross attn.
+        # query: [96, 1, 16, 128], key:[96, 1, 16, 128], value:[96, 1, 16, 128]
+        query, key, value = self.get_query_key_value_tensors(
+            hidden_states,
+            key_value_states,
+            position_ids,
+            packed_seq_params,
+            inference_params=inference_params,
+        )
+
+        # ===================================================
+        # Adjust key, value for inference
+        # ===================================================
+        # rotary_pos_emb = None
+        query, key, value, _, attn_mask_type = self._adjust_key_value_for_inference(
+            inference_params, query, key, value, rotary_pos_emb=None
+        )
+
+        # ==================================
+        # core attention computation
+        # ==================================
+        # Need corresponding TE change
+        if self.checkpoint_core_attention and self.training:
+            core_attn_out = self._checkpointed_attention_forward(
+                query, key, value, attention_mask, packed_seq_params=packed_seq_params
+            )
+        else:
+            core_attn_out = self.core_attention(
+                query,
+                key,
+                value,
+                attention_mask,
+                packed_seq_params=packed_seq_params,
+                attn_mask_type=attn_mask_type,
+            )
+
+        if packed_seq_params is not None:
+            # reshape to same output shape as unpacked case
+            # (t, np, hn) -> (t, b=1, h=np*hn)
+            # t is the pack size = sum (sq_i)
+            # note that batch is a dummy dimension in the packed case
+            core_attn_out = core_attn_out.reshape(core_attn_out.size(0), 1, -1)
+
+        # =================
+        # Output. [sq, b, h]
+        # =================
+        output, bias = self.linear_proj(core_attn_out)
+
+        return output, bias
+
+
+class MLASelfAttention(MultiLatentAttention):
+    """MLA Self-attention layer class
+
+    Self-attention layer takes input with size [s, b, h]
+    and returns output of the same size.
+    """
+
+    def __init__(
+        self,
+        config: MLATransformerConfig,
+        submodules: MLASelfAttentionSubmodules,
+        layer_number: int,
+        attn_mask_type=AttnMaskType.padding,
+        cp_comm_type: str = None,
+    ):
+        super().__init__(
+            config=config,
+            submodules=submodules,
+            layer_number=layer_number,
+            attn_mask_type=attn_mask_type,
+            attention_type="self",
+        )
+
+        if self.config.q_lora_rank is None:
+            # Not projectiing query
+            self.linear_q_proj = build_module(
+                submodules.linear_q_proj,
+                self.config.hidden_size,
+                self.config.num_attention_heads * self.q_head_dim,
+                config=self.config,
+                init_method=self.config.init_method,
+                gather_output=False,
+                bias=False,
+                skip_bias_add=False,
+                is_expert=False,
+            )
+
+        else:
+
+            self.linear_q_down_proj = build_module(
+                submodules.linear_q_down_proj,
+                self.config.hidden_size,
+                self.config.q_lora_rank,
+                config=self.config,
+                init_method=self.config.init_method,
+                gather_output=False,
+                bias=False,
+                skip_bias_add=False,
+                is_expert=False,
+            )
+
+            self.linear_q_up_proj = build_module(
+                submodules.linear_q_up_proj,
+                self.config.q_lora_rank,
+                self.config.num_attention_heads * self.q_head_dim,
+                config=self.config,
+                init_method=self.config.init_method,
+                gather_output=False,
+                bias=False,
+                skip_bias_add=False,
+                is_expert=False,
+            )
+
+        self.linear_kv_down_proj = build_module(
+            submodules.linear_kv_down_proj,
+            self.config.hidden_size,
+            self.config.kv_lora_rank + self.config.qk_pos_emb_head_dim,
+            config=self.config,
+            init_method=self.config.init_method,
+            gather_output=False,
+            bias=False,
+            skip_bias_add=False,
+            is_expert=False,
+        )
+
+        self.linear_kv_up_proj = build_module(
+            submodules.linear_kv_up_proj,
+            self.config.kv_lora_rank,
+            self.config.num_attention_heads * (self.config.qk_head_dim + self.config.v_head_dim),
+            config=self.config,
+            init_method=self.config.init_method,
+            gather_output=False,
+            bias=False,
+            skip_bias_add=False,
+            is_expert=False,
+        )
+
+        if self.config.q_lora_rank is not None:
+            self.q_layernorm = build_module(
+                submodules.q_layernorm,
+                hidden_size=self.config.q_lora_rank,
+                config=self.config,
+                eps=self.config.layernorm_epsilon,
+            )
+
+        self.kv_layernorm = build_module(
+            submodules.kv_layernorm,
+            hidden_size=self.config.kv_lora_rank,
+            config=self.config,
+            eps=self.config.layernorm_epsilon,
+        )
+
+    def get_query_key_value_tensors(
+        self,
+        hidden_states,
+        key_value_states=None,
+        position_ids=None,
+        packed_seq_params=None,
+        inference_params=None,
+    ):
+        """
+        Derives `query`, `key` and `value` tensors from `hidden_states`.
+        """
+        # s = sequence length, b = batch size, h = hidden size, n = num attention heads
+        # Attention heads [s, b, n*h]
+        assert (
+            hidden_states.ndim == 3
+        ), f"hidden_states should be 3D, [s, b, n*h], got {hidden_states.ndim}D"
+        q_len, bsz, _ = hidden_states.size()
+
+        if self.config.q_lora_rank is not None:
+            q_compressed, _ = self.linear_q_down_proj(hidden_states)
+            q_compressed = self.q_layernorm(q_compressed)
+            q, _ = self.linear_q_up_proj(q_compressed)
+        else:
+            # hidden_states:[s, b, 2048], q: [s, b, n * 192]
+            q, _ = self.linear_q_proj(hidden_states)
+
+        # q: [s, b, n, 192]
+        q = q.view(q_len, bsz, self.num_attention_heads_per_partition, self.q_head_dim)
+
+        # q: [s, b, n, 128], q_pos_emb: [s, b, n, 64]
+        q_no_pe, q_pos_emb = torch.split(
+            q, [self.config.qk_head_dim, self.config.qk_pos_emb_head_dim], dim=-1
+        )
+
+        # kv_combined: [s, b, 576]
+        kv_combined, _ = self.linear_kv_down_proj(hidden_states)
+
+        # kv_compressed:[s, b, 512], k_pos_emb: [s, b, 64]
+        kv_compressed, k_pos_emb = torch.split(
+            kv_combined, [self.config.kv_lora_rank, self.config.qk_pos_emb_head_dim], dim=-1
+        )
+
+        # kv: [s, b, 2048]
+        kv, _ = self.linear_kv_up_proj(self.kv_layernorm(kv_compressed))
+
+        # kv: [s, b, n, 256]
+        kv = kv.view(
+            q_len,
+            bsz,
+            self.num_attention_heads_per_partition,
+            self.config.qk_head_dim + self.config.v_head_dim,
+        )
+
+        # k_no_pe: [s, b, n, 128], value: [s, b, n, 128]
+        k_no_pe, value = torch.split(kv, [self.config.qk_head_dim, self.config.v_head_dim], dim=-1)
+
+        # rotary_pos_emb:[s, b, 1, 64]
+        rotary_pos_emb = self.rotary_pos_emb(max_seq_len=self.config.max_position_embeddings)
+
+        if len(rotary_pos_emb) == 2:
+            mscale = rotary_pos_emb[1]
+            rotary_pos_emb = rotary_pos_emb[0]
+
+        if inference_params is not None:
+            # add offset to the sequence start for inference
+            sequence_start = inference_params.sequence_len_offset
+            sequence_end = sequence_start + q_len
+            rotary_pos_emb = rotary_pos_emb[sequence_start:sequence_end]
+
+        # [s, b, 64] -> [s, b, 1, 64]
+        k_pos_emb = torch.unsqueeze(k_pos_emb, 2)
+
+        if packed_seq_params is not None:
+            cu_seqlens_q = packed_seq_params.cu_seqlens_q
+            cu_seqlens_kv = packed_seq_params.cu_seqlens_kv
+        else:
+            cu_seqlens_q = cu_seqlens_kv = None
+
+        # q_pos_emb: [s, b, n, 64], k_pos_emb:[s, b, 1, 64]
+        q_pos_emb = apply_rotary_pos_emb(
+            q_pos_emb, rotary_pos_emb, config=self.config, cu_seqlens=cu_seqlens_q, mscale=mscale
+        )
+        k_pos_emb = apply_rotary_pos_emb(
+            k_pos_emb, rotary_pos_emb, config=self.config, cu_seqlens=cu_seqlens_kv, mscale=mscale
+        )
+
+        # query: [s, b, n, 192]
+        query = torch.cat([q_no_pe, q_pos_emb], dim=-1)
+
+        # key: [s, b, n, 192]
+        k_pos_emb = k_pos_emb.expand(-1, -1, self.config.num_attention_heads, -1)
+        key = torch.cat([k_no_pe, k_pos_emb], dim=-1)
+
+        query = query.contiguous()
+        key = key.contiguous()
+        value = value.contiguous()
+
+        return query, key, value
+
+
+import sys
+for k in sys.modules:
+    if k.startswith('megatron'):
+        for target in ['MLASelfAttention']:
+            if getattr(sys.modules[k], target, None):
+                setattr(sys.modules[k], target, MLASelfAttention)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/cuda_patch/profiling.py b/megatron-lm-musa-patch/cuda_patch/profiling.py
new file mode 100644
index 000000000..17f2abe62
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/profiling.py
@@ -0,0 +1,141 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+# All rights reserved.
+#
+# This source code is licensed under the BSD-style license found in the
+# LICENSE file in the root directory of this source tree.
+
+import contextlib
+import os
+import pickle
+import time
+from datetime import datetime
+
+import torch
+
+# the number of warmup steps before the active step in each profiling cycle
+profile_freq = 4
+# how much memory allocation/free ops to record in memory snapshots
+MEMORY_SNAPSHOT_MAX_ENTRIES = 100000
+
+
+@contextlib.contextmanager
+def maybe_enable_profiling(args, global_step):
+    # get user defined profiler settings
+    enable_profiling = int(os.getenv("ENABLE_PROFILER", 0))
+     # fetch profiler related env
+    wait_steps = int(os.getenv("PROFILER_WAIT_STEPS", 0))
+    warmup_steps = int(os.getenv("PROFILER_WARMUP_STEPS", 3))
+    active_steps = int(os.getenv("PROFILER_ACTIVE_STEPS", 1))
+    repeat_num = int(os.getenv("PROFILER_REPEAT_NUM", 0))
+    profile_freq = int(os.getenv("PROFILER_FREQ", 1))
+    current_time = datetime.now().strftime("%Y.%m.%d-%H:%M:%S")
+    save_dir = os.getenv("PROFILER_SAVE_DIR", f"./profiler_result/{current_time}")
+    worker_name = os.getenv(
+        "PROFILER_WORKER_NAME", "rank" + str(torch.distributed.get_rank())
+    )
+    record_shapes = int(os.getenv("PROFILER_RECORD_SHAPES", 1))
+    profile_memory = int(os.getenv("PROFILER_PROFILE_MEMORY", 0))
+    with_stack = int(os.getenv("PROFILER_WITH_STACK", 1))
+    with_modules = int(os.getenv("PROFILER_WITH_MODULES", 1))
+    kineto_log_level = int(os.getenv("KINETO_LOG_LEVEL", 0))
+
+    if enable_profiling:
+        profile_freq = profile_freq
+
+        rank = torch.distributed.get_rank()
+
+        def trace_handler(prof):
+            curr_trace_dir_name = "iteration_" + str(prof.step_num)
+            curr_trace_dir = os.path.join(save_dir, curr_trace_dir_name)
+            if not os.path.exists(curr_trace_dir):
+                os.makedirs(curr_trace_dir, exist_ok=True)
+
+            print(f"Dumping profiler traces at step {prof.step_num}")
+            begin = time.monotonic()
+            prof.export_chrome_trace(f"{curr_trace_dir}/rank{rank}_trace.pt.trace.json")
+            print(
+                f"Finished dumping profiler traces in {time.monotonic() - begin:.2f} seconds"
+            )
+
+        print(f"Profiling active. Traces will be saved at {save_dir}")
+
+        if not os.path.exists(save_dir):
+            os.makedirs(save_dir, exist_ok=True)
+
+        # warmup, active = WARMUP, 1
+        wait = profile_freq - (active_steps + warmup_steps)
+        assert (
+            wait >= 0
+        ), "profile_freq must be greater than or equal to warmup + active"
+        with torch.profiler.profile(
+            activities=[
+                torch.profiler.ProfilerActivity.CPU,
+                #torch.profiler.ProfilerActivity.MUSA,
+                torch.profiler.ProfilerActivity.CUDA,
+            ],
+            schedule=torch.profiler.schedule(wait=wait, warmup=warmup_steps, active=active_steps),
+            on_trace_ready=trace_handler,
+            record_shapes=record_shapes,
+            profile_memory=profile_memory,
+            with_stack=with_stack,
+            with_modules=with_modules,
+            start_step=global_step+1,
+        ) as torch_profiler:
+            yield torch_profiler
+    else:
+        torch_profiler = contextlib.nullcontext()
+        yield None
+
+
+@contextlib.contextmanager
+def maybe_enable_memory_snapshot(args, global_step: int = 0):
+    pass
+    # enable_snapshot = config.profiling.enable_memory_snapshot
+    # if enable_snapshot:
+    #     snapshot_folder = config.profiling.save_memory_snapshot_folder
+    #     snapshot_dir = os.path.join(config.job.dump_folder, snapshot_folder)
+    #     if not os.path.exists(snapshot_dir):
+    #         os.makedirs(snapshot_dir, exist_ok=True)
+    #     rank = torch.distributed.get_rank()
+
+    #     class MemoryProfiler:
+    #         def __init__(self, step_num: int, freq: int):
+    #             torch.musa.memory._record_memory_history(
+    #                 max_entries=MEMORY_SNAPSHOT_MAX_ENTRIES
+    #             )
+    #             # when resume training, we start from the last step
+    #             self.step_num = step_num
+    #             self.freq = freq
+
+    #         def step(self, exit_ctx: bool = False):
+    #             self.step_num += 1
+    #             if not exit_ctx and self.step_num % self.freq != 0:
+    #                 return
+    #             if not exit_ctx:
+    #                 curr_step = self.step_num
+    #                 dir_name = f"iteration_{curr_step}"
+    #             else:
+    #                 # dump as iteration_0_exit if OOM at iter 1
+    #                 curr_step = self.step_num - 1
+    #                 dir_name = f"iteration_{curr_step}_exit"
+    #             curr_snapshot_dir = os.path.join(snapshot_dir, dir_name)
+    #             if not os.path.exists(curr_snapshot_dir):
+    #                 os.makedirs(curr_snapshot_dir, exist_ok=True)
+    #             logger.info(f"Dumping memory snapshot at step {curr_step}")
+    #             begin = time.monotonic()
+    #             with open(
+    #                 f"{curr_snapshot_dir}/rank{rank}_memory_snapshot.pickle", "wb"
+    #             ) as output:
+    #                 pickle.dump(torch.musa.memory._snapshot(), output)
+    #             logger.info(
+    #                 f"Finished dumping memory snapshot in {time.monotonic() - begin:.2f} seconds"
+    #             )
+
+    #     logger.info(f"Memory profiler active. Snapshot will be saved at {snapshot_dir}")
+    #     profiler = MemoryProfiler(global_step, config.profiling.profile_freq)
+    #     try:
+    #         yield profiler
+    #     except torch.OutOfMemoryError as e:
+    #         profiler.step(exit_ctx=True)
+    # else:
+    #     yield None
diff --git a/megatron-lm-musa-patch/cuda_patch/profiling.py. and b/megatron-lm-musa-patch/cuda_patch/profiling.py. and
new file mode 100644
index 000000000..8d9eb5c72
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/profiling.py. and	
@@ -0,0 +1,140 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+# All rights reserved.
+#
+# This source code is licensed under the BSD-style license found in the
+# LICENSE file in the root directory of this source tree.
+
+import contextlib
+import os
+import pickle
+import time
+from datetime import datetime
+
+import torch
+
+# the number of warmup steps before the active step in each profiling cycle
+profile_freq = 4
+# how much memory allocation/free ops to record in memory snapshots
+MEMORY_SNAPSHOT_MAX_ENTRIES = 100000
+
+
+@contextlib.contextmanager
+def maybe_enable_profiling(args, global_step):
+    # get user defined profiler settings
+    enable_profiling = int(os.getenv("ENABLE_PROFILER", 1))
+     # fetch profiler related env
+    wait_steps = int(os.getenv("PROFILER_WAIT_STEPS", 0))
+    warmup_steps = int(os.getenv("PROFILER_WARMUP_STEPS", 3))
+    active_steps = int(os.getenv("PROFILER_ACTIVE_STEPS", 1))
+    repeat_num = int(os.getenv("PROFILER_REPEAT_NUM", 0))
+    profile_freq = int(os.getenv("PROFILER_FREQ", 0))
+    current_time = datetime.now().strftime("%Y.%m.%d-%H:%M:%S")
+    save_dir = os.getenv("PROFILER_SAVE_DIR", f"./profiler_result/{current_time}")
+    worker_name = os.getenv(
+        "PROFILER_WORKER_NAME", "rank" + str(torch.distributed.get_rank())
+    )
+    record_shapes = int(os.getenv("PROFILER_RECORD_SHAPES", 1))
+    profile_memory = int(os.getenv("PROFILER_PROFILE_MEMORY", 0))
+    with_stack = int(os.getenv("PROFILER_WITH_STACK", 1))
+    with_modules = int(os.getenv("PROFILER_WITH_MODULES", 1))
+    kineto_log_level = int(os.getenv("KINETO_LOG_LEVEL", 0))
+
+    if enable_profiling:
+        profile_freq = profile_freq
+
+        rank = torch.distributed.get_rank()
+
+        def trace_handler(prof):
+            curr_trace_dir_name = "iteration_" + str(prof.step_num)
+            curr_trace_dir = os.path.join(save_dir, curr_trace_dir_name)
+            if not os.path.exists(curr_trace_dir):
+                os.makedirs(curr_trace_dir, exist_ok=True)
+
+            print(f"Dumping profiler traces at step {prof.step_num}")
+            begin = time.monotonic()
+            prof.export_chrome_trace(f"{curr_trace_dir}/rank{rank}_trace.json")
+            print(
+                f"Finished dumping profiler traces in {time.monotonic() - begin:.2f} seconds"
+            )
+
+        print(f"Profiling active. Traces will be saved at {save_dir}")
+
+        if not os.path.exists(save_dir):
+            os.makedirs(save_dir, exist_ok=True)
+
+        # warmup, active = WARMUP, 1
+        wait = profile_freq - (active_steps + warmup_steps)
+        assert (
+            wait >= 0
+        ), "profile_freq must be greater than or equal to warmup + active"
+        with torch.profiler.profile(
+            activities=[
+                torch.profiler.ProfilerActivity.CPU,
+                torch.profiler.ProfilerActivity.CUDA,
+            ],
+            schedule=torch.profiler.schedule(wait=wait, warmup=warmup_steps, active=active_steps),
+            on_trace_ready=trace_handler,
+            record_shapes=record_shapes,
+            profile_memory=profile_memory,
+            with_stack=with_stack,
+            with_modules=with_modules,
+        ) as torch_profiler:
+            torch_profiler.step_num = global_step
+            yield torch_profiler
+    else:
+        torch_profiler = contextlib.nullcontext()
+        yield None
+
+
+@contextlib.contextmanager
+def maybe_enable_memory_snapshot(args, global_step: int = 0):
+    pass
+    # enable_snapshot = config.profiling.enable_memory_snapshot
+    # if enable_snapshot:
+    #     snapshot_folder = config.profiling.save_memory_snapshot_folder
+    #     snapshot_dir = os.path.join(config.job.dump_folder, snapshot_folder)
+    #     if not os.path.exists(snapshot_dir):
+    #         os.makedirs(snapshot_dir, exist_ok=True)
+    #     rank = torch.distributed.get_rank()
+
+    #     class MemoryProfiler:
+    #         def __init__(self, step_num: int, freq: int):
+    #             torch.musa.memory._record_memory_history(
+    #                 max_entries=MEMORY_SNAPSHOT_MAX_ENTRIES
+    #             )
+    #             # when resume training, we start from the last step
+    #             self.step_num = step_num
+    #             self.freq = freq
+
+    #         def step(self, exit_ctx: bool = False):
+    #             self.step_num += 1
+    #             if not exit_ctx and self.step_num % self.freq != 0:
+    #                 return
+    #             if not exit_ctx:
+    #                 curr_step = self.step_num
+    #                 dir_name = f"iteration_{curr_step}"
+    #             else:
+    #                 # dump as iteration_0_exit if OOM at iter 1
+    #                 curr_step = self.step_num - 1
+    #                 dir_name = f"iteration_{curr_step}_exit"
+    #             curr_snapshot_dir = os.path.join(snapshot_dir, dir_name)
+    #             if not os.path.exists(curr_snapshot_dir):
+    #                 os.makedirs(curr_snapshot_dir, exist_ok=True)
+    #             logger.info(f"Dumping memory snapshot at step {curr_step}")
+    #             begin = time.monotonic()
+    #             with open(
+    #                 f"{curr_snapshot_dir}/rank{rank}_memory_snapshot.pickle", "wb"
+    #             ) as output:
+    #                 pickle.dump(torch.musa.memory._snapshot(), output)
+    #             logger.info(
+    #                 f"Finished dumping memory snapshot in {time.monotonic() - begin:.2f} seconds"
+    #             )
+
+    #     logger.info(f"Memory profiler active. Snapshot will be saved at {snapshot_dir}")
+    #     profiler = MemoryProfiler(global_step, config.profiling.profile_freq)
+    #     try:
+    #         yield profiler
+    #     except torch.OutOfMemoryError as e:
+    #         profiler.step(exit_ctx=True)
+    # else:
+    #     yield None
diff --git a/megatron-lm-musa-patch/cuda_patch/router.py b/megatron-lm-musa-patch/cuda_patch/router.py
new file mode 100644
index 000000000..733a4f552
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/router.py
@@ -0,0 +1,98 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+from abc import ABC, abstractmethod
+from functools import partial
+from typing import Callable
+import torch
+
+from megatron.core import parallel_state
+from megatron.core.transformer.moe.moe_utils import (
+    MoEAuxLossAutoScaler,
+    save_to_aux_losses_tracker,
+)
+from megatron.core.transformer.moe.router import TopKRouter
+
+from .moe_utils import (
+    sequence_load_balancing_loss_func,
+    topk_softmax_with_capacity,
+)
+
+
+def init(self, config):
+    """Initialize the zero token dropping router.
+
+    Args:
+        config (TransformerConfig): The configuration for the transformer model.
+    """
+    super(TopKRouter, self).__init__(config=config)
+    self.topk = self.config.moe_router_topk
+    self.routing_type = self.config.moe_router_load_balancing_type
+    self.input_jitter = None
+    self.e_score_correction_bias = None
+    self.moe_noaux_gamma = self.config.moe_noaux_gamma
+    if self.moe_noaux_gamma:
+        self.tokens_per_expert = torch.nn.Parameter(
+             torch.empty((self.config.num_moe_experts)), requires_grad=False
+        )
+        self.e_score_correction_bias = torch.nn.Parameter(
+             torch.empty((self.config.num_moe_experts)), requires_grad=False
+        )
+        if config.perform_initialization:
+            # initialize bias to zero.
+            with torch.no_grad():
+                self.e_score_correction_bias.zero_()
+                self.tokens_per_expert.zero_()
+
+def seq_aux_loss_load_balancing(self, logits: torch.Tensor, bsz: int, seq_length: int):
+    """Apply loss-based load balancing to the logits tensor."""
+
+    probs, routing_map, tokens_per_expert = topk_softmax_with_capacity(
+        logits,
+        self.topk,
+        capacity_factor=self.config.moe_expert_capacity_factor,
+        pad_to_capacity=self.config.moe_pad_expert_input_to_capacity,
+        drop_policy=self.config.moe_token_drop_policy,
+        use_pre_softmax=self.config.moe_router_pre_softmax,
+        moe_router_topk_limited_devices=self.config.moe_router_topk_limited_devices,
+        moe_router_topk_scaling_factor=self.config.moe_router_topk_scaling_factor,
+        use_sigmoid=self.config.moe_router_use_sigmoid,
+        norm_topk_prob=self.config.moe_router_norm_topk_prob,
+        deterministic_mode=self.config.deterministic_mode,
+        device_level_capacity=self.config.moe_device_level_capacity,
+        num_node_group=self.config.moe_router_num_node_group,
+        e_score_correction_bias=self.e_score_correction_bias,
+    )
+
+    if self.training:
+        if self.config.moe_router_use_sigmoid == "sigmoid":
+            scores = torch.sigmoid(logits)
+        else: 
+            scores = torch.softmax(logits, dim=-1, dtype=torch.float32)
+        aux_loss_func = partial(
+            sequence_load_balancing_loss_func,
+            probs=scores,
+            routing_map=routing_map,
+            tokens_per_expert=tokens_per_expert,
+            batch_size=bsz,
+            seq_length=seq_length,
+            topk=self.topk,
+            moe_router_topk_limited_devices=self.config.moe_router_topk_limited_devices,
+            moe_device_level_aux_loss_coeff=self.config.moe_device_level_aux_loss_coeff,
+            moe_comm_aux_loss_coeff=self.config.moe_comm_aux_loss_coeff,
+            moe_complementary_seq_aux_loss=self.config.moe_complementary_seq_aux_loss,
+        )
+        probs = self.apply_load_balancing_loss(
+            activation=probs, load_balancing_loss_func=aux_loss_func
+        )
+
+        if self.moe_noaux_gamma and torch.is_grad_enabled():
+            with torch.no_grad():
+                mean_token = logits.shape[0] * self.topk / logits.shape[1]
+                self.tokens_per_expert += (tokens_per_expert /mean_token).to(self.tokens_per_expert.device)
+    return probs, routing_map
+
+
+import megatron.core.transformer.moe.router
+megatron.core.transformer.moe.router.TopKRouter.seq_aux_loss_load_balancing = seq_aux_loss_load_balancing
+megatron.core.transformer.moe.router.TopKRouter.__init__ = init
+
diff --git a/megatron-lm-musa-patch/cuda_patch/theoretical_memory_usage.py b/megatron-lm-musa-patch/cuda_patch/theoretical_memory_usage.py
new file mode 100644
index 000000000..5f783d5fc
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/theoretical_memory_usage.py
@@ -0,0 +1,220 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+"""Computes theoretical memory footprint for model training."""
+
+
+import math
+
+NUM_BYTES_IN_MEGABYTE = 1024 * 1024
+
+def compute_weight_and_optimizer_memory(args, verbose=False):
+    # Attention projection size.
+    attn_dim = args.kv_channels
+    kv_projection_size = attn_dim * args.num_attention_heads
+    query_projection_size = attn_dim * args.num_attention_heads
+    ## MLA
+    if args.kv_lora_rank:
+        kv_projection_size = attn_dim * args.num_attention_heads + args.kv_lora_rank
+    if args.q_lora_rank:
+        query_projection_size = attn_dim * args.num_attention_heads + args.q_lora_rank
+
+    output_projection_size = attn_dim * args.num_attention_heads
+    ## Group Query Attention.
+    if args.group_query_attention:
+        kv_projection_size = args.num_query_groups / args.num_attention_heads * kv_projection_size
+    else:
+        attn_size = 1
+    attn_size = query_projection_size + 2 * kv_projection_size + output_projection_size
+    attn_multiplier = attn_size / 2 / args.hidden_size
+
+    # swiglu
+    gated_linear_multiplier = 3 / 2 if args.swiglu else 1
+
+    # MoE or Dense
+    num_experts = 0 if args.num_experts is None else args.num_experts
+    shared_expert_ffn_hidden_size = 0 if args.moe_shared_expert_intermediate_size else args.moe_shared_expert_intermediate_size
+    num_shared_expert = args.moe_shared_expert_intermediate_size // args.moe_ffn_hidden_size
+    num_moe_layer = 0 if args.moe_layer_freq is None else len(args.moe_layer_freq)
+    num_dense_layer = args.num_layers - num_moe_layer
+    mlp_multiplier_dense = num_dense_layer * args.ffn_hidden_size
+    mlp_multiplier_moe =  num_moe_layer * num_experts * args.moe_ffn_hidden_size 
+    mlp_multiplier_shared_expert = num_moe_layer * num_shared_expert * shared_expert_ffn_hidden_size
+    mlp_multiplier = (mlp_multiplier_dense + mlp_multiplier_moe + mlp_multiplier_shared_expert) /args.num_layers/args.hidden_size
+
+    num_parameters_in_transformer_layers = (
+        2
+        * args.num_layers
+        * args.hidden_size
+        * args.hidden_size
+        * (
+            # Attention.
+            attn_multiplier
+            # MLP.
+            # + ((args.ffn_hidden_size / args.hidden_size) * num_experts * gated_linear_multiplier)
+            + mlp_multiplier * gated_linear_multiplier
+            # Router
+            +  num_experts / args.hidden_size * 2
+            # Transformer layernorms.
+            + (2 / args.hidden_size)
+            # Final layernorm.
+            + (1 / (args.num_layers * args.hidden_size))
+        )
+    )
+
+    embedding_size = args.hidden_size * args.padded_vocab_size
+    if args.untie_embeddings_and_output_weights:
+        num_parameters_in_embedding_layers = 2 * embedding_size
+    else:
+        num_parameters_in_embedding_layers = embedding_size
+
+    # TODO; add MTP block and projection
+    num_parameters_in_mtp = 0
+
+    num_total_parameters = num_parameters_in_transformer_layers + num_parameters_in_embedding_layers + num_parameters_in_mtp
+    if verbose:
+        print(
+            f"Number of parameters in transformer layers in billions: "
+            f"{num_parameters_in_transformer_layers / 10**9: .2f}"
+        )
+        print(
+            f"Number of parameters in embedding layers in billions: "
+            f"{num_parameters_in_embedding_layers / 10**9:.2f}"
+        )
+        print(f"Total number of parameters in billions: {num_total_parameters / 10**9:.2f}")
+
+    # Most loaded model shard has (1/pp_size transformer layers + 1 embedding layer) / tp_size.
+    num_parameters_on_most_loaded_model_shard = (
+        (num_parameters_in_transformer_layers / args.pipeline_model_parallel_size) + embedding_size
+    ) / args.tensor_model_parallel_size
+    if args.untie_embeddings_and_output_weights and args.pipeline_model_parallel_size == 1:
+        num_parameters_on_most_loaded_model_shard += (
+            embedding_size / args.tensor_model_parallel_size
+        )
+    if verbose:
+        print(
+            f"Number of parameters in most loaded shard in billions: "
+            f"{num_parameters_on_most_loaded_model_shard / 10**9:.4f}"
+        )
+
+    if args.pipeline_model_parallel_size > 1:
+        # Other shards just have (1/pp_size transformer layers) / tp_size.
+        num_parameters_on_other_model_shards = num_parameters_in_transformer_layers / (
+            args.pipeline_model_parallel_size * args.tensor_model_parallel_size
+        )
+        if verbose:
+            print(
+                f"Number of parameters in other shards in billions: "
+                f"{num_parameters_on_other_model_shards / 10**9:.4f}"
+            )
+
+    num_bytes_per_parameter = (
+        18 if not args.use_distributed_optimizer else 6 + (12 / args.data_parallel_size)
+    )
+    weight_and_optimizer_memory = (
+        num_parameters_on_most_loaded_model_shard * num_bytes_per_parameter
+    )
+
+    return weight_and_optimizer_memory
+
+
+def compute_activation_memory(args, num_microbatches, verbose=False):
+    # Using formula in Table 2 of https://arxiv.org/pdf/2205.05198.pdf.
+    # We are trying to compute the maximum activation footprint, so all calculations in this
+    # function are for the first pipeline stage.
+
+    # TODO: This function needs to take into account query_projection_size potentially being
+    # different from hidden_size.
+
+    # Memory footprint from transformer layer (self-attention and MLP).
+    activation_memory = (args.seq_length * args.micro_batch_size * args.hidden_size) * (
+        18 + (4 * (args.ffn_hidden_size / args.hidden_size))
+    )
+    if verbose:
+        print(
+            f"Activation memory footprint per transformer layer: "
+            f"{activation_memory / NUM_BYTES_IN_MEGABYTE / args.tensor_model_parallel_size:.1f} MB"
+        )
+    activation_memory *= args.num_layers
+
+    # Now add activation memory required for input embeddings, last LayerNorm and output layer.
+
+    # Input to embedding (pp_size microbatches in flight).
+    activation_memory += (
+        8 * args.seq_length * args.micro_batch_size * args.pipeline_model_parallel_size
+    )
+    # Dropout in embedding layer (pp_size microbatches in flight).
+    activation_memory += (
+        args.seq_length
+        * args.micro_batch_size
+        * args.hidden_size
+        * args.pipeline_model_parallel_size
+    )
+
+    # Multiply by interleaved PP memory factor.
+    if args.virtual_pipeline_model_parallel_size is not None:
+        interleaved_schedule_memory_penalty = 1 + (
+            (args.pipeline_model_parallel_size - 1)
+            / (args.pipeline_model_parallel_size * args.virtual_pipeline_model_parallel_size)
+        )
+        in_flight_microbatches = math.ceil(
+            interleaved_schedule_memory_penalty * args.pipeline_model_parallel_size
+        )
+        if verbose:
+            print(
+                f"Memory penalty from interleaved schedule: {interleaved_schedule_memory_penalty:.2f}"
+            )
+            print(f"Number of in-flight microbatches: {in_flight_microbatches}")
+        activation_memory *= interleaved_schedule_memory_penalty
+
+    # If using non-interleaved schedule, number of microbatches in pipeline can be less than pp_size,
+    # so discount accordingly.
+    if args.virtual_pipeline_model_parallel_size is None and args.pipeline_model_parallel_size > 1:
+        if num_microbatches is not None:
+            activation_memory *= min(1, num_microbatches / args.pipeline_model_parallel_size)
+            in_flight_microbatches = min(num_microbatches, args.pipeline_model_parallel_size)
+        else:
+            in_flight_microbatches = args.pipeline_model_parallel_size
+        if verbose:
+            print(f"Number of in-flight microbatches: {in_flight_microbatches}")
+
+    if args.pipeline_model_parallel_size == 1:
+        # Inputs to output layer and CE loss.
+        activation_memory += (
+            args.seq_length
+            * args.micro_batch_size
+            * args.hidden_size
+            * 4
+            * (1 + (args.padded_vocab_size / args.hidden_size))
+        )
+
+    # Activation memory is partitioned by TP size due to tensor and sequence model parallelism.
+    return activation_memory / args.tensor_model_parallel_size
+
+
+def report_theoretical_memory(args, num_microbatches=None, verbose=False):
+    weight_and_optimizer_memory = (
+        compute_weight_and_optimizer_memory(args, verbose=verbose) / NUM_BYTES_IN_MEGABYTE
+    )
+
+    # Formulae here assume sequence parallelism and selective activation recomputation.
+    if not args.sequence_parallel or args.recompute_granularity != 'selective':
+        print(
+            f"Theoretical memory footprints: weight and optimizer={weight_and_optimizer_memory:.2f} MB"
+        )
+        return
+
+    activation_memory = (
+        compute_activation_memory(args, num_microbatches=num_microbatches, verbose=verbose)
+        / NUM_BYTES_IN_MEGABYTE
+    )
+    total_memory = weight_and_optimizer_memory + activation_memory
+
+    print(
+        f"Theoretical memory footprints: weight and optimizer={weight_and_optimizer_memory:.2f} MB, "
+        f"activation={activation_memory:.2f} MB, total={total_memory:.2f} MB\n"
+    )
+
+import megatron.training.theoretical_memory_usage
+megatron.training.theoretical_memory_usage.compute_weight_and_optimizer_memory = compute_weight_and_optimizer_memory
+megatron.training.theoretical_memory_usage.report_theoretical_memory = report_theoretical_memory
+megatron.training.theoretical_memory_usage.compute_activation_memory = compute_activation_memory
diff --git a/megatron-lm-musa-patch/cuda_patch/training.py b/megatron-lm-musa-patch/cuda_patch/training.py
new file mode 100644
index 000000000..40469292c
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/training.py
@@ -0,0 +1,813 @@
+from datetime import datetime
+
+import gc
+import os
+import sys
+import time
+import torch
+from megatron.core import mpu
+from megatron.core.transformer.moe.moe_utils import track_moe_metrics
+from megatron.core.transformer.moe.router import TopKRouter
+from megatron.training.global_vars import (
+    get_args,
+    get_timers,
+    get_tensorboard_writer,
+    get_wandb_writer,
+    get_one_logger
+)
+    # get_num_microbatches
+from megatron.core.num_microbatches_calculator import get_num_microbatches
+from megatron.training.utils import (
+    report_memory, 
+    print_rank_last
+)
+from megatron.core.utils import (
+    check_param_hashes_across_dp_replicas
+)
+from megatron.training.theoretical_memory_usage import report_theoretical_memory
+from megatron.training import one_logger_utils
+from megatron.training.initialize import write_args_to_tensorboard
+from megatron.core.distributed import finalize_model_grads
+from megatron.core.distributed import DistributedDataParallel as DDP
+from megatron.training.training import (
+    print_datetime, 
+    save_checkpoint_and_time,
+    train_step,
+    evaluate_and_print_results,
+    _TRAIN_START_TIME
+)
+from megatron.training.async_utils import maybe_finalize_async_save
+from megatron.core.num_microbatches_calculator import (
+    get_current_global_batch_size,
+    get_current_running_global_batch_size,
+    get_num_microbatches,
+    update_num_microbatches
+)
+from megatron.training.utils import (
+    calc_params_l2_norm,
+    check_adlr_autoresume_termination,
+    print_rank_0,
+    print_rank_last,
+    report_memory
+)
+from megatron.training import ft_integration
+from megatron.training.global_vars import (
+    get_args,
+    get_signal_handler,
+    get_timers,
+    get_tensorboard_writer,
+    get_wandb_writer,
+    get_one_logger
+)
+from .profiling import (
+    maybe_enable_profiling,
+    maybe_enable_memory_snapshot
+)
+from megatron.training.training import (
+    enable_forward_pre_hook,
+    disable_forward_pre_hook,
+    post_training_step_callbacks,
+    checkpoint_and_decide_exit
+)
+
+
+def throughput_calculator(args, elapsed_time_per_iter, consumed_tokens_per_iter): 
+    # training_time = elapsed_time
+    system_throughput = float(consumed_tokens_per_iter) / elapsed_time_per_iter
+    world_size = args.world_size
+    chip_throughput = system_throughput / world_size
+    # For 70B
+    # all_param_num = getattr(args, "all_param_num", None)
+    # assert all_param_num is not None, "please set all_param_num"
+    # MFU = chip_throughput * 6 * all_param_num * (1 + args.seq_length / (6 * args.hidden_size) ) / 98e12
+    # # tflops_throughput = chip_throughput / float(config.flops_16bit) * 1e12
+    # # logger.info("Throughput(token per chip per second): " + str(chip_throughput))
+    # # logger.info("MFU: " + str(MFU))
+    # # logger.info("Throughput(token per TFLOPS): " + str(tflops_throughput))
+    h = args.hidden_size
+    s = args.seq_length
+    N = 12 * args.num_layers * h **2
+    D = 1
+
+    attn_matmul = 2 * N * D
+    attn_sdp = N * D * (s / h)
+    mlp_matmul = 4 * N * D
+    # moe
+    if args.num_experts is None:
+        factor = 1
+    else:
+        factor = args.moe_router_topk
+    activated_dense_flops = attn_matmul + attn_sdp + mlp_matmul * factor
+    if args.num_experts is not None:
+        act_params = N + args.num_layers *(args.num_experts - 1) * 8 * h**2
+        if torch.distributed.get_rank() == 0:
+            print(f"N: {N} Act param: {act_params} Act flops: {activated_dense_flops}")
+    tflops =  chip_throughput *  activated_dense_flops
+    mfu = tflops / 98e12
+
+    return chip_throughput, mfu
+
+def num_floating_point_operations(args, batch_size):
+    # Attention projection size.
+    query_projection_size = args.kv_channels * args.num_attention_heads
+    query_projection_to_hidden_size_ratio = query_projection_size / args.hidden_size
+    # Group Query Attention.
+    if not args.group_query_attention:
+        args.num_query_groups = args.num_attention_heads
+    # MoE.
+    num_experts_routed_to = 1 if args.num_experts is None else args.moe_router_topk
+    gated_linear_multiplier = 3 / 2 if args.swiglu else 1
+    shared_expert_ffn_hidden_size = (
+        0
+        if args.moe_shared_expert_intermediate_size is None
+        else args.moe_shared_expert_intermediate_size
+    )
+    if not args.multi_latent_attention:
+        return (
+            12
+            * batch_size
+            * args.seq_length
+            * args.num_layers
+            * args.hidden_size
+            * args.hidden_size
+            * (
+                # Attention.
+                (
+                    (
+                        1
+                        + (args.num_query_groups / args.num_attention_heads)
+                        + (args.seq_length / args.hidden_size)
+                    ) * query_projection_to_hidden_size_ratio
+                )
+                # MLP.
+                + (
+                    (args.moe_ffn_hidden_size / args.hidden_size)
+                    * num_experts_routed_to
+                    * gated_linear_multiplier
+                )
+                # Shared Experts.
+                + ((shared_expert_ffn_hidden_size / args.hidden_size) * gated_linear_multiplier)
+                # Logit.
+                + (args.padded_vocab_size / (2 * args.num_layers * args.hidden_size))
+            )
+        )
+    else:
+        if args.q_lora_rank is None:
+            mla_flops_q = args.hidden_size * args.num_attention_heads * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+        else:
+            mla_flops_q = args.hidden_size * args.q_lora_rank +\
+                  args.q_lora_rank * args.num_attention_heads * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+        return (
+            6
+            * batch_size
+            * args.seq_length
+            * args.num_layers
+            * (
+                # MLA Attention.
+                (
+                    (
+                        mla_flops_q
+                        + args.hidden_size * (args.kv_lora_rank + args.qk_pos_emb_head_dim)
+                        + args.num_attention_heads * args.kv_lora_rank * (args.qk_head_dim + args.v_head_dim)
+                        + args.num_attention_heads * args.seq_length * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+                        + args.num_attention_heads * args.seq_length * args.v_head_dim
+                        + args.num_attention_heads * args.v_head_dim * args.hidden_size
+                    ) 
+                )
+                # Router
+                + args.hidden_size * args.num_experts
+                # MLP.
+                + (
+                    2 * args.hidden_size *  args.moe_ffn_hidden_size * num_experts_routed_to
+                    * gated_linear_multiplier
+                )
+                # Shared Experts.
+                + (2 * args.hidden_size * shared_expert_ffn_hidden_size * gated_linear_multiplier)
+                # Logit.
+                + (args.padded_vocab_size * args.hidden_size / args.num_layers)
+            )
+        )
+
+
+def update_e_score_correction_bias(model, micro_batch_num, ):
+    """ 
+    Decrease the bias term by gamma if its corresponding expert is overloaded, 
+    and increase it by gamma if its corresponding expert is underloaded.
+    """
+    for layer in model.modules():
+        if isinstance(layer, TopKRouter):
+            if layer.moe_noaux_gamma:
+                # allreduce tokens_per_expert
+                layer.tokens_per_expert /= micro_batch_num
+                torch.distributed.all_reduce(layer.tokens_per_expert, op=torch.distributed.ReduceOp.SUM)
+                layer.tokens_per_expert /= torch.distributed.get_world_size()
+                with torch.no_grad():
+                    update_value = torch.where(
+                        layer.tokens_per_expert > 1,
+                        -layer.moe_noaux_gamma, 
+                        layer.moe_noaux_gamma
+                    )
+                    layer.e_score_correction_bias += update_value
+                    layer.tokens_per_expert.zero_()  
+
+def training_log(loss_dict, total_loss_dict, learning_rate, decoupled_learning_rate, iteration,
+                 loss_scale, report_memory_flag, skipped_iter,
+                 grad_norm, params_norm, num_zeros_in_grad):
+    """Log training information such as losses, timing, ...."""
+    args = get_args()
+    timers = get_timers()
+    writer = get_tensorboard_writer()
+    wandb_writer = get_wandb_writer()
+    one_logger = get_one_logger()
+
+    # Advanced, skipped, and Nan iterations.
+    advanced_iters_key = 'advanced iterations'
+    skipped_iters_key = 'skipped iterations'
+    nan_iters_key = 'nan iterations'
+    # Advanced iterations.
+    if not skipped_iter:
+        total_loss_dict[advanced_iters_key] = total_loss_dict.get(
+            advanced_iters_key, 0) + 1
+    else:
+        if advanced_iters_key not in total_loss_dict:
+            total_loss_dict[advanced_iters_key] = 0
+    # Skipped iterations.
+    total_loss_dict[skipped_iters_key] = total_loss_dict.get(
+        skipped_iters_key, 0) + skipped_iter
+    # Update losses and set nan iterations
+    got_nan = False
+    for key in loss_dict:
+        if not skipped_iter:
+            total_loss_dict[key] = total_loss_dict.get(
+                key, torch.tensor([0.0], dtype=torch.float, device='cuda')) + loss_dict[key]
+        else:
+            value = loss_dict[key].float().sum().item()
+            is_nan = value == float('inf') or \
+                     value == -float('inf') or \
+                     value != value
+            got_nan = got_nan or is_nan
+    total_loss_dict[nan_iters_key] = total_loss_dict.get(
+        nan_iters_key, 0) + int(got_nan)
+
+    # Logging.
+    timers_to_log = [
+        'forward-backward',
+        'forward-compute',
+        'backward-compute',
+        'batch-generator',
+        'forward-recv',
+        'forward-send',
+        'backward-recv',
+        'backward-send',
+        'forward-send-forward-recv',
+        'forward-send-backward-recv',
+        'backward-send-forward-recv',
+        'backward-send-backward-recv',
+        'forward-backward-send-forward-backward-recv',
+        'layernorm-grads-all-reduce',
+        'embedding-grads-all-reduce',
+        'all-grads-sync',
+        'params-all-gather',
+        'optimizer-copy-to-main-grad',
+        'optimizer-unscale-and-check-inf',
+        'optimizer-clip-main-grad',
+        'optimizer-count-zeros',
+        'optimizer-inner-step',
+        'optimizer-copy-main-to-model-params',
+        'optimizer']
+
+    # Calculate batch size.
+    batch_size = args.micro_batch_size * args.data_parallel_size * \
+        get_num_microbatches()
+
+    # Track app tag & app tag ID
+    one_logger_utils.track_app_tag(batch_size, args.world_size, args.seq_length)
+
+    total_iterations = total_loss_dict[advanced_iters_key] + \
+                       total_loss_dict[skipped_iters_key]
+
+    # Tensorboard values.
+    # Timer requires all the ranks to call.
+    if args.log_timers_to_tensorboard and \
+       (iteration % args.tensorboard_log_interval == 0):
+        timers.write(timers_to_log, writer, iteration,
+                     normalizer=total_iterations)
+    if writer and (iteration % args.tensorboard_log_interval == 0):
+        if wandb_writer:
+            wandb_writer.log({'samples vs steps': args.consumed_train_samples},
+                             iteration)
+        writer.add_scalar('learning-rate', learning_rate, iteration)
+        if args.decoupled_lr is not None:
+            writer.add_scalar('decoupled-learning-rate', decoupled_learning_rate, iteration)
+        writer.add_scalar('learning-rate vs samples', learning_rate,
+                          args.consumed_train_samples)
+        if wandb_writer:
+            wandb_writer.log({'learning-rate': learning_rate}, iteration)
+        if args.skipped_train_samples > 0:
+            writer.add_scalar('skipped-train-samples', args.skipped_train_samples, iteration)
+            if wandb_writer:
+                wandb_writer.log({'skipped-train-samples': args.skipped_train_samples}, iteration)
+        writer.add_scalar('batch-size', batch_size, iteration)
+        writer.add_scalar('batch-size vs samples', batch_size,
+                          args.consumed_train_samples)
+        if wandb_writer:
+            wandb_writer.log({'batch-size': batch_size}, iteration)
+        for key in loss_dict:
+            writer.add_scalar(key , loss_dict[key], iteration)
+            writer.add_scalar(key + ' vs samples', loss_dict[key],
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({key: loss_dict[key]}, iteration)
+        if args.log_loss_scale_to_tensorboard:
+            writer.add_scalar('loss-scale', loss_scale, iteration)
+            writer.add_scalar('loss-scale vs samples', loss_scale,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'loss-scale': loss_scale}, iteration)
+        if args.log_world_size_to_tensorboard:
+            writer.add_scalar('world-size', args.world_size, iteration)
+            writer.add_scalar('world-size vs samples', args.world_size,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'world-size': args.world_size}, iteration)
+        if grad_norm is not None:
+            writer.add_scalar('grad-norm', grad_norm, iteration)
+            writer.add_scalar('grad-norm vs samples', grad_norm,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'grad-norm': grad_norm}, iteration)
+        if num_zeros_in_grad is not None:
+            writer.add_scalar('num-zeros', num_zeros_in_grad, iteration)
+            writer.add_scalar('num-zeros vs samples', num_zeros_in_grad,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'num-zeros': num_zeros_in_grad}, iteration)
+        if params_norm is not None:
+            writer.add_scalar('params-norm', params_norm, iteration)
+            writer.add_scalar('params-norm vs samples', params_norm,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'params-norm': params_norm}, iteration)
+        if args.log_memory_to_tensorboard:
+            mem_stats = torch.cuda.memory_stats()
+            writer.add_scalar(
+                "mem-reserved-bytes",
+                mem_stats["reserved_bytes.all.current"],
+                iteration,
+            )
+            writer.add_scalar(
+                "mem-allocated-bytes",
+                mem_stats["allocated_bytes.all.current"],
+                iteration,
+            )
+            writer.add_scalar(
+                "mem-allocated-count",
+                mem_stats["allocation.all.current"],
+                iteration,
+            )
+    if args.num_experts is not None:
+        moe_loss_scale = 1 / get_num_microbatches()
+        track_moe_metrics(moe_loss_scale, iteration, writer, wandb_writer, total_loss_dict, args.moe_per_layer_logging)
+
+    if iteration % args.log_interval == 0:
+        elapsed_time = timers('interval-time').elapsed(barrier=True)
+        elapsed_time_per_iteration = elapsed_time / total_iterations
+
+        throughput = num_floating_point_operations(args, batch_size) / (
+            elapsed_time_per_iteration * 10**12 * args.world_size)
+
+        one_logger_utils.track_e2e_metrics(args.log_throughput, throughput)
+
+        if args.log_timers_to_tensorboard:
+            if writer:
+                writer.add_scalar('iteration-time',
+                                  elapsed_time_per_iteration, iteration)
+            if wandb_writer:
+                wandb_writer.log({'iteration-time': elapsed_time_per_iteration},
+                                 iteration)
+        log_string = f" [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]"
+        log_string += ' iteration {:8d}/{:8d} |'.format(
+            iteration, args.train_iters)
+        # chip_throughput, mfu = throughput_calculator(args, elapsed_time_per_iteration, batch_size * args.seq_length)
+        # log_string += ' chip_throughput: {:.2f} /s |'.format(chip_throughput)
+        # log_string += ' mfu: {:.4f} |'.format(mfu)
+        log_string += ' consumed samples: {:12d} |'.format(
+            args.consumed_train_samples)
+        if args.skipped_train_samples > 0:
+            log_string += ' skipped samples: {:12d} |'.format(
+                args.skipped_train_samples)
+        log_string += ' elapsed time per iteration (ms): {:.1f} |'.format(
+            elapsed_time_per_iteration * 1000.0)
+        if args.log_throughput:
+            log_string += f' throughput per GPU (TFLOP/s/GPU): {throughput:.1f} |'
+            if args.log_timers_to_tensorboard:
+                if writer:
+                    writer.add_scalar('throughput', throughput, iteration)
+                if wandb_writer:
+                    wandb_writer.log({'throughput': throughput}, iteration)
+        assert learning_rate is not None
+        # Decoupled_learning_rate should be not None only on first and last pipeline stage.
+        log_string += ' learning rate: {:.6E} |'.format(learning_rate)
+        if args.decoupled_lr is not None and (mpu.is_pipeline_first_stage(ignore_virtual=True) or
+                                              mpu.is_pipeline_last_stage(ignore_virtual=True)):
+            assert decoupled_learning_rate is not None
+            log_string += ' decoupled learning rate: {:.6E} |'.format(decoupled_learning_rate)
+        else:
+            assert decoupled_learning_rate is None
+        log_string += ' global batch size: {:5d} |'.format(batch_size)
+        for key in total_loss_dict:
+            if key not in [advanced_iters_key, skipped_iters_key,
+                           nan_iters_key]:
+                avg = total_loss_dict[key].item() / \
+                      float(max(1, total_loss_dict[advanced_iters_key]))
+                if avg > 0.0:
+                    log_string += ' {}: {:.6E} |'.format(key, avg)
+                total_loss_dict[key] = torch.tensor([0.0], dtype=torch.float, device='cuda')
+        log_string += ' loss scale: {:.1f} |'.format(loss_scale)
+        if grad_norm is not None:
+            log_string += ' grad norm: {:.3f} |'.format(grad_norm)
+        if num_zeros_in_grad is not None:
+            log_string += ' num zeros: {:.1f} |'.format(num_zeros_in_grad)
+        if params_norm is not None:
+            log_string += ' params norm: {:.3f} |'.format(params_norm)
+        log_string += ' number of skipped iterations: {:3d} |'.format(
+            total_loss_dict[skipped_iters_key])
+        log_string += ' number of nan iterations: {:3d} |'.format(
+            total_loss_dict[nan_iters_key])
+        total_loss_dict[advanced_iters_key] = 0
+        total_loss_dict[skipped_iters_key] = 0
+        total_loss_dict[nan_iters_key] = 0
+        print_rank_last(log_string)
+        if report_memory_flag and learning_rate > 0.:
+            # Report memory after optimizer state has been initialized.
+            if torch.distributed.get_rank() == 0:
+                num_microbatches = get_num_microbatches()
+                report_theoretical_memory(args, num_microbatches=num_microbatches, verbose=True)
+            report_memory('(after {} iterations)'.format(iteration))
+            report_memory_flag = False
+        timers.log(timers_to_log, normalizer=args.log_interval)
+
+    return report_memory_flag
+
+def train(forward_step_func, model, optimizer, opt_param_scheduler,
+          train_data_iterator, valid_data_iterator,
+          process_non_loss_data_func, config, checkpointing_context, non_loss_data_func):
+    """Train the model function."""
+    args = get_args()
+    timers = get_timers()
+    one_logger = get_one_logger()
+
+    # Write args to tensorboard
+    write_args_to_tensorboard()
+
+    # Turn on training mode which enables dropout.
+    for model_module in model:
+        model_module.train()
+
+    # Tracking loss.
+    total_loss_dict = {}
+
+    # Iterations.
+    iteration = args.iteration
+
+    # Track E2E metrics at the start of training
+    one_logger_utils.on_train_start(iteration=iteration, consumed_train_samples=args.consumed_train_samples,
+                                    train_samples=args.train_samples, seq_length=args.seq_length,
+                                    train_iters=args.train_iters, save=args.save, async_save=args.async_save,
+                                    log_throughput=args.log_throughput,
+                                    num_floating_point_operations_so_far=args.num_floating_point_operations_so_far)
+
+    num_floating_point_operations_so_far = args.num_floating_point_operations_so_far
+
+    # Setup some training config params
+    config.grad_scale_func = optimizer.scale_loss
+    config.timers = timers
+    if isinstance(model[0], DDP) and args.overlap_grad_reduce:
+        assert config.no_sync_func is None, \
+            ('When overlap_grad_reduce is True, config.no_sync_func must be None; '
+             'a custom no_sync_func is not supported when overlapping grad-reduce')
+        config.no_sync_func = [model_chunk.no_sync for model_chunk in model]
+        if len(model) == 1:
+            config.no_sync_func = config.no_sync_func[0]
+        if args.align_grad_reduce:
+            config.grad_sync_func = [model_chunk.start_grad_sync for model_chunk in model]
+            if len(model) == 1:
+                config.grad_sync_func = config.grad_sync_func[0]
+    if args.overlap_param_gather and args.align_param_gather:
+        config.param_sync_func = [model_chunk.start_param_sync for model_chunk in model]
+        if len(model) == 1:
+            config.param_sync_func = config.param_sync_func[0]
+    config.finalize_model_grads_func = finalize_model_grads
+
+    timers('interval-time', log_level=0).start(barrier=True)
+    print_datetime('before the start of training step')
+    report_memory_flag = True
+    # exit = False
+    pre_hook_enabled = False 
+    should_exit = False
+    exit_code = 0
+    
+    if args.manual_gc:
+        # Disable the default garbage collector and perform the collection manually.
+        # This is to align the timing of garbage collection across ranks.
+        assert args.manual_gc_interval >= 0, \
+            'Manual garbage collection interval should be laerger than or equal to 0.'
+        gc.disable()
+        gc.collect()
+
+    # Singleton Initialization
+    if args.log_straggler:
+        global stimer
+        world = torch.distributed.get_world_size()
+        rank = torch.distributed.get_rank()
+        mmcnt = args.straggler_minmax_count
+        stimer.configure(world, rank,
+                mmcnt = mmcnt,
+                enabled = not args.disable_straggler_on_startup,
+                port = args.straggler_ctrlr_port)
+    # total_flops = 0.0
+    num_floating_point_operations_since_last_log_event = 0.0
+
+    num_microbatches = get_num_microbatches()
+    eval_duration = 0.0
+    eval_iterations = 0
+
+    def get_e2e_base_metrics():
+        """Get base metrics values for one-logger to calculate E2E tracking metrics.
+        """
+        return {
+            'iteration': iteration,
+            'train_duration': timers('interval-time').active_time(),
+            'eval_duration': eval_duration,
+            'eval_iterations': eval_iterations,
+            'total_flops': num_floating_point_operations_since_last_log_event,
+            'num_floating_point_operations_so_far': num_floating_point_operations_so_far,
+            'consumed_train_samples': args.consumed_train_samples,
+            'world_size': args.world_size,
+            'seq_length': args.seq_length
+        }
+    # Cache into one-logger for callback
+    if one_logger:
+        with one_logger.get_context_manager():
+            one_logger.store_set('get_e2e_base_metrics', get_e2e_base_metrics)
+
+    prof = None
+    if args.profile and torch.distributed.get_rank() in args.profile_ranks and args.use_pytorch_profiler:
+        prof = torch.profiler.profile(
+        schedule=torch.profiler.schedule(
+            wait=max(args.profile_step_start-1, 0),
+            warmup=1 if args.profile_step_start > 0 else 0,
+            active=args.profile_step_end-args.profile_step_start,
+            repeat=1),
+        on_trace_ready=torch.profiler.tensorboard_trace_handler(args.tensorboard_dir),
+        record_shapes=True,
+        with_stack=True)
+        prof.start()
+
+    start_iteration = iteration
+    # Disable forward pre-hook to start training to ensure that errors in checkpoint loading
+    # or random initialization don't propagate to all ranks in first all-gather (which is a
+    # no-op if things work correctly).
+    if args.use_distributed_optimizer and args.overlap_param_gather:
+        disable_forward_pre_hook(model, param_sync=False)
+        # Also remove param_sync_func temporarily so that sync calls made in
+        # `forward_backward_func` are no-ops.
+        param_sync_func = config.param_sync_func
+        config.param_sync_func = None
+        pre_hook_enabled = False
+    # Also, check weight hash across DP replicas to be very pedantic.
+    if args.check_weight_hash_across_dp_replicas_interval is not None:
+        assert check_param_hashes_across_dp_replicas(model, cross_check=True), \
+            "Parameter hashes not matching across DP replicas"
+        torch.distributed.barrier()
+        print_rank_0(f">>> Weight hashes match after {iteration} iterations...")
+        
+    with maybe_enable_profiling(
+        args, global_step=iteration
+    ) as torch_profiler:
+        while iteration < args.train_iters:
+            if args.profile and torch.distributed.get_rank() in args.profile_ranks:
+                if args.use_pytorch_profiler:
+                    prof.step()
+                elif iteration == args.profile_step_start:
+                    torch.cuda.cudart().cudaProfilerStart()
+                    torch.autograd.profiler.emit_nvtx(record_shapes=True).__enter__()
+
+            maybe_finalize_async_save(blocking=False)
+
+            # Update number of microbatches first without consistency check to decide if a
+            # checkpoint should be saved. If the number of microbatches is different
+            # from the previous iteration, save a checkpoint. Then run consistency check
+            # to make sure training configuration is still valid.
+            update_num_microbatches(args.consumed_train_samples, consistency_check=False, verbose=True)
+            if get_num_microbatches() != num_microbatches and iteration != 0:
+                assert get_num_microbatches() > num_microbatches, \
+                    "number of microbatches should be increasing due to batch size rampup ... %d -> %d." % (num_microbatches, get_num_microbatches())
+                if args.save is not None:
+                    save_checkpoint_and_time(iteration, model, optimizer,
+                                            opt_param_scheduler,
+                                            num_floating_point_operations_so_far,
+                                            checkpointing_context, train_data_iterator=train_data_iterator)
+            num_microbatches = get_num_microbatches()
+            update_num_microbatches(args.consumed_train_samples, consistency_check=True, verbose=True)
+
+            args.curr_iteration = iteration
+            loss_dict, skipped_iter, should_checkpoint, should_exit, exit_code, grad_norm, num_zeros_in_grad = \
+                train_step(forward_step_func,
+                        train_data_iterator,
+                        model,
+                        optimizer,
+                        opt_param_scheduler,
+                        config)
+            if config.moe_noaux_gamma:
+                update_e_score_correction_bias(model[0], num_microbatches)
+
+            if should_checkpoint:
+                save_checkpoint_and_time(iteration, model, optimizer,
+                                        opt_param_scheduler,
+                                        num_floating_point_operations_so_far,
+                                        checkpointing_context, train_data_iterator=train_data_iterator)
+            if should_exit:
+                break
+
+            # Enable forward pre-hooks after first set of forward and backward passes.
+            # When running in fp16, skip all NaN iterations until steady-state loss scaling value
+            # is reached.
+            if iteration == start_iteration:
+                if skipped_iter:
+                    # Only enable forward pre-hook after a training step has successfully run. Relevant
+                    # for fp16 codepath where first XX iterations are skipped until steady-state loss
+                    # scale value is reached.
+                    start_iteration = iteration + 1
+                else:
+                    # Enable forward pre-hook after training step has successfully run. All subsequent
+                    # forward passes will use the forward pre-hook / `param_sync_func` in
+                    # `forward_backward_func`.
+                    if args.use_distributed_optimizer and args.overlap_param_gather:
+                        enable_forward_pre_hook(model)
+                        config.param_sync_func = param_sync_func
+                        pre_hook_enabled = True
+                    
+            if torch_profiler:
+                torch_profiler.step()
+            iteration += 1
+            batch_size = mpu.get_data_parallel_world_size() * \
+                        args.micro_batch_size * \
+                        get_num_microbatches()
+            args.consumed_train_samples += batch_size
+            num_skipped_samples_in_batch = (get_current_global_batch_size() -
+                                            get_current_running_global_batch_size())
+            if args.decrease_batch_size_if_needed:
+                assert num_skipped_samples_in_batch >= 0
+            else:
+                assert num_skipped_samples_in_batch == 0
+            args.skipped_train_samples += num_skipped_samples_in_batch
+            num_floating_point_operations_in_batch = num_floating_point_operations(args, batch_size)
+            num_floating_point_operations_so_far += num_floating_point_operations_in_batch
+            num_floating_point_operations_since_last_log_event += num_floating_point_operations_in_batch
+
+            # # Send heartbeat to FT package and update timeouts.
+            # if args.enable_ft_package:
+            #     ft_client = ft_integration.get_rank_monitor_client(
+            #         ft_integration.StateMachineActions.TRAIN_HEARTBEAT)
+            #     if ft_client is not None:
+            #         ft_client.send_heartbeat()
+            #         # TODO we are always calculating timeouts in the current implementation
+            #         # if we want to rely on manually setup then we need to add additional argument
+            #         # to training and pass it here
+            #         if ft_integration.can_update_timeouts():
+            #             ft_integration.get_rank_monitor_client(
+            #                 ft_integration.StateMachineActions.UPDATE_TIMEOUT).calculate_and_set_timeouts()
+            #             print_rank_0(f'Updated FT timeouts. New values: \
+            #                 {ft_integration.get_rank_monitor_client().timeouts}')
+
+            # # Bring CPU and GPU back in sync if on right iteration.
+            # if (
+            #     args.train_sync_interval
+            #     and iteration % args.train_sync_interval == 0
+            # ):
+            #     torch.cuda.synchronize()
+
+            # Logging.
+            if not optimizer.is_stub_optimizer:
+                loss_scale = optimizer.get_loss_scale().item()
+            else:
+                loss_scale = 1.0
+            params_norm = None
+            if args.log_params_norm:
+                params_norm = calc_params_l2_norm(model)
+
+            learning_rate = None
+            decoupled_learning_rate = None
+            for param_group in optimizer.param_groups:
+                if param_group['is_decoupled_lr']:
+                    decoupled_learning_rate = param_group['lr']
+                else:
+                    learning_rate = param_group['lr']
+            report_memory_flag = training_log(loss_dict, total_loss_dict,
+                                            learning_rate,
+                                            decoupled_learning_rate,
+                                            iteration, loss_scale,
+                                            report_memory_flag, skipped_iter,
+                                            grad_norm, params_norm, num_zeros_in_grad)
+
+            # # StragglerDetector
+            # if iteration % args.log_interval == 0 and args.log_straggler:
+            #     stimer.report(total_flops, args.log_interval)
+            #     total_flops = 0.0
+
+            # if args.check_weight_hash_across_dp_replicas_interval is not None and \
+            #         iteration % args.check_weight_hash_across_dp_replicas_interval == 0:
+            #     if args.use_distributed_optimizer and args.overlap_param_gather:
+            #         optimizer.disable_pre_hook()
+            #     assert check_param_hashes_across_dp_replicas(model, cross_check=True), \
+            #         "Parameter hashes not matching across DP replicas"
+            #     torch.distributed.barrier()
+            #     print_rank_0(f">>> Weight hashes match after {iteration} iterations...")
+            #     if args.use_distributed_optimizer and args.overlap_param_gather:
+            #         optimizer.enable_pre_hook()
+
+            # # Autoresume
+            # if args.adlr_autoresume and \
+            # (iteration % args.adlr_autoresume_interval == 0):
+            #     check_adlr_autoresume_termination(iteration, model, optimizer,
+            #                                     opt_param_scheduler)
+
+            # Evaluation
+            if args.eval_interval and iteration % args.eval_interval == 0 and \
+                args.do_valid:
+                timers('interval-time').stop()
+                if args.use_distributed_optimizer and args.overlap_param_gather:
+                    disable_forward_pre_hook(model)
+                    pre_hook_enabled = False
+                if args.manual_gc and args.manual_gc_eval:
+                    # Collect all objects.
+                    gc.collect()
+                prefix = f'iteration {iteration}'
+                timers('eval-time', log_level=0).start(barrier=True)
+                evaluate_and_print_results(prefix, forward_step_func,
+                                        valid_data_iterator, model,
+                                        iteration, process_non_loss_data_func,
+                                        config, verbose=False, write_to_tensorboard=True,
+                                        non_loss_data_func=non_loss_data_func)
+                eval_duration += timers('eval-time').elapsed()
+                eval_iterations += args.eval_iters
+                timers('eval-time').stop()
+                one_logger_utils.track_e2e_metrics()
+
+                if args.manual_gc and args.manual_gc_eval:
+                    # Collect only the objects created and used in evaluation.
+                    gc.collect(generation=0)
+                if args.use_distributed_optimizer and args.overlap_param_gather:
+                    enable_forward_pre_hook(model)
+                    pre_hook_enabled = True
+                timers('interval-time', log_level=0).start(barrier=True)
+
+
+                if args.enable_ft_package and ft_integration.get_rank_monitor_client() is not None:
+                    ft_integration.get_rank_monitor_client(
+                        ft_integration.StateMachineActions.EVAL_HEARTBEAT).send_heartbeat()
+
+            # Miscellaneous post-training-step functions (e.g., FT heartbeats, GC).
+            # Some of these only happen at specific iterations.
+            post_training_step_callbacks(model, optimizer, opt_param_scheduler, iteration, prof,
+                                        num_floating_point_operations_since_last_log_event)
+
+            # Checkpoint and decide whether to exit.
+            should_exit = checkpoint_and_decide_exit(model, optimizer, opt_param_scheduler, iteration,
+                                                    num_floating_point_operations_so_far,
+                                                    checkpointing_context, train_data_iterator)
+            if should_exit:
+                break
+
+    one_logger_utils.track_e2e_metrics()
+
+    # Flush TensorBoard, WandB writers and one-logger.
+    writer = get_tensorboard_writer()
+    if writer:
+        writer.flush()
+
+    # Close out pre-hooks if using distributed optimizer and overlapped param gather.
+    if pre_hook_enabled:
+        disable_forward_pre_hook(model)
+
+    if args.enable_ft_package and ft_integration.get_rank_monitor_client() is not None:
+        ft_integration.get_rank_monitor_client().shutdown_workload_monitoring()
+
+    maybe_finalize_async_save(blocking=True)
+
+    # If any exit conditions (signal handler, duration, iterations) have been reached, exit.
+    if should_exit:
+        wandb_writer = get_wandb_writer()
+        if wandb_writer:
+            wandb_writer.finish()
+        sys.exit(exit_code)
+
+    return iteration, num_floating_point_operations_so_far
+
+import megatron.training
+megatron.training.training.training_log = training_log
+
+enable_profiler = int(os.getenv("ENABLE_PROFILER", 0))
+# if enable_profiler:
+megatron.training.training.train = train
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/cuda_patch/transformer_config.py b/megatron-lm-musa-patch/cuda_patch/transformer_config.py
new file mode 100644
index 000000000..15c418ddc
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/transformer_config.py
@@ -0,0 +1,718 @@
+
+from dataclasses import dataclass
+from typing import Callable, List, Optional, Tuple, Union
+
+import torch.nn.functional as F
+
+from megatron.core.transformer.enums import AttnBackend
+
+from megatron.core.model_parallel_config import ModelParallelConfig
+from megatron.core.utils import get_te_version, init_method_normal, is_te_min_version, scaled_init_method_normal
+
+
+@dataclass
+class TransformerConfig(ModelParallelConfig):
+    """Configuration object for megatron-core transformers.
+
+    The initialization function has an argument for each parameter,
+    including those in ModelParallelConfig.
+    """
+
+    ####################
+    # model architecture
+    ####################
+    num_layers: int = 0
+    """Number of transformer layers in a transformer block."""
+
+    first_pipeline_num_layers: int = None
+    """Number of transformer layers on first pipeline stage. 
+    None implies equal layer division across PP ranks."""
+
+    last_pipeline_num_layers: int = None
+    """Number of transformer layers on last pipeline stage. 
+    None implies equal layer division across PP ranks."""
+
+    hidden_size: int = 0
+    """Transformer hidden size."""
+
+    num_attention_heads: int = 0
+    """Number of transformer attention heads."""
+
+    attention_backend: AttnBackend = AttnBackend.auto
+    """Attention backend to run. By default we let transformer engine
+    decide the best backend to run (except in the case of local).
+    If attention backend is local we use the local pytorch implementation in mcore. 
+    Users can specify exact backend by changing this config. """
+
+    softmax_scale: float = None
+    """Softmax scale for attention scaling."""
+
+    num_query_groups: int = None
+    """Number of query groups for group query attention. If None, normal attention is used."""
+
+    ffn_hidden_size: int = None
+    """Transformer Feed-Forward Network hidden size. This is set to 4*hidden_size
+    if not provided."""
+
+    kv_channels: int = None
+    """Projection weights dimension in multi-head attention. This is set to hidden_size //
+    num_attention_heads if not provided."""
+
+    hidden_dropout: float = 0.1
+    """Dropout probability for transformer hidden state."""
+
+    attention_dropout: float = 0.1
+    """Post attention dropout probability."""
+
+    fp32_residual_connection: bool = False
+    """If true, move residual connections to fp32."""
+
+    # @jcasper should we keep this option?
+    apply_residual_connection_post_layernorm: bool = False
+    """If True, uses the original BERT residule connection ordering."""
+
+    layernorm_epsilon: float = 1e-5
+    """Epsilon value for any LayerNorm operations."""
+
+    layernorm_zero_centered_gamma: bool = False
+    """If set to True, the LayerNorm is adjusted to center the gamma values around 0. This improves
+    numerical stability."""
+
+    add_bias_linear: bool = True
+    """Include a bias term in all linear layers (QKV projections, after core attention, and two in
+    MLP layer)."""
+
+    add_qkv_bias: bool = False
+    """Add a bias term only for QKV projections."""
+
+    gated_linear_unit: bool = False
+    """Use a gated linear unit for the first linear layer in the MLP."""
+
+    activation_func: Callable = F.gelu
+    """Activation function to use for the non-linearity in the MLP."""
+
+    activation_func_fp8_input_store: bool = False
+    """Store the input of MLP activation function in FP8 for backprop to save memory.
+    The stored input is casted back to the original precision before backprop compuatation."""
+
+    num_moe_experts: int = None
+    """Number of experts to use for MoE layer. When set, it replaces MLP with MoE layer. Set to None
+    for no MoE."""
+
+    rotary_interleaved: bool = False
+    """True is rotate pairs of even and odd dimensions (RoFormer style), False is rotate pairs of
+    first half and second half (LLaMa style). Default to False."""
+
+    window_size: Optional[Tuple[int, int]] = None
+    """If not None, then will use sliding window attention. The size of the window is specified by
+    the numbers inside the tuple; -1 is special value meaning "infinite window size"."""
+
+    normalization: bool = "LayerNorm"
+    """Which norm to use for normalization layers, valid options are `LayerNorm` and `RMSNorm`."""
+
+    qk_layernorm: bool = False
+    """Whether to apply LayerNorm to the query and key embeddings."""
+
+    test_mode: bool = False
+    """Whether to run real-time tests."""
+
+    calculate_per_token_loss: bool = False
+    """Whether cross entropy loss is calculated over the actual number of non-padded tokens in the
+    global batch, versus the default behavior of assuming all tokens are non-padded."""
+
+    multi_latent_attention: bool = False
+    """Whether to use multi-latent attention."""
+
+    ####################
+    # initialization
+    ####################
+    init_method: Callable = None
+    """Method to initialize weights. Note that bias is always set to zero. Should be a function that
+    takes a single Tensor and initializes it. If None, will be set to
+    megatron.core.utils.init_method_normal(init_method_std) which is torch nn init normal with
+    mean=0.0 and std=init_method_std."""
+
+    output_layer_init_method: Callable = None
+    """Method to initialize weights of the output layer of both attention and MLP blocks. If None,
+    will be set to megatron.core.utils.scaled_init_method_normal(init_method_std) which is torch nn
+    init normal with mean=0.0 and std=init_method_std / math.sqrt(2.0 * num_layers)."""
+
+    init_method_std: float = 0.02
+    """Standard deviation of the zero mean normal for the default initialization method, not used if
+    init_method and output_layer_init_method are provided."""
+
+    ####################
+    # mixed-precision
+    ####################
+    apply_query_key_layer_scaling: bool = False
+    """If true, scale Q * K^T by 1 / layer-number. This improve numeric stability when training with
+    fp16."""
+
+    attention_softmax_in_fp32: bool = True
+    """If True, run attention masking and softmax in fp32. This should be True if
+    apply_query_key_layer_scaling is True."""
+
+    ####################
+    # fusion
+    ####################
+    bias_activation_fusion: bool = False
+    """If True, fuses bias addition and the activation function when possible."""
+
+    masked_softmax_fusion: bool = False
+    """If True, uses softmax fusion."""
+
+    persist_layer_norm: bool = False
+    """If True, uses the persistent fused layer norm kernel. This kernel only supports a fixed set
+    of hidden sizes."""
+
+    memory_efficient_layer_norm: bool = False
+    """If True, and using local layers (not from TransformerEngine), tells Apex to use the memory
+    efficient fused LayerNorm kernel. Ignored if not using LayerNorm."""
+
+    bias_dropout_fusion: bool = False  # TODO: this should be bias_dropout_add_fusion?
+    """If True, uses bias dropout fusion."""
+
+    apply_rope_fusion: bool = False
+    """If True, use fused RoPE kernel."""
+
+    ####################
+    # activation recomputation
+    ####################
+    recompute_granularity: str = None
+    """Determines which type of activation recompute to use.  Megatron-core supports 'selective'
+    activation checkpointing where only the memory intensive part of attention is checkpointed.
+    These memory intensive activations are also less compute intensive which makes activation
+    checkpointing more efficient for LLMs (20B+).  See Reducing Activation Recomputation in Large
+    Transformer Models (https://arxiv.org/abs/2205.05198) for more details.  'full' will checkpoint
+    the entire transformer layer.  If None, no recompute is performed and all activations are saved.
+    If set, must be 'selective' or 'full'. 'selective' always uses all layers.
+    """
+
+    recompute_method: str = None
+    """Determines which transformer layers will be recomputed. uniform will uniformly divide the
+    total number of transformer layers in a transformer block and recompute the input activation of
+    each divided chunk at the specified granularity.  block will recompute the input activations for
+    only a set number of transformer layers per pipeline stage.  The rest of the layers in the
+    pipeline stage will not have any activations recomputed.  If None, and recompute is enabled, all
+    layers will do recomputation. If set, must be 'uniform' or 'block'."""
+
+    recompute_num_layers: int = None
+    """When recompute_method is uniform, recompute_num_layers is the number of transformer layers in
+    each uniformly divided recompute unit.  When recompute_method is block, recompute_num_layers is
+    the number of transformer layers to recompute within each pipeline stage.  Must be None for
+    'selective' activation checkpointing."""
+
+    distribute_saved_activations: bool = None
+    """If True, distribute recomputed activations across the model parallel group."""
+
+    ####################
+    # fp8 related
+    ####################
+    fp8: str = None
+    """If set, enables the use of FP8 precision through Transformer Engine. There are 2 predefined
+    choices (1) 'e4m3' uniformly uses e4m3 for all FP8 tensors, (2) 'hybrid' uses e4m3 for all FP8
+    activation and weight tensors and e5m2 for all FP8 output activation gradient tensors."""
+
+    fp8_margin: int = 0
+    """Margin for the scaling factor computation."""
+
+    fp8_interval: int = 1
+    """DEPRECATED from TransformerEngine v1.8.0. This flag is ignored.
+    Controls how often the scaling factor is recomputed.
+    """
+
+    fp8_amax_history_len: int = 1
+    """The length of the amax history window used for scaling factor computation."""
+
+    fp8_amax_compute_algo: str = "most_recent"
+    """Algorithm used for choosing the `amax` value for the scaling factor computation. There are 2
+    predefined choices: `max` chooses the largest `amax` in the history window, while `most_recent`
+    always chooses the most recently seen value.
+
+    """
+
+    fp8_wgrad: bool = True
+    """When set to False, override FP8 config options and do the wgrad computation
+    in higher precision."""
+
+    fp8_dot_product_attention: bool = False
+    """When set to True, use the FP8 implementation of Dot Product Attention."""
+
+    fp8_multi_head_attention: bool = False
+    """When set to True, use the FP8 implementation of Multi Head Attention."""
+
+    tp_only_amax_red: bool = False
+    """When set to True, reduce the FP8 AMAX only in the TP or TP-CP domain"""
+
+    ####################
+    # MoE related
+    ####################
+    moe_shared_expert_intermediate_size: int = None
+    """Shared expert total ffn hidden size.
+    It should be equal to 'num_shared_experts * ffn_size_of_each_shared_expert' if
+    there are multiple shared experts.
+    None means no shared expert."""
+
+    moe_shared_expert_overlap: bool = False
+    """Enable overlapping between shared expert computations and dispatcher communications.
+    Without this, the shared epxerts execute after the routed experts."""
+
+    moe_layer_freq: int = 1
+    """Frequency between MoE layers and Dense layers. Accepts either:
+    - An integer N: Represents a 1:N ratio, meaning one expert layer for every N-1 dense layers.
+    - A string containing a Python list expression that defines a custom pattern, e.g.:
+    "([1]*3+[0]*1)*3" evaluates to [1,1,1,0,1,1,1,0,1,1,1,0]
+    where 1 indicates an expert layer and 0 indicates a dense layer."""
+
+    moe_ffn_hidden_size: int = None
+    """MoE Feed-Forward Network hidden size"""
+
+    moe_router_load_balancing_type: str = "aux_loss"
+    """The load balancing strategy for the router. "aux_loss" corresponds to the load balancing loss 
+    used in GShard and SwitchTransformer; "seq_aux_loss" corresponds to the loss used in DeepSeekV2, 
+    which computes the loss for each individual sample; "sinkhorn" corresponds to the balancing 
+    algorithm used in S-BASE, and "none" implies no load balancing. The default is "aux_loss"."""
+
+    moe_router_topk: int = 2
+    """Number of experts to route to for each token."""
+
+    moe_router_topk_limited_devices: int = None
+    """Number of expert parallel ranks to consider for each token during routing. Perform top-k
+    routing on a subset of expert parallel ranks by first selecting N ranks for each token, then
+    conducting top-k selection among experts on these devices. None means no device limitation."""
+
+    moe_router_num_node_group: int = None
+    """Number of node groups for MoE. If None, the number of node groups is equal to the number of  
+    expert model parallel groups/8."""
+
+    moe_noaux_gamma: float = None
+    """The gamma value for the noaux loss. Default is None, which means no noaux loss. Recommended set to 1e-3."""
+
+    moe_router_pre_softmax: bool = False
+    """Enable pre-softmax routing for MoE, which means softmax is before the top-k selection. 
+    By default, softmax is done after top-k."""
+
+    moe_router_use_sigmoid: bool = False
+    """Use sigmoid instead of softmax for routing scores."""
+
+    moe_router_norm_topk_prob: bool = False
+    """Normalize the top-k probabilities to sum to 1."""
+
+    moe_complementary_seq_aux_loss: bool = False
+    """Use complementary sequence aux loss for MoE."""
+
+    moe_router_topk_scaling_factor: float = None
+    """Scaling factor for routing score in top-k selection, only works when moe_router_pre_softmax 
+    enabled. Defaults to None, which means no scaling."""
+
+    moe_grouped_gemm: bool = False
+    """When there are multiple experts per rank, compress multiple local (potentially small) gemms
+    in a single kernel launch to improve the utilization and performance by leveraging the Grouped
+    GEMM feature introduced since CUTLASS 2.8 (https://github.com/fanshiqing/grouped_gemm).
+    """
+
+    moe_use_legacy_grouped_gemm: bool = False
+    """Use legacy GroupedMLP rather than TEGroupedMLP.
+    Note: The legacy one will be deprecated soon."""
+
+    moe_aux_loss_coeff: float = 0  # 1e-2 would be a good start value for load balance loss.
+    """Scaling coefficient for the aux loss. A starting value of 1e-2 is recommended."""
+
+    moe_device_level_aux_loss_coeff: float = None 
+    """Scaling coefficient for the device_level aux loss. """
+
+    moe_comm_aux_loss_coeff: float = None  
+    """Scaling coefficient for the comm aux loss. """
+
+    moe_z_loss_coeff: float = None  # 1e-3 would be a good start value for z-loss
+    """Scaling coefficient for the z-loss. A starting value of 1e-3 is recommended."""
+
+    moe_input_jitter_eps: float = None
+    """Add noise to the input tensor by applying jitter with a specified epsilon value."""
+
+    moe_token_dropping: bool = False  # TODO: Support token dropping.
+    """This feature involves selectively dropping and padding tokens for each expert to achieve a
+    specified capacity, similar to GShard, Switch-Transformer, and DeepSpeed-MoE. Note that this is
+    currently unsupported so should remain False."""
+
+    moe_token_dispatcher_type: str = "allgather"
+    """The type of token dispatcher to use. The default is 'allgather'.
+    Options are 'allgather' and 'alltoall'."""
+
+    moe_per_layer_logging: bool = False
+    """Enable per-layer logging for MoE, currently supports auxiliary loss and z loss."""
+
+    moe_expert_capacity_factor: float = None
+    """moe_expert_capacity_factor (float): The capacity factor for each expert, None means no token
+    will be dropped. The default is None."""
+
+    moe_device_level_capacity: bool = False
+    """moe_device_level_capacity (bool): Whether to consider the expert capacity 
+    of a group together. The default is False."""
+
+    moe_pad_expert_input_to_capacity: bool = False
+    """moe_pad_expert_input_to_capacity (bool): If True, pads the input for each expert to match
+    the expert capacity length, effective only after the moe_expert_capacity_factor is set. The
+    default setting is False."""
+
+    moe_token_drop_policy: str = 'probs'
+    """The policy to drop tokens. Can be either "probs" or "position". If "probs", the tokens with
+    the lowest probabilities will be dropped. If "position", tokens at the end of each batch will
+    be dropped.
+    """
+
+    moe_layer_recompute: bool = False
+    """Memory optimization: checkpointing moe_layer to save actiavtion memory."""
+
+    ##################
+    # Context Parallel
+    ##################
+    cp_comm_type: Union[str, List[str]] = None
+    """Inter-gpu communication type for context parallelism.
+    str: all layers share same communication type.
+    List[str]: each layer has its separate communication type.
+    cp_comm_type of each layer can be "p2p" or "all_gather" or "a2a" or "a2a+p2p".
+    "p2p": Exchange KV chunks with P2P communications in ring topology. P2P is async and can be
+    overlapped with attention compute.
+    "all_gather": All-gather to get full sequence of KV before attention. The all-gather is not
+    async, and cannot be overlapped.
+    "a2a": Like DeepSpeed Ulysses, scatter attention heads across the CP group, and gather to get
+    full sequence of QKV.
+    "a2a+p2p": A hierarchical implementation of context parallelism to attention. 
+    It uses A2A communications in low-level CP groups (e.g., via NVLink),
+    and P2P communications in high-level CP groups (e.g., via IBLink).
+    """
+
+    ####################
+    # miscellaneous
+    ####################
+    clone_scatter_output_in_embedding: bool = True
+    """When set to True, clone the output of scatter_to_sequence_parallel_region in embedding layer
+    to facilitate garbage collection of input."""
+
+    disable_parameter_transpose_cache: bool = False
+    """When set to true, the parameter transposes are not cached for subsequent iterations."""
+
+    enable_cuda_graph: bool = False
+    """When set to true, TransformerLayer layers are swapped with a CUDA graphed version."""
+
+    cuda_graph_retain_backward_graph: bool = False
+    """When set to true, cudagraph backward passes will be graph captured with 'retain_grad=True'
+    This may enable cudagraphs for certain modules that are not completely cudagraph safe. For 
+    more details, see: https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html."""
+
+    external_cuda_graph: bool = False
+    """When set to true, TransformerLayer layers are swapped with user provided CUDA graphs."""
+
+    config_logger_dir: str = ""
+    """When non-empty, dumps entry-point configs to config_logger_dir"""
+
+    flash_decode: bool = False
+    """ Use the optimized flash decoding kernel during inference. """
+
+    use_te_rng_tracker: bool = False
+    """ Whether to use the TE or MCore version of the RNG tracker. """
+
+    inference_rng_tracker: bool = False
+    """ Whether we should instantiate a separate RNG tracker for inference. """
+
+    def __post_init__(self):
+        """Python dataclass method that is used to modify attributes after initialization.
+        See https://docs.python.org/3/library/dataclasses.html#post-init-processing for more
+        details.
+        """
+        super().__post_init__()
+        if self.fp16 and self.bf16:
+            raise ValueError(
+                f'Only one of self.fp16: {self.fp16} and self.bf16 {self.bf16} should be True.'
+            )
+
+        if self.num_attention_heads % self.tensor_model_parallel_size != 0:
+            raise ValueError(
+                f"num_attention_heads ({self.num_attention_heads}) must be a multiple of "
+                f"tensor_model_parallel_size ({self.tensor_model_parallel_size})."
+            )
+
+        if self.ffn_hidden_size is None:
+            self.ffn_hidden_size = 4 * self.hidden_size
+
+        if self.kv_channels is None:
+            self.kv_channels = self.hidden_size // self.num_attention_heads
+
+        if self.num_query_groups is None:
+            self.num_query_groups = self.num_attention_heads
+
+        if self.num_query_groups % self.tensor_model_parallel_size != 0:
+            raise ValueError(
+                f"num_query_groups ({self.num_query_groups}) must be a multiple of "
+                f"tensor_model_parallel_size ({self.tensor_model_parallel_size})."
+            )
+
+        if self.apply_query_key_layer_scaling:
+            self.attention_softmax_in_fp32 = True
+
+        if self.expert_model_parallel_size > 1 and self.num_moe_experts is None:
+            raise ValueError('num_moe_experts must be non None to use expert-parallel.')
+
+        if self.num_moe_experts is not None and self.num_moe_experts <= 0:
+            raise ValueError('num_moe_experts must be non-negative.')
+
+        if self.moe_ffn_hidden_size is None:
+            self.moe_ffn_hidden_size = self.ffn_hidden_size
+
+        if self.moe_shared_expert_intermediate_size is not None:
+            if self.moe_shared_expert_intermediate_size <= 0:
+                raise ValueError(
+                    f'moe_shared_expert_intermediate_size must be '
+                    f'num_shared_experts * ffn_size_of_each_shared_expert, '
+                    f'but got {self.moe_shared_expert_intermediate_size}'
+                )
+            if self.moe_shared_expert_overlap and self.moe_token_dispatcher_type not in [
+                "alltoall"
+            ]:
+                raise ValueError(
+                    f'moe_shared_expert_overlap only works with alltoall token dispatcher.'
+                )
+
+        if self.moe_expert_capacity_factor is not None:
+            if self.moe_token_dispatcher_type not in ["alltoall", "alltoall_seq"]:
+                raise ValueError(
+                    'moe_expert_capacity_factor only works with alltoall token dispatcher'
+                )
+            if self.moe_expert_capacity_factor < 0:
+                self.moe_expert_capacity_factor = None
+            if self.moe_router_load_balancing_type not in ["aux_loss", "seq_aux_loss", "none"]:
+                raise ValueError(
+                    'moe_expert_capacity_factor only works with aux_loss or none load balancing'
+                )
+
+        if self.moe_pad_expert_input_to_capacity:
+            if self.moe_expert_capacity_factor is None:
+                raise ValueError(
+                    'moe_expert_capacity_factor must be set to use moe_pad_expert_input_to_capacity'
+                )
+
+        if self.cpu_offloading and (
+            self.cpu_offloading_num_layers < 0 or self.cpu_offloading_num_layers >= self.num_layers
+        ):
+            raise ValueError(
+                f'CPU offloading can be done only for layers less than {self.num_layers}'
+            )
+
+        if self.cpu_offloading and self.pipeline_model_parallel_size > 1:
+            raise ValueError(
+                'Currently there is no support for Pipeline parallelism with CPU offloading'
+            )
+
+        if self.cpu_offloading and self.recompute_granularity is not None:
+            raise ValueError(
+                'CPU offloading does not work when activation recomputation is enabled'
+            )
+
+        if self.recompute_granularity is not None:
+            if self.recompute_granularity not in ['full', 'selective']:
+                raise ValueError(
+                    f'When using recompute_granuarlity: {self.recompute_granularity} must be "full"'
+                    'or "selective".'
+                )
+
+            if self.recompute_method is not None:
+                if self.recompute_method not in ['block', 'uniform']:
+                    raise ValueError(
+                        f'recompute_method: {self.recompute_method} must be "block" or "uniform".'
+                    )
+            elif self.recompute_granularity != 'selective':
+                raise ValueError(
+                    f'Using recompute_granularity: {self.recompute_granularity} so '
+                    'recompute_method must be "block" or "uniform"'
+                )
+
+            if self.recompute_granularity != 'selective' and self.recompute_num_layers is None:
+                raise ValueError(
+                    f'When using recompute_granularity: {self.recompute_granularity} '
+                    'recompute_num_layers must be between '
+                    '1 and num_layers_per_pipeline_rank: '
+                    f'{self.num_layers // self.pipeline_model_parallel_size}'
+                )
+            elif (
+                self.recompute_granularity == 'selective' and self.recompute_num_layers is not None
+            ):
+                raise ValueError(
+                    f'When using recompute_granularity: {self.recompute_granularity} '
+                    'recompute_num_layers must be None.'
+                )
+
+            if self.distribute_saved_activations and self.sequence_parallel:
+                raise ValueError(
+                    f'distribute_saved_activations: {self.distribute_saved_activations} must be '
+                    f'false when sequence parallel is enabled: {self.sequence_parallel}'
+                )
+
+            if self.virtual_pipeline_model_parallel_size is not None:
+                if not self.num_layers % self.virtual_pipeline_model_parallel_size == 0:
+                    raise ValueError(
+                        f'num_layers: {self.num_layers} must be divisible by '
+                        f'virtual_model_parallel_size {self.virtual_pipeline_model_parallel_size}'
+                    )
+
+        if self.apply_query_key_layer_scaling:
+            self.attention_softmax_in_fp32 = True
+
+        if self.bias_activation_fusion:
+            if self.activation_func not in [F.gelu, F.silu]:
+                raise ValueError(
+                    "When bias_activation_fusion is True, activation function should be either "
+                    "gelu or swiglu"
+                )
+            if (
+                self.activation_func == F.gelu
+                and not self.gated_linear_unit
+                and not self.add_bias_linear
+            ):
+                raise ValueError(
+                    "When bias_activation_fusion is True, gated_linear_unit is False, "
+                    "and activation function is gelu, add_bias_linear must also be True."
+                )
+
+        if self.activation_func_fp8_input_store:
+            if self.activation_func != F.silu or not self.gated_linear_unit:
+                raise ValueError("Storing activation input in FP8 is supported only for SwiGLU.")
+
+        if self.apply_rope_fusion:
+            if self.rotary_interleaved:
+                raise ValueError("rotary_interleaved does not work with apply_rope_fusion.")
+
+            from megatron.core.models.common.embeddings.rope_utils import (
+                fused_apply_rotary_pos_emb,
+                fused_apply_rotary_pos_emb_thd,
+            )
+
+            if fused_apply_rotary_pos_emb is None and fused_apply_rotary_pos_emb_thd is None:
+                raise ValueError(
+                    "apply_rope_fusion is not available. Please install TE >= 1.4 or Apex."
+                )
+
+        if self.multi_latent_attention and self.rotary_interleaved:
+            raise ValueError("rotary_interleaved does not work with multi_latent_attention.")
+
+        if self.init_method is None:
+            self.init_method = init_method_normal(self.init_method_std)
+
+        if self.output_layer_init_method is None:
+            self.output_layer_init_method = scaled_init_method_normal(
+                self.init_method_std, self.num_layers
+            )
+
+        if (
+            self.moe_token_dispatcher_type == "alltoall_seq"
+            and self.tensor_model_parallel_size != self.expert_tensor_parallel_size
+        ):
+            raise ValueError(
+                "alltoall_seq dispatcher not support different TP size for MoE and Dense layer."
+            )
+
+        if self.num_moe_experts and self.fp8:
+            # TE version below 1.7.0 will raise Error when handle zeros tokens for expert
+            if not is_te_min_version("1.7.0.dev0"):
+                raise ValueError(
+                    "Only transformer-engine>=1.7.0 supports MoE FP8 training, "
+                    f"but your version is {get_te_version()}."
+                )
+
+            if self.moe_grouped_gemm and not is_te_min_version("1.11.0"):
+                raise ValueError(
+                    "Only transformer-engine>=1.11.0 supports FP8 grouped gemm, "
+                    f"but your version is {get_te_version()}."
+                )
+
+        if self.moe_router_topk_limited_devices:
+            if self.moe_router_topk_limited_devices > self.expert_model_parallel_size:
+                raise ValueError(
+                    f"moe_router_topk_limited_devices: {self.moe_router_topk_limited_devices} "
+                    f"must be smaller than expert_model_parallel_size "
+                    f"{self.expert_model_parallel_size}"
+                )
+
+        if self.flash_decode and self.fp8:
+            raise ValueError("FP8 inference is currently not support with flash decoding.")
+
+        if self.enable_cuda_graph:
+            if self.cpu_offloading:
+                raise ValueError("CUDA graphs not supported with CPU offloading.")
+            if self.recompute_granularity:
+                raise ValueError("CUDA graphs not supported with activation recomputation.")
+
+        if self.moe_token_dispatcher_type in ['allgather', 'alltoall_seq']:
+            if self.variable_seq_lengths is True:
+                raise ValueError(
+                    f"Token dispatcher type: {self.moe_token_dispatcher_type} does not support "
+                    f"variable sequence length, please use alltoall dispatcher instead."
+                )
+
+        if self.cp_comm_type is not None:
+            if isinstance(self.cp_comm_type, list):
+                assert len(self.cp_comm_type) == self.num_layers, (
+                    f"Length of cp_comm_type ({len(self.cp_comm_type)}) should equal to "
+                    f"the total number of transformer layers ({self.num_layers})!"
+                )
+            else:
+                assert isinstance(
+                    self.cp_comm_type, str
+                ), "Unsupported communication type for context parallelism!"
+
+
+@dataclass
+class MLATransformerConfig(TransformerConfig):
+    """Configuration object for megatron-core Multi-Latent Attention (MLA) transformers.
+
+    The initialization function has an argument for each parameter, including those in
+    ModelParallelConfig. Included YaRN RoPE parameters that is fused in MLA.
+    """
+
+    multi_latent_attention: bool = True
+    """Whether to use Multi-Latent Attention."""
+
+    q_lora_rank: int = 512
+    """Rank of Query tensor's low rank representation."""
+
+    kv_lora_rank: int = 512
+    """Rank of Key and Value tensors' low rank representation."""
+
+    qk_head_dim: int = 128
+    """Dimension of the head in the QK projection. q_head_dim = qk_head_dim + qk_pos_emb_head_dim"""
+
+    qk_pos_emb_head_dim: int = 64
+    """Dimension of the position embedding in the QK projection."""
+
+    v_head_dim: int = 128
+    """Dimension of the head in the V projection."""
+
+    rotary_base: float = 10000
+    """Rotary base for the rotary embeddings."""
+
+    rotary_scaling_factor: float = 40
+    """Rotary scaling factor for the rotary embeddings."""
+
+    normalization: str = "RMSNorm"
+    """Default normalization layer for MLA models is RMSNorm."""
+
+    max_position_embeddings: int = 163840
+    """Maximum position embeddings for the original model."""
+
+    beta_fast: float = 32
+    """Beta fast for YaRN RoPE."""
+
+    beta_slow: float = 1
+    """Beta slow for YaRN RoPE."""
+
+    mscale: float = 0.707
+    """Mscale for YaRN RoPE in Multi-Latent Attention."""
+
+    mscale_all_dim: float = 0.707
+    """Mscale all dimensions for YaRN RoPE in Multi-Latent Attention."""
+
+
+import megatron.core.transformer.transformer_config
+
+megatron.core.transformer.transformer_config.TransformerConfig = TransformerConfig
+megatron.core.transformer.transformer_config.MLATransformerConfig = MLATransformerConfig
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/__init__.py b/megatron-lm-musa-patch/musa_patch/__init__.py
new file mode 100644
index 000000000..24221ff08
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/__init__.py
@@ -0,0 +1,228 @@
+import os
+import sys
+import torch
+import torch.utils
+import torch.utils.data
+import torch_musa
+from contextlib import nullcontext
+
+def patch_before_import_megatron():
+    # Import fused_layer_norm before transformer_engine
+    from . import fused_layer_norm
+
+    from transformer_engine.pytorch.utils import get_device_compute_capability
+    def _get_device_compute_capability():
+        return (8, 0)
+    get_device_compute_capability = _get_device_compute_capability
+    from packaging.version import Version as PkgVersion
+    from transformer_engine.pytorch.attention import _flash_attn_version
+    _flash_attn_version = PkgVersion("2.5.0")
+    # Import other necessary modules to patch
+    # from . import transformer_config
+    from . import dot_product_attention
+    from . import checkpointing
+    from . import training
+    from . import linear_with_grad_accumulation_and_async_allreduce
+    from . import rotary_pos_embedding
+    from . import p2p_communication
+    from . import fused_bias_swiglu
+    if int(os.getenv("USE_MUSA_MOE", 0)):
+        from . import moe_utils
+        from . import router
+    from . import arguments
+    if int(os.getenv("USE_RECOMPUTE_VARIANCE", 0)):
+        from . import recomupte_variance
+    if int(os.getenv("USE_EPX", 0)):
+        from . import fault_tolerance_epx
+        from . import parallel_state
+    from . import optimizer
+    if int(os.getenv("ENABLE_D2H_IN_PERMUTATION", 0)):
+        from . import token_dispatcher
+
+    from . import core_pipeline_parallel_schedules
+    # Disable some unsupprted features
+    # set_jit_fusion_options
+    def set_jit_fusion_options():
+        pass
+    import megatron.training.initialize
+    megatron.training.training.set_jit_fusion_options = set_jit_fusion_options
+    megatron.training.initialize.set_jit_fusion_options = set_jit_fusion_options
+    # Disable fused_kernels
+    import megatron.legacy.fused_kernels
+    megatron.legacy.fused_kernels.load = lambda args : None
+    # Disable _compile_dependencies
+    def _compile_dependencies():
+        pass
+    megatron.training.initialize._compile_dependencies = _compile_dependencies
+
+
+def patch_after_import_torch():
+    # 1. Patch for torch.xxx
+    torch.cuda.is_available = torch.musa.is_available
+    torch.cuda.current_device = lambda : f'musa:{torch.musa.current_device()}'
+    torch.cuda.device_count = torch.musa.device_count
+    torch.cuda.set_device = torch.musa.set_device
+    torch.cuda.DoubleTensor = torch.musa.DoubleTensor
+    torch.cuda.FloatTensor = torch.musa.FloatTensor
+    torch.cuda.LongTensor = torch.musa.LongTensor
+    torch.cuda.HalfTensor = torch.musa.HalfTensor
+    torch.cuda.BFloat16Tensor = torch.musa.BFloat16Tensor
+    torch.cuda.IntTensor = torch.musa.IntTensor
+    torch.cuda.synchronize = torch.musa.synchronize
+    torch.cuda.get_rng_state = torch.musa.get_rng_state
+    torch.cuda.set_rng_state = torch.musa.set_rng_state
+    torch.cuda.random.get_rng_state = torch.musa.get_rng_state
+    torch.cuda.synchronize = torch.musa.synchronize
+    torch.cuda.empty_cache = torch.musa.empty_cache
+    torch.Tensor.cuda = torch.Tensor.musa
+    torch.cuda.manual_seed = torch.musa.manual_seed
+    torch.cuda.Event = torch.musa.Event
+    torch.cuda.Stream = torch.musa.Stream
+    torch.cuda.stream = torch.musa.stream
+    torch.cuda.get_device_properties = torch.musa.get_device_properties
+    # add torch.musa.current_devce() to activate torch.musa.default_generators
+    d = torch.musa.current_device()
+    torch.cuda.default_generators = torch.musa.default_generators
+    # torch.cuda.amp = torch.musa.amp
+    # Memory
+    torch.cuda.memory_allocated = torch.musa.memory_allocated
+    torch.cuda.max_memory_allocated = torch.musa.max_memory_allocated
+    torch.cuda.memory_reserved = torch.musa.memory_reserved
+    torch.cuda.max_memory_reserved = torch.musa.max_memory_reserved
+    torch.cuda.memory._record_memory_history = torch.musa.memory._record_memory_history
+    torch.cuda.memory._snapshot = torch.musa.memory._snapshot
+
+    # (yehua.zhang) replace lazy_call to avoid cpu memory leak,
+    # because failure of cuda init in lazy_call will cause endless operation of emplace back.
+    torch.cuda._lazy_call = torch.musa.core._lazy_init._lazy_call
+    torch.cuda._lazy_init = torch.musa.core._lazy_init._lazy_init
+
+    # 2.Patch for torch args related to cuda/musa
+    def hook_cuda_device(device):
+        if isinstance(device, str) and device.startswith("cuda"):
+            return device.replace("cuda", "musa")
+        if isinstance(device, torch.device) and device.type == "cuda":
+            return torch.device("musa", device.index)
+        return device
+
+    def maybe_hook_cuda_args(args, kwargs):
+        new_args = []
+        for arg in args:
+            new_args.append(hook_cuda_device(arg))
+        if "device" in kwargs:
+            v = kwargs["device"]
+            kwargs['device'] = hook_cuda_device(v)
+        return tuple(new_args), kwargs
+    
+    # retain torch.full reference
+    original_full = torch.full
+    # redeine torch.zeros
+    def patched_full(*args, **kwargs):
+        args, kwargs = maybe_hook_cuda_args(args, kwargs)
+        result = original_full(*args, **kwargs)
+        return result
+    torch.full = patched_full
+
+    # retain torch.tensor reference
+    original_tensor = torch.tensor
+    # redefine torch.tensor
+    def patched_tensor(*args, **kwargs):
+        if 'device' in kwargs and kwargs['device'] == 'cuda':
+            kwargs['device'] = 'musa'
+        result = original_tensor(*args, **kwargs)
+        return result
+    torch.tensor = patched_tensor
+
+    # redefine torch.Tensor type
+    orig_type = torch.Tensor.type
+    def musa_type(*args, **kwargs):
+        result = orig_type(*args, **kwargs)
+        if isinstance(result, str):
+            result = result.replace("musa", "cuda")
+        return result
+    torch.Tensor.type = musa_type
+
+    # retain torch.zeros reference
+    original_zeros = torch.zeros
+    # redeine torch.zeros
+    def patched_zeros(*args, **kwargs):
+        if 'device' in kwargs and kwargs['device'] == 'cuda':
+            kwargs['device'] = 'musa'
+        result = original_zeros(*args, **kwargs)
+        return result
+    torch.zeros = patched_zeros
+
+    # retain torch.empty reference
+    original_empty = torch.empty
+    # redifine torch.empty
+    def patched_empty(*args, **kwargs):
+        if 'device' in kwargs and kwargs['device'] == 'cuda':
+            kwargs['device'] = 'musa'
+        result = original_empty(*args, **kwargs)
+        return result
+    torch.empty = patched_empty
+
+    # Original tensor class
+    original_is_cuda = torch.Tensor.is_cuda
+    def always_cuda(self):
+        return self.is_musa
+
+    # TODO : this patch may be override by transformer_engine patch
+    # we'd better unify this patch with transformer_engine patch.
+    torch.Tensor.is_cuda = property(always_cuda)
+
+    # 3. Patch for nccl/mccl
+    origin_init_process_group = torch.distributed.init_process_group
+    def patched_init_process_group(*args, **kwargs):
+        if 'backend' in kwargs and kwargs['backend'] == 'nccl':
+            kwargs['backend'] = 'mccl'
+        result = origin_init_process_group(*args, **kwargs)
+        return result
+    torch.distributed.init_process_group = patched_init_process_group
+
+    # 3. disable pin memory
+    # def pin_memory(data, device=None):
+    #     return data
+    # torch.utils.data._utils.pin_memory.pin_memory = pin_memory
+
+    # 4. disable nvtx
+    def _pass_pvtx(*args, **kwargs):
+        return
+    torch.cuda.nvtx.range_push = _pass_pvtx
+    torch.cuda.nvtx.range_pop = _pass_pvtx
+
+    # 5. disable dynamo
+    import os
+    os.environ["NVTE_TORCH_COMPILE"] = "0"
+    os.environ["TORCHDYNAMO_DISABLE"] = "1"
+
+    def noop(func):
+        return func
+    torch.compile = noop
+    torch.jit.script = noop
+
+    def get_device_capability_musa():
+        return [8, 3]
+    torch.cuda.get_device_capability = get_device_capability_musa
+
+def py_patch():
+    if sys.version_info >= (3.9, 0):
+        return
+    import math
+    def lcm(a, b):
+        return abs(a * b) // math.gcd(a, b)
+    math.lcm = lcm
+    return
+
+# Apply patch
+py_patch()
+
+patch_after_import_torch()
+
+if os.getenv("ENABLE_ZERO_BUBBLE", "0") == "1":
+    from .import zbb_light
+    zbb_light.patch_megatron()
+
+patch_before_import_megatron()
+
+
diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/__init__.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..41daf73e6831ddc75800d9fff670d29e10181108
GIT binary patch
literal 7144
zcmbVRNpRf86-8q<%*qirt+c4c%h(oW%S#el<yf-lvQieMXmK1RsWvzb4gq0+NdrTP
ztU;wxQkA3}eDcjnip)|j-Ezw%Ip>l?4mtHTC!c-GDepHh!y#=_j)#SZ-@h09{{8#+
z@6WJauNe3h|9Ww?H*XmKp~CntkHWinqE7+B5X?7jr*C$f>9Tp-)bCvO&S&q!?E?6w
zU+k7{mzW`PBLBd+ZHa;?;$0RcVc}hID)$X$IAx8-W>u6$Wy=)RJEpuSYNGDfy7k+2
zw5V@3wy32=Ed{$_v>IPRCS$3^R5j@Peme|e=U&_<=J0n2L;=rxc%si3robSQ(Paq@
z0+D>Pn@bpIEmmR<%!Gko^7Gw7lGAN0nnIFi#vmuk_gRw17!{0RB?S^hR6&=MqNZ!0
zD+x`PL3E>AO)O0}K-ZG8rYAtxlZvLBpc_e*8SzBi+&mx-h}@QWpUF?qe-d?*Nlmw#
z0zH*L4d73Mo=zI0J~LUL7<IF#n@J`{bqBM$N2oi5y4j?u$2bi7U~)jyM?fD+CP#ga
zW_^B(KF3gZIGNJz=0G1wra?a=jz2IGd{-F$(PVZoGnn-%UWFgas5yR2*FBTWig|J3
zfr0wt-aJ1cPKs0Ld2n!0_n6}+g@J`Uz4RrP#=t^0SNf47xNomJk_Vye%B*6p<HTGz
zYi`@&?XcVH$9UU4d)f8fczws3V<arDfq}8+WWU;2%%zt3rG=6n@rfZzM33OVm(Q+-
zUFWQDqxkHq9ZEYm`@U~?ZnSORIoowQb}Yl-jNd)e?ML>Ro*lPW&l1T~l5;n3W6l?P
z>*^W4udoe#_$w2TXB(GvZ@%oTgwo+|w-?Ho55Kl>-VgEl=$(cA2ZY{AA2~8|!vN$I
zU-9i|mD_O~@U@h^Q8>5o#=<M8oe^QodomRLc1%s2AWpm0+pA9dPA_!92s&tK#nQ%{
zH2tdY297QHT{m9k9cc@0x7+=0-?ynZw*xSu^`Omd-<J-?b}+!S3}aia^IjNnr@QP3
zkq&mCcdkck*zE^yTMvN72hxRKcI}8qcioQPSG8L=7WtK1H!koiR~ONw+zlPxk6k}P
zp(sO`fF!mpJN+)^5vf_~aeeW<t5>ewy1B?dx^VsSg{AkX@1%6_#eNS~vt~=z4%&_?
zQR~HPAESC|#qRqtk3-+V!o$Rz-aW7zJzHW%j?bgmj%iNiuot^scf*nD@Z!>iiytoX
zOXoh|mzVgp#p_pY-Mnz~@>Oz3%{aW{1RU0+7g!5A-=;P0xjl!p3A-7N4b6+b??iiA
z@mJc4VbD+5(zeNtQDoO@Ho_M1V1!U5tqO@62GJR^b8_+<=f9n?ee*DF+ET+G(Zek!
zPoN-A63}kK<nvgOXt#9MdEf3X3;Uhd(J0d9Z)_}lJBfx}_f*g>8OFY?H@H^MjP@I@
z@4$`poIp51+jXKhNp7v3x4)e%-#AL^lrkhOlA6b^2_o#~E*zK>bg<HJ32`Xfs|(t8
zB^^iVK+kU9u~FMu$hN4g694o*-AB7s)=20&0r?U+LC_>PKrl%#1yDI`W@UzvD#9T-
z!J3?*s#$`A1cwQZ5*#C#BREbl4^YQOerV_k7RblBwomqdikeim8ES6S+=sVpuP>xK
z`i>(5$A<_hSJij2^L}Ux`5Xpo9nu=q`jKTl`n5Zq%&&dhDgR$HOy^(?<<?S+nU1!a
zWBXYJNg2HlsF^j>VtKR1YRqD_9KDBs&5WY=IE@}T%dD^pv&;rPrX*wBVdJ#Mx$KGl
zhD{S29`j6Kj+;21%?HHE@x102G)>67qNWL%SJE^g^DIphGOw&@LgrO8O~|~erU{u>
z(=;LT>Y65GUPIG_%$v|OVaE5GJgph;aX_~sob(tW&*>ghnor2QX-yL{Z${IE%$wCT
zA@dGunviYgw~Qp!$sx@pWZq#-6Eg3JrU{vMRMUjaJEmzu=FNG}P|2I)^rrIhtW0m_
z&3h-jlf>bKY59aMpFo&{sP?h(&{$zQgtQ*h+)h0%JY)|GE2fTet%ME0<)=_{`f>4L
z5p5CWKCmd<1phSnlistB&4(sxs-lLP+<>$*$)5#2_qg=1gqpf&pe8@SYV+s7fBtd)
zVIKSm(FDIRz{>OI^;j<?MTC-*2(?OaYf!qM>iY%Mz39F4IQKAzUQ=Qky{rM*!i)SR
zF(YQtzC6%Y;l0eyjHm^15P{y=q#_OtD&8yN@OeWV(bQ2;$HW}^RR^#a{wkq&j=z?L
zh_yj#Kd<XBZ+>Zqal@{)aqBpZ+?OCR*`~Q=d~W>CL|kYtZ4@ZRdaIRF1?@vsp317x
z?n{XyKZ^**HtopY%V#m-J9zY2(=;|-On0)qg0Nv2X{CO76lRUincZg{xppn)2Owf&
zV8racDVqah6T5JWX(~tiaSLMW`n*>_i<1MxD+-3Y%*i;vSr8`5C2BLEus64)^6kE`
z<@Yga%YrwJ+yIdV1t+;Ema2k+j1dmStEwcOo^Q7u`8_mN#WWOF`FOqOsDg{*3;~P$
zA?n7Ip*>i0H4N`?`c9@T2aO^+@}}XDW?6$F4n6mD<?J4&O=tM<M~50cbnHZz038Fy
zZCo;bQHCj-o5myDp6)|c%=jhlPXo4wGiSgAJ8UF*)aCDkC)jx?c7XfOfUTtKuV>UU
zRnhLznGGxG_k5>Skf-qtRlIYTLJegF&Rwpl98j?}sNy0Tq^i(bnC{x^%MRb31U2_b
zS~^1W@Y+p0@ZI>^c=PGn_@?1@SU0(CG8;Niqj>;kX$)XCKQ|L2VUO6ra8dpf`;?Iz
zxG@$&J;~|m$wl-+pzB14O<ShCOvQRAU4#v`k0=kZ_Q>2-P0NhC6Y=k%X;cI>(&f$K
zto>|%y!)OL`Dy`UX3N(|mrt0m?uN*v%SV&kIjtx8rPM6nLRW3+sn9<{5wYULXg&x~
zqEL>_2+=n#S(s5;^J{eYiq>)(%cPC=m8UP$&LQ@kSM&nL-6=bEv8i|YB+OTzwOeMo
zP}sNWJZMI(oO~NEd7gmWjm#!iripRdo?}xg>l-66e}kqG&8C3>phjEprKitk)O*i~
z$R!ftDuFhQOqj+<%ZS{<EH>BsqCV7+uK0{PUI%QPeY!L|dVY6_oNg~(AJfrDB3<$O
z?;?@zx#xvNZwxqMxL|#4ffbhAh?8>Z@)9}zN-ECw=BnEMU3)#!Ui1q{q|cNh+eq^O
ze7}7))^mRywem}<w2W&3`MG@1Zu>awfIAlQaJrCbvH{olwi89Tkca)=m<EpwS4O8K
zcC`A-NS)bba6i%a9%jc(=p3K}lhfF{E`#Q_C)=&l3U0s<zPA?N`#bfl05)EJy4h`a
z)0rH_UQv@vAK|)x^Xm2YKHzluzx?5%Vy~(x&AIf`r3+WC@=KR*&~<%ps~~4h$FjBw
zEi75XN<V1tmOLMXVecO!nV);Q%+z6r&d}K)z3HHWHX;QN9Xj*iT*z^MnFEY{Sli;Z
zK^_^;Fpbh++J^s$j@mvgHoWogx5#@B)Oth58rs*X8g_`iX1l(<j2wyf<v+lORBe=#
z>*KCjq1-_hn$#|ZeYCx)-MXs2kBeTM6)GQwL1##RVEZc>-MFY*z4~TWE?*9YU8<B`
zT15&DcTZI(p=HoX(=w_~U)?SiaRV1&S5>teK$Z}Ph$?17R=al4$LSe44x)+0H3X5W
zcq5jM-Bm@zT=bq9(+PGDJa~*uftnOfnkMQv0n$W>9V6B3I^7UCE@X+2s*5ou0*!mf
z;O*j0WE>pkj$A{tsj+4wW-)E0W;vy+q!^B~ilijIqRKo9>|V4Q#t0mdOi~qON;lTE
zHyF}L7{YN-5TJ^2dZfNf3suk#UKO-bw8Nv2P+8do*Hx8LpVD1MT1}|Que%QTBy3ex
zfp$B{UiG6@RnF+JCts#-l#pX^u|}#yDO#jjR1Wzl=(R1~Uc5uE+qv6TT`?iApuhYv
z!A*jX2tEd==IH2x1?p(|XH@qIflWYPmK_3@fc8ksO2a>jm?Uj6seRK=i29J=8o@0B
zeFz@fYX{TO9z6iyg0DlvuVdqD{0g<rQUFbamCZat%UrEgtTfDGzL=|-#RAIADx~y~
zgWxmcTUG^$0V|g#2Z~57SV%C)&mqVTFG60I`~*D_>4EM~xNa0=i7s3M|CsU3>~cyM
zRV#sqdt`9r?cr$($cT4d)4z##wJ+7MBd#YOHHz!$pDA>?8L(;NK6_+rB8DBXE%V6G
zYa&q3*~^j2b=m?nvlUx@0w>zF<JHucX?5rPcK6>TGL3$SZOrtLB&JwzJK>EMtvoJ4
z>yfHu2{KqY(rR1iBL4tDh)=I{*iEAJ*w%2Ye}NU%02KsR6xSEcJd=M0LrrFx+uMuR
zukwqxF5*~_%QS)@AZ5bymp7J|x$kyX<JLrKV}GPtefz4W_eP!1qg3xGxwjzf*j5$I
z(au;^vj0l??y{um>Ku<=NiB=i+1cl*;tK#}oS}!&e*ktL0O=IZcagsLop)&Yqmuy3
bpsP#z2fH$@bH=Z%*<z(=HerhvtC;@-_RvE%

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/arguments.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/arguments.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..57434a9bf7c31ae1727784f2cdd0217da227c982
GIT binary patch
literal 11113
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
Fe*uC5if{k`

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/checkpointing.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/checkpointing.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..e8ca1a545a66367a8750600397a24e8c7060ec3b
GIT binary patch
literal 1959
zcmb7F&2J+$6dz9}lbOkPD};)=v<qAY(dG&gV%hDs7f^)MN@y!2%N;w(wDTp~?Y7lq
zg%mi#fh$6SBNBK17hgH?7r?Gy;n|ZkX;&O@G;f|g&+k3|{C+QayB%0C++QC}zHV98
zZ+fyi>M;2j9`P**YEhI}$NFt2D7BAmWckSaYFg43b!h!7bX@ZrFt5=z^{5YXht-+&
zqe}y7{bbM3af3DZKJ#dEhEV0zKMq)p1*gr^7OpX8t~v9y=FM6YI}{y49*0)g`5khy
zh9Oekm`P0dSR6!My*3}~@YcuMgGYP^;<`f-q;92X+J(Scw?XeA>vJpHbSzoBdKX#K
zKC-TR(xEk3FZ(m}z4Zemt!<t_veW*vKD8hPqdi4WE$Pmz=~}sV+TagBdg4LZEv*uj
zc3GpS?95z!$V02_EmvptYAtkz96@Gqh^`<P3`Y|dofUbU$rl@OTI5`Aj}js#7*;_g
zal+_!=&KKC!t)EpcO@rrrr$Y_CcAUn8z;Ld8xzU%4AWRh<Am2Bo*Mkm{mS3Jj94M#
zJX7_8Lw>3zB<Hqvws9_)3Bco%bIB;q!7z=l8CUHr$L3&WDO^{6EEy-2pERc|QU20;
z9aLNpPEsrY33{G@i+8f~6pxY|Hf3XMuz>(`CjyHcj|f+<Es@h^QJzV5DOJ0O3zh&v
zn3L>GHQ6QXl=F#XnaFuH>E9UY_(=kZb?3%63+ovG3Ht?L$+8MgwQg<zQz8kj&X#lK
zkKk((gOS=QI4gJ_F(DwUGzAwz5~%@;BpzjIbAA;SPRnB$MAhs6@l_$F99{E2TYL*H
z;l*$;$x}Aa_dJ-89F99UNXYmwA_*HT%3vo+chYk~b_yb+$v~@sw^o;N0lwYh%9Ke1
z9E-O=*nSK3?2f&LI>`Ide(5?b<RJ&y$b0EI4)Xq~%F2OjqDPSjTNa}O$_)#DfyoLB
zy%iSvcUTy#urPRqg~79cI);UyX%<p6Z5k%F$`&y3F-T85F1-ckN@rI8!k#v#?Xp?6
zM>g=$Uw$j=rCT;={TuJLP3SK9sgJh8Pwv23Lfg={;&6>`z!L9+P;ZE{xWHzM%&{qS
zOftia(C50Xa*Zo@wa_qgjT!f~(468LGTsCcc6eLs8b_|%oAQiXxO?RS1)++TarxWY
z;HIMPq<p8M?tJC<^j;M6H+7_*7P_!1v8^?ov3|t+AZ#ds)sk==7qv`D*iaTw7=L+P
z=Z{KX$l$r>8!xKAKYaM;(|!E#@X2rw?|t&w(e;{XUfZV8v5cHRrwfCj83!Q4I=>HL
zkA}m8u&wM|sC$d5u9~2(+i{YgkOW^4E-Dyxv#TQ3bkB0(pMqr<s$T`bL|kQ2)fP4W
zYU@>(w}_#<g@N)6?;)sa-!fSN&A_*<{dyll2|zddNH=@&9th8B*|xg?#zw(&dsEMX
SzkBzAPw)%u0G<wV{`?ow0wKTv

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/core_pipeline_parallel_schedules.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/core_pipeline_parallel_schedules.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..1ce46b4d56c17bbb4c3eb47b44d3e2b178147ac0
GIT binary patch
literal 1492
zcmZ`(&2Aev5GMCW-d(ROIjMuDC{h&7MJ;Th=rst^6gJQxP>bkLR2PC?Qqn4`<$|Q*
zq}ZNhpgy(N9&Ml(KSAGx*PeRMsfVUBYfDzrmc$Hab~(eDZ-!Luc0ypZet$fD(jw#!
zR5nKl$|E52D=<L>Ey(C<r6bzt-pFfKf8+~K_@`tPNIDB=t=ZNr8pUfl8EwlT4q|#m
zA`zizozf*8MKTauB041?Co+}fye(ouE<Dh8<c@wKqm>sH$z&}jf({{~A?a=Z3DJ>3
zMsc|w9;^Y74`e<7X304{BNy~1GNytG?=)J{A8C#D{vd-5>w%^b&__V#5im<;^xQim
zGyj7A(xK#x)FdZ0{f+)izat(162M&glnlw|#N0ihl;HdxNWiyCI_L#1v`S}F7gbt~
z^FnIZ(K1t7u<@eIY_3WdF;?=qWUS}8fa{5It>-7WUQ!p}u1oS4?@!fS_C;=Nf6A5S
zW&fz)lVQdS*`Lb^w_26^#e9FhFnqt_Hk<ZQWLF{_C|Q+PvdBvixaLJ63udyZ6pKQd
zgX)!wN_o-*g&-Jc3)1ycdjHK2pS=?>6PN&pybc}|3L-EM4_3C2Lfj;#RAF3rqIqR{
zp2l|5ZDiZXVq_^WclUpNZ^7>-iiqyeAkbaVk1{k`4V2O6S3u?-Fbf5$Y3<d19n@jn
zs<-N>j_ah}UZz8$vA{j*_LR;idC3blRvK^?%vf3VQn$OQH%Pd);Fh!8$|hYG&Xtgb
z>z0c-o9CHU#|X4EF3rnoVVRYsQQF;FIcls803}^3Q{_0HxV=mP^qFO)Dp{e7VYtbC
z3~sXLmC8%YIJCtJj;&!fPI0$$!^XKbcJt${Y@xLTqnmKto-8wnQ#W<O^(D8qyh6T#
zzd=4-1&P_ehY)@U%<Fjczi04TBgPrN4Xc4NHcC?gEYM~Jmf;QNch;C6^9-B&8uU=#
z0V~&53%iNmTPmAqE?m+;&+My8>i5Cs-E`V-IsO86G|l6A2@T%pPw<q^;o!^1PY>C*
z&%QbO`sv}bUU)Qs+3Pq@85gZ?k={Y~J~B+n1$cSf?!Ru2i`UnuK}PSQ37(|!32{Eu
z(zPZMn&O4)$dVryaP_WVfsOEQN)kPQB;h(f#23wc3M?WKZKj{bDfN6WUKJ;O?cGag
Mw-wNoc4_eUKSc(MY5)KL

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/dot_product_attention.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/dot_product_attention.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..932de4328e19233c5b1e64a80dc49e453d2de795
GIT binary patch
literal 5684
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/fused_bias_swiglu.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/fused_bias_swiglu.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..86bf2a0038c33ebb429a054b9f942d241e7c02f1
GIT binary patch
literal 1061
zcmZuw&2AGh5cbb*vQ3jfL*W336B5dy$&~{_2&D7^JrHqOAzAL)Np{(vV0$T4%c*?|
zPVKQzz`OX$iC5r+XE&>+YDe;T?EPlO^UZ8A81#^n&hNLYUlgG~aM%{l9p1R5XHE$u
zaEiia#~C3Aql|_gMu$icLC=w(5+#1pIiq2>MhD@J?8=>_m+U5eHV}A@#@=5S3mrwE
zx5edeay@s3L?IR^B$5g&$T>R0q33KWyxR7K?;>^V=tHUb{3Jen|7lj{k%@~uf;g>!
z4eOm-`k7M|x<D1a#28hiLJS*{(8Rm&;ckwu@R19;r};O@7KLKRJo<9Nm9X~~>z6Ff
z*QH_F6iQm(>1btXvDVh(M&|Y*Ta;P~rcdH!T7o-xj;W=Q`ELE%S^4e>S4j2U_V43#
zRb+B1Vr`}?UMQYVXDMIKBc94>CYRi(B0os8gUr=<u;wOOO~GW1*<?G8x!$Cltbf?<
zCT$1m1=S-RJjADuZ}T+SKqKN{tpHch^O~=x&Ztm=KI5On;KVU?;Z?XImqefinIi@0
zv2O>!mtc+rT_~*}t?GgboU)H@^3qZ|rV2*S?k*J<tSF7+R_%fpkkhCE0D{&7?ln9v
zAp7|A$sHB7NN8ffSk5!anC&r^6{1YR?lbna<mu*1UmI@XD3fMY2sMPfBT&~bs4aMg
z0+yhA8eSbBf_s?wLtNjFhjr2RK|K_cJfAE!!^l%h^4#{e&Uj`6UYY{xwn00!bsYPm
zZTlp0L*}ArH_#e($M06FZO{U(2T0fV25R?iV~02YkGra~!K;R%*Z8``5#Fc4;6DBj
D3sV|9

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/fused_layer_norm.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/fused_layer_norm.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..d7a49d66808264bce5c5460dc144a1560413ef20
GIT binary patch
literal 3053
zcmaJ@OOG5$5zfqdc1`!V=i#x97M$X-o<=)8cMGjB#zrgQ(ZY;Zs1I8zS7vutxgJes
zHOq{8FN`HP@dpr+ecT^__%C@~B(z5^E7rh5L{@jZXV#)hm6a74nHlj##Ftg~dJ%!k
z|LaetzwHt7Ieu(jE`0nL9^F7Ah@b@-wQoA2_M43uyjej@XXH>Ea|*ZgMxO1vg<l4v
z!1lc&EIXqPB|js=7r_f60!i~I-@0^0U6@CU-e_BP<#v7}@8>&lSI|>32)}@x$;p5k
z|4df8R?u^^Dr?}~`7lvQDI1BxoimkGdR(hgs)uzo&L%0&+`Pa;d+CqiB?)=}*3*&G
zVI8OAc092!eCdK+o(QEcIx-LuJX<mxcYjaDRCGn}MQ_v*+v3IxGKxfBZiyYaHFm|W
z*n8oQK+7eg9@u@;Y(JiBDSn=uOLYQPC0{Z^>=(z+_xKoxc~&(wPq@yiNg?^er$2qb
zpG#HAVi-jnt_NzO@7o^d(@Y3i#X7r?{17G%?(+?&m&06SB><Jx)p7;S<xKO#aZx8Y
z<IzlKMP2a())E{xhb8MWtCFTxU{tMmH3tZ@G%2`ll4n_wHRtQ4W>V=)H*tY(#T7Wh
z51-X_0SiCXk}rp4)hyk!dfe)*+(NH7KbvNH=_%Lq*{oKL=5<w^BN(#b^?2nEx~qr$
z!$KxnE|Ey5GJU?<EiS5f0~*b<F+Z>8YI6Y&yDhhoV(ra^RCSz!wNgnDPm;1s*6utI
z`CK=A9Y6kw%qCMXQqR*VZ>C8DjRbSm+NkA1Agbq;;JEs*bu=qys{W1C{}<cTW-UM5
zh-sV1*W%pj4fzLETFiyS7?w!`Mx|hIT`nQoKps*>s&SG6jBQeJ8<C{QE|LZkg&*oh
z!6r6M*TUv}Cg0;WNii!ntm2QVNmj|>a;GPVll=7@66W3-u6uk6ptdT1|Ht(6Km6sN
ze|!JzvFWTejNdw9wl;!i97tBP`^_{ndv6Jr>0xHA{YZmlf#VDNNM8;-`b%gUa!Fp&
zSA>!VivE&PvY-nRI}4IKxeGnd_I$yfGxbgr<RQp9)y<{U0qH%EMpha%TLR|5O#e?r
zcz<>->F;RMU9hH?Z(lNXf5FD|Q?_8BePaQ8#QkOmX74W8AIT-|ySK61)6KC8XbHym
z7v$wlwASh!faIXL1^qqYLwj%uWV^A#xg7)gT8#;E3S<mK6r5b_LJ;{?Hc}xVVuD{j
zImMvAriT~bA7G7Cb@Qf9fSj&PGdmgrEvr<<GvMB$kj3D(@u0G#GGQDeF~_m-W(smn
zb#RYw+eE}T#czqALQYoOsOSL!rBf4GeM>E-W2Zs!6ed)qZiUfDNimm?l&Y19G9XT1
zDKN+cz+2CNo=o@w<og7yQ+T+kEo?9o6c8{mep|=JeU>HK^pym*vCi0oM5`TC3P6}N
zP!xf2wJgTgm5t@PxZK+G&)_JE<FrV$j^oeB>t7sC>rx&IAj;!uQp34){J2Oar$DLl
zxRjHmQFV1xlt<-UCr2}^-DB*68Q8T4!v@0+XXk1UHhdQz{X=M?PDp(gu`Y{fmqv6S
zdOk>e+NYd`AnChZx=-EzUfjAG_Tef-DTQ@b7xuAC9>QbKMo1!}?lklzq;KxL!crl*
zn|p#n5!_nJeUz`#3}nGubdTPqJ76a^{RUwRA#QDaOb#8Z@4!ckHYSC-i(_70NgWTU
z`Ywuoux=0##i4lukKTpGXI(&~51x0O_I+{p8Uoh?ZoI6T%^Tw@+00dyVv?*b%o^ko
z3(QB*vA_T?<W$gGq(XSG%1O?0$MVKqs9G0!CHJuQbF9bUmG`N$a86<Nm9gNJ+sX&d
z$rl)dE2vxp;x>-kd`3uYQV-k~kO2x%-T3vq0bi~`WCGytPZA}51v(m2_W)qJO<i~Y
zYnNRdTmxvS46CE-XOCN}wz0e`_}hZ=j^eni#k|0NH;$3{mm@(Oi#m;C<)Jwakbv>*
zj|Y?+{3RF%4jP-wHf**a)e)-pmi3d$qJZgdV*EWARW{H*^lrdoOCTgJV|N(E+x?0$
z_BC_Zf0)bu%{=xm=Cju<*#0WK_pL33^9H->9bD)D8WUNfiLv5ZN(ilBSXIiV;_m8m
zh#Y5W!SaW>v#Q-;TEp4ay!qj5{bf~U{3jL}yQ_Kk>I5ikIBoS1-tfDz!E@nC&$zfU
o1gzCG{p+e5$XJXJ8591f4afVKM0y{ZkiiX=U~jhXhNpe{KYL|OW&i*H

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/linear_with_grad_accumulation_and_async_allreduce.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/linear_with_grad_accumulation_and_async_allreduce.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..197e9548d367628912befbda269c7bb44f6f5860
GIT binary patch
literal 3607
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/optimizer.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/optimizer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..b4e654f95c1c256692a60381733d389cf42b3784
GIT binary patch
literal 6017
zcmb_g-E$Pj5#QO{+uQrp-AM>ZfLOqQ&Ne3`Y@ATU1|vjp*@6NR;ww8_tDCvgiv2id
z_avmO5?65LAysze51>+_Dld7-YpU`O<R8e>JmupldCHSN0Go8r-j@I;Wmk4<XJ>kP
zrh8_)f787|v6xff(*OAO+B-Ex`3E*euYJ(C08gl?ib54iT&0n`NrOOJbyY9bNO@XA
z^U{s9r#Eyj)5ws7$7mRGOtz7QcgoFq`9^^#+a+jeZqX|>#w2GN>g7hBD7O`VQBzoD
zixLIz9%prgvpV3Mk(_qIDdm7pjO>n6{UMR_W<cUZV+^Fi-0v$s+3c0TZMgfq$;PDQ
z%ewo$sm7G7=iF&;rZFSydG~;KuyIh<3+^FrwlV7+ZXA~FqHB6b8b`dNjicVN#xY4N
zxi5Lg8^>jR%st_qY@8$tQ+DTA?ICHroF#)>p|iBij?)TDvzcjyR#}>kGo5Md6`)K_
zD=l?e0r~{cvg@y|pMv_nk^1CFeLvJ+f&Qu9dzu|<P0$&7;Nx_oF85`=G0*1LPcJDS
z&Ndd<!tNqH_>l0Y^bk-c8fVyR*vl5C6?TS_`zii4dwob@_4_HJ-2K<xzfp2isU7|&
z+Q&*QEsRUH>)NX>6WWr~jD+^C6Gp<g)`^_Jw_TCG)$O>fMnvl7l_hv(m%AaO7pd(*
z!;lT=*uH*?+kV&zxW~A8*>5{OGi{%m7dz~pX>(@!L1a397=biK>*g}N9lvd^+RZy=
z6qvUH-dr;Skm@<xjED7_D$*$BHqU^jAZy<bw^q4Bm)M5WWT>8GgpP6Ry3K9xqED}I
zo4(y`wHOC-={?rABOdtg1+*(yFtG$n<IZX~VstoxDyo+PRLqZX{LQBAGA=4hTfXf%
z%^|6l5=WNZz>XHq4hG+LqO~4P>JW<J^7S)|gMLxzD={E}W@Cc}2yQuTAXS{uikRg&
zzO@0XhpiWSQ+A4i7f|L}&9$z7ClrMauGMPupxX&WrNg+D^smZwhhidWA{*?qn{bM8
zYDc#93~}lOM62xvf!P0|9*5o&N9b@1t)TxAEcs#mCbJwWbk3qK_nTR?u-;XLH$v1U
zc*36p2*oP@d#tQ0{MQj#S1Gxp@S{|vsgD(Cr!0+XH0=Tq?PLj3GV5AGkBr@H0t~(m
zJO~YW$y11myCrH+?V);~glA|rR;)3QP^P&%DnA!hd=gc6as$exI17~Vojgz`_&afa
zq>n`vXk~Zu(LU&%gl9iIQ}9f;R48X?9`3>?`cA<w;jB2%9^M1A_(^J~5FL!w7J(6m
z;(Uy<XW=;vj|t;T4>ED#cjQyDQ>0@%CI17UC))lwMkz0nTYiw<!Bvg%KgDCaM^F!F
z9fju@JTKA8gEWF>bevZ2lOE4F%{xR=EA)_~#A7{~vvh*)`<Q@a)Tm4+VV^`)-6I><
zq4o4DL?`I}-IK`sklZJ~B%rm_94K?)zoD$j^5x$Uz5sn?puEB#N3Y`hKG`YzRpf-;
zVsr{>b$I6K6rG0mX?Pas4D4t*F2+h+j!SKArvg-*?Rc~pS7H*U;&iOXnb@EQ9_YAl
zaq*@Sorx=-Dm%sKwYW$R#u~z$q`xj_D&0>#-&Z?q{~@I)S6F2B{c{LC07(FFX5gFB
z)mQ|8mbhCzmowqI$lKvLS;JQ1rRLnTK7DRv#)PNKZNyYFSY2n$s6Los)W6L+7aXj1
z&cv4)v`pD)CeA+`G719E4S8N|)Dy4g(88RffcdXVRT1q$a1TdJfO2!h*@vsCn@g-^
zcikvN++GQMHq`3{uwl+c2<`Qex$4(>&}3nF1wm|&a2$WCk5b95qauT?!bOZs^qrNG
zDEF;2Ls&HTsJBNcX(0c%Jp&lMXU;kP-Y>I9dT(<apThb2%(vR3*#M;f>v#KKsQ$b*
zOT!_<&ybw(a1acI?NR1*&xLNtBVxphuF3<r$<XBcE;;b1#J;xEi}f@0)6L$IGI$ZF
z-NbW6gF*&3>dNx(6>dUvSUh@Xel76WJX+8EnjJv2GQaHFZF$_!d%aNMl<S@Hx*^(N
z)Lfg#Djb?v9d2W1OBm-}+gqjfn^G<uXNsn5zh$*qWc6nnIUFUPSb;B(-~Q2EKko(*
zX@qY=C7FxkLLd|<FEQ4+*<p-cy8a`KfVSyvW<t;fez&(n?l!Xlt6JcS=wwpMx(u77
zQLM5E;S2m8BQqQJ*XgtN!VL4gDYvy=BOFg?aRQ`T*RJ2X`rg&X<r~)Z8<#I#y?OQ8
zigoe!#T%C`XkJ@czItU@Xg26}tELOp<)X03oc3B|QP#A#L>lDUp-3?ZQN~ssJG7bs
z=Ky*b*Q8q*K-N<H1b(2CDAVxZ)A&)>t7SwvXtf~9qE?IB$$(0;(;eB)rVDXT`#I8~
z09NGM9cwQ)U0k!)7O5z9Ahg1+HpF<LDD|5XEFo%25VhL@Cxa-)w_2Suix?j33ByoX
zK8I>UmZd;%$+JV)U@KXDD5|hD+ylThh;pSYF}{b#qS01|i6Xn#vFwd@uUYOl!@CJ(
zJGWS0sGqJ=wsBfahVXS+&wM!ZZ1j2_Hqr3<7aD&W9%+#qP=T{kfyChT9W{pdY8vbH
zom7O;h#IG+mHULMaN@raLju@U!UHkHUEyM+?WW_@I;38GKAJkOynw2mSMEZLwVR1k
z7+c)U-c3;uUQ4g=*Fd^7W|8SFOXP;@s~LO>7(~itU<(j-M@$^TZR>!6I2id__9i3@
z!!It<(zrzq@`50=T;~qtDhP(6?D$UP*e+xYmYk`ki4^z%pF|013Ce<WhA6;~U`G*$
zB?GLM|63r16Hw$xfmBI}Op+;*Q`L{uN7~cvrSIs~dqjv-*rwaFKie5a%21|6VYkx>
zI3y(XHmHEtg<j>aZ-H+~Rbhozh-rz)VuFxVi?F)QXw7PYmjqmtFp&b+>9@yv-EfF7
zz5#h$Zfy%qm4!}N)A@c7#HX=1fW<*94q-71g_uSsksA~~lQYPztdW)4S+Q>biHXZ4
zZp$y=1bM5U##olnnq6v(0%SP$hV3M|W|ab#g$QzhSz#Tagdf9^8e*<6zyf?o4@040
zP2@-5ErF>NEKI0DD0Dzw=5O$~aCCN{lh6<aW$q|+fHcTa#W6H9In&U%EC9w){lT&z
zA{x58$f0f)0@}hzeNh;ajtEzPj|)jyf?zz4ddv*;u%3l8ei|6~0v3zNswbEuD(KdU
zkB12c@b4kh_p!hqI3j!bUX#hRT<8+cAz5#A7S0N7wFTw0#Gc`)JY1v5xj`5vcEiVT
zzB0~N?Rk$i>;*srB}UqnVcpsU*a<fI3QkbMqJpzzLfD!p;v93lT2;DUVqWOxiH*%*
z?L~%`=^b%=9y#hzi0W|bXfMv>A7Jkl?A7mpJ%Cx{6AMjp_0n(%c0TLwr@oa7p8_%A
zU!c&A=ma1kRZ!t31+A><q^eelPBfrvaI3P!x(c`PNXufaK=h}o29&3oige_ZykDqU
z{c}B^BdUrN9H&3l4d?^DgiCv@JvDMAQUaN|+;Fu1MAyqOsYWJr&CpW?Vt|BX-sG)6
zDr60*2af9B#+O>f__9DWz3>&3D&NFSH2OgbocTzo=_`080mxaAaf3GeziIOyBeM?Y
z6*lm&;gB>b9FH1~XARe}Xkc*xi=SYT!Q!V-h~v@lmypHeFQIy8Ys8b~j~;H|fDf_2
zKL#Ry)k8qM%sHUim<_*=lBgzOzKwh`PI;rhh&sd;Y{*lW=YIl5pm%*u{xuppL*k%=
zh%XsEl2g=^NC5s_$>ZBf@*!S8-ORl*N7h$|JPm#_@glO-_OcDEv!4TvD1&|^j(rpV
zh>?%@?f!3Im;NZ-kdNcEbKk%>+$#vn@c$FX(+}d5UJ#sYNjGxbum?N<vG0OSz;7|b
zvf#HE160@1N*L$w<JkPj28zOHdY4#SD%=W1CfTD<kUJs=$2E__P56HX76x9+B9VbY
zBFSBta>R*EY|4Y%IG;@MCWgx4ub?o9K@Ji_HNfpuaMLor;lZ~71`p2hbRwgErhTM7
zDU`vDW#0rTqzfdMQuV&00N>|Of2ynM*J?`rs;a3^a%uH(PFEl0GU}JQp?;xf)z85z
WKU02T{2&MJYe2M6CE7>Ylm7tLt`^b&

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/p2p_communication.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/p2p_communication.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..0402639e955de04a88f3721948d289b37aed3451
GIT binary patch
literal 1839
zcmaJ?OK&4Z5T5RNxIOmRPO`hnW^(`}9zG=AMH~@AL|Q<CWknVV&4JPEbjKNQ&m%qK
zz@iBkxFYcrfE&Mnf54CE3kOd52e3S=dSc^jB#+hA_4uZ$daAly1c7hC<Nf^3$*+NB
z{f5HoGXUXjSk*5;xW$RILfok&84W2x-j;Uegihv$Zsvtv)(JZq3z@MI*$umZaipL1
z!k*E&vY!QEV0cdsvSB#PM&T&i2sg6La5LKqx4_mBp6JeQ+_pGda@{58FS#C|Zq9D;
zzS!o0*ghWc0Uv(jggYkN+o3OZgg@)ec4v2@9Zrs{@#q51Vm%lW?J2?Mi5R<@9mZ0|
zkEPJg2WeGn_EA}<MIKA-KAM-Hc0b8MhIgE#Py+U?4+}2j!&t$KLLL_RaXJM@FHS`r
zm1!wtnu{nyOjKTiqNyt8rG9xGBo|-Qk&5#t>tUr5XD#f7b>57lSJojuFO=j_m3}Go
zs1|uusHhS-k1)VeqeOCcRbw!i>s5@=xa~1FO^(Y?VN%&N$Gf6Suo(DsU=3lpunu8W
z?-9$ITIZeG`r0~YjdR|G<)g&OEoi|fRD})Y)|{x9YBHlUyP=KObh-Vleco$2-#bn3
z2STid7|a_6<2Iym8=pIX=^ISnV4#t~&;3h37GPRGfx!d@V;jt;mws%B)%qD2%)nqe
zM~irJC0_Shyf*KzF5_X|{<XZ@c;BtWYyGUoYxDl`(hug{`dQ5zavHl2E+~9d1>e*f
z+uCbut!-Y_YRl-<Hf-9iRMILu1p~p-Ze6J4ME5vc3za^e*Me&|#rkV6E=%0q6dPnb
zR9HSWLb8Em6A3z3H;~)}q8%kpE1=lnJK{{_ZMzkmN2bf#-f1mHffmzkttD7?9^g-P
zux!m%G}iWVEUoR85~n{|>QzYL*~gQUA`=rl(Bvd8AeG5|8BdRrSc*v|rg5!`d|zh!
z*}RJP%eYQXCdk4)Mz(ytjFKYD=6RaLI3y0rr<z5mF3JjzTYUz^@jc=YhYctr9{&FI
zZARB|&Mv!HXaE0gho~`x81HFTltRT&BHcZn=Sf`@vQk)RsPNM=&8Nx+K{-h9Vkr*^
zUNyA~M6<<t6+<ythzB_3R2Ox7S9Ax<VOG^~EfoHJs2-9&5^NcTe;V3*WTuI_gF^qI
zDiTpu@0tN<r+IA-pzl5Bdoec`K@P5cY`w9Z9t#kto-c_h^a^<mlVEScIG#)K7T$sC
pE)YihWRCzfJ7tX0f0#}GW)A&}x%5xZqt9rE{y~}lJ9~db{sSp?5hVZs

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/profiling.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/profiling.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ad95cbe378b09ea74121a4075d4c0cd71f6624fe
GIT binary patch
literal 3397
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/rotary_pos_embedding.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/rotary_pos_embedding.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..c75f80021508d69e3005da26cf268f6560bf3404
GIT binary patch
literal 4264
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
G-~R=}ScY8y

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/token_dispatcher.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/token_dispatcher.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..36cf721c23dbdf81f8c49003359527319ea710c8
GIT binary patch
literal 9566
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/__pycache__/training.cpython-310.pyc b/megatron-lm-musa-patch/musa_patch/__pycache__/training.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..b926c735a0083c820045f0b171913a0f71c94d22
GIT binary patch
literal 18965
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
bUYyP)k0d{nj3=)vU&heR@Vib*C8z#B=Y_hK

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/musa_patch/arguments.py b/megatron-lm-musa-patch/musa_patch/arguments.py
new file mode 100644
index 000000000..5ffb2ad23
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/arguments.py
@@ -0,0 +1,226 @@
+import dataclasses
+import torch
+import torch.nn.functional as F
+
+import megatron.training.arguments
+from megatron.training.activations import squared_relu
+from megatron.core.transformer.transformer_config import TransformerConfig, MLATransformerConfig
+moe_freq_type = megatron.training.arguments.moe_freq_type
+
+def _add_moe_args(parser):
+    group = parser.add_argument_group(title="moe")
+    # General arguments
+    group.add_argument('--expert-model-parallel-size', type=int, default=1,
+                       help='Degree of expert model parallelism.')
+    group.add_argument('--expert-tensor-parallel-size', type=int, default=None,
+                       help='Degree of expert model parallelism. Default is None, which will be set to the value of --tensor-model-paralle-size.')
+    group.add_argument('--num-experts', type=int, default=None,
+                       help='Number of Experts in MoE (None means no MoE)')
+    group.add_argument('--moe-layer-freq', type=moe_freq_type, default=1,
+                       help='Frequency between MoE layers and Dense layers. Accepts either: '
+                            '- An integer N: Represents a 1:N ratio, meaning one expert layer for every N-1 dense layers '
+                            '- A string containing a Python list expression that defines a custom pattern, e.g.: '
+                            '"([1]*3+[0]*1)*3" evaluates to [1,1,1,0,1,1,1,0,1,1,1,0] '
+                            'where 1 indicates an expert layer and 0 indicates a dense layer. '
+                            'Examples: "([0]+[1]*23)": 1 dense layer followed by 23 experts layers, '
+                            '"([1]*3+[0]*2)*2": Three expert layers followed by two dense layers, repeated twice.')
+    group.add_argument('--moe-ffn-hidden-size', type=int, default=None,
+                       help='The hidden size of each expert\'s feed-forward network (ffn). '
+                       'If not specified, defaults to the ffn_hidden_size.')
+    group.add_argument('--moe-shared-expert-intermediate-size', type=int, default=None,
+                       help='Shared expert total ffn hidden size. '
+                       'It should be equal to "num_shared_experts * ffn_size_of_each_shared_expert" if there are multiple shared experts. '
+                       'None means no shared expert.')
+    group.add_argument('--moe-shared-expert-overlap', action='store_true',
+                       help='Enable overlapping between shared expert computations and dispatcher communications. '
+                       'Without this, the shared epxerts execute after the routed experts. '
+                       'Only effective when moe-shared-expert-intermediate-size is set.')
+    group.add_argument('--moe-grouped-gemm', action='store_true',
+                       help='When there are multiple experts per rank, launch multiple local GEMM kernels in multiple streams to improve the utilization and performance with GroupedLinear in TransformerEngine.')
+    # Router arguments
+    group.add_argument('--moe-router-load-balancing-type', type=str,
+                       choices=['aux_loss', 'seq_aux_loss', 'sinkhorn', 'none'],
+                       default='aux_loss',
+                       help='Determines the load balancing strategy for the router. "aux_loss" corresponds to the load balancing loss used in GShard and SwitchTransformer; "seq_aux_loss" corresponds to the load balancing loss used in DeepSeekV2, which computes the loss for each individual sample; "sinkhorn" corresponds to the balancing algorithm used in S-BASE, and "none" implies no load balancing. The default is "aux_loss".')
+    group.add_argument('--moe-router-score-function', type=str,
+                       choices=['softmax', 'sigmoid'],
+                       default='softmax',
+                       help='Score function for MoE TopK routing. Can be "softmax" or "sigmoid".')
+    group.add_argument('--moe-router-topk', type=int, default=2,
+                       help='Number of experts to route to for each token. The default is 2.')
+    group.add_argument('--moe-router-pre-softmax', action='store_true',
+                       help='Enable pre-softmax routing for MoE, which means softmax is before the top-k selection. By default, softmax is done after top-k.')
+    group.add_argument('--moe-router-num-groups', type=int, default=None,
+                       help='Number of groups to divide experts into for group-limited routing. When using group-limited routing: 1) Experts are divided into equal-sized groups, 2) For each token, a subset of groups are selected based on routing scores (sum of top-2 expert scores within each group), 3) From these selected groups, moe_router_topk experts are chosen.'
+                       'Two common use cases: 1) Device-limited routing: Set equal to expert parallel size (EP) to limit each token to experts on a subset of devices (See DeepSeek-V2: https://arxiv.org/pdf/2405.04434) 2) Node-limited routing: Set equal to number of nodes in EP group to limit each token to experts on a subset of nodes (See DeepSeek-V3: https://arxiv.org/pdf/2412.19437)')
+    group.add_argument('--moe-router-group-topk', type=int, default=None,
+                       help='Number of selected groups for group-limited routing.')
+    group.add_argument('--moe-router-topk-scaling-factor', type=float, default=None,
+                       help='Scaling factor for routing score in top-k selection, only works when --moe-router-pre-softmax enabled. Defaults to None, which means no scaling.')
+    group.add_argument('--moe-router-enable-expert-bias', action='store_true',
+                       help='TopK routing with dynamic expert bias in the aux-loss-free load balancing strategy. '
+                       'The routing decision is based on the sum of the routing scores and the expert bias. '
+                       'See https://arxiv.org/abs/2408.15664 for details.')
+    group.add_argument('--moe-router-bias-update-rate', type=float, default=1e-3,
+                       help='Expert bias update rate in the aux-loss-free load balancing strategy. '
+                       'The expert bias is updated based on the number of assigned tokens to each expert in a global batch, '
+                       'where the bias is increased for the experts with less assigned tokens and decreased for the experts with more assigned tokens. '
+                       'The default value 1e-3 is same as that used in DeepSeekV3.')
+    group.add_argument('--moe-use-legacy-grouped-gemm', action='store_true',
+                       help='Use legacy GroupedMLP rather than TEGroupedMLP. Note: The legacy one will be deprecated soon.')
+    group.add_argument('--moe-aux-loss-coeff', type=float, default=0.0,
+                       help='Scaling coefficient for the aux loss: a starting value of 1e-2 is recommended.')
+    group.add_argument('--moe-z-loss-coeff', type=float, default=None,
+                       help='Scaling coefficient for the z-loss: a starting value of 1e-3 is recommended.')
+    group.add_argument('--moe-input-jitter-eps', type=float, default=None,
+                       help='Add noise to the input tensor by applying jitter with a specified epsilon value.')
+    group.add_argument('--moe-token-dispatcher-type', type=str,
+                       choices=['allgather', 'alltoall', 'flex', 'alltoall_seq'],
+                       default='allgather',
+                       help="The type of token dispatcher to use. The default is 'allgather'. Options are 'allgather', 'alltoall' and 'alltoall_seq'. We recommend using 'alltoall' when applying expert parallelism. For more information, please refer to the documentation in core/moe/README.")
+    group.add_argument('--moe-enable-deepep', action='store_true',
+                       help='[Experimental] Enable DeepSeek/DeepEP for efficient token dispatching and combine in MoE models. Only works with flex token dispatcher by setting --moe-token-dispatcher-type=flex.')
+    group.add_argument('--moe-per-layer-logging', action='store_true',
+                       help='Enable per-layer logging for MoE, currently supports auxiliary loss and z loss.')
+    # Token dropping arguments
+    group.add_argument('--moe-expert-capacity-factor', type=float, default=None,
+                       help='The capacity factor for each expert, None means no token will be dropped.')
+    group.add_argument('--moe-pad-expert-input-to-capacity', action='store_true',
+                       help='Pads the input for each expert to match the expert capacity length, effective only after the --moe-expert-capacity-factor is set.')
+    group.add_argument('--moe-token-drop-policy', type=str, default='probs', choices=['probs', 'position'],
+                       help='The policy to drop tokens. Can be either "probs" or "position". If "probs", the tokens with the lowest probabilities will be dropped. If "position", tokens at the end of each batch will be dropped.')
+    group.add_argument('--moe-layer-recompute', action='store_true',
+                       help='Enable checkpointing for moe_layer, should be used when memory is not sufficient.')
+    group.add_argument('--moe-extended-tp', action='store_true',
+                       help='Deprecated. Use --expert-tensor-parallel-size instead.')
+    group.add_argument('--moe-use-upcycling', action='store_true',
+                       help='Load a checkpoint of a dense model, convert it into an MoE model, and save the converted model to the path specified by --save. '
+                       'Upcycling is implemented on the top of distributed checkpointing, so it supports parallel modes different from the dense model.')
+    group.add_argument('--moe-permute-fusion', action='store_true',
+                       help='Fuse token rearrangement ops during token dispatching.')
+    
+    # HACK(huang.huang): control dp_reduce position: tp-only-amax-red 
+    group.add_argument('--tp-only-amax-red', action='store_true',
+                        help="Whether to reduce the FP8 AMAX only in the TP or TP-CP domain") 
+    ## HACK(huang.huang)
+
+    # HACK(yehua.zhang): add dsv2 & dsv3 loss, q-rms-recompute
+    # dsv2
+    group.add_argument('--moe-device-level-aux-loss-coeff', type=float, default=None,
+                       help='Scaling coefficient for the device-level aux loss')
+    group.add_argument('--moe-comm-aux-loss-coeff', type=float, default=None,
+                       help='Scaling coefficient for the communication aux loss')
+    group.add_argument('--moe-device-level-capacity', action='store_true',
+                       help='Whether to consider the expert capacity of a group together')
+    
+    # dsv3
+    group.add_argument('--moe-complementary-seq-aux-loss', action='store_true',
+                       help='use complementary sequence-wise aux loss in MoE, should only used with seq_aux_loss')
+    group.add_argument('--moe-router-norm-topk-prob', action='store_true',
+                       help='Enable normalization for sigmoid score in MoE, should only used with moe-router-use-sigmoid')
+
+    # q-rms-recompute
+    group = parser.add_argument_group(title="mla")
+    group.add_argument('--q-rms-recompute', action='store_true',
+                       help="use q uproj rmsnorm recompute")
+    ## HACK(yehua.zhang)
+
+    # HACK(huang.huang): add attn-recompute, recompute-variance, groupMLP_recompute
+    group.add_argument('--attn-recompute', action='store_true',
+                       help="use attn recompute")
+    group.add_argument('--mla-rms-recompute', action='store_true',
+                       help="use rms recompute before mla")
+    group.add_argument('--mlp-rms-recompute', action='store_true',
+                       help="use rms recompute before mlp")
+    group.add_argument('--recompute-variance', action='store_true',
+                       help="use recompute variance")
+    group.add_argument('--mlp-recompute', action='store_true',
+                       help="use groupMLP_recompute to recompute groupgemm and shared_exp in moelayer, mlp in dense") 
+    ## HACK(huang.huang)
+    return parser
+
+
+def core_transformer_config_from_args(args, config_class=None):
+
+    # Config class.
+    config_class = config_class or TransformerConfig
+
+    if args.multi_latent_attention:
+        config_class = MLATransformerConfig
+
+    # Translate args to core transformer configuration
+    kw_args = {}
+    for f in dataclasses.fields(config_class):
+        if hasattr(args, f.name):
+            kw_args[f.name] = getattr(args, f.name)
+    kw_args['persist_layer_norm'] = not args.no_persist_layer_norm
+    kw_args['layernorm_zero_centered_gamma'] = args.apply_layernorm_1p
+    kw_args['layernorm_epsilon'] = args.norm_epsilon
+    kw_args['deallocate_pipeline_outputs'] = True
+    kw_args['pipeline_dtype'] = args.params_dtype
+    kw_args['batch_p2p_comm'] = not args.overlap_p2p_comm
+    kw_args['num_moe_experts'] = args.num_experts
+    kw_args['rotary_interleaved'] = args.rotary_interleaved
+    kw_args['num_layers_in_first_pipeline_stage']= args.decoder_first_pipeline_num_layers
+    kw_args['num_layers_in_last_pipeline_stage']= args.decoder_last_pipeline_num_layers
+    if args.swiglu:
+        kw_args['activation_func'] = F.silu
+        kw_args['gated_linear_unit'] = True
+        kw_args['bias_activation_fusion'] = args.bias_swiglu_fusion
+    else:
+        kw_args['bias_activation_fusion'] = args.bias_gelu_fusion
+    if args.squared_relu:
+        assert not args.swiglu
+        kw_args['activation_func'] = squared_relu
+    if args.init_method_xavier_uniform:
+        kw_args['init_method'] = torch.nn.init.xavier_uniform_
+        kw_args['scaled_init_method'] = torch.nn.init.xavier_uniform_
+    if args.group_query_attention:
+        kw_args['num_query_groups'] = args.num_query_groups
+    else:
+        kw_args['num_query_groups'] = None
+    kw_args['config_logger_dir'] = args.config_logger_dir
+
+    if len(args.cp_comm_type) == 1:
+        kw_args['cp_comm_type'] = args.cp_comm_type[0]
+    
+    # Return config.
+    
+    # HACK(yehua.zhang): add dsv2 & dsv3 loss, mtp, q-rms-recompute from args to transformer config
+    config_instance = config_class(**kw_args)
+
+    config_instance.moe_device_level_aux_loss_coeff = args.moe_device_level_aux_loss_coeff
+    config_instance.moe_comm_aux_loss_coeff = args.moe_comm_aux_loss_coeff
+    config_instance.moe_device_level_capacity = args.moe_device_level_capacity
+
+    config_instance.moe_complementary_seq_aux_loss = args.moe_complementary_seq_aux_loss
+    config_instance.moe_router_norm_topk_prob = args.moe_router_norm_topk_prob
+    config_instance.moe_device_level_capacity = args.moe_device_level_capacity
+
+    config_instance.q_rms_recompute = args.q_rms_recompute
+    ## HACK(yehua.zhang)
+
+    # HACK(huang.huang): add attn-recompute, recompute-variance, mlp_recompute
+    config_instance.attn_recompute = args.attn_recompute
+    config_instance.mla_rms_recompute = args.mla_rms_recompute
+    config_instance.mlp_rms_recompute = args.mlp_rms_recompute
+    config_instance.recompute_variance = args.recompute_variance
+    config_instance.mlp_recompute = args.mlp_recompute
+    ## HACK(huang.huang)
+
+    # HACK(huang.huang): args check for pp=1 and first/last stage num layer=None
+    if config_instance.pipeline_model_parallel_size == 1:
+        assert config_instance.num_layers_in_first_pipeline_stage is None and config_instance.num_layers_in_last_pipeline_stage is None, \
+            f"For pipeline_model_parallel_size=1, first/last must be None, but get {config_instance.num_layers_in_first_pipeline_stage}/{config_instance.num_layers_in_last_pipeline_stage}"
+    ## HACK(huang.huang)
+
+    # HACK(huang.huang): control dp_reduce position: tp-only-amax-red 
+    config_instance.tp_only_amax_red = args.tp_only_amax_red
+    ##HACK(huang.huang)
+    
+    print('config_instance is ', config_instance)
+    return config_instance
+
+
+megatron.training.arguments._add_moe_args = _add_moe_args
+megatron.training.arguments.core_transformer_config_from_args = core_transformer_config_from_args
diff --git a/megatron-lm-musa-patch/musa_patch/checkpointing.py b/megatron-lm-musa-patch/musa_patch/checkpointing.py
new file mode 100644
index 000000000..45d08120f
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/checkpointing.py
@@ -0,0 +1,76 @@
+import os
+
+from megatron.training.global_vars import (
+    get_args,
+)
+
+def save_checkpoint(iteration, model, optimizer, opt_param_scheduler,
+                    num_floating_point_operations_so_far,
+                    checkpointing_context=None, pipeline_rank=None,
+                    expert_rank=None, tensor_rank=None,
+                    pipeline_parallel=None, expert_parallel=None,
+                    non_persistent_ckpt=False,
+                    train_data_iterator=None, ft_client=None,
+                    preprocess_common_state_dict_fn=None
+                    ):
+  try:
+    from dlrover.trainer.torch.flash_checkpoint.megatron_dist_ckpt \
+      import save_checkpoint as dlrover_save_checkpoint_dist
+    from dlrover.trainer.torch.flash_checkpoint.megatron \
+      import save_checkpoint as dlrover_save_checkpoint
+  except Exception as e:
+    print(f"import flash_ckpt failed {str(e)}")
+    return
+
+  args = get_args()
+  if args.use_distributed_optimizer and not args.no_save_optim:
+    dlrover_save_checkpoint_dist(iteration, model, optimizer,
+                                 opt_param_scheduler, 0,
+                                 preprocess_common_state_dict_fn)
+  else:
+    dlrover_save_checkpoint(iteration, model, optimizer,
+                            opt_param_scheduler, 0)
+
+def load_checkpoint(model, optimizer, opt_param_scheduler,
+                    load_arg='load', strict=True,
+                    ft_client=None, checkpointing_context=None,
+                    skip_load_to_model_and_opt=False):
+  try:
+    from dlrover.trainer.torch.flash_checkpoint.megatron_dist_ckpt \
+      import load_checkpoint as dlrover_load_checkpoint_dist
+    from dlrover.trainer.torch.flash_checkpoint.megatron \
+      import load_checkpoint as dlrover_load_checkpoint
+  except Exception as e:
+    print(f"import flash_ckpt failed {str(e)}")
+    return 0, 0
+
+  i = 0
+  args = get_args()
+  if args.use_distributed_optimizer and not args.no_save_optim:
+    i,  num_floating_point_operations_so_far = dlrover_load_checkpoint_dist(model,
+                                        optimizer,
+                                        opt_param_scheduler,
+                                        load_arg,
+                                        strict)
+  else:
+    i, num_floating_point_operations_so_far = dlrover_load_checkpoint(model,
+                                optimizer,
+                                opt_param_scheduler,
+                                load_arg,
+                                strict,
+                                ft_client=ft_client,
+                                checkpointing_context=checkpointing_context,
+                                skip_load_to_model_and_opt=skip_load_to_model_and_opt)
+
+  return i, num_floating_point_operations_so_far
+
+enable_async_ckpt = int(os.getenv("ENABLE_ASYNC_CKPT", 0))
+if enable_async_ckpt:
+  print("flash ckpt enabled")
+  import megatron.training.checkpointing
+
+  megatron.training.checkpointing.save_checkpoint = save_checkpoint
+  megatron.training.checkpointing.load_checkpoint = load_checkpoint
+
+  megatron.training.training.save_checkpoint = save_checkpoint
+  megatron.training.training.load_checkpoint = load_checkpoint
diff --git a/megatron-lm-musa-patch/musa_patch/core_pipeline_parallel_schedules.py b/megatron-lm-musa-patch/musa_patch/core_pipeline_parallel_schedules.py
new file mode 100644
index 000000000..a0b6e9f1a
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/core_pipeline_parallel_schedules.py
@@ -0,0 +1,61 @@
+import os
+import megatron
+import functools
+import torch
+
+
+def record_function_decorator(func):
+    @functools.wraps(func)
+    def new_func(*args, **kwargs):
+        with torch.profiler.record_function(func.__name__):
+            return func(*args, **kwargs)
+
+    return new_func
+
+
+original_forward_step = megatron.core.pipeline_parallel.schedules.forward_step
+original_backward_step = megatron.core.pipeline_parallel.schedules.backward_step
+
+
+@record_function_decorator
+def forward_step(
+    forward_step_func,
+    data_iterator,
+    model,
+    num_microbatches,
+    input_tensor,
+    forward_data_store,
+    config,
+    collect_non_loss_data=False,
+    checkpoint_activations_microbatch=None,
+    is_first_microbatch=False,
+    current_microbatch=None,
+    encoder_decoder_xattn=False,
+):
+    return original_forward_step(
+        forward_step_func,
+        data_iterator,
+        model,
+        num_microbatches,
+        input_tensor,
+        forward_data_store,
+        config,
+        collect_non_loss_data,
+        checkpoint_activations_microbatch,
+        is_first_microbatch,
+        current_microbatch,
+        encoder_decoder_xattn,
+    )
+
+
+@record_function_decorator
+def backward_step(input_tensor, output_tensor, output_tensor_grad, model_type, config):
+    return original_backward_step(
+        input_tensor, output_tensor, output_tensor_grad, model_type, config
+    )
+
+
+enable_profiler = int(os.getenv("ENABLE_PROFILER", 0))
+if enable_profiler:
+    megatron.core.pipeline_parallel.schedules.forward_step = forward_step
+    megatron.core.pipeline_parallel.schedules.backward_step = backward_step
diff --git a/megatron-lm-musa-patch/musa_patch/dot_product_attention.py b/megatron-lm-musa-patch/musa_patch/dot_product_attention.py
new file mode 100644
index 000000000..19bf27c58
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/dot_product_attention.py
@@ -0,0 +1,262 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+
+import math
+
+import torch
+from torch import Tensor
+
+from megatron.core import parallel_state, tensor_parallel
+from megatron.core.fusions.fused_softmax import FusedScaleMaskSoftmax
+from megatron.core.packed_seq_params import PackedSeqParams
+from megatron.core.transformer.enums import AttnMaskType
+from megatron.core.transformer.module import MegatronModule
+from megatron.core.transformer.transformer_config import TransformerConfig
+from megatron.core.transformer.utils import attention_mask_func
+from megatron.core.utils import divide
+
+
+
+class DotProductAttention(MegatronModule):
+    """
+    Region where selective activation recomputation is applied.
+    This region is memory intensive but less compute intensive which
+    makes activation checkpointing more efficient for LLMs (20B+).
+    See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
+
+    We use the following notation:
+     h: hidden size
+     n: number of attention heads
+     p: number of tensor model parallel partitions
+     b: batch size
+     s: sequence length
+    """
+
+    def __init__(
+        self,
+        config: TransformerConfig,
+        layer_number: int,
+        attn_mask_type: AttnMaskType,
+        attention_type: str,
+        attention_dropout: float = None,
+        softmax_scale: float = None,
+        k_channels: int = None,
+        v_channels: int = None,
+        cp_comm_type: str = None,
+    ):
+        super().__init__(config=config)
+
+        self.config: TransformerConfig = config
+
+        assert (
+            self.config.context_parallel_size == 1
+        ), "Context parallelism is only supported by TEDotProductAttention!"
+
+        assert (
+            self.config.window_size is None
+        ), "Sliding Window Attention is only supported by TEDotProductAttention!"
+        print("use DotProductAttention")
+        self.layer_number = max(1, layer_number)
+        self.attn_mask_type = attn_mask_type
+        self.attention_type = attention_type  # unused for now
+
+        projection_size = self.config.kv_channels * self.config.num_attention_heads
+        from megatron.training import get_args
+        args = get_args()
+        self.use_flash_attn = args.use_flash_attn and not args.multi_latent_attention
+
+        # Per attention head and per partition values.
+        world_size = parallel_state.get_tensor_model_parallel_world_size()
+        self.hidden_size_per_partition = divide(projection_size, world_size)
+        self.hidden_size_per_attention_head = divide(projection_size, config.num_attention_heads)
+        self.num_attention_heads_per_partition = divide(self.config.num_attention_heads, world_size)
+        self.num_query_groups_per_partition = divide(self.config.num_query_groups, world_size)
+
+        coeff = None
+        self.norm_factor = math.sqrt(self.hidden_size_per_attention_head)
+        if self.config.apply_query_key_layer_scaling:
+            coeff = self.layer_number
+            self.norm_factor *= coeff
+
+        self.scale_mask_softmax = FusedScaleMaskSoftmax(
+            input_in_fp16=self.config.fp16,
+            input_in_bf16=self.config.bf16,
+            attn_mask_type=self.attn_mask_type,
+            scaled_masked_softmax_fusion=self.config.masked_softmax_fusion,
+            mask_func=attention_mask_func,
+            softmax_in_fp32=self.config.attention_softmax_in_fp32,
+            scale=coeff,
+        )
+
+        # Dropout. Note that for a single iteration, this layer will generate
+        # different outputs on different number of parallel partitions but
+        # on average it should not be partition dependent.
+        self.attention_dropout = torch.nn.Dropout(
+            self.config.attention_dropout if attention_dropout is None else attention_dropout
+        )
+
+    def _flash_attn_impl(self, query_states, key_states, value_states, attention_mask=None):
+        # attention_mask useless for now
+        output_size = (
+            query_states.size(0),
+            query_states.size(1),
+            query_states.size(2) * query_states.size(3)
+        ) #seq_len, batch_size, head_num * head_dim
+
+        query_states = query_states.permute(1, 2, 0, 3)
+        key_states = key_states.permute(1, 2, 0, 3)
+        value_states = value_states.permute(1, 2, 0, 3)
+
+        bsz, num_heads, q_len, head_dim = query_states.size()
+        # kv_seq_len = key_states.size(2)
+        with torch.backends.cuda.sdp_kernel(enable_flash=True, enable_math=False):
+            attn_output = torch.nn.functional.scaled_dot_product_attention(
+                query_states, # batch_size, head_num , seq_len,  head_size
+                key_states, # batch_size, head_num, seq_len, head_size
+                value_states, #batch_size, head_num, seq_len, head_size
+                attn_mask=None,# bsz * num_heads, q_len, kv_seq_len
+                dropout_p=0.0,
+                is_causal=True,
+            )
+        if attn_output.size() != (bsz, num_heads, q_len, head_dim):
+            raise ValueError(
+                f"`attn_output` should be of size {(bsz, num_heads, q_len, head_dim)}, but is"
+                f" {attn_output.size()}"
+            )
+        attn_output = attn_output.permute(2, 0, 1, 3).reshape(*output_size).contiguous()
+        return attn_output
+    
+    def forward(
+        self,
+        query: Tensor,
+        key: Tensor,
+        value: Tensor,
+        attention_mask: Tensor,
+        attn_mask_type: AttnMaskType = None,
+        attention_bias: Tensor = None,
+        packed_seq_params: PackedSeqParams = None,
+    ):
+        assert packed_seq_params is None, (
+            "Packed sequence is not supported by DotProductAttention."
+            "Please use TEDotProductAttention instead."
+        )
+        # ===================================
+        # Raw attention scores. [b, n/p, s, s]
+        # ===================================
+
+        # expand the key and value [sk, b, ng, hn] -> [sk, b, np, hn]
+        # This is a noop for normal attention where ng == np. When using group query attention this
+        # creates a view that has the keys and values virtually repeated along their dimension to
+        # match the number of queries.
+
+        # attn_mask_type is not used.
+        if self.num_attention_heads_per_partition // self.num_query_groups_per_partition > 1:
+            key = key.repeat_interleave(
+                self.num_attention_heads_per_partition // self.num_query_groups_per_partition, dim=2
+            )
+            value = value.repeat_interleave(
+                self.num_attention_heads_per_partition // self.num_query_groups_per_partition, dim=2
+            )
+
+        
+        if self.use_flash_attn:
+            # TODO(optimize mask method)
+            # if attention_mask.dtype == torch.bool:
+            #     attention_mask.mas
+            assert attn_mask_type == AttnMaskType.causal
+                
+            context = self._flash_attn_impl(query, key, value, attention_mask)
+            # new_context_shape = context.size()[:-2] + (self.hidden_size_per_partition,)
+            # context = context.view(*new_context_shape)
+            return context
+        # [b, np, sq, sk]
+        output_size = (
+            query.size(1),
+            query.size(2),
+            query.size(0),
+            key.size(0),
+        )
+
+        # [sq, b, np, hn] -> [sq, b * np, hn]
+        # This will be a simple view when doing normal attention, but in group query attention
+        # the key and value tensors are repeated to match the queries so you can't use simple strides
+        # to extract the queries.
+        query = query.reshape(output_size[2], output_size[0] * output_size[1], -1)
+        # [sk, b, np, hn] -> [sk, b * np, hn]
+        key = key.view(output_size[3], output_size[0] * output_size[1], -1)
+
+
+        # preallocting input tensor: [b * np, sq, sk]
+        matmul_input_buffer = parallel_state.get_global_memory_buffer().get_tensor(
+            (output_size[0] * output_size[1], output_size[2], output_size[3]), query.dtype, "mpu",
+        )
+
+        # Raw attention scores. [b * np, sq, sk]
+        matmul_result = torch.bmm(query.transpose(0, 1), key.transpose(0, 1).transpose(1, 2))
+        matmul_result *= (1.0 / self.norm_factor)
+        
+        # torch.baddbmm(
+        #     matmul_input_buffer,
+        #     query.transpose(0, 1),  # [b * np, sq, hn]
+        #     key.transpose(0, 1).transpose(1, 2),  # [b * np, hn, sk]
+        #     beta=0.0,
+        #     alpha=(1.0 / self.norm_factor),
+        # )
+
+        # change view to [b, np, sq, sk]
+        attention_scores = matmul_result.view(*output_size)
+
+        # ===========================
+        # Attention probs and dropout
+        # ===========================
+
+        # attention scores and attention mask [b, np, sq, sk]
+        attention_probs: Tensor = self.scale_mask_softmax(attention_scores, attention_mask)
+
+        # This is actually dropping out entire tokens to attend to, which might
+        # seem a bit unusual, but is taken from the original Transformer paper.
+
+        if not self.config.sequence_parallel:
+            with tensor_parallel.get_cuda_rng_tracker().fork():
+                attention_probs = self.attention_dropout(attention_probs)
+        else:
+            attention_probs = self.attention_dropout(attention_probs)
+
+        # =========================
+        # Context layer. [sq, b, hp]
+        # =========================
+
+        # value -> context layer.
+        # [sk, b, np, hn] --> [b, np, sq, hn]
+
+        # context layer shape: [b, np, sq, hn]
+        output_size = (
+            value.size(1),
+            value.size(2),
+            query.size(0),
+            value.size(3),
+        )
+
+        # change view [sk, b * np, hn]
+        value = value.view(value.size(0), output_size[0] * output_size[1], -1)
+
+        # change view [b * np, sq, sk]
+        attention_probs = attention_probs.view(output_size[0] * output_size[1], output_size[2], -1)
+
+        # matmul: [b * np, sq, hn]
+        context = torch.bmm(attention_probs, value.transpose(0, 1))
+
+        # change view [b, np, sq, hn]
+        context = context.view(*output_size)
+
+        # [b, np, sq, hn] --> [sq, b, np, hn]
+        context = context.permute(2, 0, 1, 3).contiguous()
+
+        # [sq, b, np, hn] --> [sq, b, hp]
+        new_context_shape = context.size()[:-2] + (-1,)
+        context = context.view(*new_context_shape)
+
+        return context
+
+import megatron.core.transformer.dot_product_attention
+megatron.core.transformer.dot_product_attention.DotProductAttention = DotProductAttention
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/__init__.py b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/__init__.py
new file mode 100644
index 000000000..3d1537ff0
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/__init__.py
@@ -0,0 +1,3 @@
+from . import param_and_grad_buffer
+from . import data_samplers
+from . import epx_model_and_optimizer
diff --git a/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/data_samplers.py b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/data_samplers.py
new file mode 100644
index 000000000..fb6bebfb2
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/data_samplers.py
@@ -0,0 +1,76 @@
+# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+
+"""Dataloaders."""
+
+import os
+import logging
+import random
+import torch
+import numpy as np
+from torch.utils.data import Dataset
+from megatron.core import mpu
+from megatron.training import get_args
+from megatron.core.utils import log_single_rank
+from megatron.legacy.data.data_samplers import MegatronPretrainingSampler
+from megatron.legacy.data.data_samplers import MegatronPretrainingRandomSampler
+
+logger = logging.getLogger(__name__)
+
+def build_pretraining_data_loader(dataset, consumed_samples):
+    """Build dataloader given an input dataset."""
+
+    if dataset is None:
+        return None
+    args = get_args()
+
+    if int(os.getenv("USE_EPX", 0)): # Fault tolerance sampler
+        from epx import EpxSampler
+        log_single_rank(logger, logging.INFO, f"Use EpxSampler")
+
+        batch_sampler = EpxSampler(
+            dataset=None,
+            total_samples=len(dataset),
+            consumed_samples=consumed_samples,
+            micro_batch_size=args.micro_batch_size,
+            data_parallel_rank=mpu.get_data_parallel_rank(),
+            data_parallel_size=mpu.get_data_parallel_world_size())
+    else: # Megatron sampler
+        if args.dataloader_type == 'single':
+            batch_sampler = MegatronPretrainingSampler(
+                total_samples=len(dataset),
+                consumed_samples=consumed_samples,
+                micro_batch_size=args.micro_batch_size,
+                data_parallel_rank=mpu.get_data_parallel_rank(),
+                data_parallel_size=mpu.get_data_parallel_world_size())
+        elif args.dataloader_type == 'cyclic':
+            batch_sampler = MegatronPretrainingRandomSampler(
+                dataset,
+                total_samples=len(dataset),
+                consumed_samples=consumed_samples,
+                micro_batch_size=args.micro_batch_size,
+                data_parallel_rank=mpu.get_data_parallel_rank(),
+                data_parallel_size=mpu.get_data_parallel_world_size(),
+                data_sharding=args.data_sharding)
+        elif args.dataloader_type == "external":
+            # External dataloaders are passed through. User is expected to provide a
+            # torch-compatible dataloader and define samplers, if needed.
+            return dataset
+        else:
+            raise Exception('{} dataloader type is not supported.'.format(
+                    args.dataloader_type))
+
+    # Torch dataloader.
+    return torch.utils.data.DataLoader(dataset,
+                                       batch_sampler=batch_sampler,
+                                       num_workers=args.num_workers,
+                                       pin_memory=True,
+                                       persistent_workers=True if args.num_workers > 0 else False,
+                                       )
+
+
+import sys
+for k in sys.modules:
+    if k.startswith('megatron'):
+        for target in ['build_pretraining_data_loader']:
+            if getattr(sys.modules[k], target, None):
+                setattr(sys.modules[k], target, build_pretraining_data_loader)
diff --git a/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/epx_model_and_optimizer.py b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/epx_model_and_optimizer.py
new file mode 100644
index 000000000..83bbd8283
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/epx_model_and_optimizer.py
@@ -0,0 +1,112 @@
+import logging
+import wrapt
+import megatron
+import megatron.core.parallel_state as parallel_state
+from megatron.training.training import setup_model_and_optimizer
+from epx.optim import epx_wrap_optimizer_instance
+
+from megatron.core.optimizer import ChainedOptimizer
+from megatron.core.optimizer.distrib_optimizer import DistributedOptimizer
+
+logger = logging.getLogger(__name__)
+
+# Do not use core.transformer.module.Float16Module now
+# from megatron.core.transformer.module import Float16Module
+# setattr(sys.modules["megatron.training.training"], "Float16Module", Float16Module)
+
+@wrapt.decorator
+def setup_model_and_optimizer_wrapper(wrapped, _, args, kwargs):
+    def _dump_state_dict():
+        nonlocal optimizer
+
+        state_dict = {}
+
+        if len(model) == 1:
+            state_dict['model'] =  model[0].state_dict_for_save_checkpoint()
+        else:
+            for i in range(len(model)):
+                mpu.set_virtual_pipeline_model_parallel_rank(i)
+                state_dict['model%d' % i] =  model[i].state_dict_for_save_checkpoint()
+
+        if opt_param_scheduler is not None:
+            state_dict['opt_param_scheduler'] = opt_param_scheduler.state_dict()
+
+        # Optimizer stuff.
+        if optimizer is not None and not optimizer.is_stub_optimizer:
+            state_dict["optimizer"] = []
+            if isinstance(optimizer, ChainedOptimizer):
+                for optim in optimizer.chained_optimizers:
+                    inner_state_dict = optim.optimizer.state_dict()
+                    shard_fp32_from_float16_groups = optim.shard_fp32_from_float16_groups
+                    state_dict["optimizer"].append({ "inner_state_dict" : inner_state_dict,
+                                                        "shard_fp32_from_float16_groups": shard_fp32_from_float16_groups})
+            elif isinstance(optimizer, DistributedOptimizer):
+                inner_state_dict = optimizer.optimizer.state_dict()
+                shard_fp32_from_float16_groups = optimizer.shard_fp32_from_float16_groups
+                state_dict["optimizer"] = { "inner_state_dict" : inner_state_dict,
+                                            "shard_fp32_from_float16_groups": shard_fp32_from_float16_groups}
+            else:
+                assert False, f"epx _dump_state_dict not support {optimizer} now."
+
+        return state_dict
+
+
+    def _load_state_dict(state_dict):
+        nonlocal optimizer
+        opt_param_scheduler.load_state_dict(state_dict["opt_param_scheduler"])
+
+        if len(model) == 1:
+            model[0].load_state_dict(state_dict["model"])
+        else:
+            for i in range(len(model)):
+                mpu.set_virtual_pipeline_model_parallel_rank(i)
+                model[i] = state_dict['model%d' % i]
+
+        if optimizer is not None and not optimizer.is_stub_optimizer:
+            if isinstance(optimizer, ChainedOptimizer):
+                optimizer_states = state_dict["optimizer"]
+                assert len(optimizer_states) == len(optimizer.chained_optimizers), "optimizer state size mismatch"
+                for optim, state in zip(optimizer.chained_optimizers, optimizer_states):
+                    optim.optimizer.load_state_dict(state["inner_state_dict"])
+                    _copy_shard_params(state["shard_fp32_from_float16_groups"], optim.shard_fp32_from_float16_groups)
+            elif isinstance(optimizer, DistributedOptimizer):
+                optimizer.optimizer.load_state_dict(state_dict["optimizer"]["inner_state_dict"])
+                _copy_shard_params(state_dict["optimizer"]["shard_fp32_from_float16_groups"], optimizer.shard_fp32_from_float16_groups)
+            else:
+                assert False, f"epx _load_state_dict not support {optimizer} now."
+
+
+    def _copy_shard_params(src_params, dst_params):
+        assert len(src_params) == len(dst_params), "param size mismatch"
+        for src, dst in zip(src_params, dst_params):
+            if src is None or dst is None:
+                continue
+
+            if isinstance(src, list) and isinstance(dst, list):
+                _copy_shard_params(src, dst)
+                continue
+
+            assert isinstance(src, torch.Tensor) and isinstance(dst, torch.Tensor), "param type mismatch"
+            assert src.shape == dst.shape, "param shape mismatch"
+            assert src.dtype == dst.dtype, "param dtype mismatch"
+            dst.data.copy_(src.data)
+
+    logger.info("epx wrapped setup_model_and_optimizer")
+
+    model, optimizer, opt_param_scheduler = wrapped(*args, **kwargs)
+    lcp = parallel_state.get_epx_data_parallel_lcp()
+
+    logger.info(f"epx register replica_state")
+    lcp.register_module("replica_state", _dump_state_dict, _load_state_dict)
+
+    logger.info(f"Start wrap optimizer by epx")
+
+    optimizer = epx_wrap_optimizer_instance(optimizer, lcp)
+
+    logger.info(f"Finished wrap optimizer by epx")
+
+    return model, optimizer, opt_param_scheduler
+
+wraped_setup_model_and_optimizer = setup_model_and_optimizer_wrapper(setup_model_and_optimizer)
+
+megatron.training.training.setup_model_and_optimizer = wraped_setup_model_and_optimizer
diff --git a/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/param_and_grad_buffer.py b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/param_and_grad_buffer.py
new file mode 100644
index 000000000..5de3b90f3
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/param_and_grad_buffer.py
@@ -0,0 +1,210 @@
+import logging
+import os
+
+import torch
+from contextlib import nullcontext
+from torch.distributed import _coalescing_manager
+
+from megatron.core.distributed.param_and_grad_buffer import _ParamAndGradBucketGroup
+import megatron.core.parallel_state as parallel_state
+from megatron.core.utils import is_torch_min_version
+
+logger = logging.getLogger(__name__)
+
+if is_torch_min_version("1.13.0"):
+    dist_all_gather_func = torch.distributed.all_gather_into_tensor
+    dist_reduce_scatter_func = torch.distributed.reduce_scatter_tensor
+else:
+    dist_all_gather_func = torch.distributed._all_gather_base
+    dist_reduce_scatter_func = torch.distributed._reduce_scatter_base
+
+def shard_buffer(buffer: torch.Tensor, data_parallel_world_size: int):
+    """
+    Shard buffer into data_parallel_world_size chunks of equal size.
+    """
+    assert buffer.numel() % data_parallel_world_size == 0
+    shard_size = buffer.numel() // data_parallel_world_size
+    sharded_buffer = [
+        buffer[(r * shard_size) : ((r + 1) * shard_size)] for r in range(data_parallel_world_size)
+    ]
+    return sharded_buffer
+
+def start_grad_sync(self):
+    """
+    Initiates grad sync (all-reduce or reduce-scatter) communication operations
+    for all buckets in the bucket group.
+
+    When ddp_config.overlap_grad_reduce is set to True, dispatches an asynchronous
+    communication call. When ddp_config.overlap_grad_reduce is set to False, makes
+    synchronous call.
+    """
+    assert (
+        self.grad_reduce_handle is None
+    ), 'Should not have multiple communication calls outstanding at once'
+    #print('before')
+
+    if self.ddp_config.check_for_nan_in_grad or self.ddp_config.check_for_large_grads:
+        self.check_grads(
+            check_for_nan_or_inf=self.ddp_config.check_for_nan_in_grad,
+            check_for_large=self.ddp_config.check_for_large_grads,
+        )
+
+    # gradient_scaling_factor already takes into account whether we are computing
+    # an average or sum in the data-parallel collective.
+    for bucket in self.buckets:
+        if bucket.gradient_scaling_factor != 1.0:
+            bucket.grad_data *= bucket.gradient_scaling_factor
+
+    # Decide reduce_op.
+    reduce_op = torch.distributed.ReduceOp.SUM
+    if self.ddp_config.average_in_collective:
+        reduce_op = torch.distributed.ReduceOp.AVG
+
+    # We use the following stream synchronization for the gradient reduction
+    # within and across DistOpt instances.
+
+    # Compute Stream: -------------Gradient compute-------------------
+    # Comm. Stream:   ------(wait for NCCL)-----(wait for NCCL)-------
+    # NCCL Stream:          -------RS------     -------AR------
+
+    # Use async communications only when overlap_grad_reduce is True.
+    async_op = (
+        self.ddp_config.overlap_grad_reduce
+        and self.ddp_config.num_distributed_optimizer_instances == 1
+    )
+    if (
+        self.ddp_config.num_distributed_optimizer_instances > 1
+        and self.ddp_config.overlap_grad_reduce
+    ):
+        # Assign a communication stream if we have multiple DistOpt instances and we
+        # need to overlap communication.
+        stream_context = torch.cuda.stream(self.communication_stream)
+
+        # The RS/AR communication stream needs to wait for the default stream
+        # to complete its gradient computation before launching the next
+        # gradient reduction collective.
+        self.communication_stream.wait_stream(torch.cuda.default_stream())
+    else:
+        stream_context = nullcontext()
+
+    if self.ddp_config.use_distributed_optimizer:
+        communication_group = self.intra_distributed_optimizer_instance_group
+    else:
+        communication_group = self.data_parallel_group
+
+    # Coalesce communication kernels across buckets in the bucket group.
+    with stream_context, _coalescing_manager(communication_group, async_ops=async_op) as cm:
+        for bucket in self.buckets:
+            if self.ddp_config.use_distributed_optimizer:
+                local_data_view = shard_buffer(
+                    bucket.grad_data, self.intra_distributed_optimizer_instance_size
+                )[self.intra_distributed_optimizer_instance_rank]
+
+                dist_reduce_scatter_func(
+                    local_data_view,
+                    bucket.grad_data,
+                    op=reduce_op,
+                    group=communication_group,
+                    async_op=async_op,
+                )
+
+                if int(os.getenv("USE_EPX", 0)) and not async_op:
+                    epx_sync_grad_across_instances(local_data_view)
+            else:
+                torch.distributed.all_reduce(
+                    bucket.grad_data, op=reduce_op, group=communication_group, async_op=async_op
+                )
+                if int(os.getenv("USE_EPX", 0)) and not async_op:
+                    epx_sync_grad_across_instances(bucket.grad_data)
+
+    # print('before before allreduce')
+    # With multiple DistOpt instances, we need to all-reduce across instances.
+    if (
+        self.ddp_config.use_distributed_optimizer
+        and self.ddp_config.num_distributed_optimizer_instances > 1
+    ):
+        # Create a new coalescing manager for the inter-instance all-reduce.
+        with stream_context, _coalescing_manager(
+            self.inter_distributed_optimizer_instance_group, async_ops=async_op
+        ) as cm:
+            for bucket in self.buckets:
+                local_data_view = shard_buffer(
+                    bucket.grad_data, self.intra_distributed_optimizer_instance_size
+                )[self.intra_distributed_optimizer_instance_rank]
+                # print('before all reduce')
+                torch.distributed.all_reduce(
+                    local_data_view,
+                    op=reduce_op,
+                    group=self.inter_distributed_optimizer_instance_group,
+                    async_op=async_op,
+                )
+                # print('after all reduce')
+    # print('after after allreduce')
+
+    if async_op:
+        self.grad_reduce_handle = cm
+    else:
+        # When using `_coalescing_manager`, even if a synchronous op (async_op=False) is used,
+        # `cm` is not None, which is different from when `_coalescing_manager` is not used in
+        # which case the torch.distributed._reduce_scatter_base() will return None. In order to
+        # maintain consistency with prior code, we need to manually set communication handle to
+        # None.
+        self.grad_reduce_handle = None
+
+def finish_grad_sync(self):
+    """
+    Finishes grad sync (all-reduce or reduce-scatter) communication operations
+    for all buckets in the bucket group.
+
+    When ddp_config.overlap_grad_reduce is set to True, waits for asynchronous
+    communication call to complete. When ddp_config.overlap_grad_reduce is set to False,
+    makes synchronous call.
+    """
+    self.param_gather_dispatched = False
+
+    # If overlap_grad_reduce is False, start (and finish) synchronous communication call here.
+    # print(f'before self.ddp_config.overlap_grad_reduce is {self.ddp_config.overlap_grad_reduce}')
+    if not self.ddp_config.overlap_grad_reduce:
+        self.start_grad_sync()
+        return
+    # print(f'after self.ddp_config.overlap_grad_reduce is {self.ddp_config.overlap_grad_reduce}')
+    # When using multiple DistOpt instances, we don't need to sync here as we launch
+    # communications on a separate communication stream.
+    if self.ddp_config.num_distributed_optimizer_instances > 1:
+        torch.cuda.default_stream().wait_stream(self.communication_stream)
+        return
+    assert self.grad_reduce_handle is not None, (
+        f'Communication call has not been issued for this bucket '
+        f'({len(self.params_with_grad)}/{len(self.params)} params have grad available)'
+    )
+    self.grad_reduce_handle.wait()
+    self.grad_reduce_handle = None
+
+    # TODO: Using `_coalescing_manager` to optimize code structure.
+    if int(os.getenv("USE_EPX", 0)):
+        for bucket in self.buckets:
+            if self.ddp_config.use_distributed_optimizer:
+                local_data_view = shard_buffer(
+                    bucket.grad_data, self.intra_distributed_optimizer_instance_size
+                )[self.intra_distributed_optimizer_instance_rank]
+                if int(os.getenv("USE_EPX", 0)):
+                    epx_sync_grad_across_instances(local_data_view)
+            else:
+                if int(os.getenv("USE_EPX", 0)):
+                    epx_sync_grad_across_instances(bucket.grad_data)
+
+def epx_sync_grad_across_instances(tensor):
+    """
+    Sync grad across instances.
+    """
+    lcp = parallel_state.get_epx_data_parallel_lcp()
+    # TODO: avoid assemble before each allreduce
+    lcp.assemble()
+    logger.info("start epx allreduce")
+    logger.debug(f"grad before epx allreduce : {tensor[:10]}")
+    lcp.allreduce([tensor]).wait()
+    logger.info("finished epx allreduce")
+    logger.debug(f"grad after epx allreduce : {tensor[:10]}")
+
+_ParamAndGradBucketGroup.start_grad_sync = start_grad_sync
+_ParamAndGradBucketGroup.finish_grad_sync = finish_grad_sync
diff --git a/megatron-lm-musa-patch/musa_patch/fused_bias_swiglu.py b/megatron-lm-musa-patch/musa_patch/fused_bias_swiglu.py
new file mode 100644
index 000000000..5c2c2e58f
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fused_bias_swiglu.py
@@ -0,0 +1,27 @@
+import torch
+import torch.nn.functional as F
+
+
+class MusaSwiGLUFunction(torch.autograd.Function):
+    @staticmethod
+    def forward(ctx, input, fp8_input_store):
+        ctx.save_for_backward(input)
+        ctx.fp8_input_store = fp8_input_store
+        return torch.ops.aten._fused_swiglu_forward(input)
+
+    @staticmethod
+    def backward(ctx, grad_output):
+        (input, ) = ctx.saved_tensors
+        return torch.ops.aten._fused_swiglu_backward(grad_output, input), None
+
+
+import megatron.core.fusions.fused_bias_swiglu
+megatron.core.fusions.fused_bias_swiglu.SwiGLUFunction = MusaSwiGLUFunction
+
+# import sys
+# for k in sys.modules:
+#     if k.startswith('megatron.core.fusions.fused_bias_swiglu'):
+#         for target in ['bias_swiglu_impl']:
+#             if getattr(sys.modules[k], target, None):
+#                 print(f'target is {target}')
+#                 setattr(sys.modules[k], target, bias_swiglu_impl)
diff --git a/megatron-lm-musa-patch/musa_patch/fused_layer_norm.py b/megatron-lm-musa-patch/musa_patch/fused_layer_norm.py
new file mode 100644
index 000000000..6faadd898
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fused_layer_norm.py
@@ -0,0 +1,99 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+import numbers
+
+import torch
+import torch_musa
+from torch import Tensor
+from torch.nn import init
+from torch.nn.parameter import Parameter
+
+from megatron.core.transformer import TransformerConfig
+
+
+
+class FusedLayerNorm(torch.nn.Module):
+
+    """Layer Norm, fused into a single CUDA kernel.
+
+    Args:
+      hidden_size (int): Transformer hidden dimension.
+
+      eps (float): Epsilon added to denominator, for numerical stability.
+
+      persist_layer_norm (bool): Use persistent fused layer norm kernel.
+      This kernel supports only a set of hidden sizes. Please
+      check persist_ln_hidden_sizes if your hidden size is supported.
+
+      zero_centered_gamma (bool): Adjust LayerNorm weights such that they are
+      centered around zero. This improves numerical stability.
+
+      config (TransformerConfig): Transformer config. Include to match custom
+      layer norm interfaces.
+
+      normalization (str): Normalization type, used for Transformer Engine.
+      Must equal 'LayerNorm' here.
+    """
+
+    def __init__(
+        self,
+        config: TransformerConfig,
+        hidden_size: int,
+        eps: float = 1e-5,
+        persist_layer_norm: bool = True,
+        zero_centered_gamma: bool = False,
+        normalization: str = "LayerNorm",  # included to match TE interface
+    ):
+        super().__init__()
+        print("use FusedLayerNorm")
+
+        self.config = config
+
+        self.zero_centered_gamma = self.config.layernorm_zero_centered_gamma
+
+        if self.config.normalization == "LayerNorm":
+            self.norm_impl = torch.layer_norm
+        elif self.config.normalization == "RMSNorm":
+            self.norm_impl = torch.rms_norm
+        else:
+            raise ValueError(f'({self.config.normalization}) is not supported in FusedLayerNorm')
+
+        if isinstance(hidden_size, numbers.Integral):
+            hidden_size = (hidden_size,)
+        # self.hidden_size = torch.Size(hidden_size)
+        self.hidden_size = hidden_size
+        self.eps = eps
+        self.weight = Parameter(torch.Tensor(*hidden_size))
+        self.bias = Parameter(torch.Tensor(*hidden_size)) if self.config.normalization == "LayerNorm" else None
+        self.reset_parameters()
+        self.sequence_parallel = self.config.sequence_parallel
+
+
+        # set sequence parallelism flag on weight and bias parameters
+        setattr(self.weight, 'sequence_parallel', self.sequence_parallel)
+        if self.config.normalization == "LayerNorm":
+            setattr(self.bias, 'sequence_parallel', self.sequence_parallel)
+
+    def reset_parameters(self):
+
+        if self.zero_centered_gamma:
+            init.zeros_(self.weight)
+            if self.config.normalization == "LayerNorm":
+                init.zeros_(self.bias)
+        else:
+            init.ones_(self.weight)
+            if self.config.normalization == "LayerNorm":
+                init.zeros_(self.bias)
+
+    def forward(self, input: Tensor) -> Tensor:
+
+        weight = self.weight + 1 if self.zero_centered_gamma else self.weight
+        if self.config.normalization == "LayerNorm":
+            output = self.norm_impl(input, self.hidden_size, weight, self.bias, self.eps)
+        else:
+            output = self.norm_impl(input, self.hidden_size, weight, self.eps)
+
+        return output
+
+import megatron.core.fusions.fused_layer_norm
+megatron.core.fusions.fused_layer_norm.FusedLayerNorm = FusedLayerNorm
diff --git a/megatron-lm-musa-patch/musa_patch/linear_with_grad_accumulation_and_async_allreduce.py b/megatron-lm-musa-patch/musa_patch/linear_with_grad_accumulation_and_async_allreduce.py
new file mode 100644
index 000000000..b64915201
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/linear_with_grad_accumulation_and_async_allreduce.py
@@ -0,0 +1,188 @@
+# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
+
+# Parts of the code here are adapted from PyTorch
+# repo: https://github.com/pytorch/pytorch
+
+import io
+import math
+import os
+import warnings
+from typing import Any, Callable, List, Optional, Tuple
+
+import torch
+import torch.nn.functional as F
+import torch.nn.init as init
+from torch.cuda.amp import custom_bwd, custom_fwd
+from torch.nn.parameter import Parameter
+
+from megatron.core.parallel_state import (
+    get_global_memory_buffer,
+    get_tensor_model_parallel_group,
+    get_tensor_model_parallel_world_size,
+)
+
+from megatron.core.utils import prepare_input_tensors_for_wgrad_compute
+import fused_weight_gradient_mlp_cuda
+
+class LinearWithGradAccumulationAndAsyncCommunication(torch.autograd.Function):
+    """See linear_with_grad_accumulation_and_async_allreduce"""
+
+    @staticmethod
+    @custom_fwd
+    def forward(
+        ctx,
+        input,
+        weight,
+        bias,
+        gradient_accumulation_fusion,
+        allreduce_dgrad,
+        sequence_parallel,
+        grad_output_buffer,
+        wgrad_deferral_limit,
+    ):  
+        ctx.save_for_backward(input, weight)
+        ctx.use_bias = bias is not None
+        ctx.gradient_accumulation_fusion = gradient_accumulation_fusion
+        ctx.allreduce_dgrad = allreduce_dgrad
+        ctx.sequence_parallel = sequence_parallel
+        ctx.wgrad_deferral_limit = wgrad_deferral_limit
+        ctx.grad_output_buffer = grad_output_buffer
+
+        if sequence_parallel:
+            world_size = get_tensor_model_parallel_world_size()
+            dim_size = list(input.size())
+            dim_size[0] = dim_size[0] * world_size
+
+            all_gather_buffer = get_global_memory_buffer().get_tensor(dim_size, input.dtype, "mpu")
+            torch.distributed._all_gather_base(
+                all_gather_buffer, input, group=get_tensor_model_parallel_group()
+            )
+            total_input = all_gather_buffer
+        else:
+            total_input = input
+
+        output = torch.matmul(total_input, weight.t())
+        if bias is not None:
+            output = output + bias
+        return output
+
+    @staticmethod
+    @custom_bwd
+    def backward(ctx, grad_output):
+        input, weight = ctx.saved_tensors
+        use_bias = ctx.use_bias
+        grad_output_buffer = ctx.grad_output_buffer
+        wgrad_deferral_limit = ctx.wgrad_deferral_limit
+        
+        wgrad_compute = True
+        # if grad_output_buffer is not None:
+        #     grad_output_buffer.append(grad_output)
+        #     wgrad_compute = False
+
+        if grad_output_buffer is not None:
+            if wgrad_deferral_limit == 0 or len(grad_output_buffer) < wgrad_deferral_limit:
+                grad_output_buffer.append(grad_output)
+                wgrad_compute = False
+
+        if wgrad_compute:
+            if ctx.sequence_parallel:
+                world_size = get_tensor_model_parallel_world_size()
+                dim_size = list(input.size())
+                dim_size[0] = dim_size[0] * world_size
+
+                all_gather_buffer = get_global_memory_buffer().get_tensor(
+                    dim_size, input.dtype, "mpu"
+                )
+                handle = torch.distributed._all_gather_base(
+                    all_gather_buffer, input, group=get_tensor_model_parallel_group(), async_op=True
+                )
+                handle.wait()
+                # Here we rely on CUDA_DEVICE_MAX_CONNECTIONS=1 to ensure that the
+                # gather is scheduled before the input gradient computation
+                total_input = all_gather_buffer
+            else:
+                total_input = input
+        grad_input = grad_output.matmul(weight)
+
+        # if ctx.sequence_parallel and wgrad_compute:
+        #     handle.wait()
+
+        if wgrad_compute:
+            grad_output, total_input = prepare_input_tensors_for_wgrad_compute(
+                grad_output, total_input
+            )
+
+        if ctx.allreduce_dgrad:
+            # Asynchronous all-reduce
+            handle = torch.distributed.all_reduce(
+                grad_input, group=get_tensor_model_parallel_group(), async_op=True
+            )
+            # Here we rely on CUDA_DEVICE_MAX_CONNECTIONS=1 to ensure that the
+            # all-reduce is scheduled before the weight gradient computation
+
+        if ctx.sequence_parallel:
+            assert not ctx.allreduce_dgrad
+            dim_size = list(input.size())
+            sub_grad_input = torch.empty(
+                dim_size, dtype=input.dtype, device=torch.cuda.current_device(), requires_grad=False
+            )
+            # reduce_scatter
+            handle = torch.distributed._reduce_scatter_base(
+                sub_grad_input, grad_input, group=get_tensor_model_parallel_group(), async_op=True
+            )
+            handle.wait()
+            # Here we rely on CUDA_DEVICE_MAX_CONNECTIONS=1 to ensure that the
+            # reduce scatter is scheduled before the weight gradient computation
+
+        if ctx.gradient_accumulation_fusion:
+            if wgrad_compute:
+                if weight.main_grad.dtype == torch.float32:
+                    fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp32(
+                        total_input, grad_output, weight.main_grad
+                    )
+                elif weight.main_grad.dtype in (torch.float16, torch.bfloat16):
+                    fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp16(
+                        total_input, grad_output, weight.main_grad
+                    )
+                else:
+                    raise RuntimeError("Unsupported gradient type for gradient accumulation fusion")
+            # torch.addmm(weight.main_grad, grad_output.t(), total_input, out=weight.main_grad)
+            if hasattr(weight, 'grad_added_to_main_grad'):
+                # When overlap_grad_reduce is True, need to ensure that backward hooks
+                # are all run on the main backprop thread to prevent deadlocks. Setup
+                # dummy grad_weight tensor to prevent backward hooks from being run
+                # in a background thread.
+                if getattr(weight, 'zero_out_wgrad', False):
+                    grad_weight = torch.zeros(
+                        weight.main_grad.shape,
+                        dtype=input.dtype,
+                        device=torch.cuda.current_device(),
+                        requires_grad=False,
+                    )
+                else:
+                    grad_weight = torch.empty(
+                        weight.main_grad.shape,
+                        dtype=input.dtype,
+                        device=torch.cuda.current_device(),
+                        requires_grad=False,
+                    )
+                weight.grad_added_to_main_grad = True
+            else:
+                grad_weight = None
+        else:
+            grad_weight = grad_output.t().matmul(total_input)
+        grad_bias = grad_output.sum(dim=0) if use_bias else None
+
+        if ctx.sequence_parallel:
+            # handle.wait()
+            # Need to return None's as gradient has to flow for all the input arguments
+            # provided during forward
+            return sub_grad_input, grad_weight, grad_bias, None, None, None, None, None
+
+        if ctx.allreduce_dgrad:
+            handle.wait()
+        return grad_input, grad_weight, grad_bias, None, None, None, None, None
+
+
+import megatron.core.tensor_parallel.layers
+megatron.core.tensor_parallel.layers.LinearWithGradAccumulationAndAsyncCommunication = LinearWithGradAccumulationAndAsyncCommunication
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/moe_utils.py b/megatron-lm-musa-patch/musa_patch/moe_utils.py
new file mode 100644
index 000000000..9f83c1535
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/moe_utils.py
@@ -0,0 +1,244 @@
+
+import math
+from typing import Optional, List
+
+import torch
+
+from megatron.core import parallel_state
+import megatron.core.transformer.moe.moe_utils
+from megatron.core.tensor_parallel.mappings import gather_from_sequence_parallel_region
+
+get_capacity = megatron.core.transformer.moe.moe_utils.get_capacity
+group_limited_topk = megatron.core.transformer.moe.moe_utils.group_limited_topk
+
+
+def sequence_load_balancing_loss_func(
+    probs: torch.Tensor,
+    routing_map: torch.Tensor,
+    batch_size: int,
+    seq_length: int,
+    topk: int,
+    moe_aux_loss_coeff: float,
+    sequence_partition_group=None,
+    moe_device_level_aux_loss_coeff: float=None,
+    moe_comm_aux_loss_coeff: float=None,
+    moe_router_topk_limited_devices: float=None,
+    moe_complementary_seq_aux_loss: bool=False,
+):
+    """
+    Calculate the auxiliary loss in sequence-level by computing the loss for each individual sample.
+    Refer to the DeepSeek-V2 huggingface repo
+    (https://huggingface.co/deepseek-ai/DeepSeek-V2) for details.
+
+    Args:
+        probs (torch.Tensor): Softmax probabilities output by the router for each token.
+                              Shape in [num_tokens, num_experts].
+        routing_map (torch.Tensor): Mapping of tokens to experts assignment.
+                                    Shape in [num_tokens, num_experts].
+        batch_size (int): Batch size to process.
+        seq_length (int): Sequence length to process.
+        topk (int): Number of experts to route to for each token.
+        moe_aux_loss_coeff (float): Scaling coefficient for the auxiliary loss.
+        sequence_partition_group (optional): The parallel group over which the sequence is
+                                             partitioned. If None, no partitioning is applied.
+                                             Defaults to None.
+
+    Returns:
+        torch.Tensor: The sequence auxiliary loss for load balancing.
+    """
+    num_sub_sequence = 1
+    num_experts = probs.shape[1]
+
+    probs_for_aux_loss = probs.view(seq_length, batch_size, -1)
+    routing_map = routing_map.view(seq_length, batch_size, -1)
+
+    # If the sequence is partitioned by certain parallelism strategies like Sequence Parallelism
+    # or Context Parallelism, compute the gradient of the auxiliary loss with respect to the full
+    # sequence.
+    if sequence_partition_group is not None:
+        num_sub_sequence = torch.distributed.get_world_size(sequence_partition_group)
+        seq_length *= num_sub_sequence
+        probs_for_aux_loss = gather_from_sequence_parallel_region(
+            probs_for_aux_loss, group=sequence_partition_group
+        )
+
+    cost_coeff = routing_map.sum(dim=0, dtype=torch.float).div_(seq_length * topk / num_experts)
+    if moe_complementary_seq_aux_loss:
+        assert (
+            (moe_device_level_aux_loss_coeff is None) and 
+            (moe_comm_aux_loss_coeff is None)
+            ), "moe_complementary_seq_aux_loss only used in deepseekV3, which means no other aux loss used"
+        sum_value = probs_for_aux_loss.sum(dim=-1, keepdim=True)
+        probs_for_aux_loss = probs_for_aux_loss / (sum_value + 1e-20)
+    seq_aux_loss = (cost_coeff * probs_for_aux_loss.mean(dim=0)).sum(dim=1).mean()
+    seq_aux_loss *= moe_aux_loss_coeff
+
+    if moe_device_level_aux_loss_coeff is not None:
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        device_aux_loss = (cost_coeff.view(batch_size, num_group, -1).mean(dim=2) * 
+                           probs_for_aux_loss.mean(dim=0).view(batch_size, num_group, -1).sum(dim=2)).sum(dim=1).mean()
+        device_aux_loss *= moe_device_level_aux_loss_coeff
+        seq_aux_loss += device_aux_loss
+    if moe_comm_aux_loss_coeff is not None:
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        cost_coeff = routing_map.view(seq_length, batch_size, num_group, -1).any(dim=3).sum(dim=0).float()
+        cost_coeff.div_(seq_length *  moe_router_topk_limited_devices / num_group)
+        comm_aux_loss = (cost_coeff * 
+                           probs_for_aux_loss.mean(dim=0).view(batch_size, num_group, -1).sum(dim=2)).sum(dim=1).mean()
+        comm_aux_loss *= moe_comm_aux_loss_coeff
+        seq_aux_loss += comm_aux_loss
+        
+    return seq_aux_loss
+
+def topk_softmax_with_capacity(
+    logits: torch.Tensor,
+    topk: int,
+    capacity_factor: Optional[float] = None,
+    pad_to_capacity: bool = False,
+    drop_policy: str = "probs",
+    use_pre_softmax: bool = False,
+    num_groups: Optional[int] = None,
+    group_topk: Optional[int] = None,
+    scaling_factor: Optional[float] = None,
+    deterministic_mode: bool = False,
+    score_function: str = "softmax",
+    expert_bias: Optional[torch.Tensor] = None,
+    device_level_capacity: bool = False,
+):
+    """Apply capacity and padding to the top-k selection.
+    Args:
+        logits (torch.Tensor): Logits tensor.
+        topk (int): The number of experts to select for each token.
+        capacity_factor (float): The capacity factor of each expert. Will drop tokens if the number
+                               of tokens exceeds the capacity.
+        pad_to_capacity (bool): Whether to need padding in token drop mode. The probs for padded
+                               tokens will be 0.
+        drop_policy (str): The policy to drop tokens. Can be either "prob" or "position".
+                           If "prob", the tokens with the lowest probabilities will be dropped.
+                           If "position", tokens at the end of each batch will be dropped.
+        use_pre_softmax (bool): Whether to apply softmax before top-k selection.
+        num_groups (int): Number of groups for routed experts.
+        group_topk (int): Number of selected groups for each token.
+        scaling_factor (float): Scaling factor of routing score in top-k selection.
+        deterministic_mode (bool): Deprecated.
+        score_function (str): The score function to use. Can be either "softmax" or "sigmoid".
+        expert_bias (torch.Tensor): The bias added to logits for expert routing.
+
+    Returns:
+        Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
+            - routing_probs (torch.Tensor): A tensor of shape [num_tokens, num_experts] containing
+              the routing probabilities for each token to each expert.
+            - routing_map (torch.Tensor): A mask tensor of shape [num_tokens, num_experts]
+              indicating which experts were selected for each token. True values represent
+              the selected experts.
+            - tokens_per_expert (torch.Tensor): A tensor of shape [num_experts] containing
+              the number of local tokens assigned to each expert before dropping and padding.
+    """
+    assert logits.dim() == 2, f"Expected 2D logits [num_tokens, num_experts], got {logits.dim()}."
+    num_tokens, num_experts = logits.shape
+
+    def compute_topk(scores, topk, num_groups=None, group_topk=None):
+        if group_topk:
+            return group_limited_topk(
+                scores=scores,
+                topk=topk,
+                num_tokens=num_tokens,
+                num_experts=num_experts,
+                num_groups=num_groups,
+                group_topk=group_topk,
+            )
+        else:
+            return torch.topk(scores, k=topk, dim=1)
+
+    if score_function == "softmax":
+        if use_pre_softmax:
+            scores = torch.softmax(logits, dim=-1, dtype=torch.float32).type_as(logits)
+            probs, top_indices = compute_topk(scores, topk, num_groups, group_topk)
+        else:
+            scores, top_indices = compute_topk(logits, topk, num_groups, group_topk)
+            probs = torch.softmax(scores, dim=-1, dtype=torch.float32).type_as(logits)
+    elif score_function == "sigmoid":
+        scores = torch.sigmoid(logits)
+        if expert_bias is not None:
+            scores_for_routing = scores + expert_bias
+            _, top_indices = compute_topk(scores_for_routing, topk, num_groups, group_topk)
+            scores = torch.gather(scores, dim=1, index=top_indices).type_as(logits)
+        else:
+            scores, top_indices = compute_topk(scores, topk, num_groups, group_topk)
+        probs = scores / (scores.sum(dim=-1, keepdim=True) + 1e-20) if topk > 1 else scores
+    else:
+        raise ValueError(f"Invalid score_function: {score_function}")
+
+    if scaling_factor:
+        probs = probs * scaling_factor
+
+    # TODO Try using element-wise operations instead of scatter?
+    topk_masked_gates = torch.zeros_like(logits).scatter(1, top_indices, probs)
+    topk_map = torch.zeros_like(logits).int().scatter(1, top_indices, 1).bool()
+    tokens_per_expert = topk_map.sum(dim=0)
+
+    if capacity_factor is None:
+        # TopK without capacity
+        return topk_masked_gates, topk_map, tokens_per_expert
+    elif device_level_capacity:
+        assert drop_policy=='probs', f"only support 'probs' for device_level capacity, but get {drop_policy}"
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        device_expert_capacity = get_capacity(
+            num_tokens=num_tokens * topk, num_experts=num_experts, capacity_factor=capacity_factor
+        )*num_experts//num_group
+        # Maskout exceeded tokens
+        if drop_policy == "probs":
+            topk_masked_group_gates = topk_masked_gates.view(num_tokens, num_group, -1)
+            topk_masked_group_gates = topk_masked_group_gates.permute(0,2,1).reshape(-1, num_group)
+            _, capacity_indices = torch.topk(
+                topk_masked_group_gates, k=device_expert_capacity, dim=0, sorted=False
+            )
+            capacity_mask = torch.zeros([num_tokens*num_experts//num_group, num_group], device=logits.device).scatter(0, capacity_indices, 1).bool()
+            capacity_mask = capacity_mask.view(num_tokens, num_experts//num_group, num_group).permute(0,2,1).reshape(num_tokens, -1)
+        else:
+            raise ValueError(f"Invalid drop_policy: {drop_policy}")
+
+        if pad_to_capacity:
+            final_map = capacity_mask
+            final_probs = topk_masked_gates * final_map
+        else:
+            # Get exceed mask and maskout exceeded probs and indices
+            final_map = torch.logical_and(topk_map, capacity_mask)
+            final_probs = topk_masked_gates * final_map
+        return final_probs, final_map, tokens_per_expert
+    else:
+        # TopK with capacity
+        expert_capacity = get_capacity(
+            num_tokens=num_tokens * topk, num_experts=num_experts, capacity_factor=capacity_factor
+        )
+
+        # Maskout exceeded tokens
+        if drop_policy == "probs":
+            _, capacity_indices = torch.topk(
+                topk_masked_gates, k=expert_capacity, dim=0, sorted=False
+            )
+            capacity_mask = torch.zeros_like(logits).scatter(0, capacity_indices, 1).bool()
+        elif drop_policy == "position":
+            _, capacity_indices = torch.topk(topk_map.int(), k=expert_capacity, dim=0, sorted=False)
+            capacity_mask = torch.zeros_like(logits).scatter(0, capacity_indices, 1).bool()
+        else:
+            raise ValueError(f"Invalid drop_policy: {drop_policy}")
+
+        if pad_to_capacity:
+            final_map = capacity_mask
+            final_probs = topk_masked_gates * final_map
+        else:
+            # Get exceed mask and maskout exceeded probs and indices
+            final_map = torch.logical_and(topk_map, capacity_mask)
+            final_probs = topk_masked_gates * final_map
+        return final_probs, final_map, tokens_per_expert
+
+
+megatron.core.transformer.moe.moe_utils.sequence_load_balancing_loss_func = sequence_load_balancing_loss_func
+megatron.core.transformer.moe.moe_utils.topk_softmax_with_capacity = topk_softmax_with_capacity
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/optimizer.py b/megatron-lm-musa-patch/musa_patch/optimizer.py
new file mode 100644
index 000000000..7ac548516
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/optimizer.py
@@ -0,0 +1,238 @@
+# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
+import logging
+import warnings
+from typing import Callable, Dict, List, Optional, Tuple
+
+import os
+import torch
+from torch.optim import SGD as CPUSGD
+
+try:
+    from transformer_engine.pytorch.optimizers import FusedAdam as Adam
+    from transformer_engine.pytorch.optimizers import FusedSGD as SGD
+except ImportError:
+    try:
+        from apex.optimizers import FusedAdam as Adam
+        from apex.optimizers import FusedSGD as SGD
+    except ImportError:
+        import warnings
+
+        warnings.warn(
+            f'Transformer Engine and Apex are not installed. Falling back to Torch optimizers.'
+        )
+
+        # Apex's FusedAdam is a drop-in replacement for torch's AdamW.
+        # pylint: disable-next=line-too-long.
+        # See https://github.com/NVIDIA/apex/blob/7b73b12361068a10b0f44844534613f252a5ea75/apex/optimizers/fused_adam.py#L16.
+        from torch.optim import AdamW as Adam, SGD
+
+from megatron.core.optimizer.cpu_offloading.hybrid_optimizer import HybridDeviceOptimizer
+from megatron.core.distributed.param_and_grad_buffer import _ParamAndGradBuffer
+from megatron.core.transformer.module import MegatronModule
+from megatron.core.optimizer.distrib_optimizer import DistributedOptimizer
+from megatron.core.optimizer.grad_scaler import ConstantGradScaler, DynamicGradScaler
+from megatron.core.optimizer import (
+    Float16OptimizerWithFloat16Params,
+    FP32Optimizer,
+    MegatronOptimizer,
+)
+from megatron.core.optimizer.optimizer_config import OptimizerConfig
+from megatron.core.utils import is_te_min_version
+
+
+logger = logging.getLogger(__name__)
+
+def _get_megatron_optimizer_based_on_param_groups(
+    config: OptimizerConfig,
+    model_chunks: List[MegatronModule],
+    param_groups: List,
+    per_model_buffers: Optional[Dict[int, List[_ParamAndGradBuffer]]] = None,
+    model_parallel_group: Optional[torch.distributed.ProcessGroup] = None,
+    data_parallel_group: Optional[torch.distributed.ProcessGroup] = None,
+    data_parallel_group_gloo: Optional[torch.distributed.ProcessGroup] = None,
+    data_parallel_group_idx: Optional[int] = None,
+    distributed_optimizer_instance_id: Optional[int] = 0,
+) -> MegatronOptimizer:
+    """Get Megatron optimizer based on parameter groups.
+
+    Args:
+        config (OptimizerConfig): optimizer configuration object.
+        model_chunks (list): list of model chunks.
+        param_groups (list): list of parameter groups.
+        per_model_buffers (dict, optional): buffers for distributed optimizer. Defaults to None.
+        data_parallel_group (torch.distributed.ProcessGroup, optional): data-parallel group for
+            distributed optimizer. Defaults to None.
+        data_parallel_group_gloo (torch.distributed.ProcessGroup, optional): gloo data-parallel
+            group for distributed optimizer. Defaults to None.
+        data_parallel_group_idx (int, optional): data-parallel group index for distributed
+            optimizer. Defaults to None.
+        distributed_optimizer_instance_id (int, optional): Distributed optimizer instance. Defaults
+            0.
+
+    Returns:
+        Instance of MegatronOptimizer.
+    """
+    # when freezing sub-models we may have no trainable parameters on a rank and
+    # hence an empty param_groups. However, we still need to create an optimizer
+    # for the purposes of grad stats reductions
+    if param_groups:
+        if config.optimizer_cpu_offload:
+            if torch.__version__ < '2.3.0':
+                # is_available = lambda: False
+                # set cuda not available for complex cuda inspection
+                torch.cuda.is_available = lambda : False
+                # use DeepSpeedCPUAdam for better performance
+                from deepspeed.ops.adam import DeepSpeedCPUAdam as CPUAdam
+                # reset the cuda availability back to normal
+                torch.cuda.is_available = torch.musa.is_available
+                warnings.warn("We use DeepSpeedCPUAdam instead of torch.optim.AdamW "
+                              "for better performace if torch.version < 2.3.0.")
+            else:
+                # torch.optim.AdamW supports __fused_adamw when torch.version >= 2.3.0
+                from torch.optim import AdamW as CPUAdam
+
+            # cpu optimizer offload must config use_precision_aware_optimizer to True,
+            # we should reconfig use_precision_aware_optimizer to break the compatibility.
+            if not int(os.getenv("CPU_OPTIMIZER_PRECISION_AWARE_RECONFIG", 0)):
+                config.use_precision_aware_optimizer = False
+
+            gpu_optimizer_cls = Adam if config.optimizer == 'adam' else SGD
+            cpu_optimizer_cls = CPUAdam if config.optimizer == 'adam' else CPUSGD
+            if config.use_torch_optimizer_for_cpu_offload:
+                gpu_optimizer_cls = cpu_optimizer_cls
+            if config.optimizer == 'adam':
+                gpu_optimizer_cls = Adam
+                cpu_optimizer_cls = CPUAdam
+                optimizer_defaults = dict(
+                    lr=config.lr,
+                    weight_decay=config.weight_decay,
+                    betas=(config.adam_beta1, config.adam_beta2),
+                    eps=config.adam_eps,
+                    bias_correction=True,
+                    fused=True,  # this flag is used to improve the performance of the cpu optimizer
+                )
+            else:
+                gpu_optimizer_cls = SGD
+                cpu_optimizer_cls = CPUSGD
+                optimizer_defaults = dict(
+                    lr=config.lr, weight_decay=config.weight_decay, momentum=config.sgd_momentum
+                )
+
+            optimizer = HybridDeviceOptimizer(
+                param_groups,
+                offload_fraction=config.optimizer_offload_fraction,
+                cpu_optimizer_cls=cpu_optimizer_cls,
+                gpu_optimizer_cls=gpu_optimizer_cls,
+                overlap_cpu_optimizer_d2h_h2d=config.overlap_cpu_optimizer_d2h_h2d,
+                pin_cpu_grads=config.pin_cpu_grads,
+                pin_cpu_params=config.pin_cpu_params,
+                param_update_in_fp32=True,
+                **optimizer_defaults,
+            )
+            init_state_fn = None
+        elif config.optimizer == 'adam':
+            kwargs = {
+                "params": param_groups,
+                "lr": config.lr,
+                "weight_decay": config.weight_decay,
+                "betas": (config.adam_beta1, config.adam_beta2),
+                "eps": config.adam_eps,
+            }
+
+            if config.use_precision_aware_optimizer:
+                kwargs.update(
+                    {
+                        "master_weights": True,
+                        "use_decoupled_grad": True,
+                        "master_weight_dtype": config.main_params_dtype,
+                        "exp_avg_dtype": config.exp_avg_dtype,
+                        "exp_avg_sq_dtype": config.exp_avg_sq_dtype,
+                    }
+                )
+
+                if is_te_min_version("2.1.0.dev0"):
+                    kwargs.update({"store_param_remainders": True})
+
+            optimizer = Adam(**kwargs)
+
+            def init_state_fn(opt, config=None):
+                for group in opt.param_groups:
+                    for p in group['params']:
+                        if len(opt.state[p]) == 0:
+                            if config is None or not config.use_precision_aware_optimizer:
+                                opt.state[p]['exp_avg'] = torch.zeros_like(p.data)
+                                opt.state[p]['exp_avg_sq'] = torch.zeros_like(p.data)
+                            else:
+                                opt.initialize_state(p)
+
+        elif config.optimizer == 'sgd':
+            optimizer = SGD(
+                param_groups,
+                lr=config.lr,
+                weight_decay=config.weight_decay,
+                momentum=config.sgd_momentum,
+            )
+            init_state_fn = None
+        else:
+            raise Exception('{} optimizer is not supported.'.format(config.optimizer))
+    else:
+        optimizer = None
+        init_state_fn = None
+
+    # Mixed precision optimizer.
+    # - Note: both the Float16Optimizer and the DistributedOptimizer inherit
+    #   from the MixedPrecisionOptimizer, which manages any optimizer where
+    #   the model params and main params are distinct.
+    if config.fp16 or config.bf16 or config.use_distributed_optimizer:
+
+        # Grad scaler:
+        #    if loss-scale is provided, instantiate the constant scaler.
+        #    if we are using fp16 and loss-scale is not present, use a
+        #       dynamic scaler.
+        #    otherwise we are running in bf16 with no loss-scale so
+        #       leave it as None.
+        grad_scaler = None
+
+        # Constant loss scale.
+        if config.loss_scale:
+            grad_scaler = ConstantGradScaler(config.loss_scale)
+
+        # Dynamic loss scale.
+        else:
+            if config.fp16:
+                grad_scaler = DynamicGradScaler(
+                    initial_scale=config.initial_loss_scale,
+                    min_scale=config.min_loss_scale,
+                    growth_factor=2.0,
+                    backoff_factor=0.5,
+                    growth_interval=config.loss_scale_window,
+                    hysteresis=config.hysteresis,
+                )
+
+        optimizer_args = [optimizer, config, grad_scaler, init_state_fn]
+        if config.use_distributed_optimizer:
+            optimizer = DistributedOptimizer(
+                *optimizer_args,
+                model_chunks=model_chunks,
+                per_model_buffers=per_model_buffers,
+                data_parallel_group=data_parallel_group,
+                data_parallel_group_gloo=data_parallel_group_gloo,
+                data_parallel_group_idx=data_parallel_group_idx,
+                distributed_optimizer_instance_id=distributed_optimizer_instance_id,
+            )
+        else:
+            optimizer = Float16OptimizerWithFloat16Params(*optimizer_args)
+            setattr(optimizer, 'grad_stats_parallel_group', model_parallel_group)
+    else:
+        # FP32 optimizer.
+        optimizer = FP32Optimizer(optimizer, config, init_state_fn)
+        setattr(optimizer, 'grad_stats_parallel_group', model_parallel_group)
+
+    return optimizer
+
+import sys
+for k in sys.modules:
+    if k.startswith('megatron'):
+        for target in ['_get_megatron_optimizer_based_on_param_groups']:
+            if getattr(sys.modules[k], target, None):
+                setattr(sys.modules[k], target, _get_megatron_optimizer_based_on_param_groups)
diff --git a/megatron-lm-musa-patch/musa_patch/p2p_communication.py b/megatron-lm-musa-patch/musa_patch/p2p_communication.py
new file mode 100644
index 000000000..89ad8c12e
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/p2p_communication.py
@@ -0,0 +1,93 @@
+# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+
+import operator
+from functools import reduce
+from typing import Callable, List, Optional, Tuple, Union
+
+import torch
+
+from megatron import core
+from megatron.core import ModelParallelConfig
+from megatron.core.parallel_state import (
+    get_pipeline_model_parallel_group,
+    get_pipeline_model_parallel_next_rank,
+    get_pipeline_model_parallel_prev_rank,
+    get_pipeline_model_parallel_rank,
+    get_pipeline_model_parallel_world_size,
+)
+
+def _p2p_ops(
+    *,
+    tensor_send_prev: Optional[torch.Tensor],
+    tensor_recv_prev: Optional[torch.Tensor],
+    tensor_send_next: Optional[torch.Tensor],
+    tensor_recv_next: Optional[torch.Tensor],
+    group: torch.distributed.ProcessGroup,
+    prev_pipeline_rank: int,
+    next_pipeline_rank: int,
+):
+    reqs = []
+    rank = get_pipeline_model_parallel_rank()
+    even_send_odd_recv_group = group
+    # if get_pipeline_model_parallel_world_size() == 2:
+    #     # Use the global process group for one of the two p2p communications
+    #     # to allow the overlap of the independent communications.
+    #     # Using the global process group is compatible because the pipeline-parallel
+    #     # communications set the source and destination by global rank.
+    #     even_recv_odd_send_group = torch.distributed.group.WORLD
+    # else:
+    even_recv_odd_send_group = group
+
+    if get_pipeline_model_parallel_rank() % 2 == 0:
+        if tensor_send_next is not None:
+            send_next_req = torch.distributed.isend(
+                tensor=tensor_send_next, dst=next_pipeline_rank, group=even_send_odd_recv_group
+            )
+            reqs.append(send_next_req)
+
+        if tensor_recv_prev is not None:
+            recv_prev_req = torch.distributed.irecv(
+                tensor=tensor_recv_prev, src=prev_pipeline_rank, group=even_recv_odd_send_group
+            )
+            reqs.append(recv_prev_req)
+
+        if tensor_send_prev is not None:
+            send_prev_req = torch.distributed.isend(
+                tensor=tensor_send_prev, dst=prev_pipeline_rank, group=even_send_odd_recv_group
+            )
+            reqs.append(send_prev_req)
+
+        if tensor_recv_next is not None:
+            recv_next_req = torch.distributed.irecv(
+                tensor=tensor_recv_next, src=next_pipeline_rank, group=even_recv_odd_send_group
+            )
+            reqs.append(recv_next_req)
+
+    else:
+        if tensor_recv_prev is not None:
+            recv_prev_req = torch.distributed.irecv(
+                tensor=tensor_recv_prev, src=prev_pipeline_rank, group=even_send_odd_recv_group
+            )
+            reqs.append(recv_prev_req)
+
+        if tensor_send_next is not None:
+            send_next_req = torch.distributed.isend(
+                tensor=tensor_send_next, dst=next_pipeline_rank, group=even_recv_odd_send_group
+            )
+            reqs.append(send_next_req)
+
+        if tensor_recv_next is not None:
+            recv_next_req = torch.distributed.irecv(
+                tensor=tensor_recv_next, src=next_pipeline_rank, group=even_send_odd_recv_group
+            )
+            reqs.append(recv_next_req)
+
+        if tensor_send_prev is not None:
+            send_prev_req = torch.distributed.isend(
+                tensor=tensor_send_prev, dst=prev_pipeline_rank, group=even_recv_odd_send_group
+            )
+            reqs.append(send_prev_req)
+    return reqs
+
+import megatron.core.pipeline_parallel.p2p_communication
+megatron.core.pipeline_parallel.p2p_communication._p2p_ops = _p2p_ops
diff --git a/megatron-lm-musa-patch/musa_patch/parallel_state.py b/megatron-lm-musa-patch/musa_patch/parallel_state.py
new file mode 100644
index 000000000..ed163edec
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/parallel_state.py
@@ -0,0 +1,823 @@
+import os
+import sys
+import logging
+import warnings
+from datetime import timedelta
+from functools import partial
+from itertools import cycle
+from typing import Callable, List, Optional
+
+import torch
+from megatron.core.parallel_state import *
+import megatron.core.parallel_state as parallel_state
+
+logger = logging.getLogger(__name__)
+
+_EPX_DATA_PARALLEL_LCP = None
+
+globals().update({k: getattr(parallel_state, k) for k in dir(parallel_state) if k.startswith('_')})
+
+group_list = {
+    name: value for name, value in globals().items()
+    if name.startswith("_") and not callable(value)
+}
+
+def initialize_model_parallel(
+    tensor_model_parallel_size: int = 1,
+    pipeline_model_parallel_size: int = 1,
+    virtual_pipeline_model_parallel_size: Optional[int] = None,
+    pipeline_model_parallel_split_rank: Optional[int] = None,
+    pipeline_model_parallel_comm_backend: Optional[str] = None,
+    use_sharp: bool = False,
+    context_parallel_size: int = 1,
+    hierarchical_context_parallel_sizes: Optional[List[int]] = None,
+    expert_model_parallel_size: int = 1,
+    num_distributed_optimizer_instances: int = 1,
+    expert_tensor_parallel_size: Optional[int] = None,
+    nccl_communicator_config_path: Optional[str] = None,
+    distributed_timeout_minutes: int = 30,
+    order: str = "tp-cp-ep-dp-pp",
+    encoder_tensor_model_parallel_size: int = 0,
+    encoder_pipeline_model_parallel_size: Optional[int] = 0,
+    get_embedding_ranks: Optional[Callable[[List[int], Optional[int]], List[int]]] = None,
+    get_position_embedding_ranks: Optional[Callable[[List[int], Optional[int]], List[int]]] = None,
+    create_gloo_process_groups: bool = True,
+) -> None:
+    # pylint: disable=line-too-long
+    """Initialize model data parallel groups.
+
+    Args:
+        tensor_model_parallel_size (int, default = 1):
+            The number of GPUs to split individual tensors across.
+
+        pipeline_model_parallel_size (int, default = 1):
+            The number of tensor parallel GPU groups to split the
+            Transformer layers across. For example, if
+            tensor_model_parallel_size is 4 and
+            pipeline_model_parallel_size is 2, the model will be split
+            into 2 groups of 4 GPUs.
+
+        virtual_pipeline_model_parallel_size (int, optional):
+            The number of stages that each pipeline group will have,
+            interleaving as necessary. If None, no interleaving is
+            performed. For example, if tensor_model_parallel_size is 1,
+            pipeline_model_parallel_size is 4,
+            virtual_pipeline_model_parallel_size is 2, and there are
+            16 transformer layers in the model, the model will be
+            split into 8 stages with two layers each and each GPU
+            would get 2 stages as such (layer number starting with 1):
+
+            GPU 0: [1, 2] [9, 10]
+            GPU 1: [3, 4] [11, 12]
+            GPU 2: [5, 6] [13, 14]
+            GPU 3: [7, 8] [15, 16]
+
+        pipeline_model_parallel_split_rank (int, optional):
+            DEPRECATED. For models with both an encoder and decoder, the rank in
+            pipeline to switch between encoder and decoder (i.e. the
+            first rank of the decoder). This allows the user to set
+            the pipeline parallel size of the encoder and decoder
+            independently. For example, if
+            pipeline_model_parallel_size is 8 and
+            pipeline_model_parallel_split_rank is 3, then ranks 0-2
+            will be the encoder and ranks 3-7 will be the decoder.
+
+        pipeline_model_parallel_comm_backend (str, optional):
+            The backend to use for pipeline parallel communication.
+            If None, the default backend will be used.
+
+        use_sharp (bool, default = False):
+            Set the use of SHARP for the collective communications of
+            data-parallel process groups. When `True`, run barrier
+            within each data-parallel process group, which specifies
+            the SHARP application target groups.
+
+        context_parallel_size (int, default = 1):
+            The number of tensor parallel GPU groups to split the
+            network input sequence length across. Compute of attention
+            module requires tokens of full sequence length, so GPUs
+            in a context parallel group need to communicate with each
+            other to exchange information of other sequence chunks.
+            Each GPU and its counterparts in other tensor parallel
+            groups compose a context parallel group.
+
+            For example, assume we have 8 GPUs, if tensor model parallel
+            size is 4 and context parallel size is 2, the network input
+            will be split into two sequence chunks, which are processed
+            by 2 different groups of 4 GPUs. One chunk is processed by
+            GPU0-3, the other chunk is processed by GPU4-7. Four groups
+            are build to do context parallel communications: [GPU0, GPU4],
+            [GPU1, GPU5], [GPU2, GPU6], and [GPU3, GPU7].
+
+            Context parallelism partitions sequence length, so it has no
+            impact on weights, which means weights are duplicated among
+            GPUs in a context parallel group. Hence, weight gradients
+            all-reduce is required in backward. For simplicity, we piggyback
+            GPUs of context parallelism on data parallel group for
+            weight gradient all-reduce.
+
+        expert_model_parallel_size (int, default = 1):
+            The number of Mixture of Experts parallel GPUs in each expert
+            parallel group.
+
+        num_distributed_optimizer_instances (int, default = 1):
+            The number of distributed optimizer replicas across the data-
+            parallel domain.
+
+        expert_tensor_parallel_size (int, default = tp_size):
+            The number of GPUs to split individual tensors of expert.
+
+        nccl_communicator_config_path (str, default = None):
+            Path to the yaml file of NCCL communicator configurations.
+            `min_ctas`, `max_ctas`, and `cga_cluster_size` can be set
+            for each communicator.
+
+        distributed_timeout_minutes (int, default = 30): Timeout, in
+            minutes,for operations executed against distributed
+            process groups. See PyTorch documentation at
+            https://pytorch.org/docs/stable/distributed.html for
+            caveats.
+
+        order (str, default=tp-dp-pp):
+            The rank initialization order of parallelism. Now we support
+            tp-dp-pp and tp-pp-dp orders.
+
+        encoder_tensor_model_parallel_size (int, default = 0):
+            The number of GPUs to split individual tensors across in the encoder. If 0,
+            then we use the default, decoder's tensor model parallel size.
+
+        encoder_pipeline_model_parallel_size (int, default = 0):
+            The number of tensor parallel GPU groups to allocate to the encoder. As an example,
+            if pipeline_model_parallel_size is 4 and encoder_pipeline_model_parallel_size is 2,
+            then the encoder will use the first two pipeline stages for its layers, and the total
+            amount of pipelineing is 6.
+
+        get_embedding_ranks (Callable[[List[int], Optional[int]], List[int]], optional, default=None):
+            A function that takes in a list of ranks for a pipeline group and returns
+            those ranks that should have embeddings.
+
+        get_position_embedding_ranks (Callable[[List[int], Optional[int]], List[int]], optional, default=None):
+            A function that takes in a list of ranks for a pipeline group, and returns
+            those ranks that should have position embeddings.
+
+        create_gloo_process_groups (bool, default = True):
+            Create Gloo process groups if set to True. If set to False, Gloo process groups are
+            not created and calls to get Gloo process groups will result in assertion errors.
+
+    Let's say we have a total of 16 GPUs denoted by g0 ... g15 and we
+    use 2 GPUs to parallelize the model tensor, and 4 GPUs to parallelize
+    the model pipeline. The present function will
+    create 8 tensor model-parallel groups, 4 pipeline model-parallel groups
+    and 8 data-parallel groups as:
+        8 data_parallel groups:
+            [g0, g2], [g1, g3], [g4, g6], [g5, g7], [g8, g10], [g9, g11], [g12, g14], [g13, g15]
+        8 tensor model-parallel groups:
+            [g0, g1], [g2, g3], [g4, g5], [g6, g7], [g8, g9], [g10, g11], [g12, g13], [g14, g15]
+        4 pipeline model-parallel groups:
+            [g0, g4, g8, g12], [g1, g5, g9, g13], [g2, g6, g10, g14], [g3, g7, g11, g15]
+    Note that for efficiency, the caller should make sure adjacent ranks
+    are on the same DGX box. For example if we are using 2 DGX-1 boxes
+    with a total of 16 GPUs, rank 0 to 7 belong to the first box and
+    ranks 8 to 15 belong to the second box.
+
+    """
+
+    if encoder_pipeline_model_parallel_size is None:
+        encoder_pipeline_model_parallel_size = 0
+
+    if encoder_tensor_model_parallel_size == 0 and encoder_pipeline_model_parallel_size > 0:
+        encoder_tensor_model_parallel_size = tensor_model_parallel_size
+
+    if get_embedding_ranks is None:
+        get_embedding_ranks = partial(
+            default_embedding_ranks, split_rank=pipeline_model_parallel_split_rank
+        )
+
+    if get_position_embedding_ranks is None:
+        get_position_embedding_ranks = partial(
+            default_position_embedding_ranks, split_rank=pipeline_model_parallel_split_rank
+        )
+
+    if encoder_pipeline_model_parallel_size > 0:
+        global _PIPELINE_MODEL_PARALLEL_DECODER_START
+        _PIPELINE_MODEL_PARALLEL_DECODER_START = encoder_pipeline_model_parallel_size
+
+    # Get world size and rank. Ensure some consistencies.
+    assert torch.distributed.is_initialized()
+    world_size: int = torch.distributed.get_world_size()
+
+    if encoder_tensor_model_parallel_size > 0:
+        assert (
+            encoder_tensor_model_parallel_size <= tensor_model_parallel_size
+        ), "We do not support encoders with more TP than the decoder."
+
+    encoder_model_size = (
+        encoder_tensor_model_parallel_size
+        * encoder_pipeline_model_parallel_size
+        * context_parallel_size
+    )
+    decoder_model_size = (
+        tensor_model_parallel_size * pipeline_model_parallel_size * context_parallel_size
+    )
+    total_model_size = encoder_model_size + decoder_model_size
+
+    if world_size % total_model_size != 0:
+        raise RuntimeError(f"world_size ({world_size}) is not divisible by {total_model_size}")
+
+    data_parallel_size: int = world_size // total_model_size
+
+    encoder_world_size = encoder_model_size * data_parallel_size
+    decoder_world_size = decoder_model_size * data_parallel_size
+
+    assert (
+        encoder_world_size + decoder_world_size == world_size
+    ), f"{encoder_world_size=} + {decoder_world_size=} != {world_size=}"
+
+    if virtual_pipeline_model_parallel_size is not None:
+        if not pipeline_model_parallel_size > 1:
+            raise RuntimeError(
+                "pipeline-model-parallel size should be greater than 1 with interleaved schedule"
+            )
+        global _VIRTUAL_PIPELINE_MODEL_PARALLEL_RANK
+        global _VIRTUAL_PIPELINE_MODEL_PARALLEL_WORLD_SIZE
+        _VIRTUAL_PIPELINE_MODEL_PARALLEL_RANK = 0
+        _VIRTUAL_PIPELINE_MODEL_PARALLEL_WORLD_SIZE = virtual_pipeline_model_parallel_size
+
+    if pipeline_model_parallel_split_rank is not None:
+        global _PIPELINE_MODEL_PARALLEL_SPLIT_RANK
+        _PIPELINE_MODEL_PARALLEL_SPLIT_RANK = pipeline_model_parallel_split_rank
+
+    rank = torch.distributed.get_rank()
+
+    nccl_comm_cfgs = {}
+    if nccl_communicator_config_path is not None:
+        try:
+            import yaml
+        except ImportError:
+            raise RuntimeError(
+                "Cannot import `yaml`. Setting custom nccl communicator configs "
+                "requires the yaml package."
+            )
+
+        with open(nccl_communicator_config_path, "r") as stream:
+            nccl_comm_cfgs = yaml.safe_load(stream)
+
+    if encoder_world_size > 0:
+        encoder_rank_generator = RankGenerator(
+            tp=encoder_tensor_model_parallel_size,
+            ep=1,
+            dp=data_parallel_size,
+            pp=encoder_pipeline_model_parallel_size,
+            cp=context_parallel_size,
+            order=order,
+            rank_offset=0,
+        )
+    else:
+        encoder_rank_generator = None
+
+    decoder_rank_generator = RankGenerator(
+        tp=tensor_model_parallel_size,
+        ep=1,
+        dp=data_parallel_size,
+        pp=pipeline_model_parallel_size,
+        cp=context_parallel_size,
+        order=order,
+        rank_offset=encoder_world_size,
+    )
+
+    # Build expert rank generator
+    if expert_tensor_parallel_size is None:
+        expert_tensor_parallel_size = tensor_model_parallel_size
+    expert_tensor_model_pipeline_parallel_size = (
+        expert_tensor_parallel_size * expert_model_parallel_size * pipeline_model_parallel_size
+    )
+    expert_data_parallel_size = decoder_world_size // expert_tensor_model_pipeline_parallel_size
+    if decoder_world_size % expert_tensor_model_pipeline_parallel_size != 0:
+        raise RuntimeError(
+            f"decoder world_size ({decoder_world_size}) is not divisible by expert_tensor_model_pipeline_parallel size ({expert_tensor_model_pipeline_parallel_size})"
+        )
+
+    # TODO: support expert specific ordering
+    expert_decoder_rank_generator = RankGenerator(
+        tp=expert_tensor_parallel_size,
+        ep=expert_model_parallel_size,
+        dp=expert_data_parallel_size,
+        pp=pipeline_model_parallel_size,
+        cp=1,
+        order=order,
+        rank_offset=encoder_world_size,
+    )
+
+    assert (
+        order.endswith("pp")
+        or pipeline_model_parallel_size == 1
+        or expert_data_parallel_size == data_parallel_size
+    ), "When not using pp-last rank ordering, the data parallel size of the attention and moe layers must be the same"
+
+    assert decoder_rank_generator.get_ranks("pp") == expert_decoder_rank_generator.get_ranks(
+        "pp"
+    ), f"Pipeline parallel groups are expected to be the same for Non-Expert and Expert part, \
+    but got {decoder_rank_generator.get_ranks('pp')} and {expert_decoder_rank_generator.get_ranks('pp')}"
+
+    def generator_wrapper(group_type, is_expert=False, **kwargs):
+        """The `RankGenerator` class produces a hyper-rectangle for a given set of
+        tensor, pipeline, data, expert, and context parallelism. If we have an encoder,
+        in addition to the default decoder, we essentially instantiate two `RankGenerator`
+        classes to construct the parallelism for each module separately, and we then have
+        to stitch them together for the right groups. For now, this means pp and tp-pp."""
+        if is_expert:
+            d_ranks = expert_decoder_rank_generator.get_ranks(group_type, **kwargs)
+        else:
+            d_ranks = decoder_rank_generator.get_ranks(group_type, **kwargs)
+
+        if encoder_rank_generator is None:
+            for x in d_ranks:
+                yield x
+            return
+        e_ranks = encoder_rank_generator.get_ranks(group_type, **kwargs)
+        if group_type == 'pp':
+            # Map 1 encoder tp rank to several decoder tp ranks, because
+            # these won't be the same size.
+            for x, y in zip(cycle(e_ranks), d_ranks):
+                yield x + y
+        elif group_type == 'tp-pp':
+            # For this group, we can just return the concatenated
+            # groups together, because their sizes are the same.
+            assert len(e_ranks) == len(d_ranks)
+            for x, y in zip(e_ranks, d_ranks):
+                yield x + y
+        else:
+            for x in e_ranks:
+                yield x
+            for x in d_ranks:
+                yield x
+
+    timeout = timedelta(minutes=distributed_timeout_minutes)
+
+    # Build the data-parallel groups.
+    global _DATA_PARALLEL_GROUP
+    global _DATA_PARALLEL_GROUP_GLOO
+    global _DATA_PARALLEL_GLOBAL_RANKS
+    global _DATA_PARALLEL_GROUP_WITH_CP
+    global _DATA_PARALLEL_GROUP_WITH_CP_GLOO
+    global _DATA_PARALLEL_GLOBAL_RANKS_WITH_CP
+    global _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP
+    global _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP_GLOO
+    global _INTER_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP
+    assert _DATA_PARALLEL_GROUP is None, 'data parallel group is already initialized'
+
+    global _EPX_DATA_PARALLEL_LCP
+    if int(os.getenv("USE_EPX", 0)):
+        from epx.process_group import EpxProcessGroup
+        from epx.lcp import Lcp
+        import torch.distributed as dist
+
+        logger.info(f"start initialization _EPX_DATA_PARALLEL_LCP for epx")
+
+        epx_rank = int(os.environ.get("RANK", 0))
+
+        pg = EpxProcessGroup(group_name=str(epx_rank))
+
+        # rank = torch.distributed.get_rank()
+        _EPX_DATA_PARALLEL_LCP = Lcp(pg, rank)
+
+        logger.info(f"finish initialization _EPX_DATA_PARALLEL_LCP for epx")
+
+
+    for ranks in generator_wrapper('dp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('dp', nccl_comm_cfgs),
+            group_desc='DATA_PARALLEL_GROUP',
+        )
+        if create_gloo_process_groups:
+            group_gloo = create_group(
+                ranks, timeout=timeout, backend="gloo", group_desc='DATA_PARALLEL_GROUP_GLOO'
+            )
+        else:
+            group_gloo = None
+        if rank in ranks:
+            _DATA_PARALLEL_GROUP = group
+            _DATA_PARALLEL_GROUP_GLOO = group_gloo
+            _DATA_PARALLEL_GLOBAL_RANKS = ranks
+
+    assert (
+        data_parallel_size * context_parallel_size
+    ) % num_distributed_optimizer_instances == 0, (
+        'Data parallel size should be divisible by partial DistOpt shard factor'
+    )
+    intra_partial_data_parallel_size = (
+        data_parallel_size * context_parallel_size
+    ) // num_distributed_optimizer_instances
+
+    for ranks_with_cp in generator_wrapper('dp-cp'):
+        group_with_cp = create_group(
+            ranks_with_cp,
+            timeout=timeout,
+            pg_options=get_nccl_options('dp_cp', nccl_comm_cfgs),
+            group_desc='DATA_PARALLEL_GROUP_WITH_CP',
+        )
+        if create_gloo_process_groups:
+            group_with_cp_gloo = create_group(
+                ranks_with_cp,
+                timeout=timeout,
+                backend="gloo",
+                group_desc='DATA_PARALLEL_GROUP_WITH_CP_GLOO',
+            )
+        else:
+            group_with_cp_gloo = None
+        if rank in ranks_with_cp:
+            _DATA_PARALLEL_GROUP_WITH_CP = group_with_cp
+            _DATA_PARALLEL_GROUP_WITH_CP_GLOO = group_with_cp_gloo
+            _DATA_PARALLEL_GLOBAL_RANKS_WITH_CP = ranks_with_cp
+
+        if num_distributed_optimizer_instances > 1:
+            # Create groups for Partial DistOpt, one for intra-partial DP domain
+            # Another for inter-partial DP domain
+            for i in range(num_distributed_optimizer_instances):
+                intra_partial_data_parallel_ranks_with_cp = ranks_with_cp[
+                    (i * intra_partial_data_parallel_size) : (
+                        (i + 1) * intra_partial_data_parallel_size
+                    )
+                ]
+
+                intra_partial_data_parallel_group_with_cp = create_group(
+                    intra_partial_data_parallel_ranks_with_cp,
+                    timeout=timeout,
+                    pg_options=get_nccl_options('intra_dp_cp', nccl_comm_cfgs),
+                    group_desc='INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP',
+                )
+                if create_gloo_process_groups:
+                    intra_partial_data_parallel_group_with_cp_gloo = create_group(
+                        intra_partial_data_parallel_ranks_with_cp,
+                        timeout=timeout,
+                        backend="gloo",
+                        group_desc='INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP_GLOO',
+                    )
+                else:
+                    intra_partial_data_parallel_group_with_cp_gloo = None
+
+                if rank in intra_partial_data_parallel_ranks_with_cp:
+                    _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP = (
+                        intra_partial_data_parallel_group_with_cp
+                    )
+                    _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP_GLOO = (
+                        intra_partial_data_parallel_group_with_cp_gloo
+                    )
+
+            for i in range(intra_partial_data_parallel_size):
+                inter_partial_data_parallel_ranks_with_cp = ranks_with_cp[
+                    i::intra_partial_data_parallel_size
+                ]
+
+                inter_partial_data_parallel_group_with_cp = create_group(
+                    inter_partial_data_parallel_ranks_with_cp,
+                    timeout=timeout,
+                    pg_options=get_nccl_options('inter_dp_cp', nccl_comm_cfgs),
+                    group_desc='INTER_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP',
+                )
+
+                if rank in inter_partial_data_parallel_ranks_with_cp:
+                    _INTER_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP = (
+                        inter_partial_data_parallel_group_with_cp
+                    )
+        else:
+            _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP = _DATA_PARALLEL_GROUP_WITH_CP
+            _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP_GLOO = _DATA_PARALLEL_GROUP_WITH_CP_GLOO
+
+    # Apply SHARP to DP process groups
+    if use_sharp:
+        if rank == 0:
+            print(
+                "The number of process groups to use SHARP with depends on the type "
+                "of the network switch. Nvidia QM1 switch supports SAHRP up to 8 "
+                "process groups and QM2 supports up to 256 process groups. We apply "
+                "SHARP to the communications of the data-parallel domain. If the "
+                "number of data-parallel process groups is larger than the max "
+                "process groups that the network switch supports, the communication "
+                "will fall back to non-SHARP operators. To enable SHARP, "
+                "`#SBATCH_NETWORK=sharp` should be set in the sbatch script."
+            )
+        torch.distributed.barrier(
+            group=get_data_parallel_group(with_context_parallel=True),
+            device_ids=[torch.cuda.current_device()],
+        )
+        # Set `NCCL_COLLNET_ENABLE=0` to restrict SHARP application to DP process groups
+        os.environ["NCCL_COLLNET_ENABLE"] = "0"
+
+    # Build the context-parallel groups.
+    global _CONTEXT_PARALLEL_GROUP
+    global _CONTEXT_PARALLEL_GLOBAL_RANKS
+    assert _CONTEXT_PARALLEL_GROUP is None, 'context parallel group is already initialized'
+    for ranks in generator_wrapper('cp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('cp', nccl_comm_cfgs),
+            group_desc='CONTEXT_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _CONTEXT_PARALLEL_GROUP = group
+            _CONTEXT_PARALLEL_GLOBAL_RANKS = ranks
+        if hierarchical_context_parallel_sizes:
+            global _HIERARCHICAL_CONTEXT_PARALLEL_GROUPS
+            _HIERARCHICAL_CONTEXT_PARALLEL_GROUPS += create_hierarchical_parallel_groups(
+                rank,
+                ranks,
+                context_parallel_size,
+                hierarchical_context_parallel_sizes,
+                get_nccl_options('hcp', nccl_comm_cfgs),
+            )
+
+    # Build the model-parallel groups.
+    global _MODEL_PARALLEL_GROUP
+    global _MODEL_PARALLEL_GLOBAL_RANKS
+    assert _MODEL_PARALLEL_GROUP is None, 'model parallel group is already initialized'
+    for ranks in generator_wrapper('tp-pp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('mp', nccl_comm_cfgs),
+            group_desc='MODEL_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _MODEL_PARALLEL_GROUP = group
+            _MODEL_PARALLEL_GLOBAL_RANKS = ranks
+
+    # Build the tensor model-parallel groups.
+    global _TENSOR_MODEL_PARALLEL_GROUP
+    global _TENSOR_MODEL_PARALLEL_GLOBAL_RANKS
+    assert (
+        _TENSOR_MODEL_PARALLEL_GROUP is None
+    ), 'tensor model parallel group is already initialized'
+    for ranks in generator_wrapper('tp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp', nccl_comm_cfgs),
+            group_desc='TENSOR_MODEL_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _TENSOR_MODEL_PARALLEL_GROUP = group
+            _TENSOR_MODEL_PARALLEL_GLOBAL_RANKS = ranks
+
+    # Build the pipeline model-parallel groups and embedding groups
+    # (first and last rank in each pipeline model-parallel group).
+    global _PIPELINE_MODEL_PARALLEL_GROUP
+    global _PIPELINE_GLOBAL_RANKS
+    assert (
+        _PIPELINE_MODEL_PARALLEL_GROUP is None
+    ), 'pipeline model parallel group is already initialized'
+    global _EMBEDDING_GROUP
+    global _EMBEDDING_GLOBAL_RANKS
+    assert _EMBEDDING_GROUP is None, 'embedding group is already initialized'
+    global _POSITION_EMBEDDING_GROUP
+    global _POSITION_EMBEDDING_GLOBAL_RANKS
+    assert _POSITION_EMBEDDING_GROUP is None, 'position embedding group is already initialized'
+    if pipeline_model_parallel_comm_backend == 'ucc':
+        # The UCC backend provides two key benefits:
+        # 1) Achieves better bandwidth utilization than NCCL when using InfiniBand links.
+        # 2) Does not use GPU SM resources (Zero-SM), mitigating performance interference
+        #    with overlapping compute kernels.
+
+        # The UCC backend is recommended in the following cases:
+        # 1) When the exposed pipeline-parallel (PP) communications are significant.
+        #    - E.g., Pipeline parallelism with very less gradient accumulation steps.
+        #    - It may provide better performance due to improved bandwidth utilization.
+        # 2) When the critical-path pipeline stage has substantial PP-communication overlap.
+        #    - E.g., Uneven pipeline parallelism.
+        #    - It may provide better performance due to zero SM resource usage.
+        if 'CUDA_DEVICE_MAX_CONNECTIONS' in os.environ:
+            # UCC backend requires CUDA_DEVICE_MAX_CONNECTIONS variable to be larger than 1,
+            # to gurantee the overlapped UCC communications. If this environment variable is set to 1,
+            # all the UCC communication will be serialized.
+            assert (
+                os.environ['CUDA_DEVICE_MAX_CONNECTIONS'] != '1'
+            ), "UCC-backend requires CUDA_DEVICE_MAX_CONNECTIONS > 1"
+
+        # Setting up required environment variables for ucc backend
+        #
+        # "TORCH_UCC_BLOCKING_WAIT=none" allows non-blocking waits of the communiction handle
+        # "UCC_EC_CUDA_STREAM_TASK_MODE" controls how CUDA execution engines (EC)
+        # schedule tasks on CUDA streams.
+        # "UCX_TLS" controls transport layer selection
+        # "NSYS_UCP_COMM_PARAMS=1" enables capturing ucx tracing in nsys profiling
+        # "UCX_RNDV_THRESH" controls threshold threshold for switching between
+        # eager and rendezvous (RNDV) communication protocols.
+        # "UCX_NET_DEVICES" select which network interfaces UCX should use.
+        # "UCC_CL_BASIC_TLS" controls which Transport Layers are used by
+        # the Basic Collective libraray
+
+        os.environ['TORCH_UCC_BLOCKING_WAIT'] = (
+            os.environ['TORCH_UCC_BLOCKING_WAIT']
+            if "TORCH_UCC_BLOCKING_WAIT" in os.environ
+            else 'none'
+        )
+        os.environ['UCC_EC_CUDA_STREAM_TASK_MODE'] = (
+            os.environ['UCC_EC_CUDA_STREAM_TASK_MODE']
+            if "UCC_EC_CUDA_STREAM_TASK_MODE" in os.environ
+            else 'driver'
+        )
+        os.environ['UCX_TLS'] = (
+            os.environ['UCX_TLS'] if "UCX_TLS" in os.environ else 'ib,cuda_copy'
+        )  # cuda_ipc (i.e., NVLink-enablement) will be later supported
+        os.environ['NSYS_UCP_COMM_PARAMS'] = '1'
+        os.environ['UCX_RNDV_THRESH'] = '0'
+        os.environ['UCX_NET_DEVICES'] = 'all'
+        os.environ['UCC_CL_BASIC_TLS'] = '^sharp,nccl'
+
+    for ranks in generator_wrapper('pp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            backend=pipeline_model_parallel_comm_backend,
+            pg_options=(
+                None
+                if pipeline_model_parallel_comm_backend == 'ucc'
+                else get_nccl_options('pp', nccl_comm_cfgs)
+            ),
+            group_desc='PIPELINE_MODEL_PARALLEL_GROUP',
+        )
+        assert (
+            pipeline_model_parallel_comm_backend == None
+            or pipeline_model_parallel_comm_backend == 'nccl'
+            or pipeline_model_parallel_comm_backend == 'ucc'
+        ), f'"{pipeline_model_parallel_comm_backend}" backend for PP communication is currently not supported'
+
+        if rank in ranks:
+            if _PIPELINE_MODEL_PARALLEL_GROUP is None:
+                _PIPELINE_MODEL_PARALLEL_GROUP = group
+                _PIPELINE_GLOBAL_RANKS = ranks
+            elif isinstance(_PIPELINE_GLOBAL_RANKS[0], list):
+                _PIPELINE_MODEL_PARALLEL_GROUP.append(group)
+                _PIPELINE_GLOBAL_RANKS.append(ranks)
+            else:
+                _PIPELINE_MODEL_PARALLEL_GROUP = [_PIPELINE_MODEL_PARALLEL_GROUP, group]
+                _PIPELINE_GLOBAL_RANKS = [_PIPELINE_GLOBAL_RANKS, ranks]
+
+        embedding_ranks = get_embedding_ranks(ranks)
+        group = create_group(
+            embedding_ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('embd', nccl_comm_cfgs),
+            group_desc='EMBEDDING_GROUP',
+        )
+        if rank in embedding_ranks:
+            _EMBEDDING_GROUP = group
+            _EMBEDDING_GLOBAL_RANKS = embedding_ranks
+
+        position_embedding_ranks = get_position_embedding_ranks(ranks)
+        group = create_group(
+            position_embedding_ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('pos_embd', nccl_comm_cfgs),
+            group_desc='POSITION_EMBEDDING_GROUP',
+        )
+        if rank in position_embedding_ranks:
+            _POSITION_EMBEDDING_GROUP = group
+            _POSITION_EMBEDDING_GLOBAL_RANKS = position_embedding_ranks
+
+    # Build the tensor + data parallel groups.
+    global _TENSOR_AND_DATA_PARALLEL_GROUP
+    global _TENSOR_AND_DATA_PARALLEL_GROUP_WITH_CP
+    assert (
+        _TENSOR_AND_DATA_PARALLEL_GROUP is None
+    ), 'Tensor + data parallel group is already initialized'
+    for ranks in generator_wrapper('tp-dp-cp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp_dp_cp', nccl_comm_cfgs),
+            group_desc='TENSOR_AND_DATA_PARALLEL_GROUP_WITH_CP',
+        )
+        if rank in ranks:
+            _TENSOR_AND_DATA_PARALLEL_GROUP_WITH_CP = group
+    for ranks in generator_wrapper('tp-dp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp_dp', nccl_comm_cfgs),
+            group_desc='TENSOR_AND_DATA_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _TENSOR_AND_DATA_PARALLEL_GROUP = group
+
+    global _TENSOR_AND_CONTEXT_PARALLEL_GROUP
+    assert (
+        _TENSOR_AND_CONTEXT_PARALLEL_GROUP is None
+    ), 'Tensor + context parallel group is already initialized'
+    for ranks in generator_wrapper('tp-cp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp_cp', nccl_comm_cfgs),
+            group_desc='TENSOR_AND_CONTEXT_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _TENSOR_AND_CONTEXT_PARALLEL_GROUP = group
+
+    ### Expert-related parallel groups initialization
+    # Build the expert model parallel group
+    global _EXPERT_MODEL_PARALLEL_GROUP
+    assert _EXPERT_MODEL_PARALLEL_GROUP is None, 'Expert parallel group is already initialized'
+    for ranks in generator_wrapper('ep', is_expert=True):
+        group = create_group(
+            ranks,
+            pg_options=get_nccl_options('ep', nccl_comm_cfgs),
+            group_desc='EXPERT_MODEL_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _EXPERT_MODEL_PARALLEL_GROUP = group
+
+    # Build the expert tensor parallel group
+    global _EXPERT_TENSOR_PARALLEL_GROUP
+    assert (
+        _EXPERT_TENSOR_PARALLEL_GROUP is None
+    ), 'Expert tensor model parallel group is already initialized'
+    for ranks in generator_wrapper('tp', is_expert=True):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('ep_tp', nccl_comm_cfgs),
+            group_desc='EXPERT_TENSOR_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _EXPERT_TENSOR_PARALLEL_GROUP = group
+
+    # Build the tensor + expert parallel groups
+    global _EXPERT_TENSOR_AND_MODEL_PARALLEL_GROUP
+    assert (
+        _EXPERT_TENSOR_AND_MODEL_PARALLEL_GROUP is None
+    ), 'Expert tensor + model parallel group is already initialized'
+    for ranks in generator_wrapper('tp-ep', is_expert=True):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp_ep_mp', nccl_comm_cfgs),
+            group_desc='EXPERT_TENSOR_AND_MODEL_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _EXPERT_TENSOR_AND_MODEL_PARALLEL_GROUP = group
+
+    # Build the expert+tensor+pipeline parallel groups
+    global _EXPERT_TENSOR_MODEL_PIPELINE_PARALLEL_GROUP
+    assert (
+        _EXPERT_TENSOR_MODEL_PIPELINE_PARALLEL_GROUP is None
+    ), 'The expert_tensor_model_pipeline parallel group is already initialized'
+    for ranks in generator_wrapper('tp-ep-pp', is_expert=True):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp_ep_pp', nccl_comm_cfgs),
+            group_desc='EXPERT_TENSOR_MODEL_PIPELINE_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _EXPERT_TENSOR_MODEL_PIPELINE_PARALLEL_GROUP = group
+
+    # Build the expert data parallel group
+    global _EXPERT_DATA_PARALLEL_GROUP
+    assert _EXPERT_DATA_PARALLEL_GROUP is None, 'Expert data group is already initialized'
+    global _EXPERT_DATA_PARALLEL_GROUP_GLOO
+    assert _EXPERT_DATA_PARALLEL_GROUP_GLOO is None, 'Expert data group-gloo is already initialized'
+
+    for ranks in generator_wrapper('dp', is_expert=True):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('ep_dp', nccl_comm_cfgs),
+            group_desc='EXPERT_DATA_PARALLEL_GROUP',
+        )
+        if create_gloo_process_groups:
+            group_gloo = create_group(
+                ranks, backend="gloo", group_desc='EXPERT_DATA_PARALLEL_GROUP_GLOO'
+            )
+        else:
+            group_gloo = None
+        if rank in ranks:
+            _EXPERT_DATA_PARALLEL_GROUP = group
+            _EXPERT_DATA_PARALLEL_GROUP_GLOO = group_gloo
+    ### End of expert related parallel groups initialization
+
+    # Initialize global memory buffer
+    # This isn't really "parallel state" but there isn't another good place to
+    # put this. If we end up with a more generic initialization of megatron-core
+    # we could stick it there
+    _set_global_memory_buffer()
+
+    for var in list(group_list.keys())[8:]:
+        setattr(sys.modules["megatron.core.parallel_state"], var, eval(var))
+
+def get_epx_data_parallel_lcp():
+        return parallel_state._EPX_DATA_PARALLEL_LCP
+
+# use for fault_tolerance
+# initialize_model_parallel only update to set _EPX_DATA_PARALLEL_LCP, and no other changes
+# get_epx_data_parallel_lcp used to get _EPX_DATA_PARALLEL_LCP.
+# _EPX_DATA_PARALLEL_LCP is only used in fault_tolerance
+attrs_to_register = ['initialize_model_parallel', 'get_epx_data_parallel_lcp']
+
+for k in sys.modules:
+    if k.endswith('megatron.core.parallel_state'):
+        for target in attrs_to_register:
+            setattr(sys.modules[k], target, eval(target))
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/profiling.py b/megatron-lm-musa-patch/musa_patch/profiling.py
new file mode 100644
index 000000000..0a38dbf4d
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/profiling.py
@@ -0,0 +1,160 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+# All rights reserved.
+#
+# This source code is licensed under the BSD-style license found in the
+# LICENSE file in the root directory of this source tree.
+
+import contextlib
+import os
+import pickle
+import time
+from datetime import datetime
+from pathlib import Path
+import json
+
+import torch
+
+# the number of warmup steps before the active step in each profiling cycle
+profile_freq = 4
+# how much memory allocation/free ops to record in memory snapshots
+MEMORY_SNAPSHOT_MAX_ENTRIES = 100000
+
+
+@contextlib.contextmanager
+def maybe_enable_profiling(args, global_step):
+    #add tarce related centext: renll
+    on_demand_profiling = int(os.getenv("KINETO_USE_DAEMON", 0))
+    if on_demand_profiling == 1:
+        training_job_path = os.getenv("TRAINING_JOB_PATH", "/home/dist")
+        rank_pid_relation_dir = os.getenv("RANK_PID_RELATION_DIR", "rank_pid_relation_dir")
+        job_id = os.getenv("MCCFLOW_JOB_ID", "default-job-id")
+        rank_full_path = "{}/{}/{}".format(training_job_path, rank_pid_relation_dir, job_id)
+        Path(rank_full_path).mkdir(parents=True, exist_ok=True)
+
+        rank_pid_relation_map = {
+            "rank": torch.distributed.get_rank(),
+            "world_size": torch.distributed.get_world_size(),
+            "pid": os.getpid(),
+        }
+        rank_file = rank_full_path + "/rank" + str(torch.distributed.get_rank())
+        with open(rank_file, "w+") as f:
+            json.dump(rank_pid_relation_map, f)
+    # get user defined profiler settings
+    enable_profiling = int(os.getenv("ENABLE_PROFILER", 0))
+     # fetch profiler related env
+    wait_steps = int(os.getenv("PROFILER_WAIT_STEPS", 0))
+    warmup_steps = int(os.getenv("PROFILER_WARMUP_STEPS", 3))
+    active_steps = int(os.getenv("PROFILER_ACTIVE_STEPS", 1))
+    repeat_num = int(os.getenv("PROFILER_REPEAT_NUM", 0))
+    profile_freq = int(os.getenv("PROFILER_FREQ", 1))
+    current_time = datetime.now().strftime("%Y.%m.%d-%H:%M:%S")
+    save_dir = os.getenv("PROFILER_SAVE_DIR", f"./profiler_result/{current_time}")
+    worker_name = os.getenv(
+        "PROFILER_WORKER_NAME", "rank" + str(torch.distributed.get_rank())
+    )
+    record_shapes = int(os.getenv("PROFILER_RECORD_SHAPES", 1))
+    profile_memory = int(os.getenv("PROFILER_PROFILE_MEMORY", 0))
+    with_stack = int(os.getenv("PROFILER_WITH_STACK", 1))
+    with_modules = int(os.getenv("PROFILER_WITH_MODULES", 1))
+    kineto_log_level = int(os.getenv("KINETO_LOG_LEVEL", 0))
+
+    if enable_profiling:
+        profile_freq = profile_freq
+
+        rank = torch.distributed.get_rank()
+
+        def trace_handler(prof):
+            curr_trace_dir_name = "iteration_" + str(prof.step_num)
+            curr_trace_dir = os.path.join(save_dir, curr_trace_dir_name)
+            if not os.path.exists(curr_trace_dir):
+                os.makedirs(curr_trace_dir, exist_ok=True)
+            curr_trace_path = os.path.join(curr_trace_dir, f"rank{rank}.{int(time.time()*1000)}.pt.trace.json")
+            print(f"Dumping profiler traces at step {prof.step_num} to {curr_trace_path}")
+            begin = time.monotonic()
+            prof.export_chrome_trace(curr_trace_path)
+            print(
+                f"Finished dumping profiler traces in {time.monotonic() - begin:.2f} seconds"
+            )
+
+        print(f"Profiling active. Traces will be saved at {save_dir}")
+
+        if not os.path.exists(save_dir):
+            os.makedirs(save_dir, exist_ok=True)
+
+        # warmup, active = WARMUP, 1
+        wait = profile_freq - (active_steps + warmup_steps)
+        assert (
+            wait >= 0
+        ), "profile_freq must be greater than or equal to warmup + active"
+        with torch.profiler.profile(
+            activities=[
+                torch.profiler.ProfilerActivity.CPU,
+                torch.profiler.ProfilerActivity.MUSA,
+                # torch.profiler.ProfilerActivity.CUDA,
+            ],
+            schedule=torch.profiler.schedule(wait=wait, warmup=warmup_steps, active=active_steps, repeat=repeat_num),
+            on_trace_ready=trace_handler,
+            record_shapes=record_shapes,
+            profile_memory=profile_memory,
+            with_stack=with_stack,
+            with_modules=with_modules,
+            start_step=global_step,
+        ) as torch_profiler:
+            yield torch_profiler
+    else:
+        torch_profiler = contextlib.nullcontext()
+        yield None
+
+
+@contextlib.contextmanager
+def maybe_enable_memory_snapshot(args, global_step: int = 0):
+    pass
+    # enable_snapshot = config.profiling.enable_memory_snapshot
+    # if enable_snapshot:
+    #     snapshot_folder = config.profiling.save_memory_snapshot_folder
+    #     snapshot_dir = os.path.join(config.job.dump_folder, snapshot_folder)
+    #     if not os.path.exists(snapshot_dir):
+    #         os.makedirs(snapshot_dir, exist_ok=True)
+    #     rank = torch.distributed.get_rank()
+
+    #     class MemoryProfiler:
+    #         def __init__(self, step_num: int, freq: int):
+    #             torch.musa.memory._record_memory_history(
+    #                 max_entries=MEMORY_SNAPSHOT_MAX_ENTRIES
+    #             )
+    #             # when resume training, we start from the last step
+    #             self.step_num = step_num
+    #             self.freq = freq
+
+    #         def step(self, exit_ctx: bool = False):
+    #             self.step_num += 1
+    #             if not exit_ctx and self.step_num % self.freq != 0:
+    #                 return
+    #             if not exit_ctx:
+    #                 curr_step = self.step_num
+    #                 dir_name = f"iteration_{curr_step}"
+    #             else:
+    #                 # dump as iteration_0_exit if OOM at iter 1
+    #                 curr_step = self.step_num - 1
+    #                 dir_name = f"iteration_{curr_step}_exit"
+    #             curr_snapshot_dir = os.path.join(snapshot_dir, dir_name)
+    #             if not os.path.exists(curr_snapshot_dir):
+    #                 os.makedirs(curr_snapshot_dir, exist_ok=True)
+    #             logger.info(f"Dumping memory snapshot at step {curr_step}")
+    #             begin = time.monotonic()
+    #             with open(
+    #                 f"{curr_snapshot_dir}/rank{rank}_memory_snapshot.pickle", "wb"
+    #             ) as output:
+    #                 pickle.dump(torch.musa.memory._snapshot(), output)
+    #             logger.info(
+    #                 f"Finished dumping memory snapshot in {time.monotonic() - begin:.2f} seconds"
+    #             )
+
+    #     logger.info(f"Memory profiler active. Snapshot will be saved at {snapshot_dir}")
+    #     profiler = MemoryProfiler(global_step, config.profiling.profile_freq)
+    #     try:
+    #         yield profiler
+    #     except torch.OutOfMemoryError as e:
+    #         profiler.step(exit_ctx=True)
+    # else:
+    #     yield None
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/__init__.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/__init__.py
new file mode 100644
index 000000000..0437d1538
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/__init__.py
@@ -0,0 +1,7 @@
+from . import multi_latent_attention
+from . import random
+from . import moe_layer
+from . import mlp
+from . import transformer_layer
+from . import transformer_engine
+from . import schedules
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/mlp.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/mlp.py
new file mode 100644
index 000000000..d0ae4d672
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/mlp.py
@@ -0,0 +1,144 @@
+# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
+
+import torch
+import torch.nn.functional as F
+
+from megatron.core import tensor_parallel, parallel_state
+
+from megatron.core.fusions.fused_bias_geglu import bias_geglu_impl
+from megatron.core.fusions.fused_bias_gelu import bias_gelu_impl
+from megatron.core.fusions.fused_bias_swiglu import bias_swiglu_impl
+
+from transformer_engine.pytorch.distributed import checkpoint, checkpointVirance
+# HACK(huang.huang): recompute/variance for mlp in moe with fp8/bf16: 
+# support mlp_rms_recompute,  which combine rms, mlp into one checkpoint;
+# add new arg "no_recompute" to avoid repated recompute for sharedEXP while 
+# moe_layer is already recomputed outsides
+def MLP_forward(self, hidden_states, norm_func=None, no_recompute=False):
+    """
+    Perform the forward pass through the MLP block.
+    Args:
+    hidden_states (Tensor): Input tensor of shape [s, b, h] where s is sequence length,
+        b is batch size, and h is hidden size.
+    norm_func (function): whether to do layernorm inner MLP instead of transformerlayer.
+    no_recompute (bool): default is False. only set to True when is sharedEXP, 
+                        to avoid repeated recomputation between this mlp and moe_layer 
+    """
+    # [s, b, 4 * h/p]
+    def custom_forward(hidden_states):
+        if norm_func is not None:
+            assert self.config.mlp_rms_recompute
+            
+            hidden_states= norm_func(hidden_states)
+        intermediate_parallel, bias_parallel = self.linear_fc1(hidden_states)
+
+        if self.config.bias_activation_fusion:
+            if self.activation_func == F.gelu:
+                if self.config.gated_linear_unit:
+                    intermediate_parallel = bias_geglu_impl(intermediate_parallel, bias_parallel)
+                else:
+                    assert self.config.add_bias_linear is True
+                    intermediate_parallel = bias_gelu_impl(intermediate_parallel, bias_parallel)
+            elif self.activation_func == F.silu and self.config.gated_linear_unit:
+                intermediate_parallel = bias_swiglu_impl(
+                    intermediate_parallel,
+                    bias_parallel,
+                    self.config.activation_func_fp8_input_store,
+                )
+            else:
+                raise ValueError("Only support fusion of gelu and swiglu")
+        else:
+            if bias_parallel is not None:
+                intermediate_parallel = intermediate_parallel + bias_parallel
+            if self.config.gated_linear_unit:
+
+                def glu(x):
+                    x = torch.chunk(x, 2, dim=-1)
+                    return self.config.activation_func(x[0]) * x[1]
+
+                intermediate_parallel = glu(intermediate_parallel)
+            else:
+                intermediate_parallel = self.activation_func(intermediate_parallel)
+
+        # [s, b, h]
+        output, output_bias = self.linear_fc2(intermediate_parallel)
+        return output, output_bias
+    
+    if norm_func is not None:
+        _custom_func_first = lambda x : self.custom_func_first(norm_func(x))
+    else:
+        _custom_func_first = lambda x : self.custom_func_first(x)# use lambda to create new func instead of method object which can't add new attribute
+    if no_recompute: #avoid to recompute under another recompute context outside this function, like in sharedExp
+        return custom_forward(hidden_states)
+    
+    if self.config.mlp_recompute:
+        if self.config.fp8:
+            if self.config.recompute_variance:
+                output, output_bias = checkpointVirance(
+                    _custom_func_first,
+                    self.linear_fc2,
+                    hidden_states,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                )
+            else:
+                output, output_bias = checkpoint(
+                    custom_forward, 
+                    hidden_states,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                    )
+        else:
+            if self.config.recompute_variance:
+                output, output_bias = tensor_parallel.checkpointVirance(
+                    _custom_func_first, self.linear_fc2, False, hidden_states)
+            else:
+                output, output_bias = tensor_parallel.checkpoint(
+                    custom_forward, False, hidden_states)
+    else:
+        output, output_bias = custom_forward(hidden_states)
+    return output, output_bias
+## HACK(huang.huang)
+
+# HACK(huang.huang): seperate linear1 and act from mlp, to support potential recoumpute variance,
+# which need a separated linear2
+def MLP_custom_func_first(self, hidden_states):
+    intermediate_parallel, bias_parallel = self.linear_fc1(hidden_states)
+
+    if self.config.bias_activation_fusion:
+        if self.activation_func == F.gelu:
+            if self.config.gated_linear_unit:
+                intermediate_parallel = bias_geglu_impl(intermediate_parallel, bias_parallel)
+            else:
+                assert self.config.add_bias_linear is True
+                intermediate_parallel = bias_gelu_impl(intermediate_parallel, bias_parallel)
+        elif self.activation_func == F.silu and self.config.gated_linear_unit:
+            intermediate_parallel = bias_swiglu_impl(
+                intermediate_parallel,
+                bias_parallel,
+                self.config.activation_func_fp8_input_store,
+            )
+        else:
+            raise ValueError("Only support fusion of gelu and swiglu")
+    else:
+        if bias_parallel is not None:
+            intermediate_parallel = intermediate_parallel + bias_parallel
+        if self.config.gated_linear_unit:
+
+            def glu(x):
+                x = torch.chunk(x, 2, dim=-1)
+                return self.config.activation_func(x[0]) * x[1]
+
+            intermediate_parallel = glu(intermediate_parallel)
+        else:
+            intermediate_parallel = self.activation_func(intermediate_parallel)
+    
+    return intermediate_parallel
+## HACK(huang.huang)
+
+from transformer_engine.musa.pytorch.utils import replace_attr, add_attr
+from megatron.core.transformer.mlp import MLP
+replace_attr(MLP,"forward", MLP_forward)
+add_attr(MLP,"custom_func_first", MLP_custom_func_first)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/moe_layer.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/moe_layer.py
new file mode 100644
index 000000000..8b1fbb42b
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/moe_layer.py
@@ -0,0 +1,216 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+from functools import partial, wraps
+
+import torch
+import torch.nn.functional as F
+from torch.nn import Identity
+
+from megatron.core import tensor_parallel, parallel_state
+from megatron.core.fusions.fused_bias_geglu import bias_geglu_impl
+from megatron.core.fusions.fused_bias_gelu import bias_gelu_impl
+from megatron.core.fusions.fused_bias_swiglu import bias_swiglu_impl
+
+from transformer_engine.pytorch.distributed import checkpoint, checkpointVirance
+from megatron.core.transformer.moe.shared_experts import SharedExpertMLP
+
+# HACK(huang.huang): recompute/variance for experts in moe with fp8/bf16: 
+# support mlp_rms_recompute which combine rms, sharedEXP and gating into one checkpoint;
+def MoELayer_forward(self, hidden_states: torch.Tensor, norm_func=None):
+    """
+    Perform the forward pass through the MLP block.
+    Args:
+    hidden_states (Tensor): Input tensor of shape [s, b, h] where s is sequence length,
+        b is batch size, and h is hidden size.
+    norm_func (function): whether to do layernorm inner MLP instead of transformerlayer.
+    """
+    if (
+        self.training
+        and self.config.tensor_model_parallel_size > 1
+        and not self.config.sequence_parallel
+    ):
+        raise ValueError(
+            "During training, performance may degrade if MoE and tensor parallelism"
+            "are enabled without also enabling sequence parallelism."
+        )
+
+    
+    # process MoE
+    def custom_forward(hidden_states):
+        
+        if norm_func is not None:
+            assert self.config.mlp_rms_recompute
+            
+            def rms_recompute_func(hidden_states):
+                #combination of rms, sharedEXP and gating
+                hidden_states= norm_func(hidden_states)
+                logits = self.router.apply_input_jitter(hidden_states)
+                logits = self.router.gating(logits)
+                shared_output = self.shared_experts(hidden_states, no_recompute=True)
+                return hidden_states, logits, shared_output
+            
+            if self.config.fp8:
+                if self.config.recompute_variance:
+                    func_before_routing = lambda x : self.router.gating(self.router.apply_input_jitter(x))
+                    linears = (Identity(), Identity(), self.shared_experts.linear_fc2)
+                    mid_function = (Identity(), func_before_routing, self.shared_experts.custom_func_first)
+                    hidden_states, logits, shared_output = checkpointVirance(
+                        norm_func, 
+                        linears,
+                        hidden_states,
+                        distribute_saved_activations=self.config.distribute_saved_activations,
+                        get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                        tp_group=parallel_state.get_tensor_model_parallel_group(),
+                        mid_function=mid_function
+                    )
+                else:
+                    hidden_states, logits, shared_output = checkpoint(
+                        rms_recompute_func,
+                        hidden_states,
+                        distribute_saved_activations=self.config.distribute_saved_activations,
+                        get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                        tp_group=parallel_state.get_tensor_model_parallel_group(),
+                    )
+            else:
+                if self.config.recompute_variance:
+                    func_before_routing = lambda x : self.router.gating(self.router.apply_input_jitter(x))
+                    linears = (Identity(), Identity(), self.shared_experts.linear_fc2)
+                    mid_function = (Identity(), func_before_routing, self.shared_experts.custom_func_first)
+                    hidden_states, logits, shared_output = tensor_parallel.checkpointVirance(
+                        norm_func, 
+                        linears,
+                        False, 
+                        hidden_states,
+                        mid_function=mid_function
+                        )
+                else:
+                    hidden_states, logits, shared_output = tensor_parallel.checkpoint(
+                        rms_recompute_func, False, hidden_states)
+            probs, routing_map = self.router.routing(logits)
+        else:
+            probs, routing_map = self.router(hidden_states)
+        (dispatched_input, tokens_per_expert) = self.token_dispatcher.token_permutation(
+            hidden_states, probs, routing_map
+        )
+        custom_expert_forward = partial(self.experts, tokens_per_expert=tokens_per_expert)
+
+        def _custom_func_first(permuted_local_hidden_states, tokens_per_expert):
+            #forward for linear1 and act in self.experts
+            tokens_per_expert = tokens_per_expert.tolist()
+            intermediate_parallel, bias_parallel = self.experts.linear_fc1(
+                permuted_local_hidden_states, tokens_per_expert
+            )
+
+            if self.experts.config.bias_activation_fusion:
+                if self.experts.activation_func == F.gelu:
+                    if self.experts.config.gated_linear_unit:
+                        intermediate_parallel = bias_geglu_impl(intermediate_parallel, bias_parallel)
+                    else:
+                        assert self.experts.config.add_bias_linear is True
+                        intermediate_parallel = bias_gelu_impl(intermediate_parallel, bias_parallel)
+                elif self.experts.activation_func == F.silu and self.experts.config.gated_linear_unit:
+                    intermediate_parallel = bias_swiglu_impl(
+                        intermediate_parallel,
+                        bias_parallel,
+                        self.config.activation_func_fp8_input_store,
+                    )
+                else:
+                    raise ValueError("Only support fusion of gelu and swiglu")
+            else:
+                if bias_parallel is not None:
+                    shape = intermediate_parallel.shape
+                    intermediate_parallel = torch.cat(
+                        [
+                            t + b
+                            for t, b in zip(
+                                torch.split(
+                                    intermediate_parallel.view(-1, shape[-1]), tokens_per_expert
+                                ),
+                                bias_parallel,
+                            )
+                        ]
+                    ).view(shape)
+                if self.experts.config.gated_linear_unit:
+
+                    def glu(x):
+                        x = torch.chunk(x, 2, dim=-1)
+                        return self.experts.config.activation_func(x[0]) * x[1]
+
+                    intermediate_parallel = glu(intermediate_parallel)
+                else:
+                    intermediate_parallel = self.experts.activation_func(intermediate_parallel)
+            return intermediate_parallel, tokens_per_expert
+
+        custom_func_first = partial(_custom_func_first, tokens_per_expert=tokens_per_expert) 
+
+
+        if self.config.mlp_recompute:
+            if self.config.fp8:
+                if self.config.recompute_variance:
+                    expert_output, mlp_bias = checkpointVirance(
+                        custom_func_first,
+                        self.experts.linear_fc2,
+                        dispatched_input,
+                        distribute_saved_activations=self.config.distribute_saved_activations,
+                        get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                        tp_group=parallel_state.get_tensor_model_parallel_group(),
+                    )
+                else:
+                    expert_output, mlp_bias = checkpoint(
+                        custom_expert_forward, 
+                        dispatched_input,
+                        distribute_saved_activations=self.config.distribute_saved_activations,
+                        get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                        tp_group=parallel_state.get_tensor_model_parallel_group(),
+                        )
+            else:
+                if self.config.recompute_variance:
+                    expert_output, mlp_bias = tensor_parallel.checkpointVirance(
+                        custom_func_first, self.experts.linear_fc2, False, dispatched_input)
+                else:
+                    expert_output, mlp_bias = tensor_parallel.checkpoint(
+                        custom_expert_forward, False, dispatched_input)
+        else:
+            expert_output, mlp_bias = self.experts(dispatched_input, tokens_per_expert)
+
+        output, mlp_bias = self.token_dispatcher.token_unpermutation(expert_output, mlp_bias)
+        if norm_func is not None:
+            #self.shared_experts called in the begining of custom_forward, which is convenient for rms recmopute 
+            output = output + shared_output
+        elif self.use_shared_expert and not self.shared_expert_overlap:
+            # if shared_expert_overlap is True, the expert calculation happens in
+            # the token_dispatcher to overlap communications and computations
+            output = output + self.shared_experts(hidden_states)
+        return output, mlp_bias
+
+    if self.moe_layer_recompute:
+        output, mlp_bias = tensor_parallel.checkpoint(custom_forward, False, hidden_states)
+    else:
+        output, mlp_bias = custom_forward(hidden_states)
+
+    return output, mlp_bias
+## HACK(huang.huang)
+
+
+# HACK(huang.huang): recompute/variance for SharedExpertMLP, avoid repeated recomputation between moe-layer and sharedExp  
+def SharedExpertMLP_forward(self, hidden_states, no_recompute=False):
+    """ 
+    Perform the forward pass through the SharedExpertMLP block.
+    Args:
+    hidden_states (Tensor): Input tensor of shape [s, b, h] where s is sequence length,
+        b is batch size, and h is hidden size.
+    no_recompute (bool): default is False. only set to True when is sharedEXP, 
+                        to avoid repeated recomputation between this mlp and moe_layer 
+    """
+    output, _ = super(SharedExpertMLP, self).forward(hidden_states, no_recompute=no_recompute)
+    if self.use_shared_expert_gate:
+        logits = torch.nn.functional.linear(hidden_states, self.gate_weight)
+        gate_score = torch.nn.functional.sigmoid(logits)
+        output = output * gate_score
+    return output
+## HACK(huang.huang)
+
+from transformer_engine.musa.pytorch.utils import replace_attr
+from megatron.core.transformer.moe.moe_layer import MoELayer
+replace_attr(MoELayer,"forward", MoELayer_forward)
+replace_attr(SharedExpertMLP,"forward", SharedExpertMLP_forward)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/multi_latent_attention.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/multi_latent_attention.py
new file mode 100644
index 000000000..739bad169
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/multi_latent_attention.py
@@ -0,0 +1,297 @@
+import os
+import torch
+from functools import partial
+from megatron.core import tensor_parallel, parallel_state
+from megatron.core.models.common.embeddings import apply_rotary_pos_emb
+from megatron.core.transformer.multi_latent_attention import MLASelfAttention
+try:
+    from transformer_engine.pytorch.distributed import checkpoint
+    from transformer_engine.pytorch.distributed import checkpointViranceAttention
+    HAVE_TE = True
+except ImportError:
+    HAVE_TE = False
+
+# HACK(huang.huang): recompute-variance for fa: 
+# 1. modify get_query_key_value_tensors for MLASelfAttention, just add a logic to call recompute;
+# 2. modify forward for MLASelfAttention, seperate the core attention from other part around it, and send them to checkpoint_forward
+# 3. add RoPEQInplace
+# TODO: huang.huang revise code before to follow new version "get_qkv" in Megatron-LM:main
+class RoPEQInplace(torch.autograd.Function):
+    """
+    limiation:
+    1. pre_op backward cannot use self output(e.g. softmax).
+    2. if you call backward directly and pass in dy, be careful that dy is overwritten.
+    """
+
+    @staticmethod
+    def forward(ctx, x, freqs, custom_metadata):
+        (
+            split_start,
+            split_end,
+            rotary_interleaved,
+            batch_first,
+        ) = ctx.custom_metadata = custom_metadata
+        assert x.dim() == 4 and freqs.dim() == 2
+        assert (split_end - split_start) == freqs.shape[-1]
+        assert x.shape[batch_first] == freqs.shape[0]
+        ctx.save_for_backward(freqs)
+        y = torch.ops.aten._fused_rope_forward(
+            x[..., split_start:split_end], freqs, rotary_interleaved, batch_first
+        )
+        # x.data[..., split_start:split_end] = y # Using `tensor.data` does not affect `tensor._version`.
+        x[..., split_start:split_end] = y
+        return x
+
+    @staticmethod
+    def backward(ctx, dy):
+        (freqs,) = ctx.saved_tensors
+        (
+            split_start,
+            split_end,
+            rotary_interleaved,
+            batch_first,
+        ) = ctx.custom_metadata
+        sub_dy = dy[..., split_start:split_end]
+        dx = torch.ops.aten._fused_rope_backward(
+            sub_dy, freqs, rotary_interleaved, batch_first
+        )
+        dy[..., split_start:split_end] = dx
+        return dy, None, None
+
+
+def MLASelfAttention_forward(
+    self,
+    hidden_states,
+    attention_mask,
+    key_value_states=None,
+    inference_params=None,
+    rotary_pos_emb=None,
+    rotary_pos_cos=None,
+    rotary_pos_sin=None,
+    attention_bias=None,
+    packed_seq_params=None,
+    position_ids=None,
+    sequence_len_offset=None,
+    q_compressed=None,
+    kv_combined=None,
+):
+    if not int(os.getenv("USE_RECOMPUTE_VARIANCE", 0)):
+        #original forward
+        return super(MLASelfAttention ,self).forward(
+            hidden_states,
+            attention_mask,
+            key_value_states,
+            inference_params,
+            rotary_pos_emb,
+            rotary_pos_cos,
+            rotary_pos_sin,
+            attention_bias,
+            packed_seq_params,
+            position_ids,
+            sequence_len_offset
+            )
+    
+    """Forward pass for multi-latent attention"""
+    assert rotary_pos_emb is None, "Rotary position embeddings should not be passed into MLA."
+    assert attention_bias is None, "Attention bias should not be passed into MLA."
+    assert (
+        rotary_pos_cos is None and rotary_pos_sin is None
+    ), "MLA does not support Flash Decoding"
+
+    # hidden_states: [sq, b, h]
+
+    # =====================
+    # Query, Key, and Value
+    # =====================
+    # Get the query, key and value tensors based on the type of attention -
+    # self or cross attn.
+    # query: [96, 1, 16, 128], key:[96, 1, 16, 128], value:[96, 1, 16, 128]
+    if self.config.mla_rms_recompute:
+        assert self.config.attn_recompute, 'mla_rms_recompute only use with attn_recompute now.'
+        pass
+    else:
+        assert (
+            hidden_states.ndim == 3
+        ), f"hidden_states should be 3D, [s, b, n*h], got {hidden_states.ndim}D"
+
+        if self.config.q_lora_rank is not None:
+            q_compressed, _ = self.linear_q_down_proj(hidden_states)
+        else:
+            q_compressed = hidden_states      
+
+        kv_combined, _ = self.linear_kv_down_proj(hidden_states)    
+
+    def _custom_forward_before_attention(
+        q_compressed, 
+        kv_combined,
+        key_value_states=None,
+        position_ids=None,
+        packed_seq_params=None,
+        inference_params=None,
+    ):
+        q_len, bsz, _ = q_compressed.size()
+
+        if self.config.q_lora_rank is not None:
+            q_compressed = self.q_layernorm(q_compressed)
+            q, _ = self.linear_q_up_proj(q_compressed)
+        else:
+            q, _ = self.linear_q_proj(q_compressed)
+        
+        # q: [s, b, n, 192]
+        q = q.view(q_len, bsz, self.num_attention_heads_per_partition, self.q_head_dim)
+
+        # q: [s, b, n, 128], q_pos_emb: [s, b, n, 64]
+        q_no_pe, q_pos_emb = torch.split(
+            q, [self.config.qk_head_dim, self.config.qk_pos_emb_head_dim], dim=-1
+        )
+
+
+        # kv_compressed:[s, b, 512], k_pos_emb: [s, b, 64]
+        kv_compressed, k_pos_emb = torch.split(
+            kv_combined, [self.config.kv_lora_rank, self.config.qk_pos_emb_head_dim], dim=-1
+        )
+        kv, _ = self.linear_kv_up_proj(self.kv_layernorm(kv_compressed))
+
+        # kv: [s, b, n, 256]
+        kv = kv.view(
+            q_len,
+            bsz,
+            self.num_attention_heads_per_partition,
+            self.config.qk_head_dim + self.config.v_head_dim,
+        )
+
+        # k_no_pe: [s, b, n, 128], value: [s, b, n, 128]
+        k_no_pe, value = torch.split(kv, [self.config.qk_head_dim, self.config.v_head_dim], dim=-1)
+
+        # rotary_pos_emb:[s, b, 1, 64]
+        rotary_pos_emb = self.rotary_pos_emb(max_seq_len=self.config.max_position_embeddings)
+
+        if len(rotary_pos_emb) == 2:
+            mscale = rotary_pos_emb[1]
+            rotary_pos_emb = rotary_pos_emb[0]
+
+        if inference_params is not None:
+            # add offset to the sequence start for inference
+            sequence_start = inference_params.sequence_len_offset
+            sequence_end = sequence_start + q_len
+            rotary_pos_emb = rotary_pos_emb[sequence_start:sequence_end]
+
+        # [s, b, 64] -> [s, b, 1, 64]
+        k_pos_emb = torch.unsqueeze(k_pos_emb, 2)
+
+        if packed_seq_params is not None:
+            cu_seqlens_q = packed_seq_params.cu_seqlens_q
+            cu_seqlens_kv = packed_seq_params.cu_seqlens_kv
+        else:
+            cu_seqlens_q = cu_seqlens_kv = None
+
+        # # q_pos_emb: [s, b, n, 64], k_pos_emb:[s, b, 1, 64]
+        # q_pos_emb = apply_rotary_pos_emb(
+        #     q_pos_emb, rotary_pos_emb, config=self.config, cu_seqlens=cu_seqlens_q, mscale=mscale
+        # )
+        k_pos_emb = apply_rotary_pos_emb(
+            k_pos_emb, rotary_pos_emb, config=self.config, cu_seqlens=cu_seqlens_kv, mscale=mscale
+        )
+
+        # # query: [s, b, n, 192]
+        # query = torch.cat([q_no_pe, q_pos_emb], dim=-1)
+        q_split_start = self.config.qk_head_dim
+        q_split_end = q_split_start + self.config.qk_pos_emb_head_dim
+        rotary_interleaved = False
+        batch_first = False
+        query = RoPEQInplace.apply(q, rotary_pos_emb.squeeze(1).squeeze(1), 
+                                   (q_split_start, q_split_end, rotary_interleaved, batch_first))
+
+        # key: [s, b, n, 192]
+        k_pos_emb = k_pos_emb.expand(-1, -1, self.config.num_attention_heads, -1)
+        key = torch.cat([k_no_pe, k_pos_emb], dim=-1)
+
+        query = query.contiguous()
+        key = key.contiguous()
+        value = value.contiguous()    
+
+        query, key, value, _, attn_mask_type = self._adjust_key_value_for_inference(
+        inference_params, query, key, value, rotary_pos_emb=None
+        )    
+        return query, key, value, attention_mask, \
+            {"attn_mask_type":attn_mask_type, "attention_bias":attention_bias, "packed_seq_params":packed_seq_params}
+        
+    def _custom_forward_self_attention(
+        q_compressed, 
+        kv_combined,
+        key_value_states=None,
+        position_ids=None,
+        packed_seq_params=None,
+        inference_params=None,
+        ):
+        
+        query, key, value, attention_mask, kwargs = _custom_forward_before_attention(q_compressed, kv_combined, key_value_states, position_ids, packed_seq_params,inference_params)
+        core_attn_out = self.core_attention(query, key, value, attention_mask, **kwargs)
+        return core_attn_out       
+
+    custom_forward_self_attention = partial(
+        _custom_forward_self_attention,
+        key_value_states=key_value_states,
+        inference_params=inference_params,
+        position_ids=position_ids,
+        packed_seq_params=packed_seq_params,
+    )
+
+
+    custom_forward_before_attention = partial(
+        _custom_forward_before_attention,
+        key_value_states=key_value_states,
+        inference_params=inference_params,
+        position_ids=position_ids,
+        packed_seq_params=packed_seq_params,
+    )
+
+    if self.config.attn_recompute == True:
+        if self.config.fp8:
+            if self.config.recompute_variance == True:
+                core_attn_out = checkpointViranceAttention(
+                    custom_forward_before_attention,
+                    self.core_attention,
+                    q_compressed,
+                    kv_combined,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                )      
+            else:
+                core_attn_out =  checkpoint(
+                    custom_forward_self_attention,
+                    q_compressed,
+                    kv_combined,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                )    
+        else:
+            if self.config.recompute_variance == True:
+                core_attn_out = tensor_parallel.checkpointViranceAttention(
+                    custom_forward_before_attention, self.core_attention, False, q_compressed, kv_combined)
+            else:
+                core_attn_out = tensor_parallel.checkpoint(
+                    custom_forward_self_attention, False, q_compressed, kv_combined)
+    else:
+        core_attn_out = custom_forward_self_attention(q_compressed, kv_combined)
+    if packed_seq_params is not None:
+        # reshape to same output shape as unpacked case
+        # (t, np, hn) -> (t, b=1, h=np*hn)
+        # t is the pack size = sum (sq_i)
+        # note that batch is a dummy dimension in the packed case
+        core_attn_out = core_attn_out.reshape(core_attn_out.size(0), 1, -1)
+
+    # =================
+    # Output. [sq, b, h]
+    # =================
+    output, bias = self.linear_proj(core_attn_out)
+
+    return output, bias
+# HACK(huang.huang)
+
+
+from transformer_engine.musa.pytorch.utils import replace_attr
+
+replace_attr(MLASelfAttention, "forward", MLASelfAttention_forward)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/random.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/random.py
new file mode 100644
index 000000000..6f011236f
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/random.py
@@ -0,0 +1,309 @@
+# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+
+# Parts of the code here are adapted from PyTorch
+# repo: https://github.com/pytorch/pytorch
+
+# import contextlib
+# import logging
+
+import torch
+# from torch import _C
+from torch.cuda import _lazy_call
+from torch.nn import Identity
+# from torch.cuda import device as device_ctx_manager
+from torch.utils.checkpoint import detach_variable
+
+# from megatron.core.parallel_state import (
+#     get_expert_model_parallel_rank,
+#     get_expert_tensor_parallel_rank,
+#     get_tensor_model_parallel_rank,
+# )
+from megatron.core.utils import is_te_min_version, safely_set_viewless_tensor_data
+
+from megatron.core.tensor_parallel.utils import gather_split_1d_tensor, split_tensor_into_1d_equal_chunks
+
+
+from megatron.core.tensor_parallel.random import (CheckpointFunction, get_cuda_rng_tracker,
+                                                   _set_cuda_rng_state)
+
+    
+# HACK(huang.huang): recompute-variance for [somefunc+fa] and [somefunc+linear], 
+# which can save a forward for fa/linear when backward recompute 
+# 2025.4.2: support list of linear as last_function, and args "mid_function" to support complex situations
+class IdentityTupleOp(torch.nn.Module):
+    """
+    This is a placeholder for IdentityTupleOp(*args) -> args,
+    """
+
+    def __init__(self,):
+        super().__init__()
+
+    def forward(self, *args):
+        return args
+
+
+class CheckpointFunctionVirance(CheckpointFunction):
+    """Checkpoint Function
+
+    This function is adapted from torch.utils.checkpoint with two main changes:
+    1) torch.cuda.set_rng_state is replaced with `_set_cuda_rng_state`
+    2) the states in the model parallel tracker are also properly tracked/set/reset.
+    """
+
+    # pylint: disable=missing-function-docstring
+    @staticmethod
+    def forward(ctx, run_function, last_function, mid_function, distribute_saved_activations, *args):
+        """Forward pass."""
+        if not isinstance(last_function, tuple):
+            last_function = (last_function, )
+        mid_function = tuple(IdentityTupleOp() for _ in last_function) if mid_function is None else mid_function       
+        ctx.run_function = run_function
+        ctx.last_function = last_function 
+        ctx.mid_function = mid_function
+        ctx.distribute_saved_activations = distribute_saved_activations
+
+        # Copy the rng states.
+        ctx.fwd_cpu_rng_state = torch.get_rng_state()
+        ctx.fwd_cuda_rng_state = torch.cuda.get_rng_state()
+        ctx.fwd_cuda_rng_state_tracker = get_cuda_rng_tracker().get_states()
+
+        with torch.no_grad():
+            outputs = run_function(*args)
+            outputs = outputs if isinstance(outputs, tuple) else (outputs, )
+            total_outputs = []
+            for i, func in enumerate(last_function):
+                outputs_f = mid_function[i](*outputs)
+                outputs_f = outputs_f if isinstance(outputs_f, tuple) else (outputs_f, )
+                outputs_f = func(*outputs_f)
+                total_outputs.append(outputs_f)
+            if len(total_outputs)==1:
+                #maintain original behavior when only one last_function 
+                total_outputs=total_outputs[0] 
+            else:
+                flat_outputs = []
+                for outputs_f in total_outputs:
+                    if isinstance(outputs_f, tuple):
+                        #Manually remove bias_out which is 'None', and assign 'None' to grad-bias in the corresponding backward direction
+                        outputs_f = tuple([x for x in outputs_f if x is not None])         
+                    flat_outputs.append(outputs_f)   
+                total_outputs = flat_outputs
+                #The reentrant version does not consider tensors in nested structures (e.g., custom objects, lists, dicts, etc) 
+                # as participating in autograd, while the non-reentrant version does
+                total_outputs = sum( [x if isinstance(x, tuple) else (x,) for x in total_outputs ], tuple()) 
+        # Divide hidden states across model parallel group and only keep
+        # the chunk corresponding to the current rank.
+        if distribute_saved_activations:
+            ctx.input_0_shape = args[0].data.shape
+            safely_set_viewless_tensor_data(
+                args[0], split_tensor_into_1d_equal_chunks(args[0].data, new_buffer=True)
+            )
+
+        # Store everything.
+        ctx.inputs = [arg if not torch.is_tensor(arg) else None for arg in args]
+        tensor_inputs = [arg if torch.is_tensor(arg) else None for arg in args]
+        ctx.save_for_backward(*tensor_inputs)
+
+        return total_outputs
+
+    # pylint: disable=missing-function-docstring
+    @staticmethod
+    def backward(ctx, *args):
+        """Backward pass."""
+        if not torch.autograd._is_checkpoint_valid():
+            raise RuntimeError(
+                "Checkpointing is not compatible with .grad(), "
+                "please use .backward() if possible"
+            )
+        # inputs = ctx.saved_tensors
+        inputs = tuple(
+            t if t is not None else arg for (t, arg) in zip(ctx.saved_tensors, ctx.inputs)
+        )
+        if ctx.distribute_saved_activations:
+            safely_set_viewless_tensor_data(
+                inputs[0], gather_split_1d_tensor(inputs[0].data).view(ctx.input_0_shape)
+            )
+
+        # Store the current states.
+        bwd_cpu_rng_state = torch.get_rng_state()
+        bwd_cuda_rng_state = torch.cuda.get_rng_state()
+        bwd_cuda_rng_state_tracker = get_cuda_rng_tracker().get_states()
+
+        # Set the states to what it used to be before the forward pass.
+        torch.set_rng_state(ctx.fwd_cpu_rng_state)
+        _set_cuda_rng_state(ctx.fwd_cuda_rng_state)
+        get_cuda_rng_tracker().set_states(ctx.fwd_cuda_rng_state_tracker)
+
+        # Compute the forward pass.
+        detached_inputs = detach_variable(inputs)
+        with torch.enable_grad():
+            outputs = ctx.run_function(*detached_inputs)
+            outputs = outputs if isinstance(outputs, tuple) else (outputs, )
+            total_outputs = []
+            for i,func in enumerate(ctx.mid_function):
+                outputs_f = func(*outputs)
+                if isinstance(outputs_f, torch.Tensor):
+                    outputs_f = [outputs_f,]
+                total_outputs.append(outputs_f)
+        # Set the states back to what it was at the start of this function.
+        torch.set_rng_state(bwd_cpu_rng_state)
+        _set_cuda_rng_state(bwd_cuda_rng_state)
+        get_cuda_rng_tracker().set_states(bwd_cuda_rng_state_tracker)
+
+
+        total_grad_input = []
+        for i,func in enumerate(ctx.last_function):
+            if isinstance(func, Identity):
+                grad_input_f = args[i]
+            else:
+                # Assign 'None' to grad_bias to correspond to the operation of removing 'none' during forward
+                grad_out_bias = args[i] if isinstance(args[i], tuple) else (args[i], None)
+                grad_input_f = func.backward_custom(*total_outputs[i], *grad_out_bias)
+            if isinstance(grad_input_f, torch.Tensor):
+                grad_input_f = (grad_input_f,)
+            total_grad_input.append(grad_input_f)
+
+        total_outputs_with_grad = []
+        total_args_with_grad = []
+        for j, outputs in enumerate(total_outputs):
+            outputs_with_grad = []
+            args_with_grad = []
+            for i, output in enumerate(outputs):
+                if torch.is_tensor(output) and output.requires_grad:
+                    outputs_with_grad.append(output)
+                    args_with_grad.append(total_grad_input[j][i])    
+            total_outputs_with_grad += outputs_with_grad
+            total_args_with_grad += args_with_grad
+        torch.autograd.backward(total_outputs_with_grad, total_args_with_grad)
+        grads = tuple(inp.grad if isinstance(inp, torch.Tensor) else inp for inp in detached_inputs)
+        return (None, None, None, None) + grads
+    
+def checkpointVirance(run_function, last_function, distribute_saved_activations, *args, mid_function=None):
+    """Checkpoint a model or part of the model.
+    This has been directly copied from torch.utils.checkpoint."""
+    return CheckpointFunctionVirance.apply(run_function, last_function, mid_function, distribute_saved_activations, *args)
+
+
+
+class CheckpointFunctionViranceAttention(CheckpointFunction):
+    """Checkpoint Function
+
+    This function is adapted from torch.utils.checkpoint with two main changes:
+    1) torch.cuda.set_rng_state is replaced with `_set_cuda_rng_state`
+    2) the states in the model parallel tracker are also properly tracked/set/reset.
+    """
+
+    # pylint: disable=missing-function-docstring
+    @staticmethod
+    def forward(ctx, run_function, last_function, distribute_saved_activations, *args):
+        """Forward pass."""
+        ctx.run_function = run_function
+        ctx.last_function = last_function 
+        ctx.distribute_saved_activations = distribute_saved_activations
+
+        # Copy the rng states.
+        ctx.fwd_cpu_rng_state = torch.get_rng_state()
+        ctx.fwd_cuda_rng_state = torch.cuda.get_rng_state()
+        ctx.fwd_cuda_rng_state_tracker = get_cuda_rng_tracker().get_states()
+
+        with torch.no_grad():
+            outputs = run_function(*args)
+            outputs = last_function.forward_before_fa(*outputs[:4], **outputs[4])
+            outputs = last_function.forward_fa(*outputs) 
+            #outputs: Union[output=Union[Tensor output, Tensor logsumexp, Tensor dropout_mask], 
+            # qkv_format, indices_q, batch_size, attn_mask_type, max_seqlen_q, q_shape, v_shape]
+            core_attn_out = last_function.forward_after_fa(*outputs)
+        # Divide hidden states across model parallel group and only keep
+        # the chunk corresponding to the current rank.
+        if distribute_saved_activations:
+            ctx.input_0_shape = args[0].data.shape
+            safely_set_viewless_tensor_data(
+                args[0], split_tensor_into_1d_equal_chunks(args[0].data, new_buffer=True)
+            )
+
+        # Store everything.
+        ctx.save_for_backward(*args, *outputs[0])
+        (ctx.qkv_format, ctx.indices_q, ctx.batch_size, 
+         ctx.attn_mask_type, ctx.max_seqlen_q, ctx.q_shape, ctx.v_shape) = outputs[1:]
+
+        return core_attn_out
+
+# pylint: disable=missing-function-docstring
+    @staticmethod
+    def backward(ctx, *args):
+        """Backward pass."""
+        if not torch.autograd._is_checkpoint_valid():
+            raise RuntimeError(
+                "Checkpointing is not compatible with .grad(), "
+                "please use .backward() if possible"
+            )
+        inputs = ctx.saved_tensors
+        fa_output = inputs[-3:]
+        inputs = inputs[:-3]
+        if ctx.distribute_saved_activations:
+            safely_set_viewless_tensor_data(
+                inputs[0], gather_split_1d_tensor(inputs[0].data).view(ctx.input_0_shape)
+            )
+
+        # Store the current states.
+        bwd_cpu_rng_state = torch.get_rng_state()
+        bwd_cuda_rng_state = torch.cuda.get_rng_state()
+        bwd_cuda_rng_state_tracker = get_cuda_rng_tracker().get_states()
+
+        # Set the states to what it used to be before the forward pass.
+        torch.set_rng_state(ctx.fwd_cpu_rng_state)
+        _set_cuda_rng_state(ctx.fwd_cuda_rng_state)
+        get_cuda_rng_tracker().set_states(ctx.fwd_cuda_rng_state_tracker)
+
+        # Compute the forward pass.
+        detached_inputs = detach_variable(inputs)
+        detached_ori_outputs = detach_variable(fa_output)
+        detached_ori_outputs[0].requires_grad = True #only 0 element need grad in output of FA: [Tensor output, Tensor logsumexp, Tensor dropout_mask]
+        # ori_outputs is not requires_grad
+        with torch.enable_grad():
+            outputs_before_fa = ctx.run_function(*detached_inputs) 
+            # outputs_before_fa: query, key, value, attention_mask, {"attn_mask_type":attn_mask_type, "attention_bias":attention_bias, "packed_seq_params":packed_seq_params}
+            outputs_before_fa = ctx.last_function.forward_before_fa(*outputs_before_fa[:4], **outputs_before_fa[4])
+            outputs = ctx.last_function.forward_after_fa(detached_ori_outputs, 
+                                                         ctx.qkv_format, ctx.indices_q,  
+                                                         ctx.batch_size, ctx.attn_mask_type, 
+                                                         ctx.max_seqlen_q, ctx.q_shape, ctx.v_shape)
+        # Set the states back to what it was at the start of this function.
+        torch.set_rng_state(bwd_cpu_rng_state)
+        _set_cuda_rng_state(bwd_cuda_rng_state)
+        get_cuda_rng_tracker().set_states(bwd_cuda_rng_state_tracker)
+
+        
+        if isinstance(outputs, torch.Tensor):
+            outputs = (outputs,)
+        # filter out non tensor outputs for backward pass
+        outputs, args = zip(*filter(lambda x: torch.is_tensor(x[0]), zip(outputs, args)))
+        torch.autograd.backward(outputs, args)
+        
+        #costum bwd fa
+        with torch.backends.cuda.sdp_kernel(enable_flash=True, enable_math=False):
+            with torch.no_grad():
+                grad_input = torch.ops.aten._scaled_dot_product_attention_flash_musa_backward(
+                    # ori_outputs[0][0].grad,
+                    detached_ori_outputs[0].grad,
+                    *outputs_before_fa[:3], #q, k, v
+                    *detached_ori_outputs, #(Tensor output, Tensor logsumexp, Tensor dropout_mask)
+                    is_causal="causal" in ctx.attn_mask_type, #causal same as fwd
+                ) 
+        
+        #bwd before fa: for qkv
+        torch.autograd.backward(outputs_before_fa[:3], grad_input)
+        grads = tuple(inp.grad if isinstance(inp, torch.Tensor) else inp for inp in detached_inputs)
+        return (None, None, None) + grads
+    
+
+def checkpointViranceAttention(run_function, last_function, distribute_saved_activations, *args):
+    """Checkpoint a model or part of the model.
+    This has been directly copied from torch.utils.checkpoint."""
+    return CheckpointFunctionViranceAttention.apply(run_function, last_function, distribute_saved_activations, *args)
+# HACK(huang.huang)
+
+
+from transformer_engine.musa.pytorch.utils import add_attr
+from megatron.core import tensor_parallel
+add_attr(tensor_parallel, 'checkpointVirance', checkpointVirance)
+add_attr(tensor_parallel, 'checkpointViranceAttention', checkpointViranceAttention)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/schedules.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/schedules.py
new file mode 100644
index 000000000..65c904e6b
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/schedules.py
@@ -0,0 +1,256 @@
+# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+
+import contextlib
+from typing import Iterator, List, Union
+
+import torch
+
+from megatron.core import parallel_state
+from megatron.core.enums import ModelType
+from megatron.core.transformer.moe.router import MoEAuxLossAutoScaler
+from megatron.core.utils import (
+    get_attr_wrapped_model,
+    get_model_type,
+)
+from transformer_engine.pytorch.fp8 import FP8GlobalStateManager
+from megatron.core.pipeline_parallel.schedules import set_current_microbatch, custom_backward
+
+# Types
+Shape = Union[List[int], torch.Size]
+
+
+#HACK(huang.huang): add FP8GlobalStateManager.reduce_and_update_fp8_tensors to the end of forward and backward,
+# to avoid redundant calls of reduce among dp
+def forward_step(
+    forward_step_func,
+    data_iterator,
+    model,
+    num_microbatches,
+    input_tensor,
+    forward_data_store,
+    config,
+    collect_non_loss_data=False,
+    checkpoint_activations_microbatch=None,
+    is_first_microbatch=False,
+    current_microbatch=None,
+    encoder_decoder_xattn=False,
+):
+    """Forward step for passed-in model.
+
+    If it is the first stage, the input tensor is obtained from the data_iterator.
+    Otherwise, the passed-in input_tensor is used.
+
+    Args:
+        forward_step_func (callable):
+            The forward step function for the model that takes the
+            data iterator as the first argument, and model as the second.
+            This user's forward step is expected to output a tuple of two elements:
+
+                1. The output object from the forward step. This output object needs to be a
+                    tensor or some kind of collection of tensors. The only hard requirement
+                    for this object is that it needs to be acceptible as input into the second
+                    function.
+                2. A function to reduce (optionally) the output from the forward step. This
+                    could be a reduction over the loss from the model, it could be a function that
+                    grabs the output from the model and reformats, it could be a function that just
+                    passes through the model output. This function must have one of the following
+                    patterns, and depending on the pattern different things happen internally:
+
+                        a. A tuple of reduced loss and some other data. Note that in this case
+                            the first argument is divided by the number of global microbatches,
+                            assuming it is a loss, so that the loss is stable as a function of
+                            the number of devices the step is split across.
+                        b. A triple of reduced loss, number of tokens, and some other data. This
+                            is similar to case (a), but the loss is further averaged across the
+                            number of tokens in the batch. If the user is not already averaging
+                            across the number of tokens, this pattern is useful to use.
+                        c. Any arbitrary data the user wants (eg a dictionary of tensors, a list
+                            of tensors, etc in the case of inference). To trigger case 3 you need
+                            to specify `collect_non_loss_data=True` and you may also want to
+                            specify `forward_only=True` in the call to the parent forward_backward
+                            function.
+        data_iterator (iterator):
+            The data iterator.
+        model (nn.Module):
+            The model to perform the forward step on.
+        num_microbatches (int):
+            The number of microbatches.
+        input_tensor (Tensor or list[Tensor]):
+            The input tensor(s) for the forward step.
+        forward_data_store (list):
+            The list to store the forward data. If you go down path 2.a or
+            2.b for the return of your forward reduction function then this will store only the
+            final dimension of the output, for example the metadata output by the loss function.
+            If you go down the path of 2.c then this will store the entire output of the forward
+            reduction function applied to the model output.
+        config (object):
+            The configuration object.
+        collect_non_loss_data (bool, optional):
+            Whether to collect non-loss data. Defaults to False.
+            This is the path to use if you want to collect arbitrary output from the model forward,
+            such as with inference use cases. Defaults to False.
+        checkpoint_activations_microbatch (int, optional):
+            The microbatch to checkpoint activations.
+            Defaults to None.
+        is_first_microbatch (bool, optional):
+            Whether it is the first microbatch. Defaults to False.
+        current_microbatch (int, optional):
+            The current microbatch. Defaults to None.
+
+    Returns:
+        Tensor or list[Tensor]: The output object(s) from the forward step.
+        Tensor: The number of tokens.
+    """
+    if config.timers is not None:
+        config.timers('forward-compute', log_level=2).start()
+
+    if is_first_microbatch and hasattr(model, 'set_is_first_microbatch'):
+        model.set_is_first_microbatch()
+    if current_microbatch is not None:
+        set_current_microbatch(model, current_microbatch)
+
+    unwrap_output_tensor = False
+    if not isinstance(input_tensor, list):
+        input_tensor = [input_tensor]
+        unwrap_output_tensor = True
+
+    set_input_tensor = get_attr_wrapped_model(model, "set_input_tensor")
+    set_input_tensor(input_tensor)
+
+    if config.enable_autocast:
+        context_manager = torch.autocast("cuda", dtype=config.autocast_dtype)
+    else:
+        context_manager = contextlib.nullcontext()
+    with context_manager:
+        if checkpoint_activations_microbatch is None:
+            output_tensor, loss_func = forward_step_func(data_iterator, model)
+        else:
+            output_tensor, loss_func = forward_step_func(
+                data_iterator, model, checkpoint_activations_microbatch
+            )
+
+    num_tokens = torch.tensor(0, dtype=torch.int)
+    if parallel_state.is_pipeline_last_stage():
+        if not collect_non_loss_data:
+            outputs = loss_func(output_tensor)
+            if len(outputs) == 3:
+                output_tensor, num_tokens, loss_reduced = outputs
+                if not config.calculate_per_token_loss:
+                    output_tensor /= num_tokens
+                    output_tensor /= num_microbatches
+            else:
+                # preserve legacy loss averaging behavior (ie, over the number of microbatches)
+                assert len(outputs) == 2
+                output_tensor, loss_reduced = outputs
+                output_tensor /= num_microbatches
+            forward_data_store.append(loss_reduced)
+        else:
+            data = loss_func(output_tensor, non_loss_data=True)
+            forward_data_store.append(data)
+    FP8GlobalStateManager.reduce_and_update_fp8_tensors(forward=True, skip=False)
+
+    if config.timers is not None:
+        config.timers('forward-compute').stop()
+
+    # Set the loss scale for the auxiliary loss of the MoE layer.
+    # Since we use a trick to do backward on the auxiliary loss, we need to set the scale
+    # explicitly.
+    if hasattr(config, 'num_moe_experts') and config.num_moe_experts is not None:
+        # Calculate the loss scale based on the grad_scale_func if available, else default to 1.
+        loss_scale = (
+            config.grad_scale_func(torch.ones(1, device=output_tensor.device))
+            if config.grad_scale_func is not None
+            else torch.tensor(1.0)
+        )
+        # Set the loss scale
+        MoEAuxLossAutoScaler.set_loss_scale(loss_scale / num_microbatches)
+
+    # If T5 model and in decoder stack, then send encoder_hidden_state
+    # downstream as well.
+    model_type = get_model_type(model)
+    if (
+        model_type == ModelType.encoder_and_decoder
+        and encoder_decoder_xattn
+        and parallel_state.is_inside_decoder()
+    ):
+        return [output_tensor, input_tensor[-1]], num_tokens
+
+    if unwrap_output_tensor:
+        return output_tensor, num_tokens
+    return [output_tensor], num_tokens
+
+
+def backward_step(input_tensor, output_tensor, output_tensor_grad, model_type, config):
+    """Backward step through passed-in output tensor.
+
+    If last stage, output_tensor_grad is None, otherwise gradient of loss
+    with respect to stage's output tensor.
+
+    Returns gradient of loss with respect to input tensor (None if first
+    stage)."""
+
+    # NOTE: This code currently can handle at most one skip connection. It
+    # needs to be modified slightly to support arbitrary numbers of skip
+    # connections.
+
+    if config.timers is not None:
+        config.timers('backward-compute', log_level=2).start()
+
+    # Retain the grad on the input_tensor.
+    unwrap_input_tensor_grad = False
+    if not isinstance(input_tensor, list):
+        input_tensor = [input_tensor]
+        unwrap_input_tensor_grad = True
+    for x in input_tensor:
+        if x is not None:
+            x.retain_grad()
+
+    if not isinstance(output_tensor, list):
+        output_tensor = [output_tensor]
+    if not isinstance(output_tensor_grad, list):
+        output_tensor_grad = [output_tensor_grad]
+
+    # Backward pass.
+    if output_tensor_grad[0] is None and config.grad_scale_func is not None:
+        output_tensor[0] = config.grad_scale_func(output_tensor[0])
+
+    if config.deallocate_pipeline_outputs:
+        custom_backward(output_tensor[0], output_tensor_grad[0])
+    else:
+        torch.autograd.backward(output_tensor[0], grad_tensors=output_tensor_grad[0])
+
+    # Collect the grad of the input_tensor.
+    input_tensor_grad = [None]
+    if input_tensor is not None:
+        input_tensor_grad = []
+        for x in input_tensor:
+            if x is None:
+                input_tensor_grad.append(None)
+            else:
+                input_tensor_grad.append(x.grad)
+
+    # Handle single skip connection if it exists (encoder_hidden_state in
+    # model with encoder and decoder).
+    if (
+        parallel_state.get_pipeline_model_parallel_world_size() > 1
+        and model_type == ModelType.encoder_and_decoder
+        and len(output_tensor_grad) > 1  # excludes models that lack a skip connection.
+    ):
+        if output_tensor_grad[1] is not None:
+            assert input_tensor_grad[-1] is not None
+            input_tensor_grad[-1].add_(output_tensor_grad[1])
+    if unwrap_input_tensor_grad:
+        input_tensor_grad = input_tensor_grad[0]
+
+    FP8GlobalStateManager.reduce_and_update_fp8_tensors(forward=False, skip=False)
+    if config.timers is not None:
+        config.timers('backward-compute').stop()
+
+    return input_tensor_grad
+#HACK(huang.huang)
+
+
+from transformer_engine.musa.pytorch.utils import replace_attr
+from megatron.core.pipeline_parallel import schedules
+replace_attr(schedules, "forward_step", forward_step)
+replace_attr(schedules, "backward_step", backward_step)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_engine.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_engine.py
new file mode 100644
index 000000000..934d6f390
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_engine.py
@@ -0,0 +1,245 @@
+# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
+
+import dataclasses
+import os
+from typing import Any, Callable, Optional
+
+import torch
+from packaging.version import Version as PkgVersion
+from torch import Tensor
+
+from megatron.core.packed_seq_params import PackedSeqParams
+from megatron.core.parallel_state import (
+    get_context_parallel_global_ranks,
+    get_context_parallel_group,
+    get_hierarchical_context_parallel_groups,
+    get_tensor_model_parallel_group,
+)
+from megatron.core.tensor_parallel import get_cuda_rng_tracker, get_expert_parallel_rng_tracker_name
+from megatron.core.transformer.enums import AttnMaskType
+from megatron.core.transformer.transformer_config import TransformerConfig
+from megatron.core.utils import get_te_version, is_te_min_version
+
+from megatron.core.extensions.transformer_engine import TEDotProductAttention
+
+
+# HACK(huang.huang): recompute-variance for fa: modify __init__ for TEDotProductAttention, 
+# just add a attr "recompute_variance" when call super.__init__,
+# add functions "forward_after_fa", "forward_before_fa"
+def TEDotProductAttention__init__(
+    self,
+    config: TransformerConfig,
+    layer_number: int,
+    attn_mask_type: AttnMaskType,
+    attention_type: str,
+    attention_dropout: Optional[float] = None,
+    softmax_scale: Optional[float] = None,
+    k_channels: Optional[int] = None,
+    v_channels: Optional[int] = None,
+    cp_comm_type: str = "p2p",
+):
+    self.config = config
+    self.te_forward_mask_type = False
+    self.qkv_format: str = 'sbhd'
+
+    if self.config.apply_query_key_layer_scaling != bool(
+        int(os.getenv('NVTE_APPLY_QK_LAYER_SCALING', '0'))
+    ):
+        raise ValueError(
+            f"apply_query_key_layer_scaling is {self.config.apply_query_key_layer_scaling} "
+            f"but environment variable NVTE_APPLY_QK_LAYER_SCALING is "
+            f"{os.getenv('NVTE_APPLY_QK_LAYER_SCALING')}. Transformer Engine does not support "
+            f"setting query key layer scaling via argument, so these two must match."
+        )
+
+    extra_kwargs: dict[str, Any] = {}
+    if is_te_min_version("0.11.0"):
+        extra_kwargs["num_gqa_groups"] = self.config.num_query_groups
+    elif self.config.num_query_groups != self.config.num_attention_heads:
+        raise ValueError(
+            f"Transformer Engine v{get_te_version()} does not support Grouped Query Attention, "
+            f"use a newer version of Transformer Engine. "
+            f"(num_query_groups ({self.config.num_query_groups}) != "
+            f"num_attention_heads ({self.config.num_attention_heads}))"
+        )
+
+    if is_te_min_version("0.10.0"):
+        extra_kwargs["attention_type"] = attention_type
+        # older version don't need attention_type
+
+    if is_te_min_version("0.12.0", check_equality=False):
+        self.te_forward_mask_type = True
+
+    # This check is important as CP config can be disabled while having a valid CP group
+    # Example - Disabling CP for encoder while a valid CP group exists for decoder
+    if self.config.context_parallel_size > 1:
+        assert is_te_min_version(
+            "1.0.0"
+        ), "Only Transformer-Engine version >= 1.0.0 supports context parallelism!"
+        if getattr(TEDotProductAttention, "cp_stream") is None:
+            TEDotProductAttention.cp_stream = torch.cuda.Stream()
+        extra_kwargs["cp_group"] = get_context_parallel_group(check_initialized=False)
+        extra_kwargs["cp_global_ranks"] = get_context_parallel_global_ranks(
+            check_initialized=False
+        )
+        extra_kwargs["cp_stream"] = TEDotProductAttention.cp_stream
+        if is_te_min_version("1.10.0"):
+            if cp_comm_type is None:
+                extra_kwargs["cp_comm_type"] = "p2p"
+            elif cp_comm_type == "a2a+p2p":
+                assert is_te_min_version("1.12.0"), (
+                    f"Transformer-Engine v{get_te_version()} must be >= 1.12.0 to support"
+                    "hierarchical cp commucation."
+                )
+                extra_kwargs["cp_comm_type"] = "a2a+p2p"
+                extra_kwargs["cp_group"] = get_hierarchical_context_parallel_groups(
+                    check_initialized=False
+                )
+            else:
+                extra_kwargs["cp_comm_type"] = cp_comm_type
+
+    if self.config.deterministic_mode:
+        if int(os.getenv("NVTE_ALLOW_NONDETERMINISTIC_ALGO", "1")) != 0:
+            raise RuntimeError(
+                "deterministic_mode is on and we are using DotProductAttention from "
+                "Transformer Engine, but NVTE_ALLOW_NONDETERMINISTIC_ALGO is not 0. "
+                f"Currently set to: {os.getenv('NVTE_ALLOW_NONDETERMINISTIC_ALGO', 'not set')}."
+            )
+
+    if config.window_size is not None:
+        # Check version
+        assert is_te_min_version("1.2.0"), (
+            f"Transformer-Engine v{get_te_version()} must be >= 1.2.0 to support"
+            "sliding window attention."
+        )
+        extra_kwargs['window_size'] = config.window_size
+
+    if is_te_min_version("1.10.0"):
+        # TE 1.10.0 introduces the ability to set the different k and v channels
+        kv_channels = (
+            (k_channels, v_channels)
+            if k_channels is not None and v_channels is not None
+            else self.config.kv_channels
+        )
+        extra_kwargs['softmax_scale'] = softmax_scale
+    else:
+        kv_channels = self.config.kv_channels
+
+    self.kept_packed_seq_params = set(
+        field.name for field in dataclasses.fields(PackedSeqParams)
+    )
+    if get_te_version() < PkgVersion("1.3.0"):
+        # TE 1.3.0 introduces precomputing max_seqlen to remove unnecessary kernels and D2H
+        # copies (#555)
+        # These two arguments did not exist prior to 1.3.0
+        self.kept_packed_seq_params.discard("max_seqlen_q")
+        self.kept_packed_seq_params.discard("max_seqlen_kv")
+
+    if get_te_version() < PkgVersion("1.10.0"):
+        # TE 1.8.0 introduces cu_seqlens_padded which is the cu_seqlens with paddings counted
+        # in each individual sequence in THD format dataset
+        # These two arguments did not exist prior to 1.8.0. Full support added in 1.10.0 (#1012)
+        self.kept_packed_seq_params.discard("cu_seqlens_q_padded")
+        self.kept_packed_seq_params.discard("cu_seqlens_kv_padded")
+
+    super(TEDotProductAttention, self).__init__(
+        num_attention_heads=self.config.num_attention_heads,
+        kv_channels=kv_channels,
+        attention_dropout=(
+            self.config.attention_dropout if attention_dropout is None else attention_dropout
+        ),
+        attn_mask_type=attn_mask_type.name,
+        sequence_parallel=self.config.sequence_parallel,
+        tp_size=self.config.tensor_model_parallel_size,
+        get_rng_state_tracker=(
+            get_cuda_rng_tracker if get_cuda_rng_tracker().is_initialized() else None
+        ),
+        tp_group=get_tensor_model_parallel_group(check_initialized=False),
+        layer_number=layer_number,
+        recompute_variance = self.config.recompute_variance, # MUSA patch: support recompute_variance
+        **extra_kwargs,
+    )
+
+def TEDotProductAttention_forward_before_fa(self,
+    query: Tensor,
+    key: Tensor,
+    value: Tensor,
+    attention_mask: Tensor,
+    attn_mask_type: AttnMaskType,
+    attention_bias: Tensor = None,
+    packed_seq_params: PackedSeqParams = None,):
+
+    packed_seq_kwargs = (
+        {key: getattr(packed_seq_params, key) for key in self.kept_packed_seq_params}
+        if packed_seq_params is not None
+        else {}
+    )
+    # overwrite self.qkv_format depending on self.config.apply_rope_fusion, which can be set
+    # after init
+    if self.config.apply_rope_fusion and is_te_min_version("0.13.0", check_equality=False):
+        self.qkv_format = 'bshd'
+
+    qkv_format = packed_seq_kwargs.get('qkv_format', self.qkv_format)
+
+    # WAR for peak memory usage.
+    # See https://gitlab-master.nvidia.com/ADLR/megatron-lm/-/merge_requests/2388
+    if self.config.apply_rope_fusion and qkv_format == 'bshd':
+        query, key, value = [x.transpose(0, 1).contiguous() for x in (query, key, value)]
+        # In PyTorch, the following two tensors are in fact the same:
+        #   Tensor with shape (1, S, H, D) and stride (S*H*D, H*D, D, 1)
+        #   Tensor with shape (1, S, H, D) and stride (H*D, H*D, D, 1)
+        # Stride for a dimension that is 1 has no meaning, so tensors created two different ways
+        # can have same shape but different strides.
+        # We unify them to the first one to pass the stride check in TE
+        if value.shape == key.shape and value.shape[0] == 1 and value.stride() != key.stride():
+            value = value.as_strided(value.shape, key.stride())
+
+    attention_bias_kwargs = {}
+    if attention_bias is not None:
+        assert is_te_min_version("1.2.0"), (
+            f"Transformer-Engine v{get_te_version()} must be >= 1.2.0 to support"
+            "`attention_bias`."
+        )
+        attention_bias_kwargs = dict(
+            core_attention_bias_type='post_scale_bias', core_attention_bias=attention_bias
+        )
+    if self.te_forward_mask_type:
+        if qkv_format == 'thd' and is_te_min_version("1.7.0"):
+            # thd format uses flash attention with cuDNN kernel which requires is_padding=True,
+            # so the only acceptable mask types are `padding_causal` and `padding`. These do not
+            # necessarily indicate there are padded tokens in the sequence.
+            if attn_mask_type == AttnMaskType.causal:
+                attn_mask_type = AttnMaskType.padding_causal
+            elif attn_mask_type == AttnMaskType.no_mask:
+                attn_mask_type = AttnMaskType.padding
+        output = super(TEDotProductAttention, self).forward_before_fa(
+            query,
+            key,
+            value,
+            attention_mask,
+            attn_mask_type=attn_mask_type.name,
+            **attention_bias_kwargs,
+            **packed_seq_kwargs,
+        )
+    else:
+        output = super(TEDotProductAttention, self).forward_before_fa(
+            query, key, value, attention_mask, **attention_bias_kwargs, **packed_seq_kwargs
+        )
+
+    return output
+
+def TEDotProductAttention_forward_after_fa(self, *args):
+    core_attn_out = super(TEDotProductAttention, self).forward_after_fa(*args)
+
+    if self.config.apply_rope_fusion and self.qkv_format == 'bshd':
+        return core_attn_out.transpose(0, 1)
+    else:
+        return core_attn_out
+# HACK(huang.huang)
+
+
+from transformer_engine.musa.pytorch.utils import replace_attr, add_attr
+
+replace_attr(TEDotProductAttention,"__init__", TEDotProductAttention__init__)
+add_attr(TEDotProductAttention, "forward_before_fa", TEDotProductAttention_forward_before_fa)
+add_attr(TEDotProductAttention, "forward_after_fa", TEDotProductAttention_forward_after_fa)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_layer.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_layer.py
new file mode 100644
index 000000000..c85e0d5a2
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_layer.py
@@ -0,0 +1,192 @@
+from megatron.core.utils import make_viewless_tensor
+from megatron.core import parallel_state, tensor_parallel
+
+from transformer_engine.pytorch.distributed import checkpoint, checkpointVirance
+
+# HACK(huang.huang): support mlp_rms_recompute and mla_rms_recompute, 
+# which need to decide to do layernorm in TransformerLayer or inner mlp/mla
+def TransformerLayer_forward(
+    self,
+    hidden_states,
+    attention_mask=None,
+    context=None,
+    context_mask=None,
+    rotary_pos_emb=None,
+    rotary_pos_cos=None,
+    rotary_pos_sin=None,
+    attention_bias=None,
+    inference_params=None,
+    packed_seq_params=None,
+    sequence_len_offset=None,
+):
+    """
+    Perform a forward pass through the transformer layer.
+
+    This method implements the core computation of a transformer layer, including
+    self-attention, cross-attention (if applicable), and feed-forward operations.
+
+    Args:
+        hidden_states (Tensor): Input tensor of shape [s, b, h] where s is sequence length,
+            b is batch size, and h is hidden size.
+        attention_mask (Tensor): Mask tensor for self-attention.
+        context (Tensor, optional): Context tensor for cross-attention.
+        context_mask (Tensor, optional): Mask tensor for cross-attention.
+        rotary_pos_emb (Tensor, optional): Rotary positional embeddings.
+        attention_bias (Tensor, optional): Bias tensor for Q * K.T.
+        inference_params (object, optional): Parameters for inference-time optimizations.
+        packed_seq_params (object, optional): Parameters for packed sequence processing.
+
+    Returns:
+        Tuple[Tensor, Tensor]: A tuple containing:
+            output (Tensor): Transformed hidden states of shape [s, b, h].
+            context (Tensor): Updated context tensor if cross-attention is used,
+            otherwise None.
+    """
+
+    # Residual connection.
+    residual = hidden_states
+    
+    # Optional Input Layer norm
+    #HACK(huang.haung): support mla_rms_recompute
+    if self.config.mla_rms_recompute:
+        assert self.config.attn_recompute, 'mla_rms_recompute only use with attn_recompute now.'
+        def rms_with_down_proj(hidden_states):
+            hidden_states = self.input_layernorm(hidden_states)
+            if self.self_attention.config.q_lora_rank is not None:
+                q_compressed, _ = self.self_attention.linear_q_down_proj(hidden_states)
+            else:
+                q_compressed = hidden_states      
+            kv_combined, _ = self.self_attention.linear_kv_down_proj(hidden_states)
+            return q_compressed, kv_combined
+        input_layernorm_output = None
+        if self.config.fp8:
+            if self.config.recompute_variance == True:
+                linears = (self.self_attention.linear_q_down_proj, self.self_attention.linear_kv_down_proj)
+                q_compressed, kv_combined = checkpointVirance(
+                    self.input_layernorm, 
+                    linears,
+                    hidden_states,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                )
+            else:
+                q_compressed, kv_combined =  checkpoint(
+                    rms_with_down_proj,
+                    hidden_states,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                )
+        else:
+            if self.config.recompute_variance:
+                assert self.self_attention.config.q_lora_rank is not None, "not support Now" #TODO
+                linears = (self.self_attention.linear_q_down_proj, self.self_attention.linear_kv_down_proj)
+                q_compressed, kv_combined = tensor_parallel.checkpointVirance(
+                    self.input_layernorm, 
+                    linears,
+                    False, 
+                    hidden_states)
+            else:
+                q_compressed, kv_combined =  tensor_parallel.checkpoint(
+                    rms_with_down_proj, False, hidden_states)
+
+        attention_output_with_bias = self.self_attention(
+            input_layernorm_output,
+            attention_mask=attention_mask,
+            inference_params=inference_params,
+            rotary_pos_emb=rotary_pos_emb,
+            rotary_pos_cos=rotary_pos_cos,
+            rotary_pos_sin=rotary_pos_sin,
+            attention_bias=attention_bias,
+            packed_seq_params=packed_seq_params,
+            sequence_len_offset=sequence_len_offset,
+            q_compressed=q_compressed,
+            kv_combined=kv_combined,
+        )
+
+    else: #maintain original implement, to support non MLA attention
+        input_layernorm_output = self.input_layernorm(hidden_states)
+        # Self attention.
+        attention_output_with_bias = self.self_attention(
+            input_layernorm_output,
+            attention_mask=attention_mask,
+            inference_params=inference_params,
+            rotary_pos_emb=rotary_pos_emb,
+            rotary_pos_cos=rotary_pos_cos,
+            rotary_pos_sin=rotary_pos_sin,
+            attention_bias=attention_bias,
+            packed_seq_params=packed_seq_params,
+            sequence_len_offset=sequence_len_offset,
+        )       
+    ## HACK(huang.haung)
+
+    # TODO: could we move `bias_dropout_add_exec_handler` itself
+    # inside the module provided in the `bias_dropout_add_spec` module?
+    with self.bias_dropout_add_exec_handler():
+        hidden_states = self.self_attn_bda(self.training, self.config.bias_dropout_fusion)(
+            attention_output_with_bias, residual, self.hidden_dropout
+        )
+
+    # Residual connection.
+    residual = hidden_states
+
+    # Optional Layer norm after self-attention
+    pre_cross_attn_layernorm_output = self.pre_cross_attn_layernorm(hidden_states)
+
+    # Cross attention.
+    attention_output_with_bias = self.cross_attention(
+        pre_cross_attn_layernorm_output,
+        attention_mask=context_mask,
+        key_value_states=context,
+        inference_params=inference_params,
+    )
+
+    if isinstance(attention_output_with_bias, dict) and "context" in attention_output_with_bias:
+        context = attention_output_with_bias["context"]
+
+    # TODO: could we move `bias_dropout_add_exec_handler` itself
+    # inside the module provided in the `bias_dropout_add_spec` module?
+    with self.bias_dropout_add_exec_handler():
+        hidden_states = self.cross_attn_bda(self.training, self.config.bias_dropout_fusion)(
+            attention_output_with_bias, residual, self.hidden_dropout
+        )
+
+    # Residual connection.
+    residual = hidden_states
+
+    # Optional Layer norm post the cross-attention.
+    #HACK(huang.haung): support mlp_rms_recompute
+    if self.config.mlp_rms_recompute:
+        pre_mlp_layernorm_output = None
+        mlp_output_with_bias = self.mlp(hidden_states, self.pre_mlp_layernorm)
+    else:
+        pre_mlp_layernorm_output = self.pre_mlp_layernorm(hidden_states)
+        mlp_output_with_bias = self.mlp(pre_mlp_layernorm_output)
+    ## HACK(huang.haung)
+    # TODO: could we move `bias_dropout_add_exec_handler` itself
+    # inside the module provided in the `bias_dropout_add_spec` module?
+    with self.bias_dropout_add_exec_handler():
+        hidden_states = self.mlp_bda(self.training, self.config.bias_dropout_fusion)(
+            mlp_output_with_bias, residual, self.hidden_dropout
+        )
+
+    # Jit compiled function creates 'view' tensor. This tensor
+    # potentially gets saved in the MPU checkpoint function context,
+    # which rejects view tensors. While making a viewless tensor here
+    # won't result in memory savings (like the data loader, or
+    # p2p_communication), it serves to document the origin of this
+    # 'view' tensor.
+    output = make_viewless_tensor(
+        inp=hidden_states, requires_grad=hidden_states.requires_grad, keep_graph=True
+    )
+
+    # CUDA graph requires returned values to be Tensors
+    if self.config.external_cuda_graph and self.training:
+        return output
+    return output, context
+## HACK(huang.huang)
+
+from transformer_engine.musa.pytorch.utils import replace_attr
+from megatron.core.transformer.transformer_layer import TransformerLayer
+replace_attr(TransformerLayer, "forward", TransformerLayer_forward)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/rotary_pos_embedding.py b/megatron-lm-musa-patch/musa_patch/rotary_pos_embedding.py
new file mode 100644
index 000000000..874607b52
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/rotary_pos_embedding.py
@@ -0,0 +1,142 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+from __future__ import annotations
+
+from typing import TYPE_CHECKING, Optional
+
+if TYPE_CHECKING:
+    from megatron.core.transformer.transformer_config import TransformerConfig
+    from megatron.core.transformer.transformer_block import TransformerBlock
+
+import logging
+
+import torch
+import torch_musa
+from torch import Tensor, nn
+
+from megatron.core import parallel_state
+
+logger = logging.getLogger(__name__)
+
+try:
+    from apex.transformer.functional import (
+        fused_apply_rotary_pos_emb,
+        fused_apply_rotary_pos_emb_thd,
+    )
+
+    HAVE_APPLY_ROPE_FUSION = True
+except ImportError:
+    HAVE_APPLY_ROPE_FUSION = False
+
+def _rotate_half(x: Tensor, rotary_interleaved: bool) -> Tensor:
+    """Change sign so the last dimension becomes [-odd, +even]
+
+    Args:
+        x (Tensor): Input tensor
+
+    Returns:
+        Tensor: Tensor rotated half
+    """
+    if not rotary_interleaved:
+        x1, x2 = torch.chunk(x, 2, dim=-1)
+        return torch.cat((-x2, x1), dim=-1)
+    else:
+        x1 = x[:, :, :, ::2]
+        x2 = x[:, :, :, 1::2]
+        x_new = torch.stack((-x2, x1), dim=-1)
+        return x_new.view(x_new.shape[0], x_new.shape[1], x_new.shape[2], -1)
+    
+def apply_rotary_pos_emb_bshd(t: Tensor, freqs: Tensor, rotary_interleaved: bool = False) -> Tensor:
+    """Apply rotary positional embedding to input tensor T.
+
+    check https://kexue.fm/archives/8265 for detailed formulas
+
+    Args:
+        t (Tensor): Input tensor T is of shape [seq_length, ... , dim]
+        freqs (Tensor): Rotary Positional embedding tensor freq is of shape [seq_length, ..., dim]
+
+    Returns:
+        Tensor: The input tensor after applying RoPE
+    """
+    rot_dim = freqs.shape[-1]
+
+    # ideally t_pass is empty so rotary pos embedding is applied to all tensor t
+    t, t_pass = t[..., :rot_dim], t[..., rot_dim:]
+
+    # first part is cosine component
+    # second part is sine component, need to change signs with _rotate_half method
+    cos_ = torch.cos(freqs).to(t.dtype)
+    sin_ = torch.sin(freqs).to(t.dtype)
+
+    t = (t * cos_) + (_rotate_half(t, rotary_interleaved) * sin_)
+    return torch.cat((t, t_pass), dim=-1)
+
+
+def apply_rotary_pos_emb_thd(
+    t: Tensor, cu_seqlens: Tensor, freqs: Tensor, rotary_interleaved: bool = False
+) -> Tensor:
+    """A baseline implementation of applying RoPE for `thd` format.
+
+    Args:
+        t (Tensor): Input tensor T is of shape [t, h, d]
+        cu_seqlens(Tensor):  Cumulative sum of sequence lengths in a batch for `t`,
+        with shape [b + 1] and dtype torch.int32.
+        freqs (Tensor): Rotary Positional embedding tensor freq is of shape [max_s, 1, 1, d]
+
+    Returns:
+        Tensor: Shape [t, h, d]. The input tensor after applying RoPE.
+    """
+
+    seqlens = (cu_seqlens[1:] - cu_seqlens[:-1]).tolist()
+    return torch.cat(
+        [
+            apply_rotary_pos_emb_bshd(x.unsqueeze(1), freqs[: x.size(0)])
+            for x in torch.split(t, seqlens)
+        ]
+    ).squeeze(1)
+    
+def apply_rotary_pos_emb(
+    t: Tensor, freqs: Tensor, config: TransformerConfig, cu_seqlens: Optional[Tensor] = None, mscale: float = 1.0,
+):
+
+    """
+    Reroute to the appropriate apply_rotary_pos_emb function depending on
+    fused/unfused kernels, or bshd (conventional) / thd (packed seq) format
+    """
+    # assert cu_seqlens is None, "Only support cu_seqlens is None for now!"
+    if config.apply_rope_fusion and not HAVE_APPLY_ROPE_FUSION:
+        # setting apply_rope_fusion in config to False so that subsequent queries to this config also return False
+        config.apply_rope_fusion = False
+        if not getattr(apply_rotary_pos_emb, "printed_fused_warning", False):
+            logger.warning(
+                "Setting apply_rope_fusion to false because its implementation"
+                " is not included in Apex. Try upgrading to the latest version"
+            )
+            apply_rotary_pos_emb.printed_fused_warning = True
+    if config.apply_rope_fusion:
+        if cu_seqlens is None:
+            if config.multi_latent_attention:
+                return torch.rope(t, freqs.squeeze(1).squeeze(1), rotary_interleaved=False, batch_first=False, multi_latent_attention=True)
+            else:
+                return fused_apply_rotary_pos_emb(t, freqs, transpose_output_memory=True)
+        else:
+            return fused_apply_rotary_pos_emb_thd(t, cu_seqlens, freqs)
+    else:
+        if cu_seqlens is None:
+            return apply_rotary_pos_emb_bshd(t, freqs, rotary_interleaved=config.rotary_interleaved)
+        else:
+            return apply_rotary_pos_emb_thd(
+                t, cu_seqlens, freqs, rotary_interleaved=config.rotary_interleaved
+            )
+            
+# import megatron.core.models.common.embeddings.rotary_pos_embedding
+# megatron.core.models.common.embeddings.rotary_pos_embedding.apply_rotary_pos_emb = apply_rotary_pos_emb
+# import megatron.core.transformer.attention
+# megatron.core.transformer.attention.apply_rotary_pos_emb = apply_rotary_pos_emb
+
+import sys
+for k in sys.modules:
+    if k.startswith('megatron.core'):
+        for target in ['apply_rotary_pos_emb']:
+            if getattr(sys.modules[k], target, None):
+                setattr(sys.modules[k], target, apply_rotary_pos_emb)
diff --git a/megatron-lm-musa-patch/musa_patch/router.py b/megatron-lm-musa-patch/musa_patch/router.py
new file mode 100644
index 000000000..59ef35c4f
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/router.py
@@ -0,0 +1,55 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+from functools import partial
+import torch
+
+from .moe_utils import (
+    sequence_load_balancing_loss_func,
+    topk_softmax_with_capacity,
+)
+
+def seq_aux_loss_load_balancing(self, logits: torch.Tensor, bsz: int, seq_length: int):
+    """Apply loss-based load balancing to the logits tensor."""
+
+    probs, routing_map, tokens_per_expert = topk_softmax_with_capacity(
+            logits,
+            self.topk,
+            capacity_factor=self.config.moe_expert_capacity_factor,
+            pad_to_capacity=self.config.moe_pad_expert_input_to_capacity,
+            drop_policy=self.config.moe_token_drop_policy,
+            use_pre_softmax=self.config.moe_router_pre_softmax,
+            num_groups=self.config.moe_router_num_groups,
+            group_topk=self.config.moe_router_group_topk,
+            scaling_factor=self.config.moe_router_topk_scaling_factor,
+            deterministic_mode=self.config.deterministic_mode,
+            score_function=self.score_function,
+            expert_bias=self.expert_bias,
+            device_level_capacity=self.config.moe_device_level_capacity,
+        )
+
+    if self.training:
+        if self.score_function == "sigmoid":
+            scores = torch.sigmoid(logits)
+        else: 
+            scores = torch.softmax(logits, dim=-1, dtype=torch.float32)
+        aux_loss_func = partial(
+            sequence_load_balancing_loss_func,
+            probs=scores,
+            routing_map=routing_map,
+            batch_size=bsz,
+            seq_length=seq_length,
+            topk=self.topk,
+            moe_router_topk_limited_devices=self.config.moe_router_group_topk,
+            moe_device_level_aux_loss_coeff=self.config.moe_device_level_aux_loss_coeff,
+            moe_comm_aux_loss_coeff=self.config.moe_comm_aux_loss_coeff,
+            moe_complementary_seq_aux_loss=self.config.moe_complementary_seq_aux_loss,
+        )
+        probs = self.apply_load_balancing_loss(
+            activation=probs, load_balancing_loss_func=aux_loss_func
+        )
+
+    return probs, routing_map
+
+
+import megatron.core.transformer.moe.router
+megatron.core.transformer.moe.router.TopKRouter.seq_aux_loss_load_balancing = seq_aux_loss_load_balancing
diff --git a/megatron-lm-musa-patch/musa_patch/theoretical_memory_usage.py b/megatron-lm-musa-patch/musa_patch/theoretical_memory_usage.py
new file mode 100644
index 000000000..5f783d5fc
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/theoretical_memory_usage.py
@@ -0,0 +1,220 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+"""Computes theoretical memory footprint for model training."""
+
+
+import math
+
+NUM_BYTES_IN_MEGABYTE = 1024 * 1024
+
+def compute_weight_and_optimizer_memory(args, verbose=False):
+    # Attention projection size.
+    attn_dim = args.kv_channels
+    kv_projection_size = attn_dim * args.num_attention_heads
+    query_projection_size = attn_dim * args.num_attention_heads
+    ## MLA
+    if args.kv_lora_rank:
+        kv_projection_size = attn_dim * args.num_attention_heads + args.kv_lora_rank
+    if args.q_lora_rank:
+        query_projection_size = attn_dim * args.num_attention_heads + args.q_lora_rank
+
+    output_projection_size = attn_dim * args.num_attention_heads
+    ## Group Query Attention.
+    if args.group_query_attention:
+        kv_projection_size = args.num_query_groups / args.num_attention_heads * kv_projection_size
+    else:
+        attn_size = 1
+    attn_size = query_projection_size + 2 * kv_projection_size + output_projection_size
+    attn_multiplier = attn_size / 2 / args.hidden_size
+
+    # swiglu
+    gated_linear_multiplier = 3 / 2 if args.swiglu else 1
+
+    # MoE or Dense
+    num_experts = 0 if args.num_experts is None else args.num_experts
+    shared_expert_ffn_hidden_size = 0 if args.moe_shared_expert_intermediate_size else args.moe_shared_expert_intermediate_size
+    num_shared_expert = args.moe_shared_expert_intermediate_size // args.moe_ffn_hidden_size
+    num_moe_layer = 0 if args.moe_layer_freq is None else len(args.moe_layer_freq)
+    num_dense_layer = args.num_layers - num_moe_layer
+    mlp_multiplier_dense = num_dense_layer * args.ffn_hidden_size
+    mlp_multiplier_moe =  num_moe_layer * num_experts * args.moe_ffn_hidden_size 
+    mlp_multiplier_shared_expert = num_moe_layer * num_shared_expert * shared_expert_ffn_hidden_size
+    mlp_multiplier = (mlp_multiplier_dense + mlp_multiplier_moe + mlp_multiplier_shared_expert) /args.num_layers/args.hidden_size
+
+    num_parameters_in_transformer_layers = (
+        2
+        * args.num_layers
+        * args.hidden_size
+        * args.hidden_size
+        * (
+            # Attention.
+            attn_multiplier
+            # MLP.
+            # + ((args.ffn_hidden_size / args.hidden_size) * num_experts * gated_linear_multiplier)
+            + mlp_multiplier * gated_linear_multiplier
+            # Router
+            +  num_experts / args.hidden_size * 2
+            # Transformer layernorms.
+            + (2 / args.hidden_size)
+            # Final layernorm.
+            + (1 / (args.num_layers * args.hidden_size))
+        )
+    )
+
+    embedding_size = args.hidden_size * args.padded_vocab_size
+    if args.untie_embeddings_and_output_weights:
+        num_parameters_in_embedding_layers = 2 * embedding_size
+    else:
+        num_parameters_in_embedding_layers = embedding_size
+
+    # TODO; add MTP block and projection
+    num_parameters_in_mtp = 0
+
+    num_total_parameters = num_parameters_in_transformer_layers + num_parameters_in_embedding_layers + num_parameters_in_mtp
+    if verbose:
+        print(
+            f"Number of parameters in transformer layers in billions: "
+            f"{num_parameters_in_transformer_layers / 10**9: .2f}"
+        )
+        print(
+            f"Number of parameters in embedding layers in billions: "
+            f"{num_parameters_in_embedding_layers / 10**9:.2f}"
+        )
+        print(f"Total number of parameters in billions: {num_total_parameters / 10**9:.2f}")
+
+    # Most loaded model shard has (1/pp_size transformer layers + 1 embedding layer) / tp_size.
+    num_parameters_on_most_loaded_model_shard = (
+        (num_parameters_in_transformer_layers / args.pipeline_model_parallel_size) + embedding_size
+    ) / args.tensor_model_parallel_size
+    if args.untie_embeddings_and_output_weights and args.pipeline_model_parallel_size == 1:
+        num_parameters_on_most_loaded_model_shard += (
+            embedding_size / args.tensor_model_parallel_size
+        )
+    if verbose:
+        print(
+            f"Number of parameters in most loaded shard in billions: "
+            f"{num_parameters_on_most_loaded_model_shard / 10**9:.4f}"
+        )
+
+    if args.pipeline_model_parallel_size > 1:
+        # Other shards just have (1/pp_size transformer layers) / tp_size.
+        num_parameters_on_other_model_shards = num_parameters_in_transformer_layers / (
+            args.pipeline_model_parallel_size * args.tensor_model_parallel_size
+        )
+        if verbose:
+            print(
+                f"Number of parameters in other shards in billions: "
+                f"{num_parameters_on_other_model_shards / 10**9:.4f}"
+            )
+
+    num_bytes_per_parameter = (
+        18 if not args.use_distributed_optimizer else 6 + (12 / args.data_parallel_size)
+    )
+    weight_and_optimizer_memory = (
+        num_parameters_on_most_loaded_model_shard * num_bytes_per_parameter
+    )
+
+    return weight_and_optimizer_memory
+
+
+def compute_activation_memory(args, num_microbatches, verbose=False):
+    # Using formula in Table 2 of https://arxiv.org/pdf/2205.05198.pdf.
+    # We are trying to compute the maximum activation footprint, so all calculations in this
+    # function are for the first pipeline stage.
+
+    # TODO: This function needs to take into account query_projection_size potentially being
+    # different from hidden_size.
+
+    # Memory footprint from transformer layer (self-attention and MLP).
+    activation_memory = (args.seq_length * args.micro_batch_size * args.hidden_size) * (
+        18 + (4 * (args.ffn_hidden_size / args.hidden_size))
+    )
+    if verbose:
+        print(
+            f"Activation memory footprint per transformer layer: "
+            f"{activation_memory / NUM_BYTES_IN_MEGABYTE / args.tensor_model_parallel_size:.1f} MB"
+        )
+    activation_memory *= args.num_layers
+
+    # Now add activation memory required for input embeddings, last LayerNorm and output layer.
+
+    # Input to embedding (pp_size microbatches in flight).
+    activation_memory += (
+        8 * args.seq_length * args.micro_batch_size * args.pipeline_model_parallel_size
+    )
+    # Dropout in embedding layer (pp_size microbatches in flight).
+    activation_memory += (
+        args.seq_length
+        * args.micro_batch_size
+        * args.hidden_size
+        * args.pipeline_model_parallel_size
+    )
+
+    # Multiply by interleaved PP memory factor.
+    if args.virtual_pipeline_model_parallel_size is not None:
+        interleaved_schedule_memory_penalty = 1 + (
+            (args.pipeline_model_parallel_size - 1)
+            / (args.pipeline_model_parallel_size * args.virtual_pipeline_model_parallel_size)
+        )
+        in_flight_microbatches = math.ceil(
+            interleaved_schedule_memory_penalty * args.pipeline_model_parallel_size
+        )
+        if verbose:
+            print(
+                f"Memory penalty from interleaved schedule: {interleaved_schedule_memory_penalty:.2f}"
+            )
+            print(f"Number of in-flight microbatches: {in_flight_microbatches}")
+        activation_memory *= interleaved_schedule_memory_penalty
+
+    # If using non-interleaved schedule, number of microbatches in pipeline can be less than pp_size,
+    # so discount accordingly.
+    if args.virtual_pipeline_model_parallel_size is None and args.pipeline_model_parallel_size > 1:
+        if num_microbatches is not None:
+            activation_memory *= min(1, num_microbatches / args.pipeline_model_parallel_size)
+            in_flight_microbatches = min(num_microbatches, args.pipeline_model_parallel_size)
+        else:
+            in_flight_microbatches = args.pipeline_model_parallel_size
+        if verbose:
+            print(f"Number of in-flight microbatches: {in_flight_microbatches}")
+
+    if args.pipeline_model_parallel_size == 1:
+        # Inputs to output layer and CE loss.
+        activation_memory += (
+            args.seq_length
+            * args.micro_batch_size
+            * args.hidden_size
+            * 4
+            * (1 + (args.padded_vocab_size / args.hidden_size))
+        )
+
+    # Activation memory is partitioned by TP size due to tensor and sequence model parallelism.
+    return activation_memory / args.tensor_model_parallel_size
+
+
+def report_theoretical_memory(args, num_microbatches=None, verbose=False):
+    weight_and_optimizer_memory = (
+        compute_weight_and_optimizer_memory(args, verbose=verbose) / NUM_BYTES_IN_MEGABYTE
+    )
+
+    # Formulae here assume sequence parallelism and selective activation recomputation.
+    if not args.sequence_parallel or args.recompute_granularity != 'selective':
+        print(
+            f"Theoretical memory footprints: weight and optimizer={weight_and_optimizer_memory:.2f} MB"
+        )
+        return
+
+    activation_memory = (
+        compute_activation_memory(args, num_microbatches=num_microbatches, verbose=verbose)
+        / NUM_BYTES_IN_MEGABYTE
+    )
+    total_memory = weight_and_optimizer_memory + activation_memory
+
+    print(
+        f"Theoretical memory footprints: weight and optimizer={weight_and_optimizer_memory:.2f} MB, "
+        f"activation={activation_memory:.2f} MB, total={total_memory:.2f} MB\n"
+    )
+
+import megatron.training.theoretical_memory_usage
+megatron.training.theoretical_memory_usage.compute_weight_and_optimizer_memory = compute_weight_and_optimizer_memory
+megatron.training.theoretical_memory_usage.report_theoretical_memory = report_theoretical_memory
+megatron.training.theoretical_memory_usage.compute_activation_memory = compute_activation_memory
diff --git a/megatron-lm-musa-patch/musa_patch/token_dispatcher.py b/megatron-lm-musa-patch/musa_patch/token_dispatcher.py
new file mode 100644
index 000000000..6cf4c06c7
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/token_dispatcher.py
@@ -0,0 +1,462 @@
+# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
+
+from typing import List, Optional, Tuple
+
+import torch
+
+from megatron.core.tensor_parallel import (
+    all_to_all,
+    gather_from_sequence_parallel_region,
+    reduce_scatter_to_sequence_parallel_region,
+)
+from megatron.core.transformer.moe.moe_utils import (
+    get_capacity,
+    permute,
+    sort_chunks_by_idxs,
+    unpermute,
+)
+from megatron.core.transformer.transformer_config import TransformerConfig
+
+
+#HACK(huang.huang):use pin_memory, non_blocking, cuda.stream to optimze D2H
+#class MoEAlltoAllTokenDispatcher:
+#   function update: __init__, preprocess, token_permutation, token_unpermutation
+#       __init__: extra opration after ori_init
+#           a. copy sort_input_by_local_experts and restore_output_by_local_experts to cpu, prevent redunt D2H in each Forward
+#           b. add self.cuda_dtoh_stream to support async copy
+#           c. follow Megatron:main, add cuda_sync_point_priority and cuda_dtoh_point to manage sync point
+#       preprocess:
+#           a. remove D2H such as .cpu() and do it in token_permutation as once
+#           b. use new method to manage sync point
+#           c. don't set self.cuda_sync_point to "before_permutation_1" when not used drop and pad, while it's seems to be unnecessary
+#       token_permutation:
+#           a. do ravel for num_global_tokens_per_local_expert and num_global_tokens_per_local_expert_T before D2H
+#           b. pass numpy to sort_chunks instead call tolist for gpu tensor
+#       token_unpermutation:
+#           a. pass numpy to sort_chunks instead call tolist for gpu tensor
+#
+#   new function: _maybe_update_cuda_sync_point, _ensure_cpu_tensor, _maybe_dtoh_and_synchronize
+#       _maybe_update_cuda_sync_point: update sync_point if this point is reached earlier than current one
+#       _ensure_cpu_tensor: 
+#           a. use pin_memory to alloc cpu tensor, and copy value in gpu tensor to it
+#           b. will be used under cuda_dtoh_stream to prevent block
+#       _maybe_dtoh_and_synchronize:
+#           a. call _ensure_cpu_tensor in dtoh_point, which equals to "before_pemutation1" expert_capacity used
+#           b. in self.cuda_sync_point, do cuda_dtoh_stream.synchronize(), .numpy, tolist where synchronize needs to be done before
+#           .numpy and tolist, otherwise D2H maybe not be finished. 
+def MoEAlltoAllTokenDispatcher___init__(
+    self, num_local_experts: int, local_expert_indices: List[int], config: TransformerConfig
+) -> None:
+    self._orig___init__(num_local_experts, local_expert_indices, config)
+    
+    self.sort_input_by_local_experts = self.sort_input_by_local_experts.cpu().numpy()
+    self.restore_output_by_local_experts = self.restore_output_by_local_experts.cpu().numpy()
+    self.cuda_sync_point_priority = {
+        "before_permutation_1": 0,
+        "before_ep_alltoall": 1,
+        "before_permutation_2": 2,
+        "before_finish": 3,
+        "no_sync": 4,
+    }
+    self.cuda_dtoh_point = "before_permutation_1"
+    self.cuda_dtoh_stream = torch.cuda.Stream()
+
+def MoEAlltoAllTokenDispatcher__maybe_update_cuda_sync_point(self, point: str):
+    """
+    Update the CUDA sync point if the priority of the new point is higher than the current
+    sync point, which means the new point is reached earlier than the current sync point.
+    """
+    if (
+        self.cuda_sync_point_priority[point]
+        < self.cuda_sync_point_priority[self.cuda_sync_point]
+    ):
+        self.cuda_sync_point = point
+
+def MoEAlltoAllTokenDispatcher__ensure_cpu_tensor(self, cpu_attr_name, gpu_tensor):
+    if gpu_tensor is None:
+        return
+    cpu_tensor = getattr(self, cpu_attr_name, None)
+    if cpu_tensor is None:
+        cpu_tensor = torch.empty(
+            gpu_tensor.size(),
+            device="cpu",
+            pin_memory=True,
+            dtype=gpu_tensor.dtype
+        )
+        setattr(self, cpu_attr_name, cpu_tensor)
+    cpu_tensor.copy_(gpu_tensor, non_blocking=True)
+    gpu_tensor.record_stream(torch.cuda.current_stream())
+
+def MoEAlltoAllTokenDispatcher__maybe_dtoh_and_synchronize(
+    self, point: str, tokens_per_expert: torch.Tensor = None,
+    num_global_tokens_per_local_expert: torch.Tensor = None,
+    num_global_tokens_per_local_expert_T: torch.Tensor = None,
+):
+    """
+    Move all possible GPU tensors to CPU and make a synchronization at the expected point.
+    """
+    if not self.drop_and_pad:
+        if point == self.cuda_dtoh_point:
+            # Move all possible GPU tensors to CPU at self.cuda_dtoh_point.
+            on_side_stream = torch.cuda.current_stream() != self.cuda_dtoh_stream
+            if on_side_stream:
+                self.cuda_dtoh_stream.wait_stream(torch.cuda.current_stream())
+            with torch.cuda.stream(self.cuda_dtoh_stream):
+                # TODO: use MemcpyBatchAsync instead.
+                self._ensure_cpu_tensor('tokens_per_expert_cpu', tokens_per_expert)
+                if self.ep_size > 1 or self.tp_size > 1:
+                    self._ensure_cpu_tensor('output_splits_tp_cpu', self.output_splits_tp)
+                    self._ensure_cpu_tensor('input_splits_cpu', self.input_splits)
+                    self._ensure_cpu_tensor('output_splits_cpu', self.output_splits)
+                #NOTE(huang.huang): only fuse-moe-permute need num_out_tokens, but in that case fused-kernel will do D2H itself,
+                # if we want to do this D2H here, then we need to sync stream before permute1, which resulted in D2H not being well overlaped
+                # self._ensure_cpu_tensor('num_out_tokens_cpu', self.num_out_tokens)
+                if self.num_local_experts > 1:
+                    self._ensure_cpu_tensor('num_global_tokens_per_local_expert_cpu', num_global_tokens_per_local_expert)
+                    self._ensure_cpu_tensor('num_global_tokens_per_local_expert_T_cpu', num_global_tokens_per_local_expert_T)
+        
+        if point == self.cuda_sync_point:
+            # Synchronize with the dtoh stream at self.cuda_sync_point.
+            self.cuda_dtoh_stream.synchronize()
+            # Need to do before sync, otherwise copy for value in num_global_tokens_per_local_expert_cpu is not finished
+            # self.num_out_tokens = self.num_out_tokens_cpu.numpy()
+            
+            tokens_per_expert = self.tokens_per_expert_cpu.numpy().copy()
+            # need copy(), because recompute groupedLinear1 save it as msplit, value in ctx will change while next copy gpu data to _cpu
+            # not use tolist, since expert will call tolist again, otherwise we need to modify experts.py
+            
+            if self.ep_size > 1 or self.tp_size > 1:
+                self.output_splits_tp = self.output_splits_tp_cpu.numpy().tolist()
+                self.input_splits = self.input_splits_cpu.numpy().tolist()
+                self.output_splits = self.output_splits_cpu.numpy().tolist()
+            if self.num_local_experts > 1:
+                self.num_global_tokens_per_local_expert = self.num_global_tokens_per_local_expert_cpu.numpy()
+                self.num_global_tokens_per_local_expert_T = self.num_global_tokens_per_local_expert_T_cpu.numpy()
+
+    return tokens_per_expert
+
+def MoEAlltoAllTokenDispatcher_preprocess(self, routing_map: torch.Tensor) -> torch.Tensor:
+    """
+    Preprocess token routing map for AlltoAll communication and token permutation.
+
+    This method computes the number of tokens assigned to each expert based on the routing_map.
+    It also initializes the necessary data structures for AlltoAll communication, such as input
+    and output splits, and the mapping between global tokens and local experts.
+
+    Args:
+        routing_map (torch.Tensor): The mapping of tokens to experts, with shape
+            [num_tokens, num_experts].
+
+    Returns:
+        torch.Tensor: Tensor containing the number of tokens assigned to local expert.
+    """
+    # [num_experts], number of tokens assigned to each expert from the current rank's input.
+    num_local_tokens_per_expert = routing_map.sum(dim=0).long()
+
+    if self.drop_and_pad:
+        # Drop and pad the input to capacity.
+        num_tokens = routing_map.size(0) * self.config.moe_router_topk
+        self.capacity = get_capacity(
+            num_tokens=num_tokens,
+            num_experts=self.num_experts,
+            capacity_factor=self.moe_expert_capacity_factor,
+        )
+        self.num_out_tokens = self.capacity * self.num_experts
+        # [num_local_experts], number of tokens processed by each expert.
+        num_tokens_per_local_expert = torch.full(
+            (self.num_local_experts,),
+            self.capacity * self.tp_size * self.ep_size,
+            dtype=torch.long,
+        )
+        # [tp_size * ep_size, num_local_experts]. Represents the number of tokens sent
+        # to each local expert by all ranks.
+        self.num_global_tokens_per_local_expert = torch.full(
+            (self.num_experts * self.tp_size,),
+            self.capacity,
+            dtype=torch.long,
+            device=self.permute_idx_device,
+        )
+        return num_tokens_per_local_expert
+    elif self.config.moe_expert_capacity_factor is not None:
+        # Drop tokens to capacity, no padding.
+        # A synchronization is needed before the first
+        # permutation to get the `num_out_tokens` CPU value.
+        self.num_out_tokens = num_local_tokens_per_expert.sum()
+        # #TODO(huang.huang): make sure num_out_tokens is not needed for permutation_1 excpet drop_and_pad
+        # self.cuda_sync_point = "before_permutation_1" 
+
+    else:
+        # Dropless
+        self.num_out_tokens = routing_map.size(0) * self.config.moe_router_topk
+        #HACK(huang.huang): move setattr for self.cuda_sync_point below
+        # if self.ep_size > 1 or self.num_local_experts > 1:
+        #     # Token dropless and enable ep. A synchronization is needed before expert parallel
+        #     # AlltoAll communication to get the `input_splits` and `output_splits` CPU values.
+        #     self.cuda_sync_point = "before_ep_alltoall"
+        # else:
+        #     # Token dropless and no ep. A synchronization is needed before the returns
+        #     # to get the `tokens_per_expert` CPU value for
+        #     self.cuda_sync_point = "before_finish"
+        ##HACK(huang.huang)
+    if self.ep_size > 1 or self.tp_size > 1:
+        # ===================================================
+        # Calculate input_splits, output_splits for alltoall/allgather in variable size.
+        # ===================================================
+        # [ep_size]. Represents the number of tokens sent by the current rank to other
+        # EP ranks.
+        self.input_splits = num_local_tokens_per_expert.reshape(
+            self.ep_size, self.num_local_experts
+        ).sum(axis=1)
+        # Gather the global distribution of tokens across ranks.
+        # num_global_tokens_per_expert represents the number of tokens sent to each
+        # expert by all ranks.
+        # [tp_size, ep_size, num_experts]
+        num_global_tokens_per_expert = (
+            gather_from_sequence_parallel_region(
+                num_local_tokens_per_expert, group=self.tp_ep_group
+            )
+            .reshape(self.ep_size, self.tp_size, self.num_experts)
+            .transpose(0, 1)
+        )
+        # [tp_size, ep_size, num_experts] -> [tp_size, ep_size, num_local_experts]
+        num_global_tokens_per_local_expert = num_global_tokens_per_expert[
+            :, :, self.local_expert_indices[0] : self.local_expert_indices[-1] + 1
+        ].contiguous()
+        # [tp_size, ep_size, num_local_experts] -> [tp_size, ep_size]
+        num_global_tokens_per_rank = num_global_tokens_per_local_expert.sum(axis=2)
+        # [tp_size, ep_size] -> [ep_size]
+        # self.output_splits represents the number of tokens received by the current rank
+        # from other EP rank.
+        self.output_splits = num_global_tokens_per_rank[self.tp_rank]
+        # [tp_size, ep_size] -> [tp_size]
+        # self.output_splits_tp represents the number of tokens received by the current
+        # rank from other TP rank.
+        self.output_splits_tp = num_global_tokens_per_rank.sum(axis=1)
+        # [tp_size, ep_size, num_local_experts] -> [num_local_experts]
+        num_tokens_per_local_expert = num_global_tokens_per_local_expert.sum(dim=(0, 1))
+        # A synchronization is needed before expert parallel AlltoAll communication
+        # to get the `input_splits` and `output_splits` CPU values.
+        self._maybe_update_cuda_sync_point("before_ep_alltoall")
+    else:
+        num_global_tokens_per_local_expert = num_local_tokens_per_expert.reshape(
+            self.num_experts
+        )
+        num_tokens_per_local_expert = num_local_tokens_per_expert
+        # A synchronization is needed before the returns
+        # to get the `num_tokens_per_local_expert` CPU value.
+        self._maybe_update_cuda_sync_point("before_finish")
+
+    if self.num_local_experts > 1:
+        # [tp_size * ep_size, num_local_experts]. Represents the number of tokens sent
+        # to each local expert by all ranks.
+        self.num_global_tokens_per_local_expert = num_global_tokens_per_local_expert.view(
+            -1, self.num_local_experts
+        )
+        if not self.config.moe_permute_fusion:
+            # A synchronization is needed before permutation 2
+            # to get the `num_global_tokens_per_local_expert` CPU value.
+            self._maybe_update_cuda_sync_point("before_permutation_2")
+
+    return num_tokens_per_local_expert
+
+
+def MoEAlltoAllTokenDispatcher_token_permutation(
+    self, hidden_states: torch.Tensor, probs: torch.Tensor, routing_map: torch.Tensor
+) -> Tuple[torch.Tensor, torch.Tensor]:
+    """
+    Dispatch tokens to local experts using AlltoAll communication.
+
+    This method performs the following steps:
+    1. Preprocess the routing map to get metadata for communication and permutation.
+    2. Permute input tokens for AlltoAll communication.
+    3. Perform expert parallel AlltoAll communication.
+    4. Sort tokens by local expert (if multiple local experts exist).
+
+    Args:
+        hidden_states (torch.Tensor): Input token embeddings.
+        probs (torch.Tensor): The probabilities of token to experts assignment.
+        routing_map (torch.Tensor): The mapping of token to experts assignment.
+
+    Returns:
+        Tuple[torch.Tensor, torch.Tensor]:
+            - Permuted token embeddings for local experts.
+            - Number of tokens per expert.
+    """
+    # Preprocess: Get the metadata for communication, permutation and computation operations.
+    self.hidden_shape = hidden_states.shape
+    self.probs = probs
+    self.routing_map = routing_map
+    assert probs.dim() == 2, "Expected 2D tensor for probs"
+    assert routing_map.dim() == 2, "Expected 2D tensor for token2expert mask"
+    assert routing_map.dtype == torch.bool, "Expected bool tensor for mask"
+    hidden_states = hidden_states.view(-1, self.hidden_shape[-1])
+    tokens_per_expert = self.preprocess(self.routing_map)
+
+    if self.shared_experts is not None:
+        self.shared_experts.pre_forward_comm(hidden_states.view(self.hidden_shape))
+
+    # Permutation 1: input to AlltoAll input
+    self.hidden_shape_before_permute = hidden_states.shape
+
+    #GPU operations that data depended on need to be performed before the d2h command
+    num_global_tokens_per_local_expert = self.num_global_tokens_per_local_expert.ravel()
+    num_global_tokens_per_local_expert_T = self.num_global_tokens_per_local_expert.T.ravel()
+
+    # Permutation 1: input to AlltoAll input
+    tokens_per_expert = self._maybe_dtoh_and_synchronize(
+        "before_permutation_1", tokens_per_expert,
+        num_global_tokens_per_local_expert, num_global_tokens_per_local_expert_T
+    )
+    permutated_local_input_tokens, self.reversed_local_input_permutation_mapping = permute(
+        hidden_states,
+        routing_map,
+        num_out_tokens=self.num_out_tokens,
+        fused=self.config.moe_permute_fusion,
+        drop_and_pad=self.drop_and_pad,
+    )
+    # Perform expert parallel AlltoAll communication
+    tokens_per_expert = self._maybe_dtoh_and_synchronize(
+        "before_ep_alltoall", tokens_per_expert,
+        num_global_tokens_per_local_expert, num_global_tokens_per_local_expert_T
+    )
+
+    global_input_tokens = all_to_all(
+        self.ep_group, permutated_local_input_tokens, self.output_splits, self.input_splits
+    )
+    if self.shared_experts is not None:
+        self.shared_experts.linear_fc1_forward_and_act(global_input_tokens)
+
+    if self.tp_size > 1:
+        if self.output_splits_tp is None:
+            output_split_sizes = None
+        else:
+            output_split_sizes = self.output_splits_tp.tolist()
+        global_input_tokens = gather_from_sequence_parallel_region(
+            global_input_tokens, group=self.tp_group, output_split_sizes=output_split_sizes
+        )
+
+    # Permutation 2: Sort tokens by local expert.
+    tokens_per_expert = self._maybe_dtoh_and_synchronize(
+        "before_permutation_2", tokens_per_expert,
+        num_global_tokens_per_local_expert, num_global_tokens_per_local_expert_T
+    )
+    if self.num_local_experts > 1:
+        if self.drop_and_pad:
+            global_input_tokens = (
+                global_input_tokens.view(
+                    self.tp_size * self.ep_size,
+                    self.num_local_experts,
+                    self.capacity,
+                    *global_input_tokens.size()[1:],
+                )
+                .transpose(0, 1)
+                .contiguous()
+                .flatten(start_dim=0, end_dim=2)
+            )
+        else:
+            global_input_tokens = sort_chunks_by_idxs(
+                global_input_tokens,
+                self.num_global_tokens_per_local_expert,
+                self.sort_input_by_local_experts,
+                fused=self.config.moe_permute_fusion,
+            )
+
+    tokens_per_expert = self._maybe_dtoh_and_synchronize(
+        "before_finish", tokens_per_expert,
+        num_global_tokens_per_local_expert, num_global_tokens_per_local_expert_T
+    )
+    return global_input_tokens, tokens_per_expert
+
+
+def MoEAlltoAllTokenDispatcher_token_unpermutation(
+    self, hidden_states: torch.Tensor, bias: Optional[torch.Tensor] = None
+) -> Tuple[torch.Tensor, Optional[torch.Tensor]]:
+    """
+    Reverse the token permutation to restore the original order.
+
+    This method performs the following steps:
+    1. Unsort tokens by local expert (if multiple local experts exist).
+    2. Perform expert parallel AlltoAll communication to restore the original order.
+    3. Unpermute tokens to restore the original order.
+
+    Args:
+        hidden_states (torch.Tensor): Output from local experts.
+        bias (torch.Tensor, optional): Bias tensor (not supported).
+
+    Returns:
+        Tuple[torch.Tensor, Optional[torch.Tensor]]:
+            - Unpermuted token embeddings in the original order.
+            - None (bias is not supported).
+    """
+    assert bias is None, "Bias is not supported in MoEAlltoAllTokenDispatcher"
+
+    # Unpermutation 2: Unsort tokens by local expert.
+    if self.num_local_experts > 1:
+        if self.drop_and_pad:
+            hidden_states = (
+                hidden_states.view(
+                    self.num_local_experts,
+                    self.tp_size * self.ep_size,
+                    self.capacity,
+                    *hidden_states.size()[1:],
+                )
+                .transpose(0, 1)
+                .contiguous()
+                .flatten(start_dim=0, end_dim=2)
+            )
+        else:
+            hidden_states = sort_chunks_by_idxs(
+                hidden_states,
+                self.num_global_tokens_per_local_expert_T,
+                self.restore_output_by_local_experts,
+                fused=self.config.moe_permute_fusion,
+            )
+
+    if self.tp_size > 1:
+        if self.output_splits_tp is None:
+            input_split_sizes = None
+        else:
+            input_split_sizes = self.output_splits_tp.tolist()
+        hidden_states = reduce_scatter_to_sequence_parallel_region(
+            hidden_states, group=self.tp_group, input_split_sizes=input_split_sizes
+        )
+
+    # Perform expert parallel AlltoAll communication
+    # hidden_states: [SEQL, H] -> [SEQL, H/TP]
+    permutated_local_input_tokens = all_to_all(
+        self.ep_group, hidden_states, self.input_splits, self.output_splits
+    )
+    if self.shared_experts is not None:
+        self.shared_experts.linear_fc2_forward(permutated_local_input_tokens)
+        self.shared_experts.post_forward_comm()
+
+    # Unpermutation 1: AlltoAll output to output
+    output = unpermute(
+        permutated_local_input_tokens,
+        self.reversed_local_input_permutation_mapping,
+        restore_shape=self.hidden_shape_before_permute,
+        probs=self.probs,
+        routing_map=self.routing_map,
+        fused=self.config.moe_permute_fusion,
+        drop_and_pad=self.drop_and_pad,
+    )
+
+    # Reshape the output tensor
+    output = output.view(self.hidden_shape)
+
+    # Add shared experts output
+    if self.shared_experts is not None:
+        shared_expert_output = self.shared_experts.get_output()
+        output += shared_expert_output
+    return output, None
+##HACK(huang.huang)
+
+from transformer_engine.musa.pytorch.utils import replace_attr, add_attr
+from megatron.core.transformer.moe.token_dispatcher import MoEAlltoAllTokenDispatcher
+replace_attr(MoEAlltoAllTokenDispatcher, '__init__', MoEAlltoAllTokenDispatcher___init__)
+add_attr(MoEAlltoAllTokenDispatcher, '_maybe_update_cuda_sync_point', MoEAlltoAllTokenDispatcher__maybe_update_cuda_sync_point)
+add_attr(MoEAlltoAllTokenDispatcher, '_ensure_cpu_tensor', MoEAlltoAllTokenDispatcher__ensure_cpu_tensor)
+add_attr(MoEAlltoAllTokenDispatcher, '_maybe_dtoh_and_synchronize', MoEAlltoAllTokenDispatcher__maybe_dtoh_and_synchronize)
+replace_attr(MoEAlltoAllTokenDispatcher, 'preprocess', MoEAlltoAllTokenDispatcher_preprocess)
+replace_attr(MoEAlltoAllTokenDispatcher, 'token_permutation', MoEAlltoAllTokenDispatcher_token_permutation)
+replace_attr(MoEAlltoAllTokenDispatcher, 'token_unpermutation', MoEAlltoAllTokenDispatcher_token_unpermutation)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/training.py b/megatron-lm-musa-patch/musa_patch/training.py
new file mode 100644
index 000000000..9624b1bcc
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/training.py
@@ -0,0 +1,954 @@
+from datetime import datetime
+
+import gc
+import os
+import sys
+import logging
+import torch
+import torch.distributed
+from megatron.core import mpu
+
+from megatron.core.transformer.moe.moe_utils import track_moe_metrics
+from megatron.core.transformer.moe.router import TopKRouter
+from megatron.training.global_vars import (
+    get_args,
+    get_timers,
+    get_tensorboard_writer,
+    get_wandb_writer,
+    get_one_logger
+)
+# get_num_microbatches
+from megatron.core.num_microbatches_calculator import get_num_microbatches
+from megatron.training.utils import (
+    report_memory,
+    print_rank_last
+)
+from megatron.core.rerun_state_machine import (
+    get_rerun_state_machine,
+)
+from megatron.core.utils import (
+    check_param_hashes_across_dp_replicas,
+)
+from megatron.training.theoretical_memory_usage import report_theoretical_memory
+from megatron.training import one_logger_utils
+from megatron.training.initialize import write_args_to_tensorboard
+from megatron.core.distributed import finalize_model_grads
+from megatron.core.distributed import DistributedDataParallel as DDP
+
+from megatron.training.training import (
+    print_datetime,
+    save_checkpoint_and_time,
+    train_step,
+    evaluate_and_print_results,
+)
+from megatron.training.async_utils import maybe_finalize_async_save
+from megatron.core.num_microbatches_calculator import (
+    get_current_global_batch_size,
+    get_current_running_global_batch_size,
+    get_num_microbatches,
+    update_num_microbatches
+)
+from megatron.training.utils import (
+    calc_params_l2_norm,
+    print_rank_0,
+    print_rank_last,
+    report_memory,
+)
+from megatron.training import ft_integration
+from megatron.training.global_vars import (
+    get_args,
+    get_timers,
+    get_tensorboard_writer,
+    get_wandb_writer,
+    get_one_logger
+)
+from .profiling import maybe_enable_profiling
+
+from megatron.training.training import (
+    enable_forward_pre_hook,
+    disable_forward_pre_hook,
+    post_training_step_callbacks,
+    checkpoint_and_decide_exit
+)
+
+from megatron.training.utils import (
+    calc_params_l2_norm,
+    logical_and_across_model_parallel_group,
+    reduce_max_stat_across_model_parallel_group,
+    print_rank_0,
+    print_rank_last,
+    report_memory,
+    unwrap_model,
+)
+
+from megatron.core.pipeline_parallel import get_forward_backward_func
+try:
+    import mlflow
+except Exception as e:
+    print(f"import mlflow failed {str(e)}")
+
+logger = logging.getLogger(__name__)
+
+def throughput_calculator(args, elapsed_time_per_iter, consumed_tokens_per_iter):
+    # training_time = elapsed_time
+    system_throughput = float(consumed_tokens_per_iter) / elapsed_time_per_iter
+    world_size = args.world_size
+    chip_throughput = system_throughput / world_size
+    # For 70B
+    # all_param_num = getattr(args, "all_param_num", None)
+    # assert all_param_num is not None, "please set all_param_num"
+    # MFU = chip_throughput * 6 * all_param_num * (1 + args.seq_length / (6 * args.hidden_size) ) / 98e12
+    # # tflops_throughput = chip_throughput / float(config.flops_16bit) * 1e12
+    # # logger.info("Throughput(token per chip per second): " + str(chip_throughput))
+    # # logger.info("MFU: " + str(MFU))
+    # # logger.info("Throughput(token per TFLOPS): " + str(tflops_throughput))
+    h = args.hidden_size
+    s = args.seq_length
+    N = 12 * args.num_layers * h **2
+    D = 1
+
+    attn_matmul = 2 * N * D
+    attn_sdp = N * D * (s / h)
+    mlp_matmul = 4 * N * D
+    # moe
+    if args.num_experts is None:
+        factor = 1
+    else:
+        factor = args.moe_router_topk
+    activated_dense_flops = attn_matmul + attn_sdp + mlp_matmul * factor
+    if args.num_experts is not None:
+        act_params = N + args.num_layers *(args.num_experts - 1) * 8 * h**2
+        if torch.distributed.get_rank() == 0:
+            print(f"N: {N} Act param: {act_params} Act flops: {activated_dense_flops}")
+    tflops =  chip_throughput *  activated_dense_flops
+    mfu = tflops / 98e12
+
+    return chip_throughput, mfu
+
+def num_floating_point_operations(args, batch_size):
+    # Attention projection size.
+    query_projection_size = args.kv_channels * args.num_attention_heads
+    query_projection_to_hidden_size_ratio = query_projection_size / args.hidden_size
+    # Group Query Attention.
+    if not args.group_query_attention:
+        args.num_query_groups = args.num_attention_heads
+    # MoE.
+    num_experts_routed_to = 1 if args.num_experts is None else args.moe_router_topk
+    gated_linear_multiplier = 3 / 2 if args.swiglu else 1
+    shared_expert_ffn_hidden_size = (
+        0
+        if args.moe_shared_expert_intermediate_size is None
+        else args.moe_shared_expert_intermediate_size
+    )
+    if not args.multi_latent_attention:
+        return (
+            12
+            * batch_size
+            * args.seq_length
+            * args.num_layers
+            * args.hidden_size
+            * args.hidden_size
+            * (
+                # Attention.
+                (
+                    (
+                        1
+                        + (args.num_query_groups / args.num_attention_heads)
+                        + (args.seq_length / args.hidden_size)
+                    ) * query_projection_to_hidden_size_ratio
+                )
+                # MLP.
+                + (
+                    (args.moe_ffn_hidden_size / args.hidden_size)
+                    * num_experts_routed_to
+                    * gated_linear_multiplier
+                )
+                # Shared Experts.
+                + ((shared_expert_ffn_hidden_size / args.hidden_size) * gated_linear_multiplier)
+                # Logit.
+                + (args.padded_vocab_size / (2 * args.num_layers * args.hidden_size))
+            )
+        )
+    else:
+        if args.q_lora_rank is None:
+            mla_flops_q = args.hidden_size * args.num_attention_heads * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+        else:
+            mla_flops_q = args.hidden_size * args.q_lora_rank +\
+                  args.q_lora_rank * args.num_attention_heads * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+        return (
+            6
+            * batch_size
+            * args.seq_length
+            * args.num_layers
+            * (
+                # MLA Attention.
+                (
+                    (
+                        mla_flops_q
+                        + args.hidden_size * (args.kv_lora_rank + args.qk_pos_emb_head_dim)
+                        + args.num_attention_heads * args.kv_lora_rank * (args.qk_head_dim + args.v_head_dim)
+                        + args.num_attention_heads * args.seq_length * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+                        + args.num_attention_heads * args.seq_length * args.v_head_dim
+                        + args.num_attention_heads * args.v_head_dim * args.hidden_size
+                    )
+                )
+                # Router
+                + args.hidden_size * args.num_experts
+                # MLP.
+                + (
+                    2 * args.hidden_size *  args.moe_ffn_hidden_size * num_experts_routed_to
+                    * gated_linear_multiplier
+                )
+                # Shared Experts.
+                + (2 * args.hidden_size * shared_expert_ffn_hidden_size * gated_linear_multiplier)
+                # Logit.
+                + (args.padded_vocab_size * args.hidden_size / args.num_layers)
+            )
+        )
+
+def need_mlflow():
+    return os.getenv("MLFLOW_TRACKING_URI", default=None) and \
+            torch.distributed.get_rank() == (torch.distributed.get_world_size() - 1)
+
+
+def train_step(forward_step_func, data_iterator,
+               model, optimizer, opt_param_scheduler, config):
+    """Single training step."""
+    args = get_args()
+    timers = get_timers()
+
+    rerun_state_machine = get_rerun_state_machine()
+    while rerun_state_machine.should_run_forward_backward(data_iterator):
+        # Set grad to zero.
+        for model_chunk in model:
+            model_chunk.zero_grad_buffer()
+        optimizer.zero_grad()
+
+        # Forward pass.
+        forward_backward_func = get_forward_backward_func()
+        losses_reduced = forward_backward_func( # forward_data_store
+            forward_step_func=forward_step_func,
+            data_iterator=data_iterator,
+            model=model,
+            num_microbatches=get_num_microbatches(),
+            seq_length=args.seq_length,
+            micro_batch_size=args.micro_batch_size,
+            decoder_seq_length=args.decoder_seq_length,
+            forward_only=False)
+    should_checkpoint, should_exit, exit_code = rerun_state_machine.should_checkpoint_and_exit()
+    if should_exit:
+        return {}, True, should_checkpoint, should_exit, exit_code, None, None
+
+    # Empty unused memory.
+    if args.empty_unused_memory_level >= 1:
+        torch.cuda.empty_cache()
+
+    # Vision gradients.
+    if args.vision_pretraining and args.vision_pretraining_type == "dino":
+        unwrapped_model = unwrap_model(model[0])
+        unwrapped_model.cancel_gradients_last_layer(args.curr_iteration)
+
+    # Update parameters.
+
+    timers('optimizer', log_level=1).start(barrier=args.barrier_with_L1_time)
+    update_successful, grad_norm, num_zeros_in_grad = optimizer.step()
+    timers('optimizer').stop()
+
+    # when freezing sub-models we may have a mixture of successful and unsucessful ranks,
+    # so we must gather across mp ranks
+    update_successful = logical_and_across_model_parallel_group(update_successful)
+    # grad_norm and num_zeros_in_grad will be None on ranks without trainable params,
+    # so we must gather across mp ranks
+    grad_norm = reduce_max_stat_across_model_parallel_group(grad_norm)
+    if args.log_num_zeros_in_grad:
+        num_zeros_in_grad = reduce_max_stat_across_model_parallel_group(num_zeros_in_grad)
+
+    # Vision momentum.
+    if args.vision_pretraining and args.vision_pretraining_type == "dino":
+        unwrapped_model = unwrap_model(model[0])
+        unwrapped_model.update_momentum(args.curr_iteration)
+
+    # Update learning rate.
+    if update_successful:
+        increment = get_num_microbatches() * \
+                    args.micro_batch_size * \
+                    args.data_parallel_size
+        opt_param_scheduler.step(increment=increment)
+        skipped_iter = 0
+    else:
+        skipped_iter = 1
+
+    # Empty unused memory.
+    if args.empty_unused_memory_level >= 2:
+        torch.cuda.empty_cache()
+
+    if mpu.is_pipeline_last_stage(ignore_virtual=True):
+        # Average loss across microbatches.
+        loss_reduced = {}
+        for key in losses_reduced[0].keys():
+            numerator = 0
+            denominator = 0
+
+            # HACK(xuerong.huang): Reduce the report loss(loss_reduced) on the last training step of multi-microbatches.
+            if int(os.getenv("NO_LOSS_REDUCE", 0)):
+                val0 = losses_reduced[0][key]
+                if isinstance(val0, tuple) or isinstance(val0, list):
+                    reduce_data = [sum([v[key][0] for v in losses_reduced])] # get the sum of the losses of all microbatches
+                    reduce_data.extend([v[key][1] for v in losses_reduced]) # get the token-num of all microbatches
+                    reduce_data = torch.stack(reduce_data)     
+                    torch.distributed.all_reduce(reduce_data, group=mpu.get_data_parallel_group()) # reduce the losses-sum and token-num from all dp-ranks
+                    numerator = reduce_data[0] 
+                    denominator = sum(reduce_data[1:])
+                else:
+                    numerator = sum([v[key] for v in losses_reduced])
+                    denominator = len(losses_reduced)
+                    torch.distributed.all_reduce(numerator, group=mpu.get_data_parallel_group())    # reduce the losses-sum from all dp-ranks
+            # HACK(xuerong.huang): Reduce the report loss(loss_reduced) on the last training step of multi-microbatches.
+            else:
+                for x in losses_reduced:
+                    val = x[key]
+                    # there is one dict per microbatch. in new reporting, we average
+                    # over the total number of tokens across the global batch.
+                    if isinstance(val, tuple) or isinstance(val, list):
+                        numerator += val[0]
+                        denominator += val[1]
+                    else:
+                        # legacy behavior. we average over the number of microbatches,
+                        # and so the denominator is 1.
+                        numerator += val
+                        denominator += 1
+
+            loss_reduced[key] = numerator / denominator
+            
+        return loss_reduced, skipped_iter, should_checkpoint, should_exit, exit_code, grad_norm, num_zeros_in_grad
+    return {}, skipped_iter, should_checkpoint, should_exit, exit_code, grad_norm, num_zeros_in_grad
+
+
+def training_log(loss_dict, total_loss_dict, learning_rate, decoupled_learning_rate, iteration,
+                 loss_scale, report_memory_flag, skipped_iter,
+                 grad_norm, params_norm, num_zeros_in_grad):
+    """Log training information such as losses, timing, ...."""
+    args = get_args()
+    timers = get_timers()
+    writer = get_tensorboard_writer()
+    wandb_writer = get_wandb_writer()
+    one_logger = get_one_logger()
+
+    # Advanced, skipped, and Nan iterations.
+    advanced_iters_key = 'advanced iterations'
+    skipped_iters_key = 'skipped iterations'
+    nan_iters_key = 'nan iterations'
+    # Advanced iterations.
+    if not skipped_iter:
+        total_loss_dict[advanced_iters_key] = total_loss_dict.get(
+            advanced_iters_key, 0) + 1
+    else:
+        if advanced_iters_key not in total_loss_dict:
+            total_loss_dict[advanced_iters_key] = 0
+    # Skipped iterations.
+    total_loss_dict[skipped_iters_key] = total_loss_dict.get(
+        skipped_iters_key, 0) + skipped_iter
+    # Update losses and set nan iterations
+    got_nan = False
+    for key in loss_dict:
+        if not skipped_iter:
+            total_loss_dict[key] = total_loss_dict.get(
+                key, torch.tensor([0.0], dtype=torch.float, device='cuda')) + loss_dict[key]
+        else:
+            value = loss_dict[key].float().sum().item()
+            is_nan = value == float('inf') or \
+                     value == -float('inf') or \
+                     value != value
+            got_nan = got_nan or is_nan
+    total_loss_dict[nan_iters_key] = total_loss_dict.get(
+        nan_iters_key, 0) + int(got_nan)
+
+    # Logging.
+    timers_to_log = [
+        'forward-backward',
+        'forward-compute',
+        'backward-compute',
+        'batch-generator',
+        'forward-recv',
+        'forward-send',
+        'backward-recv',
+        'backward-send',
+        'forward-send-forward-recv',
+        'forward-send-backward-recv',
+        'backward-send-forward-recv',
+        'backward-send-backward-recv',
+        'forward-backward-send-forward-backward-recv',
+        'layernorm-grads-all-reduce',
+        'embedding-grads-all-reduce',
+        'all-grads-sync',
+        'params-all-gather',
+        'optimizer-copy-to-main-grad',
+        'optimizer-unscale-and-check-inf',
+        'optimizer-clip-main-grad',
+        'optimizer-count-zeros',
+        'optimizer-inner-step',
+        'optimizer-copy-main-to-model-params',
+        'optimizer']
+
+    # Calculate batch size.
+    batch_size = args.micro_batch_size * args.data_parallel_size * \
+        get_num_microbatches()
+
+    # Track app tag & app tag ID
+    one_logger_utils.track_app_tag(batch_size, args.world_size, args.seq_length)
+
+    total_iterations = total_loss_dict[advanced_iters_key] + \
+                       total_loss_dict[skipped_iters_key]
+
+    # Tensorboard values.
+    # Timer requires all the ranks to call.
+    if args.log_timers_to_tensorboard and \
+       (iteration % args.tensorboard_log_interval == 0):
+        timers.write(timers_to_log, writer, iteration,
+                     normalizer=total_iterations)
+    if writer and (iteration % args.tensorboard_log_interval == 0):
+        if wandb_writer:
+            wandb_writer.log({'samples vs steps': args.consumed_train_samples},
+                             iteration)
+        writer.add_scalar('learning-rate', learning_rate, iteration)
+        if args.decoupled_lr is not None:
+            writer.add_scalar('decoupled-learning-rate', decoupled_learning_rate, iteration)
+        writer.add_scalar('learning-rate vs samples', learning_rate,
+                          args.consumed_train_samples)
+        if wandb_writer:
+            wandb_writer.log({'learning-rate': learning_rate}, iteration)
+        if args.skipped_train_samples > 0:
+            writer.add_scalar('skipped-train-samples', args.skipped_train_samples, iteration)
+            if wandb_writer:
+                wandb_writer.log({'skipped-train-samples': args.skipped_train_samples}, iteration)
+        writer.add_scalar('batch-size', batch_size, iteration)
+        writer.add_scalar('batch-size vs samples', batch_size,
+                          args.consumed_train_samples)
+        if wandb_writer:
+            wandb_writer.log({'batch-size': batch_size}, iteration)
+        for key in loss_dict:
+            writer.add_scalar(key , loss_dict[key], iteration)
+            writer.add_scalar(key + ' vs samples', loss_dict[key],
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({key: loss_dict[key]}, iteration)
+        if args.log_loss_scale_to_tensorboard:
+            writer.add_scalar('loss-scale', loss_scale, iteration)
+            writer.add_scalar('loss-scale vs samples', loss_scale,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'loss-scale': loss_scale}, iteration)
+        if args.log_world_size_to_tensorboard:
+            writer.add_scalar('world-size', args.world_size, iteration)
+            writer.add_scalar('world-size vs samples', args.world_size,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'world-size': args.world_size}, iteration)
+        if grad_norm is not None:
+            writer.add_scalar('grad-norm', grad_norm, iteration)
+            writer.add_scalar('grad-norm vs samples', grad_norm,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'grad-norm': grad_norm}, iteration)
+        if num_zeros_in_grad is not None:
+            writer.add_scalar('num-zeros', num_zeros_in_grad, iteration)
+            writer.add_scalar('num-zeros vs samples', num_zeros_in_grad,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'num-zeros': num_zeros_in_grad}, iteration)
+        if params_norm is not None:
+            writer.add_scalar('params-norm', params_norm, iteration)
+            writer.add_scalar('params-norm vs samples', params_norm,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'params-norm': params_norm}, iteration)
+        if args.log_memory_to_tensorboard:
+            mem_stats = torch.cuda.memory_stats()
+            writer.add_scalar(
+                "mem-reserved-bytes",
+                mem_stats["reserved_bytes.all.current"],
+                iteration,
+            )
+            writer.add_scalar(
+                "mem-allocated-bytes",
+                mem_stats["allocated_bytes.all.current"],
+                iteration,
+            )
+            writer.add_scalar(
+                "mem-allocated-count",
+                mem_stats["allocation.all.current"],
+                iteration,
+            )
+    if args.num_experts is not None:
+        moe_loss_scale = 1 / get_num_microbatches()
+        track_moe_metrics(moe_loss_scale, iteration, writer, wandb_writer, total_loss_dict, args.moe_per_layer_logging)
+
+    if iteration % args.log_interval == 0:
+        # HACK(huang.huang): support memory analysis dump
+        if args.record_memory_history:
+            snapshot = torch.cuda.memory._snapshot()
+            from pickle import dump
+            os.makedirs("./memory_snapshot", exist_ok=True)
+            with open(f"./memory_snapshot/iter{iteration}-{args.memory_snapshot_path}", 'wb') as f:
+                dump(snapshot, f)
+        ## HACK(huang.huang)
+
+        elapsed_time = timers('interval-time').elapsed(barrier=True)
+        elapsed_time_per_iteration = elapsed_time / total_iterations
+
+        throughput = num_floating_point_operations(args, batch_size) / (
+            elapsed_time_per_iteration * 10**12 * args.world_size)
+
+        one_logger_utils.track_e2e_metrics(args.log_throughput, throughput)
+
+        if args.log_timers_to_tensorboard:
+            if writer:
+                writer.add_scalar('iteration-time',
+                                  elapsed_time_per_iteration, iteration)
+            if wandb_writer:
+                wandb_writer.log({'iteration-time': elapsed_time_per_iteration},
+                                 iteration)
+        log_string = f" [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]"
+        log_string += ' iteration {:8d}/{:8d} |'.format(
+            iteration, args.train_iters)
+        # mfu = throughput / 465
+        # tokens_per_gpu_per_second = float(batch_size * args.seq_length) / elapsed_time_per_iteration / args.world_size
+        # log_string += ' tokens_per_gpu_per_second: {:.2f} /s |'.format(tokens_per_gpu_per_second)
+        # log_string += ' mfu: {:.4f} |'.format(mfu)
+        log_string += ' consumed samples: {:12d} |'.format(
+            args.consumed_train_samples)
+        if args.skipped_train_samples > 0:
+            log_string += ' skipped samples: {:12d} |'.format(
+                args.skipped_train_samples)
+        log_string += ' elapsed time per iteration (ms): {:.1f} |'.format(
+            elapsed_time_per_iteration * 1000.0)
+        if args.log_throughput:
+            log_string += f' throughput per GPU (TFLOP/s/GPU): {throughput:.1f} |'
+            if args.log_timers_to_tensorboard:
+                if writer:
+                    writer.add_scalar('throughput', throughput, iteration)
+                if wandb_writer:
+                    wandb_writer.log({'throughput': throughput}, iteration)
+        assert learning_rate is not None
+        # Decoupled_learning_rate should be not None only on first and last pipeline stage.
+        log_string += ' learning rate: {:.6E} |'.format(learning_rate)
+        if args.decoupled_lr is not None and (mpu.is_pipeline_first_stage(ignore_virtual=True) or
+                                              mpu.is_pipeline_last_stage(ignore_virtual=True)):
+            assert decoupled_learning_rate is not None
+            log_string += ' decoupled learning rate: {:.6E} |'.format(decoupled_learning_rate)
+        else:
+            assert decoupled_learning_rate is None
+        log_string += ' global batch size: {:5d} |'.format(batch_size)
+        current_loss_dic = dict()
+        for key in total_loss_dict:
+            if key not in [advanced_iters_key, skipped_iters_key,
+                           nan_iters_key]:
+                avg = total_loss_dict[key].item() / \
+                      float(max(1, total_loss_dict[advanced_iters_key]))
+                if avg > 0.0:
+                    log_string += ' {}: {:.6E} |'.format(key, avg)
+                    current_loss_dic[key] = avg
+                total_loss_dict[key] = torch.tensor([0.0], dtype=torch.float, device='cuda')
+        log_string += ' loss scale: {:.1f} |'.format(loss_scale)
+        if grad_norm is not None:
+            log_string += ' grad norm: {:.3f} |'.format(grad_norm)
+        if num_zeros_in_grad is not None:
+            log_string += ' num zeros: {:.1f} |'.format(num_zeros_in_grad)
+        if params_norm is not None:
+            log_string += ' params norm: {:.3f} |'.format(params_norm)
+        log_string += ' number of skipped iterations: {:3d} |'.format(
+            total_loss_dict[skipped_iters_key])
+        log_string += ' number of nan iterations: {:3d} |'.format(
+            total_loss_dict[nan_iters_key])
+        total_loss_dict[advanced_iters_key] = 0
+        total_loss_dict[skipped_iters_key] = 0
+        total_loss_dict[nan_iters_key] = 0
+        print_rank_last(log_string)
+        if report_memory_flag and learning_rate > 0.:
+            # Report memory after optimizer state has been initialized.
+            if torch.distributed.get_rank() == 0:
+                num_microbatches = get_num_microbatches()
+                report_theoretical_memory(args, num_microbatches=num_microbatches, verbose=True)
+            report_memory('(after {} iterations)'.format(iteration))
+            # report_memory_flag = False
+        timers.log(timers_to_log, normalizer=args.log_interval)
+
+        # log to mlflow
+        if need_mlflow():
+            mlflow_metrics = current_loss_dic
+            mlflow_metrics['mfu'] = mfu
+            mlflow_metrics["tps"] = tokens_per_gpu_per_second
+            mlflow_metrics['learning-rate'] = learning_rate
+            mlflow_metrics['consumed-samples'] = args.consumed_train_samples
+            mlflow_metrics['batch-size'] = batch_size
+            mlflow_metrics['loss-scale'] = loss_scale
+            mlflow_metrics['iteration-time'] = elapsed_time_per_iteration
+            mlflow_metrics['world-size'] = args.world_size
+
+            mlflow.log_metrics(mlflow_metrics, step=iteration, synchronous=False)
+
+    return report_memory_flag
+
+def train(forward_step_func, model, optimizer, opt_param_scheduler,
+          train_data_iterator, valid_data_iterator,
+          process_non_loss_data_func, config, checkpointing_context, non_loss_data_func):
+    """Train the model function."""
+    args = get_args()
+    timers = get_timers()
+    one_logger = get_one_logger()
+
+    # Write args to tensorboard
+    write_args_to_tensorboard()
+
+    # Turn on training mode which enables dropout.
+    for model_module in model:
+        model_module.train()
+
+    # Tracking loss.
+    total_loss_dict = {}
+
+    # Iterations.
+    iteration = args.iteration
+
+    # Track E2E metrics at the start of training
+    one_logger_utils.on_train_start(iteration=iteration, consumed_train_samples=args.consumed_train_samples,
+                                    train_samples=args.train_samples, seq_length=args.seq_length,
+                                    train_iters=args.train_iters, save=args.save, async_save=args.async_save,
+                                    log_throughput=args.log_throughput,
+                                    num_floating_point_operations_so_far=args.num_floating_point_operations_so_far)
+
+    num_floating_point_operations_so_far = args.num_floating_point_operations_so_far
+
+    # Setup some training config params
+    config.grad_scale_func = optimizer.scale_loss
+    config.timers = timers
+    if isinstance(model[0], DDP) and args.overlap_grad_reduce:
+        assert config.no_sync_func is None, \
+            ('When overlap_grad_reduce is True, config.no_sync_func must be None; '
+             'a custom no_sync_func is not supported when overlapping grad-reduce')
+        config.no_sync_func = [model_chunk.no_sync for model_chunk in model]
+        if len(model) == 1:
+            config.no_sync_func = config.no_sync_func[0]
+        if args.align_grad_reduce:
+            config.grad_sync_func = [model_chunk.start_grad_sync for model_chunk in model]
+            if len(model) == 1:
+                config.grad_sync_func = config.grad_sync_func[0]
+    if args.overlap_param_gather and args.align_param_gather:
+        config.param_sync_func = [model_chunk.start_param_sync for model_chunk in model]
+        if len(model) == 1:
+            config.param_sync_func = config.param_sync_func[0]
+    config.finalize_model_grads_func = finalize_model_grads
+
+    timers('interval-time', log_level=0).start(barrier=True)
+    print_datetime('before the start of training step')
+    report_memory_flag = True
+    # exit = False
+    pre_hook_enabled = False
+    should_exit = False
+    exit_code = 0
+
+    if args.manual_gc:
+        # Disable the default garbage collector and perform the collection manually.
+        # This is to align the timing of garbage collection across ranks.
+        assert args.manual_gc_interval >= 0, \
+            'Manual garbage collection interval should be laerger than or equal to 0.'
+        gc.disable()
+        gc.collect()
+
+    # Singleton Initialization
+    if args.log_straggler:
+        global stimer
+        world = torch.distributed.get_world_size()
+        rank = torch.distributed.get_rank()
+        mmcnt = args.straggler_minmax_count
+        stimer.configure(world, rank,
+                mmcnt = mmcnt,
+                enabled = not args.disable_straggler_on_startup,
+                port = args.straggler_ctrlr_port)
+    # total_flops = 0.0
+    num_floating_point_operations_since_last_log_event = 0.0
+
+    num_microbatches = get_num_microbatches()
+    eval_duration = 0.0
+    eval_iterations = 0
+
+    def get_e2e_base_metrics():
+        """Get base metrics values for one-logger to calculate E2E tracking metrics.
+        """
+        return {
+            'iteration': iteration,
+            'train_duration': timers('interval-time').active_time(),
+            'eval_duration': eval_duration,
+            'eval_iterations': eval_iterations,
+            'total_flops': num_floating_point_operations_since_last_log_event,
+            'num_floating_point_operations_so_far': num_floating_point_operations_so_far,
+            'consumed_train_samples': args.consumed_train_samples,
+            'world_size': args.world_size,
+            'seq_length': args.seq_length
+        }
+    # Cache into one-logger for callback
+    if one_logger:
+        with one_logger.get_context_manager():
+            one_logger.store_set('get_e2e_base_metrics', get_e2e_base_metrics)
+
+    prof = None
+    if args.profile and torch.distributed.get_rank() in args.profile_ranks and args.use_pytorch_profiler:
+        prof = torch.profiler.profile(
+        schedule=torch.profiler.schedule(
+            wait=max(args.profile_step_start-1, 0),
+            warmup=1 if args.profile_step_start > 0 else 0,
+            active=args.profile_step_end-args.profile_step_start,
+            repeat=1),
+        on_trace_ready=torch.profiler.tensorboard_trace_handler(args.tensorboard_dir),
+        record_shapes=True,
+        with_stack=True)
+        prof.start()
+
+    start_iteration = iteration
+    # Disable forward pre-hook to start training to ensure that errors in checkpoint loading
+    # or random initialization don't propagate to all ranks in first all-gather (which is a
+    # no-op if things work correctly).
+    if args.use_distributed_optimizer and args.overlap_param_gather:
+        disable_forward_pre_hook(model, param_sync=False)
+        # Also remove param_sync_func temporarily so that sync calls made in
+        # `forward_backward_func` are no-ops.
+        param_sync_func = config.param_sync_func
+        config.param_sync_func = None
+        pre_hook_enabled = False
+    # Also, check weight hash across DP replicas to be very pedantic.
+    if args.check_weight_hash_across_dp_replicas_interval is not None:
+        assert check_param_hashes_across_dp_replicas(model, cross_check=True), \
+            "Parameter hashes not matching across DP replicas"
+        torch.distributed.barrier()
+        print_rank_0(f">>> Weight hashes match after {iteration} iterations...")
+
+    # HACK(dongsheng.zhang) modelstudio init
+    if need_mlflow():
+        mlflow.start_run()
+
+    with maybe_enable_profiling(
+        args, global_step=iteration
+    ) as torch_profiler:
+        while iteration < args.train_iters:
+            if args.profile and torch.distributed.get_rank() in args.profile_ranks:
+                if args.use_pytorch_profiler:
+                    prof.step()
+                elif iteration == args.profile_step_start:
+                    torch.cuda.cudart().cudaProfilerStart()
+                    torch.autograd.profiler.emit_nvtx(record_shapes=True).__enter__()
+
+            maybe_finalize_async_save(blocking=False)
+
+            # Update number of microbatches first without consistency check to decide if a
+            # checkpoint should be saved. If the number of microbatches is different
+            # from the previous iteration, save a checkpoint. Then run consistency check
+            # to make sure training configuration is still valid.
+            update_num_microbatches(args.consumed_train_samples, consistency_check=False, verbose=True)
+            if get_num_microbatches() != num_microbatches and iteration != 0:
+                assert get_num_microbatches() > num_microbatches, \
+                    "number of microbatches should be increasing due to batch size rampup ... %d -> %d." % (num_microbatches, get_num_microbatches())
+                if args.save is not None:
+                    save_checkpoint_and_time(iteration, model, optimizer,
+                                            opt_param_scheduler,
+                                            num_floating_point_operations_so_far,
+                                            checkpointing_context, train_data_iterator=train_data_iterator)
+            num_microbatches = get_num_microbatches()
+            update_num_microbatches(args.consumed_train_samples, consistency_check=True, verbose=True)
+
+            args.curr_iteration = iteration
+            loss_dict, skipped_iter, should_checkpoint, should_exit, exit_code, grad_norm, num_zeros_in_grad = \
+                train_step(forward_step_func,
+                        train_data_iterator,
+                        model,
+                        optimizer,
+                        opt_param_scheduler,
+                        config)
+
+            if should_checkpoint:
+                save_checkpoint_and_time(iteration, model, optimizer,
+                                        opt_param_scheduler,
+                                        num_floating_point_operations_so_far,
+                                        checkpointing_context, train_data_iterator=train_data_iterator)
+            if should_exit:
+                break
+
+            # Enable forward pre-hooks after first set of forward and backward passes.
+            # When running in fp16, skip all NaN iterations until steady-state loss scaling value
+            # is reached.
+            if iteration == start_iteration:
+                if skipped_iter:
+                    # Only enable forward pre-hook after a training step has successfully run. Relevant
+                    # for fp16 codepath where first XX iterations are skipped until steady-state loss
+                    # scale value is reached.
+                    start_iteration = iteration + 1
+                else:
+                    # Enable forward pre-hook after training step has successfully run. All subsequent
+                    # forward passes will use the forward pre-hook / `param_sync_func` in
+                    # `forward_backward_func`.
+                    if args.use_distributed_optimizer and args.overlap_param_gather:
+                        enable_forward_pre_hook(model)
+                        config.param_sync_func = param_sync_func
+                        pre_hook_enabled = True
+
+            if torch_profiler:
+                torch_profiler.step()
+            iteration += 1
+            batch_size = mpu.get_data_parallel_world_size() * \
+                        args.micro_batch_size * \
+                        get_num_microbatches()
+            args.consumed_train_samples += batch_size
+            num_skipped_samples_in_batch = (get_current_global_batch_size() -
+                                            get_current_running_global_batch_size())
+            if args.decrease_batch_size_if_needed:
+                assert num_skipped_samples_in_batch >= 0
+            else:
+                assert num_skipped_samples_in_batch == 0
+            args.skipped_train_samples += num_skipped_samples_in_batch
+            num_floating_point_operations_in_batch = num_floating_point_operations(args, batch_size)
+            num_floating_point_operations_so_far += num_floating_point_operations_in_batch
+            num_floating_point_operations_since_last_log_event += num_floating_point_operations_in_batch
+
+            # # Send heartbeat to FT package and update timeouts.
+            # if args.enable_ft_package:
+            #     ft_client = ft_integration.get_rank_monitor_client(
+            #         ft_integration.StateMachineActions.TRAIN_HEARTBEAT)
+            #     if ft_client is not None:
+            #         ft_client.send_heartbeat()
+            #         # TODO we are always calculating timeouts in the current implementation
+            #         # if we want to rely on manually setup then we need to add additional argument
+            #         # to training and pass it here
+            #         if ft_integration.can_update_timeouts():
+            #             ft_integration.get_rank_monitor_client(
+            #                 ft_integration.StateMachineActions.UPDATE_TIMEOUT).calculate_and_set_timeouts()
+            #             print_rank_0(f'Updated FT timeouts. New values: \
+            #                 {ft_integration.get_rank_monitor_client().timeouts}')
+
+            # # Bring CPU and GPU back in sync if on right iteration.
+            # if (
+            #     args.train_sync_interval
+            #     and iteration % args.train_sync_interval == 0
+            # ):
+            #     torch.cuda.synchronize()
+
+            # Logging.
+            if not optimizer.is_stub_optimizer:
+                loss_scale = optimizer.get_loss_scale().item()
+            else:
+                loss_scale = 1.0
+            params_norm = None
+            if args.log_params_norm:
+                params_norm = calc_params_l2_norm(model)
+
+            learning_rate = None
+            decoupled_learning_rate = None
+            for param_group in optimizer.param_groups:
+                if param_group['is_decoupled_lr']:
+                    decoupled_learning_rate = param_group['lr']
+                else:
+                    learning_rate = param_group['lr']
+            report_memory_flag = training_log(loss_dict, total_loss_dict,
+                                            learning_rate,
+                                            decoupled_learning_rate,
+                                            iteration, loss_scale,
+                                            report_memory_flag, skipped_iter,
+                                            grad_norm, params_norm, num_zeros_in_grad)
+
+            # # StragglerDetector
+            # if iteration % args.log_interval == 0 and args.log_straggler:
+            #     stimer.report(total_flops, args.log_interval)
+            #     total_flops = 0.0
+
+            # if args.check_weight_hash_across_dp_replicas_interval is not None and \
+            #         iteration % args.check_weight_hash_across_dp_replicas_interval == 0:
+            #     if args.use_distributed_optimizer and args.overlap_param_gather:
+            #         optimizer.disable_pre_hook()
+            #     assert check_param_hashes_across_dp_replicas(model, cross_check=True), \
+            #         "Parameter hashes not matching across DP replicas"
+            #     torch.distributed.barrier()
+            #     print_rank_0(f">>> Weight hashes match after {iteration} iterations...")
+            #     if args.use_distributed_optimizer and args.overlap_param_gather:
+            #         optimizer.enable_pre_hook()
+
+            # # Autoresume
+            # if args.adlr_autoresume and \
+            # (iteration % args.adlr_autoresume_interval == 0):
+            #     check_adlr_autoresume_termination(iteration, model, optimizer,
+            #                                     opt_param_scheduler)
+
+            # Evaluation
+            if args.eval_interval and iteration % args.eval_interval == 0 and \
+                args.do_valid:
+                timers('interval-time').stop()
+                if args.use_distributed_optimizer and args.overlap_param_gather:
+                    disable_forward_pre_hook(model)
+                    pre_hook_enabled = False
+                if args.manual_gc and args.manual_gc_eval:
+                    # Collect all objects.
+                    gc.collect()
+                prefix = f'iteration {iteration}'
+                timers('eval-time', log_level=0).start(barrier=True)
+                evaluate_and_print_results(prefix, forward_step_func,
+                                        valid_data_iterator, model,
+                                        iteration, process_non_loss_data_func,
+                                        config, verbose=False, write_to_tensorboard=True,
+                                        non_loss_data_func=non_loss_data_func)
+                eval_duration += timers('eval-time').elapsed()
+                eval_iterations += args.eval_iters
+                timers('eval-time').stop()
+                one_logger_utils.track_e2e_metrics()
+
+                if args.manual_gc and args.manual_gc_eval:
+                    # Collect only the objects created and used in evaluation.
+                    gc.collect(generation=0)
+                if args.use_distributed_optimizer and args.overlap_param_gather:
+                    enable_forward_pre_hook(model)
+                    pre_hook_enabled = True
+                timers('interval-time', log_level=0).start(barrier=True)
+
+
+                if args.enable_ft_package and ft_integration.get_rank_monitor_client() is not None:
+                    ft_integration.get_rank_monitor_client(
+                        ft_integration.StateMachineActions.EVAL_HEARTBEAT).send_heartbeat()
+
+            # Miscellaneous post-training-step functions (e.g., FT heartbeats, GC).
+            # Some of these only happen at specific iterations.
+            post_training_step_callbacks(model, optimizer, opt_param_scheduler, iteration, prof,
+                                        num_floating_point_operations_since_last_log_event)
+
+            # Checkpoint and decide whether to exit.
+            should_exit = checkpoint_and_decide_exit(model, optimizer, opt_param_scheduler, iteration,
+                                                    num_floating_point_operations_so_far,
+                                                    checkpointing_context, train_data_iterator)
+            if should_exit:
+                break
+
+    one_logger_utils.track_e2e_metrics()
+
+    # Flush TensorBoard, WandB writers and one-logger.
+    writer = get_tensorboard_writer()
+    if writer:
+        writer.flush()
+
+    # Close out pre-hooks if using distributed optimizer and overlapped param gather.
+    if pre_hook_enabled:
+        disable_forward_pre_hook(model)
+
+    if args.enable_ft_package and ft_integration.get_rank_monitor_client() is not None:
+        ft_integration.get_rank_monitor_client().shutdown_workload_monitoring()
+
+    maybe_finalize_async_save(blocking=True)
+
+    # If any exit conditions (signal handler, duration, iterations) have been reached, exit.
+    if should_exit:
+        wandb_writer = get_wandb_writer()
+        if wandb_writer:
+            wandb_writer.finish()
+        sys.exit(exit_code)
+
+    return iteration, num_floating_point_operations_so_far
+
+
+import megatron.training
+megatron.training.training.train_step = train_step
+megatron.training.training.training_log = training_log
+megatron.training.training.train = train
diff --git a/megatron-lm-musa-patch/musa_patch/utils.py b/megatron-lm-musa-patch/musa_patch/utils.py
new file mode 100644
index 000000000..ab83ec741
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/utils.py
@@ -0,0 +1,68 @@
+import contextlib
+import gc
+import math
+import os
+import subprocess
+from dataclasses import dataclass
+from datetime import timedelta
+from typing import Generator, Iterable, List, Optional, Set, Union
+
+# hardcoded BF16 type peak flops for Moore Threads S4000, and S5000 GPU
+def get_peak_flops(device_name: str) -> int:
+    try:
+        # Run the lspci command and capture the output
+        result = subprocess.run(["lspci", "-d", "1ed5:"], stdout=subprocess.PIPE, text=True)
+        # Filter the output for lines containing both "NVIDIA" and "H100"
+        filtered_lines = [
+            line
+            for line in result.stdout.splitlines()
+            if "NVIDIA" in line and "H100" in line
+        ]
+        # Join all filtered lines into a single string
+        device_name = " ".join(filtered_lines) or device_name
+    except FileNotFoundError as e:
+        logger.warning(f"Error running lspci: {e}, fallback to use device_name")
+    if "A100" in device_name:
+        # data from https://www.nvidia.com/en-us/data-center/a100/
+        return 312e12
+    elif "H100" in device_name:
+        # data from https://www.nvidia.com/en-us/data-center/h100/
+        # NOTE: Specifications are one-half lower without sparsity.
+        if "NVL" in device_name:
+            return 835e12
+        elif "PCIe" in device_name:
+            return 756e12
+        else:  # for H100 SXM and other variants
+            return 989e12
+    elif "H200" in device_name:
+        # data from https://www.nvidia.com/en-us/data-center/h200/
+        return 989e12
+    else:  # for other GPU types, assume A100
+        logger.warning(f"Peak flops undefined for: {device_name}, fallback to A100")
+        return 312e12
+
+
+@dataclass(frozen=True)
+class Color:
+    black = "\033[30m"
+    red = "\033[31m"
+    green = "\033[32m"
+    yellow = "\033[33m"
+    blue = "\033[34m"
+    magenta = "\033[35m"
+    cyan = "\033[36m"
+    white = "\033[37m"
+    reset = "\033[39m"
+
+
+@dataclass(frozen=True)
+class NoColor:
+    black = ""
+    red = ""
+    green = ""
+    yellow = ""
+    blue = ""
+    magenta = ""
+    cyan = ""
+    white = ""
+    reset = ""
diff --git a/megatron-lm-musa-patch/musa_patch/zbb_light/__init__.py b/megatron-lm-musa-patch/musa_patch/zbb_light/__init__.py
new file mode 100644
index 000000000..8b0d05a82
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/zbb_light/__init__.py
@@ -0,0 +1,2 @@
+
+from .zbpp_light import patch_megatron
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/zbb_light/auto_schedule.py b/megatron-lm-musa-patch/musa_patch/zbb_light/auto_schedule.py
new file mode 100644
index 000000000..e9786921e
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/zbb_light/auto_schedule.py
@@ -0,0 +1,94 @@
+from dataclasses import dataclass
+
+@dataclass(eq=True)
+class ScheduledNode:
+    type: str
+    stage: int
+    minibatch: int
+
+def auto_schedule(nstages, nmb):
+    f = [0] * nstages
+    b = [0] * nstages
+    # W is a stack for each stage
+    w = [[] for i in range(nstages)]
+    result = [[] for i in range(nstages)]
+    last_compute_id = [-1] * nstages
+    def schedule_f(stage):
+        if not stage == 0:
+            result[stage].append(ScheduledNode(
+                'RECV_FORWARD',
+                stage=stage,
+                minibatch=f[stage]))
+        result[stage].append(
+            ScheduledNode(
+              type='F',
+              stage=stage,
+              minibatch=f[stage]))
+        last_compute_id[stage] = len(result[stage]) - 1
+        if not stage == nstages - 1:
+            result[stage].append(ScheduledNode(
+                'SEND_FORWARD',
+                stage=stage,
+                minibatch=f[stage]))
+        f[stage] += 1
+    def schedule_b(stage):
+        if not stage == nstages - 1:
+            result[stage].append(ScheduledNode(
+                'RECV_BACKWARD',
+                stage=stage,
+                minibatch=b[stage]))
+        result[stage].append(
+            ScheduledNode(
+              type='B',
+              stage=stage,
+              minibatch=b[stage]))
+        last_compute_id[stage] = len(result[stage]) - 1
+        if not stage == 0:
+            result[stage].append(ScheduledNode(
+                'SEND_BACKWARD',
+                stage=stage,
+                minibatch=b[stage]))
+        w[stage].append(b[stage])
+        b[stage] += 1
+    def schedule_w(stage):
+        assert last_compute_id[stage] != -1
+        if result[stage][last_compute_id[stage]].type == 'B' and (stage == 0 or not f[stage] == nmb):
+            result[stage][last_compute_id[stage]].type = 'BW'
+        else:
+            result[stage].append(
+                ScheduledNode(
+                  type='W',
+                  stage=stage,
+                  minibatch=w[stage][-1]))
+            last_compute_id[stage] = len(result[stage]) - 1
+        w[stage].pop(-1)
+        
+    
+    for stage in range(nstages):
+        num_warmup_microbatches = nstages - stage - 1
+        num_warmup_microbatches = min(num_warmup_microbatches, nmb)
+        remaining = nmb - num_warmup_microbatches
+        for i in range(num_warmup_microbatches):
+            schedule_f(stage)
+        for i in range(remaining):
+            schedule_f(stage)
+            schedule_b(stage)
+            if i >= stage:
+                schedule_w(stage)
+        for i in range(num_warmup_microbatches):
+            schedule_b(stage)
+            if remaining + i >= stage:
+                schedule_w(stage)
+        assert f[stage] == b[stage] == nmb
+        while len(w[stage]) > 0:
+            schedule_w(stage)
+
+    for stage in range(nstages):
+        print(' '.join([f'{x.type}{x.minibatch}' for x in result[stage] if x.type in {'F', 'B', 'W', 'BW'}]))
+    return result
+
+
+if __name__ == "__main__":
+    auto_schedule(4, 12)
+    auto_schedule(8, 4)
+    
diff --git a/megatron-lm-musa-patch/musa_patch/zbb_light/weight_grad_store.py b/megatron-lm-musa-patch/musa_patch/zbb_light/weight_grad_store.py
new file mode 100644
index 000000000..530b17d1c
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/zbb_light/weight_grad_store.py
@@ -0,0 +1,56 @@
+import queue
+import torch
+from typing import List
+
+class WeightGradStore:
+
+    cache = []
+    weight_grad_queue = queue.Queue()
+    combine_bw = False
+
+    @classmethod
+    def set_combine_bw(cls, combine_bw):
+        # For the following backward pass, combine W with B and skip next W
+        cls.combine_bw = combine_bw
+
+    @classmethod
+    def split_bw(cls):
+        # For the following backward pass, combine W with B and skip next W
+        return not cls.combine_bw
+
+    @classmethod
+    def put(cls, inputs, func, pos_func = None):
+        if cls.combine_bw:
+            func(*inputs)
+            if pos_func is not None:
+                if isinstance(inputs[0], List):
+                    pos_func(*inputs[0])
+                else:
+                    pos_func(inputs[0])
+            return
+        # Store the weight gradient computation of linear layers.
+        cls.cache.append((inputs, func, pos_func))
+
+    @classmethod
+    def flush(cls):
+        if cls.combine_bw:
+            cls.combine_bw = False
+            return
+        # Collect all stored computations during backward as a W.
+        cls.weight_grad_queue.put(cls.cache)
+        cls.cache = []
+
+    @classmethod
+    def pop(cls):
+        assert not cls.combine_bw
+        # Execute a single W.
+        assert cls.weight_grad_queue.qsize() > 0
+        stored_grads = cls.weight_grad_queue.get()
+        with torch.enable_grad():
+            for inputs, func, pos_func in stored_grads:
+                func(*inputs)
+                if pos_func is not None:
+                    if isinstance(inputs[0], List):
+                        pos_func(*inputs[0])
+                    else:
+                        pos_func(inputs[0])
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/zbb_light/zb_schedule.py b/megatron-lm-musa-patch/musa_patch/zbb_light/zb_schedule.py
new file mode 100644
index 000000000..eeda4811b
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/zbb_light/zb_schedule.py
@@ -0,0 +1,580 @@
+import contextlib
+import itertools
+from typing import Iterator, List, Union
+import os
+import torch
+
+from megatron import core
+from megatron.core import parallel_state
+from megatron.core.utils import get_model_config, get_model_type, get_model_xattn
+from megatron.core.parallel_state import (
+    get_pipeline_model_parallel_group,
+    get_pipeline_model_parallel_next_rank,
+    get_pipeline_model_parallel_prev_rank,
+)
+from megatron.core.pipeline_parallel.schedules import (
+    recv_forward,
+    send_forward,
+    recv_backward,
+    send_backward,
+    deallocate_output_tensor,
+    forward_step,
+    backward_step,
+    get_tensor_shapes,
+)
+from megatron.core.num_microbatches_calculator import get_num_microbatches
+from . import auto_schedule
+from .weight_grad_store import WeightGradStore
+
+
+AUTO_SCHEDULE_COMMUNICATION_TYPES = {'RECV_FORWARD', 'RECV_BACKWARD', 'SEND_FORWARD', 'SEND_BACKWARD'}
+
+
+def fused_pipeline_ops(
+    tensor_send_prev: List[torch.Tensor],
+    tensor_recv_prev: List[torch.Tensor],
+    tensor_send_next: List[torch.Tensor],
+    tensor_recv_next: List[torch.Tensor],
+    group: torch.distributed.ProcessGroup,
+):
+    ops = []
+    if parallel_state.get_pipeline_model_parallel_rank() % 2 == 0:
+        for t in tensor_send_next:
+            send_next_op = torch.distributed.P2POp(
+                torch.distributed.isend,
+                t,
+                get_pipeline_model_parallel_next_rank(),
+                group,
+            )
+            ops.append(send_next_op)
+        for t in tensor_recv_prev:
+            recv_prev_op = torch.distributed.P2POp(
+                torch.distributed.irecv,
+                t,
+                get_pipeline_model_parallel_prev_rank(),
+                group,
+            )
+            ops.append(recv_prev_op)
+        for t in tensor_send_prev:
+            send_prev_op = torch.distributed.P2POp(
+                torch.distributed.isend,
+                t,
+                get_pipeline_model_parallel_prev_rank(),
+                group,
+            )
+            ops.append(send_prev_op)
+        for t in tensor_recv_next:
+            recv_next_op = torch.distributed.P2POp(
+                torch.distributed.irecv,
+                t,
+                get_pipeline_model_parallel_next_rank(),
+                group,
+            )
+            ops.append(recv_next_op)
+    else:
+        for t in tensor_recv_prev:
+            recv_prev_op = torch.distributed.P2POp(
+                torch.distributed.irecv,
+                t,
+                get_pipeline_model_parallel_prev_rank(),
+                group,
+            )
+            ops.append(recv_prev_op)
+        for t in tensor_send_next:
+            send_next_op = torch.distributed.P2POp(
+                torch.distributed.isend,
+                t,
+                get_pipeline_model_parallel_next_rank(),
+                group,
+            )
+            ops.append(send_next_op)
+        for t in tensor_recv_next:
+            recv_next_op = torch.distributed.P2POp(
+                torch.distributed.irecv,
+                t,
+                get_pipeline_model_parallel_next_rank(),
+                group,
+            )
+            ops.append(recv_next_op)
+        for t in tensor_send_prev:
+            send_prev_op = torch.distributed.P2POp(
+                torch.distributed.isend,
+                t,
+                get_pipeline_model_parallel_prev_rank(),
+                group,
+            )
+            ops.append(send_prev_op)
+        
+    if len(ops) > 0:
+        reqs = torch.distributed.batch_isend_irecv(ops)
+        for req in reqs:
+            req.wait()
+    else:
+        reqs = []
+    return reqs,[],[],[],[]
+
+def p2p_pipeline_ops(
+    tensor_send_prev: List[torch.Tensor],
+    tensor_recv_prev: List[torch.Tensor],
+    tensor_send_next: List[torch.Tensor],
+    tensor_recv_next: List[torch.Tensor],
+    group: torch.distributed.ProcessGroup,
+):
+    assert( len(tensor_send_prev) <= 1 and len(tensor_recv_prev) <= 1 and len(tensor_send_next)<=1 and len(tensor_recv_next) <=1)
+    reqs, sp_reqs, rp_reqs, sn_reqs, rn_reqs= [], [], [], [], []
+    if parallel_state.get_pipeline_model_parallel_rank() % 2 == 0:
+        for t in tensor_send_next:
+            send_next_req = torch.distributed.isend(
+                tensor=t,
+                dst=get_pipeline_model_parallel_next_rank(),
+                group=group,
+            )
+            sn_reqs.append(send_next_req)
+            reqs.append(send_next_req)
+
+        for t in tensor_recv_prev:
+            recv_prev_req = torch.distributed.irecv(
+                tensor=t,
+                src=get_pipeline_model_parallel_prev_rank(),
+                group=group,
+            )
+            rp_reqs.append(recv_prev_req)
+            reqs.append(recv_prev_req)
+    
+        for t in tensor_send_prev:
+            send_prev_req = torch.distributed.isend(
+                tensor=t,
+                dst=get_pipeline_model_parallel_prev_rank(),
+                group=group,
+            )
+            sp_reqs.append(send_prev_req)
+            reqs.append(send_prev_req)
+
+        for t in tensor_recv_next:
+            recv_next_req = torch.distributed.irecv(
+                tensor=t,
+                src=get_pipeline_model_parallel_next_rank(),
+                group=group,
+            )
+            rn_reqs.append(recv_next_req)
+            reqs.append(recv_next_req)
+    else:
+        
+        for t in tensor_recv_prev:
+            recv_prev_req = torch.distributed.irecv(
+                tensor=t,
+                src=get_pipeline_model_parallel_prev_rank(),
+                group=group,
+            )
+            rp_reqs.append(recv_prev_req)
+            reqs.append(recv_prev_req)
+
+        for t in tensor_send_next:
+            send_next_req = torch.distributed.isend(
+                tensor=t,
+                dst=get_pipeline_model_parallel_next_rank(),
+                group=group,
+            )
+            sn_reqs.append(send_next_req)
+            reqs.append(send_next_req)   
+
+        for t in tensor_recv_next:
+            recv_next_req = torch.distributed.irecv(
+                tensor=t,
+                src=get_pipeline_model_parallel_next_rank(),
+                group=group,
+            )
+            rn_reqs.append(recv_next_req)
+            reqs.append(recv_next_req)
+    
+        for t in tensor_send_prev:
+            send_prev_req = torch.distributed.isend(
+                tensor=t,
+                dst=get_pipeline_model_parallel_prev_rank(),
+                group=group,
+            )
+            sp_reqs.append(send_prev_req)
+            reqs.append(send_prev_req)
+        
+    # for req in reqs:
+    #         req.wait() 
+    return (reqs, sp_reqs, rp_reqs, sn_reqs, rn_reqs)
+
+
+
+def multi_pipeline_ops(
+    tensor_send_prev: List[torch.Tensor],
+    tensor_recv_prev: List[torch.Tensor],
+    tensor_send_next: List[torch.Tensor],
+    tensor_recv_next: List[torch.Tensor],
+):
+    group = get_pipeline_model_parallel_group()
+    if True:
+        p2p_func = fused_pipeline_ops
+    else:
+        p2p_func = p2p_pipeline_ops
+    return p2p_func(
+        tensor_send_prev=tensor_send_prev,
+        tensor_recv_prev=tensor_recv_prev,
+        tensor_send_next=tensor_send_next,
+        tensor_recv_next=tensor_recv_next,
+        group=group,
+    )
+
+
+class ZeroBubbleScheduler:
+
+    def __init__(self):
+        self._reset()
+
+        self.schedules = None
+        self.send_tensor_shapes = None
+        self.recv_tensor_shapes = None
+        self.config = None
+        self.forward_step_func = None
+        self.data_iterator = None
+        self.model = None
+        self.model_type = None
+        self.num_microbatches = None
+        self.collect_non_loss_data = None
+        self.forward_only = None
+        self.no_sync_context = None
+        self.no_sync_func = None
+
+        self.do_post_validation = False
+        self.is_first_run = True
+        self.optimizer = None
+
+    def _free_buffers(self):
+        self.input_tensors = []
+        self.output_tensors = []
+        self.send_forward_buffer = []
+        self.recv_forward_buffer = []
+        self.send_backward_buffer = []
+        self.recv_backward_buffer = []
+        self.forward_data_store = []
+
+    def _reset(self):
+        # Input, output tensors only need to be saved when doing backward passes
+        self._free_buffers()
+        self.send_handles = []
+        self.communication_batch = {
+            'SEND_NEXT': [],
+            'RECV_NEXT': [],
+            'SEND_PREV': [],
+            'RECV_PREV': [],
+        }
+
+    def get_schedules(self):
+        if self.schedules is None:
+            # bootstrap_p2p_communication(self.config)
+            self.schedules = auto_schedule.auto_schedule(
+                parallel_state.get_pipeline_model_parallel_world_size(),
+                get_num_microbatches())[parallel_state.get_pipeline_model_parallel_rank()]
+
+        return self.schedules
+
+    @classmethod
+    def direction_map(cls, node):
+        return {
+            'SEND_FORWARD': 'SEND_NEXT',
+            'RECV_FORWARD': 'RECV_PREV',
+            'SEND_BACKWARD': 'SEND_PREV',
+            'RECV_BACKWARD': 'RECV_NEXT',
+        }[node.type]
+
+    def buffer_map(self, node):
+        return {
+            'SEND_FORWARD': self.send_forward_buffer,
+            'RECV_FORWARD': self.recv_forward_buffer,
+            'SEND_BACKWARD': self.send_backward_buffer,
+            'RECV_BACKWARD': self.recv_backward_buffer,
+        }[node.type]
+
+    def flush(self):
+        name = '_'.join(
+            [f'{v[0].type}.{v[0].minibatch}' for v in itertools.chain(
+                *[vs for k, vs in self.communication_batch.items()])])
+        assert self.send_tensor_shapes == self.recv_tensor_shapes
+        assert len(self.send_tensor_shapes) == 1
+        sn_tensors = [
+            self.buffer_map(x[0]).pop(0)[0]
+            for x in self.communication_batch['SEND_NEXT']
+        ]
+        sp_tensors = [
+            self.buffer_map(x[0]).pop(0)[0]
+            for x in self.communication_batch['SEND_PREV']
+        ]
+
+        rn_tensors = [
+            torch.empty(
+                self.send_tensor_shapes[0],
+                requires_grad=True,
+                device=torch.cuda.current_device(),
+                dtype=self.config.pipeline_dtype,
+            ) for x in self.communication_batch['RECV_NEXT']
+        ]
+        rp_tensors = [
+            torch.empty(
+                self.send_tensor_shapes[0],
+                requires_grad=True,
+                device=torch.cuda.current_device(),
+                dtype=self.config.pipeline_dtype,
+            ) for x in self.communication_batch['RECV_PREV']
+        ]
+        (reqs, sp_reqs, rp_reqs, sn_reqs, rn_reqs) = multi_pipeline_ops(
+            sp_tensors,
+            rp_tensors,
+            sn_tensors,
+            rn_tensors
+        )
+        # We don't care about the reqs order here, all users need to all reqs to finish
+        for x in self.communication_batch['RECV_NEXT']:
+            self.buffer_map(x[0]).append(([rn_tensors.pop(0)], [rn_reqs]))
+        for x in self.communication_batch['RECV_PREV']:
+            self.buffer_map(x[0]).append(([rp_tensors.pop(0)], [rp_reqs]))
+        self.send_handles.append([sp_reqs, sn_reqs])
+        assert(not rn_tensors)
+        assert(not rp_tensors)
+        for direction in ['SEND_PREV', 'SEND_NEXT']:
+            for id, x in enumerate(self.communication_batch[direction]):
+                if x[0].type == 'SEND_FORWARD':
+                    deallocate_output_tensor(sp_tensors[id] if direction == 'SEND_PREV' else sn_tensors[id],
+                                             self.config.deallocate_pipeline_outputs)
+        for k, v in self.communication_batch.items():
+            v.clear()
+
+    def add_communication(
+        self,
+        scheduled_node: auto_schedule.ScheduledNode,
+        next_is_comm: bool,
+        next_compute: auto_schedule.ScheduledNode
+    ):
+        if self.forward_only and 'BACKWARD' in scheduled_node.type:
+            return
+        self.communication_batch[self.direction_map(scheduled_node)].append(
+            (scheduled_node, None))
+        def is_consumer(scheduled_node, next_compute):
+            if scheduled_node.minibatch == next_compute.minibatch:
+                if scheduled_node.type == 'RECV_FORWARD' and next_compute.type == 'F':
+                    return True
+                if scheduled_node.type == 'RECV_BACKWARD' and next_compute.type == 'B':
+                    return True
+            return False
+        if (next_compute is not None and is_consumer(scheduled_node, next_compute)) or not next_is_comm or self.forward_only:
+            self.flush()
+
+    def schedule_f(self, scheduled_node):
+        if core.parallel_state.is_pipeline_first_stage():
+            input_tensor = [None] * len(self.recv_tensor_shapes)
+        else:
+            input_tensor = self.recv_forward_buffer.pop(0)
+            for h in input_tensor[1]:
+                for hh in h:
+                     hh.wait()
+            input_tensor = input_tensor[0]
+        
+        output_tensor, _ = forward_step(
+            self.forward_step_func,
+            self.data_iterator,
+            self.model,
+            self.num_microbatches,
+            input_tensor,
+            self.forward_data_store,
+            self.config,
+            self.collect_non_loss_data,
+            checkpoint_activations_microbatch=None,
+        )
+        if not core.parallel_state.is_pipeline_last_stage():
+            self.send_forward_buffer.append(output_tensor)
+        if not self.forward_only:
+            self.input_tensors.append(input_tensor)
+            self.output_tensors.append(output_tensor)
+            if core.parallel_state.is_pipeline_last_stage():
+                deallocate_output_tensor(output_tensor[0], self.config.deallocate_pipeline_outputs)
+
+    def schedule_b(self, scheduled_node):
+        WeightGradStore.set_combine_bw(scheduled_node.type == 'BW')
+        if not self.forward_only:
+            input_tensor = self.input_tensors.pop(0)
+            output_tensor = self.output_tensors.pop(0)
+
+            if core.parallel_state.is_pipeline_last_stage():
+                # Keep the original behavior when we do a dummy communication
+                output_tensor_grad = [None] * len(self.send_tensor_shapes)
+            else:
+                output_tensor_grad = self.recv_backward_buffer.pop(0)
+                for h in output_tensor_grad[1]:
+                    for hh in h:
+                        hh.wait()
+                output_tensor_grad = output_tensor_grad[0]
+            input_tensor_grad = backward_step(
+                input_tensor, output_tensor, output_tensor_grad, self.model_type,
+                self.config
+            )
+            self.send_backward_buffer.append(input_tensor_grad)
+            WeightGradStore.flush()
+
+    def schedule_w(self, scheduled_node):
+        if not self.forward_only:
+            WeightGradStore.pop()
+
+    def disable_grad_sync(self):
+        """Disable asynchronous grad reductions"""
+        if self.no_sync_context is None:
+            self.no_sync_context = self.no_sync_func()
+            self.no_sync_context.__enter__()
+
+    def enable_grad_sync(self):
+        """Enable asynchronous grad reductions"""
+        if self.no_sync_context is not None:
+            self.no_sync_context.__exit__(None, None, None)
+            self.no_sync_context = None
+
+    def prepare(
+        self,
+        forward_step_func,
+        data_iterator: Union[Iterator, List[Iterator]],
+        model: Union[torch.nn.Module, List[torch.nn.Module]],
+        num_microbatches: int,
+        seq_length: int,
+        micro_batch_size: int,
+        decoder_seq_length: int = None,
+        forward_only: bool = False,
+        collect_non_loss_data: bool = False,
+    ):
+        if isinstance(model, list):
+            assert (
+                len(model) == 1
+            ), "non-interleaved pipeline parallelism does not support model chunking"
+            model = model[0]
+        if isinstance(data_iterator, list):
+            assert (
+                len(data_iterator) == 1
+            ), "non-pipeline-parallel schedule does not support model chunking"
+            data_iterator = data_iterator[0]
+
+        config = get_model_config(model)
+        if config.overlap_p2p_comm:
+            raise ValueError(
+                "Non-interleaved pipeline parallelism does not support overlapping p2p communication"
+            )
+        # Disable async grad reductions
+        no_sync_func = config.no_sync_func
+        if no_sync_func is None:
+            no_sync_func = contextlib.nullcontext
+        self.no_sync_func = no_sync_func
+        self.no_sync_context = None
+
+        # Checkpoint the activations of partial Transformer layers in a number of micro-batches
+        # within the maximum outstanding micro-batch backpropagations.
+        # Micro-batches with the ids less than 'num_microbatches_with_partial_activation_checkpoints'
+        # checkpoint partial Transformer layers (or skip checkpointing) and
+        # the rest of micro-batches within a window of micro-batches checkpoint
+        # all Transformer layers. The window of micro-batches is set by the maximum
+        # outstanding backpropagations and becomes smaller at later pipeline stages.
+        # Please refer the appendix C in https://arxiv.org/pdf/2205.05198.pdf
+        assert config.num_microbatches_with_partial_activation_checkpoints is None
+
+        model_type = get_model_type(model)
+        encoder_decoder_xattn = get_model_xattn(model)
+
+        rank = parallel_state.get_pipeline_model_parallel_rank()
+        recv_tensor_shapes = get_tensor_shapes(
+            rank=rank - 1,
+            model_type=model_type,
+            seq_length=seq_length,
+            micro_batch_size=micro_batch_size,
+            decoder_seq_length=decoder_seq_length,
+            config=config,
+            encoder_decoder_xattn=encoder_decoder_xattn,
+
+        )
+        send_tensor_shapes = get_tensor_shapes(
+            rank=rank,
+            model_type=model_type,
+            seq_length=seq_length,
+            micro_batch_size=micro_batch_size,
+            decoder_seq_length=decoder_seq_length,
+            config=config,
+            encoder_decoder_xattn=encoder_decoder_xattn,
+        )
+        
+        self.config = config
+        self.model_type = model_type
+        self.recv_tensor_shapes = recv_tensor_shapes
+        self.send_tensor_shapes = send_tensor_shapes
+        self.forward_step_func = forward_step_func
+        self.data_iterator = data_iterator
+        self.model = model
+        self.num_microbatches = num_microbatches
+        self.collect_non_loss_data = collect_non_loss_data
+        self.forward_only = forward_only
+        self._reset()
+        self.it = 0
+
+
+
+    def run(self):
+        # print('-----run:--')
+        schedules = self.get_schedules()
+        self.disable_grad_sync()
+        for it in range(len(schedules)):
+            scheduled_node = schedules[it]
+            # print('----scheduled_node.type:', scheduled_node.type)
+            if scheduled_node.type in AUTO_SCHEDULE_COMMUNICATION_TYPES:
+                next_is_comm = it + 1 < len(schedules) and schedules[it + 1].type in AUTO_SCHEDULE_COMMUNICATION_TYPES
+                next_compute = list(filter(lambda x: x.type in ['F', 'B', 'W'], schedules[it + 1:]))
+                next_compute = next_compute[0] if len(next_compute) > 0 else None
+                self.add_communication(scheduled_node, next_is_comm, next_compute)
+            elif scheduled_node.type == 'F':
+                self.schedule_f(scheduled_node)
+            elif scheduled_node.type in {'B', 'BW'}:
+                self.schedule_b(scheduled_node)
+            elif scheduled_node.type == 'W':
+                self.schedule_w(scheduled_node)
+            else:
+                raise ValueError(f"Unknown node type {scheduled_node.type}")
+
+        for h in self.send_handles:
+            for hh in h:
+                for hhh in hh:
+                    hhh.wait()
+
+        if not self.forward_only:
+            # Launch any remaining grad reductions
+            if self.no_sync_context is not None:
+                self.enable_grad_sync()
+
+            if self.config.finalize_model_grads_func is not None:
+                # Finalize model grads (perform full grad all-reduce / reduce-scatter for
+                # data parallelism, layernorm all-reduce for sequence parallelism).
+                self.config.finalize_model_grads_func([self.model])
+
+        return self.forward_data_store
+
+    def __call__(self, *args, **kwargs):
+        self.prepare(*args, **kwargs)
+        return self.run()
+
+zb_scheduler = ZeroBubbleScheduler()
+
+def bootstrap_p2p_communication(config):
+
+    if parallel_state.get_pipeline_model_parallel_world_size() > 1:
+        nccl_init_tensor = [torch.Tensor([torch.distributed.get_rank() + 100]).cuda() ]
+        shape = [(1,)]
+        if not parallel_state.is_pipeline_first_stage(ignore_virtual=True):
+            recv_forward(shape, config)
+        if not parallel_state.is_pipeline_last_stage(ignore_virtual=True):
+            send_forward(nccl_init_tensor, shape, config)
+            recv_backward(shape, config)
+        if not parallel_state.is_pipeline_first_stage(ignore_virtual=True):
+            send_backward(nccl_init_tensor, shape, config)
+            exit()
+        torch.distributed.barrier()
+
+def get_zero_bubble_forward_backward_func():
+    pipeline_model_parallel_size = parallel_state.get_pipeline_model_parallel_world_size()
+    assert (pipeline_model_parallel_size > 1), "zero-bubble must be used with pipelined parallelism"
+    return zb_scheduler
diff --git a/megatron-lm-musa-patch/musa_patch/zbb_light/zbpp_light.py b/megatron-lm-musa-patch/musa_patch/zbb_light/zbpp_light.py
new file mode 100644
index 000000000..54e8a95fd
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/zbb_light/zbpp_light.py
@@ -0,0 +1,126 @@
+import os, sys
+from typing import Optional, Tuple, Union, List
+import torch
+def wrap_w_funcs(original_func):
+    from .weight_grad_store import WeightGradStore
+    def wrapped_func(total_input, grad_output, weight):
+        from megatron.training import get_args
+        if os.getenv("ENABLE_ZERO_BUBBLE", "0") == "1":
+            WeightGradStore.put((total_input, grad_output, weight), original_func)
+        else:
+            original_func(total_input, grad_output, weight)
+    return wrapped_func
+
+def wrap_w_funcs_gemm(original_func):
+    def wrapped_func(
+        A: torch.Tensor,
+        B: torch.Tensor,
+        dtype: torch.dtype,
+        workspace: torch.Tensor,
+        layout: str = "TN",
+        **kwargs
+    ) -> Tuple[Union[torch.Tensor, None], ...]:
+
+        import functools
+        from musa_patch.zbb_light.weight_grad_store import WeightGradStore
+        from megatron.training import get_args
+        if layout == "NT" and os.getenv("ENABLE_ZERO_BUBBLE", "0") == "1":
+            WeightGradStore.put(
+                                (A, B, dtype, workspace),
+                                functools.partial(
+                                    original_func,
+                                    layout="NT",
+                                    **kwargs)
+                                )
+            return (None, None, None)
+        else:
+            return original_func(A, B, dtype, workspace, layout=layout, **kwargs)
+
+
+    return wrapped_func
+
+def wrap_w_general_gemm(original_func):
+    def wrapped_func(
+        A: torch.Tensor,
+        B: torch.Tensor,
+        workspace: torch.Tensor,
+        layout: str = "TN",
+        **kwargs
+    ) -> Tuple[Union[torch.Tensor, None], ...]:
+
+        import functools
+        from musa_patch.zbb_light.weight_grad_store import WeightGradStore
+        from megatron.training import get_args
+        if layout == "NT" and os.getenv("ENABLE_ZERO_BUBBLE", "0") == "1":
+            from transformer_engine.pytorch.utils import clear_tensor_data
+            WeightGradStore.put(
+                                (A, B, workspace),
+                                functools.partial(
+                                    original_func,
+                                    layout="NT",
+                                    **kwargs),
+                                clear_tensor_data
+                                )
+            return (None, None, None, None)
+        else:
+            return original_func(A, B, workspace, layout=layout, **kwargs)
+
+
+    return wrapped_func
+
+def wrap_w_general_grouped_gemm(original_func):
+    def wrapped_func(
+        A: List[torch.Tensor],
+        B: List[torch.Tensor],
+        out: List[torch.Tensor],
+        out_dtype: torch.dtype,
+        workspaces: List[torch.Tensor],
+        layout: str = "TN",
+        use_bias: bool = False,
+        **kwargs
+    ) -> Tuple[Union[torch.Tensor, None], ...]:
+
+        import functools
+        from musa_patch.zbb_light.weight_grad_store import WeightGradStore
+        from megatron.training import get_args
+        if layout == "NT" and os.getenv("ENABLE_ZERO_BUBBLE", "0") == "1":
+            from transformer_engine.pytorch.utils import clear_tensor_data
+            WeightGradStore.put(
+                                (A, B, out, out_dtype, workspaces),
+                                functools.partial(
+                                    original_func,
+                                    layout="NT",
+                                    use_bias = False,
+                                    **kwargs),
+                                clear_tensor_data
+                                )
+            assert use_bias== False, "Zero-bubble doesn't support the case where bias is used."
+            return (None, [None] * len(A), None)
+        else:
+            return original_func(A, B, out, out_dtype, workspaces, use_bias = use_bias, layout=layout, **kwargs)
+
+
+    return wrapped_func
+
+    
+def patch_megatron():
+    assert all([not x.startswith('megatron') for x in sys.modules.keys()]), 'Please patch zbpp before importing any megatron modules.'
+    import fused_weight_gradient_mlp_cuda
+    assert hasattr(fused_weight_gradient_mlp_cuda, 'wgrad_gemm_accum_fp32')
+    assert hasattr(fused_weight_gradient_mlp_cuda, 'wgrad_gemm_accum_fp16')
+    fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp32 = wrap_w_funcs(fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp32)
+    fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp16 = wrap_w_funcs(fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp16)
+
+    import transformer_engine.pytorch.cpp_extensions
+    transformer_engine.pytorch.cpp_extensions.gemm = wrap_w_funcs_gemm(transformer_engine.pytorch.cpp_extensions.gemm)
+    transformer_engine.pytorch.cpp_extensions.general_gemm = wrap_w_general_gemm(transformer_engine.pytorch.cpp_extensions.general_gemm)
+    transformer_engine.pytorch.cpp_extensions.general_grouped_gemm = wrap_w_general_grouped_gemm(transformer_engine.pytorch.cpp_extensions.general_grouped_gemm)
+    
+    import megatron.core.pipeline_parallel
+    from .zb_schedule import get_zero_bubble_forward_backward_func
+    assert hasattr(megatron.core.pipeline_parallel.schedules, 'get_forward_backward_func')
+    assert hasattr(megatron.core.pipeline_parallel, 'get_forward_backward_func')
+    megatron.core.pipeline_parallel.schedules.get_forward_backward_func_origin = megatron.core.pipeline_parallel.schedules.get_forward_backward_func
+    megatron.core.pipeline_parallel.get_forward_backward_func_origin = megatron.core.pipeline_parallel.get_forward_backward_func
+    megatron.core.pipeline_parallel.schedules.get_forward_backward_func = get_zero_bubble_forward_backward_func
+    megatron.core.pipeline_parallel.get_forward_backward_func = get_zero_bubble_forward_backward_func
diff --git a/megatron/core/__pycache__/__init__.cpython-310.pyc b/megatron/core/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..579add18f3afa8d2b73df2bc8c16fc5d76ddd85e
GIT binary patch
literal 990
zcmZ8g%Z}496ixcfOq0IniGT&GE@(C^5kg`#5)y-u2C?wQGKr_P#*QP~Wz<h#$2Y)=
zU-Fg}zrc!n-FAkOC@1#058r!FqO<HUf~)#*x%}FUqF=cA_iDiAH9YnkKpB;>j7S{b
zjqq;BrfQK^jJBq1s}AXebxU?tLXxm<%L8>t4#T=5dnzTV%1EaAq^|~KpoV0qMr5SM
zWUMA+qNZf3j>wTZCdVPBD^JuZIgKOUB4>-JOuonDyo|4-*}-q9DtbSQeZOXgNy#O(
zjyVp@$%U}ah|ep>%M0e%hphvc25+kyZg^F2B$Wkfa-~ZycRp`)bt4wDo*z?M=*qFe
zQLdPfmQp`@;3}p#QUgj$ZVMx7Cv*kG5D0x&NzF>SG7^}S(xq0sW(&UA-SYLFHYJAl
zD3zk%l|>VT)~vWiKTHn{6k&L+t#I0`x9PykF12xAxUrifA<6v)8tQx$3T(5kK?(i9
zL3(W<^=3@Iy>ifw0nH=RLTDq50A`Q;W5pND8C}f_ZTS5E*kot+lih0L7;^e-kKCMp
zw#UuO2W>(L{>i>w>;wu0D;rAm&-R@ZN_O873I(EtKK%K<=Wd{oR+|ns+C@kZ4iNAs
zFg=76Aw%dR3=oC@e!8F1h4F@g`KGE@zDp^5fRz4>%u@_P`12`8(Q|A!Uovf2l`n+L
z>y=&Rmy#{63nqE)mco?Sh+F4Z+sQwFca`r>%u$7$Qc(#<>AYV1<Rvt}lKfQ+r`Rb#
Q5+`xGy<fy>)@r7Wzq7qCoB#j-

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/config_logger.cpython-310.pyc b/megatron/core/__pycache__/config_logger.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..efcabe436cdad9727af2f0d0dfec23f659d1e966
GIT binary patch
literal 3702
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
WK7OJO0|GDb{W9A6a;5r4edYh;W`Z36

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/enums.cpython-310.pyc b/megatron/core/__pycache__/enums.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..daba516344c086cac1c3acaab5ac3628dc590de3
GIT binary patch
literal 473
zcmYjOy-ve05Vm8tgo=U$5))$Y0Db|4x=<F{rA%HdD`z!Di5;9|=nQYd#KZ6cUYYs|
zoj9ifde(jZ?$`F&jmIN`Vn1g27w+HDI24Y?6t%ua00Oiik~|VffV~r7hP==>CKI4b
zGT~dyA&V^Hp-?oYsPz?sA(8@#6_P<BIWRc@E{8C{4#RLfcVLR=O=Y&RY@0-25#mi2
zlcSI-Wp!zk3L~XT2W=7giBhkvF8av1u^IO9%6SE*qv7J$r!D+B$KEvFsXi2XvoHB1
z{uB@GV7C;xD~*74-H2Q}udP_E8&S1&E@p*ZEi+vh(d26ns?xsMh`Cv5Y;JF!=A!Jm
z$ecIA*tV>1tBsGZ8=}_n6H>xyTq*7R6Bc+(4EzDHbNydu&(5$aq<8xv+{by<aY|`&
G$$kK7jCX1P

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/fp8_utils.cpython-310.pyc b/megatron/core/__pycache__/fp8_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..dae2945eacba6a40a0c76f8de525bf1da31c6e10
GIT binary patch
literal 3478
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

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/inference_params.cpython-310.pyc b/megatron/core/__pycache__/inference_params.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..bdd90abba933b5b2f5f3e61d0fa0f4670fef2c51
GIT binary patch
literal 3380
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

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/jit.cpython-310.pyc b/megatron/core/__pycache__/jit.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..1e9f444e34466b4f93f61aa84eacd39ce91e1447
GIT binary patch
literal 331
zcmYjNu};G<5Vf78Nvn1OiG?4?KwM=;h^Z4rLfx`NR%~KNP8`_|Qd#*9K7e2H%ET|Q
z&`Sjpce;0ax_7##Gn>r{LCE)=yv7K9&g6d(AoozN1mK8cjjFj5jeAlNj0EbUF0K+m
zc=U$t74SusaC`vm0p;-*?4idThfC#ZZ)_v$UJdn&uuhrbH7$#>*s^V&hU7dA7rkhi
zw`M3BV?{A}rJbE^gs4+KEL>yN=))37{X98gL)w^rR9bu>y9C`CzMrTxy`Wq<PbD*!
z4YXCBj+2vgr&)Vwm=@GaWqCa^>yLE*d-vvHPyam7*#m`B#dr+aZEyIb#T`5fxivsW
L)+B>m;rQnSZ=GAq

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/model_parallel_config.cpython-310.pyc b/megatron/core/__pycache__/model_parallel_config.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..f38eb9fe2e49ddecdabf67d65f9b122c81c16eb4
GIT binary patch
literal 4930
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
Ks>Nbyw(wu#A$~Og

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/num_microbatches_calculator.cpython-310.pyc b/megatron/core/__pycache__/num_microbatches_calculator.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..042c444af5b21d272158388f3e7f168a6dbcc8b1
GIT binary patch
literal 14545
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

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/optimizer_param_scheduler.cpython-310.pyc b/megatron/core/__pycache__/optimizer_param_scheduler.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..952df0a816e3c6f59410f69e5a729b4f217bcc1a
GIT binary patch
literal 7546
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
L1OZ<eDS+`m@psXR

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/package_info.cpython-310.pyc b/megatron/core/__pycache__/package_info.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3ab67361dfdfd41d67d11107d1eeec1295427fa1
GIT binary patch
literal 1026
zcma)4OK%e~5Z+gxN&4bYkU02+RFuR>y&;5J+Ef&^Y1Kd_RzfRxJ;|Ex+AG^>m0S`0
z4k}LkrM)5{^)GNK<F=tafW)qL#{Opf`J0_ljmEr(kNmci{R}<thuhqLW^l8CpZS7@
zd$Gs;*he4mAP&I;9|8#bQ5^B`>l94G3`9KQQ=fxJ-lyQgk7xgm^J&b+JRZ5s3xCy%
z=lD!K&u8NrpNs2!K5p<@yuj=6B5%Y?d?8-ui}4DNdfwX7C2H|5>u9P_r_U<C-MvKd
zUgcGd0tU=#C6iQXsHVHeyW6{)<5dZTYFVZ7Q(-scnc#x8Q&o(&GiyupoKmh*)4mH(
z4p8R6v=nkc-Dx^Bpj(5X;BcKxK~iJcNe*<pK4BRMn+;DKGrhT)?%(QZ?d{WvHtMvE
z+y8e+1IjR9#_uOoWDAdz7GWe8Cz|OI=_^g3-xsL>X$g~@n3UyC8?l-RR|8Rfx0VKT
z3(({QIXNj5hun;(UiG$H>*EiuXfmm~NeY%`Lc%>{P!5}<yLaf!yC%t*91Ph2n)j)j
z<mNXvNjb7grx`|_TYFGV?Qgz0I6}AEb?$KU?bhq6c6iiDjyijt&0eRPIqn?wb`QE$
z^ic^}g#|0C&{$n9C5g$Dwr8M?!1g9pElKV+7%o|QidquM3c&Dkf+HX;OYJpc5L&r|
zpkN|*SUpKHRY2)ZUT0`1l@X|Tlnix_7*ca}E_22BEwYFRm{g0>{*jW46r^z+$ao5)
zbEP@*fA{oboXl(UE2i!$%7w8sV+y-LabRdUG#TB=*`S9_18Os&IaZ_X=-<;rC)Ens
sSM73C&Az~14s&?v<8|f<nkbBX_twLQ!Bam9+&Tz?D~I3sAeg@T4V=+T3;+NC

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/packed_seq_params.cpython-310.pyc b/megatron/core/__pycache__/packed_seq_params.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..b0517de144f782607a37750fcccd5333596f2c6d
GIT binary patch
literal 840
zcmYk4&2H2%5XbF&>_;|B5$yxy$R223ph880a-r2qTQ0e{Ry^CRHi;A4Sy8U#HFyAC
z$yZLi0w>1a1>(q~-`_JCd+d?RWkPUN-*2i(K*&!g#v?*;jZ<Hu5k%0MG_;`9aZm?M
zScH@S{YXS8qHjb*&%rY-A`x%MYVr&JAuDR<f*W4eTx%4QduX*(rSpwPh~gTj-l73g
zP(g~|GwxV~A}At=VIsmS+_jj(3_0>V_Z)jpJWo6?JWoBRo@btyp68D7go!;{^KuVj
z1O1vS-srC~$#8T|fB~g5BeVMt@1<EQDTdO#GX`3-lWoRZk!=SJB2%)1Y!9l1T4!6S
zGE;$1^I$6RkiG8w9;-}4KR{c8i)py=A$K<E_Xl=dv1vIljH>a9SZ|jjwLjSNk?dK=
zg#ckMMvIu|w3;^j%PEn|GgAA*>V=&#)?$5(*@UqM>#7~6jP(PrPo61bLY9oF7~jK&
z+9-R*7;jr?xT{~IYl1H29!^c2nK?6e#x<2%p!q@6E62|KW_cwW$i+^Zyy8;vHh<ii
zyc=|t-_-nZQ}P;eQ|*+%LX>&RZ{d*}CEGWjZu92Ec_|g-$2)a3x=?(%%kD|JZgnTo
zZo7m;K^mv@@Ar~=|J^FKi+>FXT4CE08yjrN>R5}*^8eIFI(I>{tK(h0rKq&47IOzd
HctQUF(!Sv;

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/parallel_state.cpython-310.pyc b/megatron/core/__pycache__/parallel_state.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ad4d5377309f3aff28203a34477bed58f51be86a
GIT binary patch
literal 52517
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%0AEU5SsIR{(>sk9U%;*}KCvUUrS^
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
Qk8xkl^H@9n=eK44e}$C?9RL6T

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/rerun_state_machine.cpython-310.pyc b/megatron/core/__pycache__/rerun_state_machine.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..d65497d2090324001b35383af75c286337509fb4
GIT binary patch
literal 41142
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
SzFfRgESB@do^oM--~Ryz#F>%+

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/timers.cpython-310.pyc b/megatron/core/__pycache__/timers.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..b2f5667fe7ce48418bb4f1ad3bfa242e41c302d4
GIT binary patch
literal 13313
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
UpGeOlSI6H)Yw;V4Pc3=>1BihJY5)KL

literal 0
HcmV?d00001

diff --git a/megatron/core/__pycache__/utils.cpython-310.pyc b/megatron/core/__pycache__/utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..f34187d9a7f37528341a24d5e2a7d984cb4402cc
GIT binary patch
literal 45616
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

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/__pycache__/__init__.cpython-310.pyc b/megatron/core/datasets/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..e3df1529f4f6d3171417222905dcbce68b31555e
GIT binary patch
literal 188
zcmd1j<>g`kg7mp=86f&Gh(HF6K#l_t7qb9~6oz01O-8?!3`HPe1o10gKO;XkRX-)O
zxI{lAF~2A=Pd`1gM8BZ4I78npCow%ZIWZ?yza%5GC?&oiv8bd{-#0Zqv7{(JPuIs+
zKNrf@PtGp_8j@I&Se#l?tREkrnU`4-AFo$Xd5gm)H$SB`C)EyQaWNB+U||3N!Z|RC

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/__pycache__/blended_dataset.cpython-310.pyc b/megatron/core/datasets/__pycache__/blended_dataset.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..df51a09be784ac50edd614e897395bed3b27e2ef
GIT binary patch
literal 6460
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
NRt;^kV8=RZ{}p?PoFf1L

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/__pycache__/blended_megatron_dataset_builder.cpython-310.pyc b/megatron/core/datasets/__pycache__/blended_megatron_dataset_builder.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..9b1243dc5d3fed8a9f037c758a88e74b233a9770
GIT binary patch
literal 16353
zcmdU0Ta4V+c_uj=4(GD7vlrcEn{jMwr&;aFagmGfwqzwvW!bS5s~%e!bBEkrj%J3d
zLylHEolRUzshtAO1?WS8z^RnJ)IeGUXwk<4ed<GBix%KhfIbvKgEl|{6tNU-zyCiZ
z=e8>=mxp$C=L~sx&VT-M&VT+p{i&&ff=}l!Pp|*Dt|<RbH^ZMIZl1+Am{k?UQ5?0U
z)a0*PQ*p1gw05SJQK>G|(%acuwr$jmcCMCdn>DkYujSi?TA^L66}gStD%DC1XR0=Z
zU%gdsPuHgTS+-Sa&(vo4+Gx$T=W289`Pw|+=UV&P`)m8#2WkiS-fSIgAF3VV>wN2Q
z`$+AGs<_IHqwak-)!O~;eC+|Z=uW#2tZIjpnuTl2eZZY_r<$K=KG^)^s*c)+zMwb-
zr+8g)itfYLGPOtYC1=i=a!vQxA;l@<cLBfC?lGr=YrZ?AteVb@GkZN-t2*jAr8@r;
zTCKBHHJUxYE?nDr#rIn;Ty-1W&==KQlzFbR6`3dPR?A*#xsmx|=nB5l&v-!?nJ;gI
zp5L)sk$!$_!;P|E>EIU7%Fnmlj^jF~?9dL}5H&~RnwQ))I~0B=esa?9ta@uzEt)>#
zZ=P|lxUKj>G(FZ5ZL;S!T3#6CJHBY!EwASS?!uZI)~|RX?AopRhPUCiypCIM`;LoS
zTL5!h2)lC$ZKqrQT0QVOYb}?n8Z`OgPZ>AQ;v4877gr$?scDW{%Q%{=yICw}#x>j=
zes$M$vTh#BX*jv-dadA?cv5srhZHQb=H#6MYNy6(i%to(Wo(k+PV*)iZiP3=kZ^HL
za0t>2LE;UoI5X%qo1b-#ICDf6Lp>9G=H0n?EMSRV1!teLAKN_d?gQ@of&GC)ifa-%
zG49m<fO`;qig<d!Jw#8q-$Cclb^V%JJM0_=fgFwQ+kNAn?|Ll<#PB^$QQ~W>(XxZU
zTJ?n$uDjMK30QW=vBtJkc5s72!NTV`u@*eeS9I5C1=a!))f;1-E><76&I7z0Ec7j}
z6NGjr^z6`GwA$SuM9sP@ywF+|etUdOITno&fPgRt5%L=e9lzmq!i&iWZLj0CyKO7<
zL%U^ly6qKLSpKRN*zJuLx?*fc*qe(MCVbZKVDt?%2#7`pqj*7m1xppy{SMQdwUC@9
z%;Pz$5g#pUbKPsKTfz;yq7zu>Mc1{wRbEF&o*^q(_q#2}T5&A~X!)IVv1mH9<c+Qn
zZYQ*e-g&`K+pWO0d^{7IUf?cSFNQ;Kl9jbi`ogu6)8Ykf%igq6<1M*MBV(+!{1q$(
zfnT&*K9IN8gx}qWYiNt(qbN~m+gsQS5JcPZ!XTcVb;WLV0XT)+U>;yC>`rJghln>_
zHuYDUZX=A>Ob!rO$vQQ_$A~L2{3ruLin6@dQDuBHB14Yd$PRG<k|=q6PZA>l`&RmD
zU#Tm74W-)8pw#+0%1o$-+0ba_9JQ}D&F?{)^p&QHU$kjvzNdU(T!Unx>t;T%!@?=$
z;uG6hYSYg)i#Ui%SJ^iBIb=##5l{2=lmqV0&vKo8^68+x_~PY<N9xkHeM7v}&joLN
zNpZ4hUj`n=2bpW?JL=_!!|7(_#>`Dcyu(+sH<fKOoV%uM=liCUyQGQh{XG2!J^T_T
z@AZ`%+D#?+6F@TwhNGMVPJ?eXf3}zBa}RcE_2wkm2iB$+uFI44RIkJ&C|CHYpI{-C
z-lu3I>ez-3&WrWb)7GZzt*wVa9ponKR&5U_pLobeh6F0O=jrjilSf@17<pbc*WHda
zM55MH)(J-8iX>3Fug;4(AR^|e*hj^FDrQhb2E@afE213zVp@^@;@Q(LM`pd=vD<FF
z9_ekraY>Mnh_Xz?(ew(*xjN2$ozH!g<%&qB9#IxTw6Pu)9k3YTt#m`ziOQG<_zKt+
z2{0!zNq*6R5*5I$79u@xTdTVv2`XmsR~lZ!s4~8SQEqL80Y<qi8+`GhA{GJrqs`@Y
zzwIs)Hp}a_k3pB$yl{D=8>}y%ZrN++aGu@eaNQG_kuAcl<%B^TKl9RZI~Lr_4KR!4
z_^<`bJYUzTCy(p#6Xtpl5K9|SAnH8jdY#Y+PNOh#hDv{$rm4DmSk-@J8m3xNOX{pT
zi@N=&)iiylr0I9Gw+ng!Z4asjYEXMezpZC<Rp047vOCL&<<U|yY-C6>X%HnP9}^eT
z`0_D-o{qV4L&3qoVa7rI^KGpU$=_AQ_d~U>T~i(Hl8$TChM8-c_<mn&>cK-{*2y^f
zbufpfaZ0(SUQ@;A!dz&E`DVe%hDGYxEYVR!izz;oxev0$7CQ53J9F1|dD-qV^_&JK
zO7JFK;ah3WIFQyju5W%xc}ERrn{!l4%HaFjo7#3}TMy^MePC7kHH?qhoIq_BUt>E*
zvuPTA;}Edz=PoJYgK)o7LY>5Js-FY4Wx^<F72}^p{q%5e+*dv*GJ|OYOHwCi>}@P7
zFTVxBma=3f+`zIMpdE)821F;xs}12_@t`JJOhpSpbs!YZuX};jcEfewv2ZnXgpNz$
zM8bxpJp>|2Q9$uKJSv^0U`W1@wvY&i7!yek=+dw|kVj%`5;w`WmaKE#jg8ip72h(V
z#8k$l*AfG!d695-c2Rzo!P1iRbSe?)bfCfQNKc{lfM(&QfYT{MmhFnhfbIO6<EBHz
ztHI+3E-3&ZmMY;^7&m~%(6L-Fb!avXsPc=<nq3>Z3U^+#*0C5Zm(gGKTP=SR`<o6x
zU7*yZ_Y03!S$UJIg?%NxDSb+6%yG-{tqwF60+T*j`1EkUbvwXbW83|X<f}wd@eVK2
z<}57@Z9hR>u&dTF;+w~am;ioqU^#e9yH?wCj<?7hN#IJ!hUtw}voc8IdmSR@4PTJ%
z5fgZdKLMu?p)i;g)hw(GV>YoI)a1A&v6{ds7PlSWa<4XAsNQ>{HyCu`vGJvBcUz$c
zjds`d4DPa^vFI6DQx>?t#!~M!slBJN>q>iKVy$EB7$H7fwDz=~!=GerZS2^_*w#YT
zhjd?qLesVd6ap}rE$F+@E^!z_(0xKutn{Q4nHVGGJ!CiRMJk?1bfHm%N1!pW+{3Ex
zK}IhK;fnz!&^jzMKz_pzsq61*5ATUEhj)Xn?`=n73R`H{8yjHbb}0ELtTpT!?e@oS
zhuqtsDo=LWK0WYvJ=xf<xc|ro(F8~^rSvxPbiw)f#olA<eg_<Ya2x*IZK0W>2iv#z
z;tZ(iRcX2oEO;7g)VMzHZw$M5E?y)HxCL>;oX3V*3_fb78z2q)hHEXv26mMU?2#3v
zF<6$QwP)E}7}50Lp-|`>(3jNxKZdS%(I8E)sl2AB%4LmAn-5j;gB>LK9oFrRyGbT{
z1CkEzBrgcyf6|stMCw&mre$#)z@q$<Yi`HAx*?waCJjJ(rS`V27;0gs_nEsZs5F+d
z^dwu-!P84Apx)8f;J{ejqV+i2ZNEZRwBv!rv-FKrOB}=~z1hiUy(PIG7TNEsUE)|g
z1!vI;E_oXp1n~;N_8M#?pU0G^q&8G<_}xwz^z`#MKE3CqPG<RNojN@5U^kf?Fwrks
z?$X-QBCPz&T{nPQ(<`U064o$!#esQf^**%(O#s3e|6N)>81$~QWWCaIp)**k9^?@?
zEEXQVg6e_jK50<YSpkE+5i?b3b_G!er!gvcaPE;ar~xv;0*OaaL>ZfWm~s1nO+9gl
zo*t&+2sP0|IGV&!x<5w6C%BS?bu^U>gdK3N!UkKn$<YaK5DXim+wm~jDDUDP&alvp
zGCgl2D!fRIncY@R@d$x@f<WeCVA1ptRNB|UFf?cosa}-j0mW0)ne3(^ipw(HoJVEw
z3JUXtsm-eewG5-l+|e>*Qk6BBS3AaSEzbs)rr*{~OVd$X*g2e;RW+Dec(PL_0}J0$
z#`qPCs~u2ozW2#{pxTiWM&>guINMTxmLXfJ2{(sW;9qT9?d4%zWyn#28vSPG0?wPR
zgxRfQs<N%AO0N)-V+76=SQXj_uv+@sJFvgDwXbQL>ZXKeivMPKrnGVTI@@QDhk4jJ
z>NZ?57!zZKg+AOKP6lp`SGkRXUyR;|rFMv&IfTJEC4Tl*C+irn;4);tZD%`V`w%SH
zPTNLu?c^Nu{R}y8Zj@kG!GUu#vkk}38b%AJuBr3nP$|o6wzyhwt*HGx964k|{<N=e
z7y1Rh{sF;GpZp-44l8}*TV#!)^>#6w>BFYlE_FW7?G^EFy&}BHgkg?aFqVZ2N~ePL
zo89_H75ocfgu>7q3a=|2xn_fL{w17C#>EH)SgIPvzzk5rT6EZs!|e8j`_b+IEJ7Zw
zU+9-`uiVV_&3^t#<?`Eo6HcJL=l##y`H`nn&QyPjdOG^hT9p%A`ek}XBQy{4{HOb5
z>#E;T#Xt3@hxZvZ%gIg;b{Ms%hW2)<U%r_kI5D=j<sPHem!0y^3S~Pb-q~`x$K|md
zo}wLQjB=9B0ORch>lnkg_t?8i=X2?}f8WbH({lHC=XC7c4DH-^)UCgW_pUO8nLfF9
z82N8Ub`R7Jyepk7cCXUW!b9)iRE_MM-mi@8+HKl3Sm*b_%^@|3-_kli=Sqw39vB5o
zau4<zdGy-kW|r<+7Cu8p+W!^pp;xuY0|}KfHRXZ44b&T#STV6k*n`viLL30c+g;nx
z@#Gx7KPM5h2Kv63--Zj-QLif@pWyFmmo@B&Ho`?oM*;7YJ;@u$J$33S+lv#ZWI6Dm
zCO%EqEUm_*L*YqMsTzKJ<LQ4zo1YWdit<tI?t67t@j9fUq_9z!4D+GNPSF^t$k-6>
zsyD7DiL=0i5DEyP!%FYv-!VdK0E^F$pMgqaNQ-S^dDD#{|1U2u)W8rz;hGvRF)b$M
z^EvvFiyT$PeVb$Qm}mAgbojY}!ca^|-ieWujTL9)0OX1s-pWX=?*{f4)a+#xy{EoH
zkxPWVJVbbo2hf+G#DPu|GndpZPe4VSXhAB)`KtCGfWn{n;%CoHAek(W_yaV&3w81&
z2Gl5CLi63Qe+08+>;>s5;>%RLx<}iG(Ke6^Sl(>`Q{29i0(gzCE~K}74oD^E4S9yf
zejRrcvmDt9QA_*3kzS2LI+@I(dRRsa?nA?<#CAu$jcB%aHM&1OKjWkl>!%!Vi1IJM
zO~Vm$>ECCC)1pzy5zRCgJy55B0Bza8y~kIH>iCI0Mhen!cO0RB8+6T$bULNtBw?Hh
zy6q@WF;&(~qYMI^QQ<X;#>t9(tXBd7a5%4#sMu1K=2*!C1g7*V%mlA3`&4J7dP|Hb
z%DUuWh)j9@p~mK7;*1WmT01-s%wlyF!IoW~gz&bwVKg(omO)fmftnA0ae`VPzDVQd
z<6-JvR7qDZSucZYyr?MmE7<V;Rosx8jm^Q0umEE>JzIPh4}OGi@Lwp*k_nA@7Fssz
z&Im+kcg(l79n&nSCjDvinR(UBRJ2k?(})M?S%Wm}EQK|6gfuEz0qr!>%%O#sNDGJl
zy<auZo^)}YHFu4|BBYzE<}aa*7s^HjW19Gu)l!Ba(6@{LNCEvZ(j6^R$WR~X{#go(
zXgcZsG&()k?;Ot3$Y_m`HH=*5kt;m1t|8EZv1r8MQF~AP7Tj61X+@bNW+pbiK?gbc
zP@J`dFCEF?rzjk7WBjQhrz1dpM!3bvpoZd{I({h$Bg<_vl(0bQ7ptXrl~vU-o&5FE
zwk~sGLW9C96p)c>{d-CiAsJHWo2465h=jKIs*He7uAg&CFcx0#8`~!0p;HL-e7SFi
z(+Go9oGG-Mxq*l&LMhtkq2|Ll$U?n@fdVrlt11j<?k1FQhLaIZZh?SE(xRUwV*|a$
z>Z;Q=MMb4T#y+b!#FltKq}F6h7YY1Y$+=<=Xq?+JaKMb_PmpIMZ7-7?zz34l24V{2
zDU&TM3Qu;{;yeuMNgwH>mt9v|z8xl=<C7IPfG*_u$fMv`3^)uaPLD2~I58B<VQ75d
zC{UVomypi@laZ_oSkjYu7O_tu_3{uzz?ulCP+hPA2hLzw_SP(U=rr?VEH-nIyi=#4
zw2sC)uD~mi?8gW;W8E1$xw>gHaTx?26*0m3rY|nRuQE6&;wqkrWfW&ek`d@|(3gVN
z!9SoNWyMk7SHJzrc6JTv19Vg<%E(sd9EjO~rJKE>gW$6uK;$Y>9FTq;?Pm6-3U61r
zk67i!g>AEUuy5Wla0K!UB_Bg6!d6xKg+pXB=joSwJ$ga8{17ac+}0V`>_yn@TEF-X
zbkptP*NSALUr-#_^twXPP4cHbssw+yiSg*~b+S=WSIv-*t=P7&CQEP{4iZubg+m3Y
zU6DaP-HsC(L3gF?h2kx)gldC0g|Kl`E%8!{EnJT+VPv{-_F7bgjZ<IkBB92O<%A*c
zq5~6>C63;!%_svI2K|qHHj4zGeS9<ZkkjLEO6u!w3uM;B$qh&!FXeOuuEBTlNBot(
z+AU+pgy)4q+Vj%OqLQr8Zaw&m-n}W}lPD(nIRj;U0;xS!ouC3t6LVrMF(-I_T<oR#
zd?QhPdgty*9^4Do1G|BZCpM#gLL`9P4ATEZj*2N1Q3mN)P+LL~WtjsFh=g?<*2bbE
zbf99UB6TA$8M$47c#vRyl8T3@c$kWH6i|NbtC8O5I(AfY+$(UxN&jb*Td{@kTv5$S
zB1mPKJfhzq2y~FepAs0IQ#Y6pc_FXU6CxSWKyiVH<P0vfIj9Y+GC<h>%Fwmjg{*c<
zGs++BKLUYHiU9<%sUFTkK!ackx(Q`q@TcF>OXx#Ng5G=Px7>>Jn6V5%LuCxtqnTi<
z(^yANCMlg9JRe~}l<z{{llTT-#Ee3?_9#0@JVLG)WC=YYGofPkF%37F)+aeluCM$1
zy11Wv<VZ$dhI?mCrMxL}nn5lqP4fo1%9Li|CLC^jU+fz<)$JVEn;Dj<CD_&HDTM(}
zwE^T#I2D%TduR*cbU#Nh35#tw<<e)+6GomD!SpKOOmh~_ts-=bndY3Mzppcsdz_v*
zs=UVdrF8sbJpNQVKK8#~O56768mlo+_~T0~m!!Q(>i`B!<rL2`&#=)R%rI;J5Ogo)
zKZ}`{JZCsS5=&Tip4*5WQ{t+1W;9QBAm}FL|L`tb3#p_V(gSG!DQyBV|4VT?odesw
zL)ndR_IIIdix!0;QXxi?mp)@?q)CvmqbK&3Aoo`$Y9>jZvh%2NalVV-^Ba7?kzT->
z#_p<yw6z8^CSa^z##x+{ycuVQ4zviFy_tqEWX`5cxfqD{F_`1$0a1G7MFaGOb!4Pa
z^w;N{6D#HwJZU;P$4^+xY2~s^ygbfFYGMIb+;#hk=L@8EV37b&=4x^h+a}VzDQ&Vr
zUN!_slC~7*Tt~tjFyQ2bU(bOyMqQ-fP^f3DdNkT5NiaoTM%S2SS9JtKV5)`4SVQcb
zN_Qj5IuuH&?i**kY(AzUUUKhmfuXP=937B`Cu06}o>#)oC4)bJ%|sIS<kRN~z`H1-
zEV58Lj-UXX_#-NwrCI|zGTFcgrG$@tS~O8tElaNc9cn}tip&K3E?u!LIWsX#R3ZW6
zw%j%xFNoAgJ2DQ)i8s+R%B;9+&>Wz%%pz1eI)@-Kq;@gxAbATtKO_M`)0jP2fvx}>
z?d`H!$&_H-k=1yV|BwWip*vWS5EAq!1p_D0(cS;R+AH^-{Efsy?4XEr7~Mf515}a^
z1u`k9^96hZ5_T!ye~z!f`C)A#WCCZm2K(tayl9YpJ@D{;=3B~k7Ow6&D2)2nA{0gg
z3S-Ve&;)@V@aew6;T_{^28VYv@%s!D$|&q8f|n7`FuZ3HXlz9>WN=R1p4Su3NsQ_g
zIXPs8<tZuJ1}9n?0G#kcDb*C7_dAG-#_81q9+#M1acX&-C`6<QTL~#W6#X1ZuucyJ
z2mC41b16-of?tk8n}a;hp_4kvr#aW1U!8b^Gu|g>b8*o+33b+9X}Jl9n`{*0O^)ly
zL>Hb0XLGUZ5SiPYn<ay`VEss)1=pddF`q@Se4a2)gJd=7;*cZXPUoKR^H=T7aSJF3
z#V!(H%CkfIAG}|dola#e=^agy_e+MBi<$iYLxxOv)0x6s3@qR9CQY(+8-9QUV0v$c
zT7bEMuUOq+IOsscmSjgxEcRYoKSc93vi*nNrXXZe=Oc?TNzbu{Kv8`hpl$<U4P@?9
zUkbjze2)EsLtuBy@ksRwNx_rIEvDO=h@8nbI4klk4!^TVgf}tggfh~G96?Iej<mg$
zP`#bgX%uG@uYwE`K%qmxxrx^zNaWHg(-O!W31~qASqQ$^O4ASmnf!^Il;jb0lkaM5
z`CTMG!XY3BAnHa6-W3n2WVCtEtm>gJ6G$MpWA;R@o89^JN%?96F%#rt5Du@paF8Zw
z!j}-Z;tJ7-up91*4Gqg)L3YOOk+o`WTmqBn6XoJ9Wiwik0EYQZz6F^J&tmWgbo*^8
zUZCO{3Zz%~Yvb~Z#OZ&M{36S$a6gO_tqh~3L>^L2+bI~Zcz>zqk(ZD$@yyhEkL^D5
z=P3&Ync~cN#=Xz*7o4vi;oOX<P^TBWx_Eo59+m3#%XsB0&dkr%>yF>3*98eJygD|j
zM@zGk6a@jPp$K{_P%KfALlI4n<t2$P(IayHiub5st%B@Pw&^0BbV2EqD1l}}uOZWv
z1vxXL*-6?KBvnP03R<(Fb!3x~t;Jb9ps+&lRTQQIp<XuNU?yu3SsS;tY~j}ah5c_T
zU)L7MtxI2W|CY7F9qodCD``uXr3TBgU=%*mp4VtA*y==52*ZIh`j()v#6=X*Z2Bgh
zQ%_v=`=tAQECeAa+l2j7BRT>tCw*y#0nH{<ZjeI?Rv4@(Ehtce`n$@zDqe}xoXmCD
zM(mG8G6qZWTcDp)E>0vu5v1!5=NCcb#<_gsl7%&}^Z>_170Z38u<rUw+2mwnyCL;%
zQUa6p#)+lJ7OfLYpS?I>e7mm6-K>rwdqei+W6B1{D84D<A{NaP8;mN0nAQU07aKOh
zZGq%)>_Pnq!-QM3NbXfIg*4fU6aYF>(g(>NQKXskUCi$nM@HoUH(Xi`$RT?z&QG3j
zo3gib;H{Om!@$fMnsDr_<pIaHPC97m4LO>xAZj0RT7e!EIw|b$v~a;rtI{_?LU8gU
zPY*G4^F57-XwMirokQ+V?m6y1PeI-gP7C_>)%V~gxCzhYdw_OCIiS$p0G@P6Ip|x>
zNb5p}&{&7F$n{#)I3`>iq6pN{>4*$@gyi|=Q+*cIPr}6Kq(DQ_v<G*Lo!-+Q6XF{<
z_y(@Bp=dk9ud18?fDknw%)cRQktc#5>3yP+pP-RTxWLHS(rpR_Vf4p-gVC`N&jL=A
z^MXdpha6hPT~!x<jUPc{ODx!j%{=YzsE(Il1y{!ikpeE}XAm398n<*)P(3gvHdOsR
znTq!#Tt~A|MPe;`DRJJSJ60ElCA3n>Oqq={M;&+!iS;uNW?WhPMUNy7$t8MgX(=ZE
zU}<GEj>sX-=rbSFIC-2{r*Ih3%gZcIqGQR^v5}JMq?4cxk>1Ut$+NL8-4L(9NfVjk
z!qHf}#1C92;p6gaW6|6wC<$SPI_D8eJ;U#{$^1sneEciI;X`_y<))END--2n9x8rF
zj|};ir4$z|16hL7#_cA;BJ)WpoS&vM%toz=Flb4A2)<4HY9*Mo(u^%Yq?Mo}z-_)$
X$tqu$f7-Opa*bpg4BVZ9R=)GUC_BpP

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/__pycache__/blended_megatron_dataset_config.cpython-310.pyc b/megatron/core/datasets/__pycache__/blended_megatron_dataset_config.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..79a3e09790c3f3e4f6427fd7b8d4f29551e10185
GIT binary patch
literal 5150
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

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/__pycache__/gpt_dataset.cpython-310.pyc b/megatron/core/datasets/__pycache__/gpt_dataset.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..6246bac7c64af8dcd665a3fbf6991337c09dc53d
GIT binary patch
literal 19499
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
RKB0CB2=gD6-kAUL{{zN?w$uOs

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/__pycache__/helpers.cpython-310.pyc b/megatron/core/datasets/__pycache__/helpers.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..4152638c7c9b0765277b54414bc94db01a29a1ad
GIT binary patch
literal 1704
zcmb7EOK;pZ5GE;UrCrw#v}u4o&=T#%8^gPBQuGi6McV`gTGTz%3l!LkLNB>1*^;P`
z6uK^yOVV?HgMI8@(zU1jf+Fd2sE2oLI0Z_9!`IAkG~YLro0|g!?U%Pcjt&EaezS}9
zwhfEVq3a0<jyO)x)Q%*<6FWKyPRW#{&eXxE@Ah53#XW&eT;8jtFFYPV??WGm9^VkX
z`4)eJZ~p8}eU6XNaQg*#M&Au_h3^bWb^Ex86CP@o=7|Vnz6|5c+`D`8{->WzDo@8h
z30>`QIV)0;8PMnP40g7)cv6ULCc;Ey3lmj?tVlzV%UJ~KMxKgHhq+MAR`o7dG7l4`
zO_(!fVwQxRgX%rTc_@}fv9PuSd3iYVZTxNP!w6|a525R4APg$;3Fi16RHAcqfu576
ze(4)>?ih07Uf>gSiq(PfO3*7w>6C8il|A(VCmC2h_n!u3aNfIs#GiU<ALihr^iQ!K
ze}kUkGB`rUzh?Vj-4+t;FytWgrA;d}k)U_?AJHbg6jCLYw9s+3sE=|;fl$dAHD|d1
zZ2=%K1G9&Fdvso8GZV{<&Xr7QBoa{7qgkF01{B&CYN7AfGrOump}Uar{A`qQrW89H
z-lr3|{{Zf<*Hq4FhZ=1#(v2_cp*!jD{6EfG3ap%UNVZg<yFjWoobITNU}dvn%ep%3
z9t&kdZ<w^wzs{(etr{%~xoaG(>|f76x_c~T0`dM32|!R$BdJVdQ)6ZsOIya$%b$s}
z`mn+I5*3@*26G+B0{8$v#4^@qL?4McD-xrv?};kJXcgFhkpHI0>H=;Vrs<EdiB@4X
zC|`-^aTjxk%^p2?{MvZF7p73z8quyWtRdKSg4fq64AuC;ieXSWDO<wB5wToUUhSds
z;y9a280>4KpkNSa#hG%gMPGR^sGb$J+?B0yWs6<e=TmKfm~O4TS=Rqxwf+^UTcGml
z>v1GgG3Jo*am1uz+4!r3Eska^5#vL#U`EMo|J%cH+Rn!_sX(6@riIbtuITc!YUlbp
zX=BhM5Vt;j6O$|70J|^W@4Fl1_w{|d>-N=cFd34`WEd#>*iS#|?jG5@N8R0{_U;f0
zzD`e_naXc#yK*3Lm1}ugd#wL=O}q`RtKdN@d69_EEDU-VL_h*}2a`Urv0(C#OUU2E
UA%78<{7F3W2kDVl#NT@PFQ0_)g8%>k

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/__pycache__/indexed_dataset.cpython-310.pyc b/megatron/core/datasets/__pycache__/indexed_dataset.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..c72d66dee9764864f77f4c3b4e636043877b22f0
GIT binary patch
literal 27018
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%0DAy{!a$qVUR^dVTJG&PsJ>7sCcwjEA%;oVNN?n
z&^$IBE2XPucwxZ8h!<YL3&0586zWux0<TCmditDP?~7}gNeAP8oRC@N<+kD}y8G9;
zp12QTd?IACP7&(E3T7=Ct<BM5E9O@8-A0%$F6?7Q@Z*l7>O!c_Zz95rTByKJ_MMKK
z^OO&|?k|YP0C!>mW&@@cc1+~MKS2<15pOVJY!-2i4iK{#3sjB{#}fFPOKCyS0ZkbA
z4$Kw$=c+jFB~B(NGkXUvB{<fVkB@aZxSasUy4KRix|oKWLVqc{U9*#%M!|2fX?GDE
z+HWQ*MB)gy0smn36WCqG9InYJv)Y`pL;o&PRGuJZ0dra1|HX`i?5g8t<oa>b$dx`^
zfN^nfZ~F#07kEE-MCS1khHtQ@Xi2Ei4YiH&Em0y|OZOijgs@YK#VW2BnFED35mxh6
z?bzLM?MY0lliJ=>sF?v6G&cem(q}AL<Yk1tL9pT7RZBMkHbB+@5Ik~^`JKEhtClP)
zBtk6f(af?cZNs(Xv?}cua?{?V=*D>&;k`*Z4XtkGm@|oMn$c8?E3K#%gr7srl4({B
zrM&A+(NQ6xvScEKaLMA+HBTWPn$ksYd=adT2r>Kw*MPgMY{Da!^S%qAj4J?`h=1fT
zrjpF|OqIxl-ap2YR~XDNIKg0(0a-L$MMFL%G!>(wj4gl4T=qu^a(~X)|7P%g26q{Z
zP^`p+<@+DV;D6EJKaL0mDs#pVk;#fhCkRLfX7qXEE)LD#r4UtS4pPfYi^j?xk1Z%;
zIQicRd`m?344z1t>S%k_aiCv~H7e8BZ=}Rds|d0XvC9rmSD4V+!HN{!B|`U=hy@q}
zn}I<$7@4luG&Qu*)XA)I`=0>-e21g6N+R6vI&u%VkM0b=GHt{n8WCXsuMRl*s;D<H
zUPy2XJg}kDfFh$M{`xRR>%lc6CpwJU6W(<sDpkfCj6KKT7J@L}TyJ@t7Y|inJ#!(H
zd6WRck{q6arp1?APr?$&q!-A$vh2}@>Z>ahO~hfJNkMd(P0DVlF!oipxb(c-?haSY
zb97A-Ypr5bs1gp3#Q#wS{*w#OU5&&$f0c-s|0|3q>W(=!H_xETU_lzr)|3kB-mDUo
zug}TVS!(xQW1SB%SYkyp^28TJbCt<oWbh>hI}E;p0GH0Q2cf|pg~c<<p-vPIYCFl!
z7aGI4pSE#B>wRDeakKsVF;I27(JIo`!GBdSN$TGrTy()0_pSv|?vP$7mZ2j7srW#(
YSG`_ct{$x(UU?z+Gu7?ImscwP2Xo*CWdHyG

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/__pycache__/megatron_dataset.cpython-310.pyc b/megatron/core/datasets/__pycache__/megatron_dataset.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..c7b10c1e93a15a7f52b6537efec14e14fe724292
GIT binary patch
literal 5382
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
Y2~5taR@GdCl!TaAYw8rGX<aM*4?4>e>;M1&

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/__pycache__/megatron_tokenizer.cpython-310.pyc b/megatron/core/datasets/__pycache__/megatron_tokenizer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ced168fa450b89f480ce40e4a90cf1e17d67850c
GIT binary patch
literal 4981
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
V?-zK^3X1^p>NqG?RP)-j{tw<y52gSB

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/__pycache__/utils.cpython-310.pyc b/megatron/core/datasets/__pycache__/utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ff26cccf3e00d0da714441d70b8a6e15acae3c6d
GIT binary patch
literal 3196
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

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/__pycache__/utils_s3.cpython-310.pyc b/megatron/core/datasets/__pycache__/utils_s3.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..7068a003ca954712c9332945dff267949abd702c
GIT binary patch
literal 5570
zcmcIo&2JmW72hvXD~gh3Nw#A(O}9ath_y_{QPLJ}klJzV!fh=ZmJ7EGip^?gNUpTp
zWoCwvDNsd`q{sBuyM&x_=^r$QUJ4Y*wYdcd(%+jUMe4(83$!ckaCT;P-uLgl*?fM!
zV&Td@yVvQgSk~X^Vfym%a0|EmCmLokJGGkh>!fzqX*ylE>2|%Q*DW<m-Ey;R7i(sk
zGy7Gu+Hd;iceYz;R&493mCbq<pBr4WE&BVNmDzh1bDPy)Sj=OkPb^mA-p6ip9?xYq
zgXbAu!t(<2`2{x17h4{yu(?mX=Ec!SnP1=+TFzAqGgUT^nI*QsC+o}X0$arBvKhUI
zU6yDkX19E{%vLb7!lp;d>=L_-(M!zUvT9epfZWz*t)$)C*+6^mCb80$&8W-SlYTGd
z+J7W+mB)FiOJ-odBsXq08Zo^#eYtqJg<HOYhFeXWSxx6RP-xTT9xpNHEmA|7LtN&e
zUjp&6_O~|f<XJ0eM}2Hibc4MP&jQuq0gF@=tkt)ZtQNGAlm}79%tVqg{tPn-dp4dC
zJV>%&Yok&La6NhW?!%kGlMa_W=tTnJC@y3WVO5LonSJ6Y3$}R>=b6mY1f)0%_7c^Z
zUN3t*PFhJEs5}4{f#4D2!cd6QNJ=h)>%py^-KZO-{etpsr9`sbS6tpK28f+rq&lI>
zL+~5MQ4G=6q!Km5VUXr=lm;vjJXX0FkoaJ85C2J;1`=cZe4!`%gSRm5^t0VC+a7>)
zu$E*B+uv`QH?w|sn~NZC1;uP4Ay6JjaGkExij2rf4(&#e@q<2>ibUSp2qG15FdTrz
zlr|u<yiaO)KY&g<IU}uyTO02r*<+)eb?~3y1<;UbzPAn?$59_<Fx!kb??f;LZ2AmJ
zk8@BXi}t_(&(xTVO!oP>PkaX=%GziP{y3}u8}ZUewE0B5JWB`ILU8<aq7R`{Xn;f>
zZAdzS#9+7&b|8PW3q?jSPr*^rHLt{Z7hwTzNE2gmjK@NSEFX(+ybG4y4U~wIEXmsS
z;3<C<WLtUPcri5l`kOxveiYnz?e#atKWj;y*VoO&gXEnW7?r_ZE_TT`IV`XSmG|2n
zGMAAd19Ls_t2)@O+lStHtCb7VC!|q*A`D?_>w(PaCB|D(KQ+cpRNXkTzIetv6NK=h
zUOeqpn>AniVVEJB!cbSju$!}fO8sgWe$bE7(acO3vOLDH3n$kX!Z6CfXQUE@S{RC1
z?5<rf__-x6qHmh7!bT_W@&-$!YILF;wr;c&)#&wQr*SWh+FS5I-cX%Hun-Zg28{>2
z9VwA#*MI$>(H-?0F`}hGxFNZcjlN1!8On`%Zy;t!DBO}DzhZf|UtM&}XpDgq7p06_
zxaFVGjIoT6j5*w6z%%CIF0nEoc82)?Q(ziK#<RuDEURFqJQ)S{dE7TpUS@NwirLxY
z*?HP=YK6}h*afVpuqC$0E}}Qb%D~KJgPCc9K-s?mfD3vfd>+Le#i`r~VzUA<2!BZt
z*4qi=h<;suryuWfrQKigf%fkKRLN+%EV$~6Y%}&C@%W;?jr$JnFX@3<Th{0HrZHH}
z)1KsMOCYOS;u1BNsX4Z&Si+;8XZc>1<`D}Cz<-FLFC8?VwSO7VZ<wr~Sn^yB#0#|j
zRceSv%@eECH$*2qoFYGm95yEYDlLBz&Hl<U>8a`1#nkws{#f+Wgx!Mh^J#VfgkiqD
z13a%`pVKs_rgiBtVcLHy^Mv&GX#Z0(SK3^S$X`1qzkDq6WHu%V#~1aVC$U{fe2Pvf
zPIJkx<Gn({g<}$CqUMMznA@yX1;vw?qozvDJT(i{e21FvQbP(C<Qd{6Y65D$PtAm=
z>5)^3Wi&72mb8hFP+oObotK=Kodw6tX^$YykUt|M5xPU~5>rF#&{Fmh6+-s@UvA5o
z3k9^M6byJ5L1Z#F<+7>T;<jibw^LfDizrQJb9yck^J5cIQ%kq=JVnYEeUvIiCN(dQ
zcV7?gMJW<xPNeq|$qkK~qbpJY@FW!{dUk6geDwJ4z5Bnd*@AR1r63b<m4pBf5UDz^
zk(i{@%B-NsJE04T=MrwCiyk@(+W6R(<zHGK+0cuv9A+Omhrqle`@kOB%)M$IILaH^
zAKT2^^~CGUIV@ouxb-KLr&#4GXXso(@qEP^y11=fN7l`L&d_Z+Tc`#P+~KHSEARjH
zQ6#8_qEy;WK13OUio@unfFnv?0Cd4+Pv#k;$87^&rhwb!gZilE`c{jK_I!>}Oi}wD
z5*1RU62HG0+z!?XBI^Mt)R07x?~6=nePuTU1<4oGY}U#~t$IfAUK+u7et=P3lD#wm
zzyevdx09oG^^Bo(iPDzT<zjd3V)xU=o5vE#$M$;*+etENb#}@2?W(<GzhL{W_l<80
zvaK!`C?AuJ#~0a@T-(@{p#!_ZVh7It!qD2Whp_5Z3oR_h+)teY_o>DFEda7|cHF@Y
z+dA-UYkz6z?I6oxO$m2-*A=e}y^rjtIMA?}1Md$Wy;Jn|aKNd}MtIXY8$e{)0tu;-
zJZoqE4Eg?BqN@-vSQ|sjsAPsoi<wCYY}{t5sy=D;2;p=h66r`Ic%46sdCwFk^&%PF
z6(Sc!UCyZs|3l(Lh`#aK8_)5evtd1wcv`sggWEWhSc8>-mUaAy1{z&5TxjnOXloag
zH=oo>#^eSab!Eb~o}1!Z`xGjuvN)FCpzR1D^n&p!Hg+rV6B@Mn8Rsk54hyy)VUeWd
z>MuBOJI`DEddc?e$~T_l|Iztc+@wurMo6P8<`830=R_VQZ#+gB@@EAfJOoM@w6J#E
zq04OMeCpU%fh-3eu%|Rcl?5*~9*DIrj@{<Gxc`rLN9Ba^rEl{rDu0h*r8r`lBcvQi
z#k&S&&I6DC+~G!|Ph&rPPUd|P)0uOe1t>>Mlrz1$V2a_am1L$kF5aRSp44pZ8#{#g
z?!-xeINHf&VbvL&7)|ZwcX3j|gDgCRa_ZRpKSN)T+QrYQ`6)G%glh7|0&4ZC3ayPL
zrb4b(7Jxacwz!RvGYCW3!ywGx&?#(sWQirybB~ZGh7S7PVd==aY#q3n2jmCxAVZW7
zXG})%l)p23SQ#Sw%4>v5yN<Y~=7z98@Cp_`-t|q>s~({|nR@3gc@EyWd+s|A&wb~;
zbJy~7*LEpyF&CAA7aaoI{`Zb|KSO;%=bhqv0mErj!4=x;I7Sv0p@c_H48Iz=I*R?6
zb7l||RY4oc6O~CW#$P4K>+uNzKgAIjFL!bJ?Do6C<RgID#C*IM6Pk{u@qRd{7GFB(
zL_u8ONVaPZ$!6;)j=40CG&kM|=hTAJb2Ib*Gh|GZXh&{r*5-8yA5G$po}1FHUO-_4
zRj4FN@nL~!p9*1;NqcdhMY_uPhe^!C80T}POWXMBwNZfR+wk!s=E?;&nwZct+mR3n
z7YMfFIMbflaRi5^KMSb~R5=}b%iU<O%}>VP9%z|QXqEYjy=Z$5AlF%Os%R_rN~!p*
zdZTAYJjD9iWkD?JvKsW@GDR8f64Ml>g78<AsiBA!_tEHO67N(76mOcD2j)<}nX7yB
zp~7S$Q`nfJvMH}k?XEq_d!_&?aEB6tQH<efO4j4LUHfkpUku)+@<~!|^6eLG-*Frt
avR08^oNqjL(Oq0xT3D@KURk}ey7({f`=faP

literal 0
HcmV?d00001

diff --git a/megatron/core/datasets/helpers_cpp.cpython-310-x86_64-linux-gnu.so b/megatron/core/datasets/helpers_cpp.cpython-310-x86_64-linux-gnu.so
new file mode 100755
index 0000000000000000000000000000000000000000..6125a7b497de0acd533793e830327b3c3d0f88bc
GIT binary patch
literal 230336
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%0ALPWbD}_{_;Z3s
zz0Gyr9Ll%MOKxD_via=vE^xqYnofyS<-Q)c!>Ax^>{oioe3=`-P@YgQkg_g=SE|AL
z@G?m78TiCymqpC~p(8*P(QVSD=Ke1Q*U&AB%7X~kxwu89|3Wi#gVLF?ITY^<ipwmD
z&0ioZ!Jtv4bGwsS{r`xn9sTR0m#4I=(A$bmhgm_WJ8~8A(v0dqDwLvz!L7Q;TbUmT
zH`)2A`m|owI>C`{ZbPFj!{<vXZ92LRualC2R(Y@sLJ<Gb5?wyM1Z}S=4VrO_#cWw=
z6jiX)ytkS$Uc(rR&tY0zgdFmMmDjb!mFjWbdJ6K1?JOmT84A5uGHHe06GXwx0of&$
z{(GN(n9`FayD|#+(5xYqkGokYu~$NxNY+smILH^+BnI9Al(L?shM(t?SLKpnVqCBT
zNs8M%!RAQ1Q1n?06>@ao3NYwsYXYCV4Do=qos`^rw}7mi%SF2?`yzD;!(ucx`jo_=
zANm2#)TsF+{6*axlWShd3w?4-$yQW#5Sz{4sLf9E3Ln(OP@u8zb}3zLo+N!M`b8G{
zu$Gu1TXamVA+bp3Ltcf5o@2DfMH0;|vE+3K9}QFT2)up?^vxZjP8o_-uMOfCW9W$v
zSR93Ti=qRy@1#)k&~|E^P(_xuJ)~zQ>#2~fx8`Y5Il4#XN!B`k3K7;@g!AC8`NHpA
z?Pc?)+y(FC?vVRPZW%u6MMx!xf6NP2L~%K2NTjcn+&N9<V#I<;tWVyh#;~G4_d;R8
zh%F@#@B>muo`;+|6JaTcABsY#Rj9n>Db-GmjnvESMN`mwUL!jbD$?2w)9brimNq1C
zJgi@mor^(R2fd7>E?rK9*xCzpQ;x2hLjQRGXKJ>Qedl^A8pkPwZ=3p>7uZ%&zv#Dk
z+7B#jWJryl8L?K%`kBd^n%0$@6ZI`-FiL65@Mb_L2-@~h&-)cT?&e3sgJ%8*kk|{*
zYb4Qz;g6sC8O(}@o|i~hKa<B1>i{iLKRc4*HBmoZbP`+W$fw+{M`us>lcUWi@22Er
z$)~(BIbPCFYWP}PWwB|5d?hY?2tcZ<z!zFBZkwAR)joNil3Sk=Yz&Hq1l*qSts1b2
zW*W#y*OEZL=8{XSYfH(#v}QNVFf(vJNaF4EWShmw2jXti&w?d!Z?fcGbMsHNra^o4
zEw!yxL|iBcChx5Q98&{NXw&H1gBlG3<wD|OG9}tH(%HD{6QZ0DncPi<T0<K6Koo>c
z<KeTnY&j)0Y_NzI1@D|_>PGJ8`Lvs2B1T)kEowTJa2K`}9WmuF>AY3lv7xtfoYKM<
z^wB0pF|qfWzfg|WRopk!{pCpY>+A$4|89vh!CK@XVw1CJe;Z6V`J;_at`8pRyVzYn
z+jm~`XOYB4=-L|j_2(tR0~ITV3j!<Qp1Rp<B$8i)$pPE~)nRrA`WVsSVgrv#H<3*I
zt7J`uM@#wx@Cr(XJi~1jL$KVKi^$HnPCpG9>5wxl^Lm&c$B`CfhB+?w_z%e?0eG=_
z7Y&@{`;A}dr*b1PsfDv5h*G~xDJ#l0m$UZsFwI<OwKmSzDFN&FapVkZ&)WIk1%w8H
zU@ppieavSQ-A$S2Xn6EUYRS>vJf9p@a%%hx|H*9H2)VR)c|z4#?@;*`FKo%<VD`MN
zJW^qjdwr@Zx+?t3#5j}Z7q#4s`*B246M|5vp~sSAO3g|{6qTORshnNClU71cu+Ns9
zd$OnJ)Ftf3I@kV!XSVWCe)VL_eaz)dJbxyB1UvSZNO*yv5cqDqs>KPJ1Q+<OCKvcl
zYD^5r7lqoF?@OM0a+O(lnqZXsQ}t@+t59Pth;M7mNFNb;YUF$CJk3YzpZqP96UrCf
zKe;B;X8JLqh2YHocC@xr{rK;yel#D=a}C?9NA`ST7^ig`8;!lA84g`lc<UMF-uVKb
zwMIg6G_k)us5s_dJg69jBBYzRVBc<h%&FU{vH7nYt6-y!Ju?1g{tEx<a<1`SQ$knl
z{I&G<e|h{Z@mrS4F7e_X9l@mP5-;xiQ2%$u-}*5n{@wUnZ=L`f__Zh^)DPYK9kR^I
zv<fn-t3Pkx|C5Qmw`*j>`i4~Bm$?@pn%sj}^YA<PHUf5aNAs72<|3GM({R~OxC;vr
zQ#bdmk8+f?7hz9{U`yz(gXWeorOa!Z%B}7eJlR>Y@!wT=VAsOWs&JHB<?TIkOPl&c
zB@;*hIW+TEHl;Fb%a19}q;vEjdxY-pV6#t>qam|=(~~2s*4La{)^xu4=xv(U)o=?V
zsc}`Nmo(wzqxNKCbmGDXl^;>54|Eq9dSOx1&mzfVNN8qxv6pa9wiWiMn8WgoRN=L;
z7E(Fy+O_J3r4nvi^(<R2K1`~&=|R0Uf3CIn7G}O2RS=Tj&P-Fhz}04KHZ5plV`WRa
znLpt^BmB_BNYe-4Jzu-LG97z+<&MXbP-_3?c;e@@o$<6=qdmm#zH>Zth5zmGl<g3D
zTqj~Q1K(0ez*w>dNf|SmiEdb{YYCD+YCI*`_gNjB=pRWE;QBNe_zO)H9>d5jrwM|@
z66Gi2@hW%`aSvT6P2?PLIjmFo@I{K6cgqY8=Yz^uuWdr0xUg8`-_dCPtl^-v#WWQ-
zIf6;Rn6+nK&k6gIQ!V~&yxFsH7?xQ-Z%K@oTZ;`%!(AubWJ9`Y)A9#TK{O~`m?6$8
zZw$FBetk=ujt}2RRtBcoSUo}PuC}b`+<Y+Jx@s`b8f4G25xB~q51(gVfOM?;iEhp+
za^d-_qx4TE2-F!AC3{aNK^(sSv0Eg|aHSDd&flbW&Rn|~Ulk`g;bbUmNNee6<d!3C
znmta~_hgct=_3liL3;lAEXlxh7tt9h*ag>et6`&ED*tw>;MhUDpgaA?GL_sqp4Ux$
zlrDDqg=(q9Ox90j;!zqT^%;1NhDEyHMGk`Pw0_igwZ7MPwZ7>T*ZRw7erj(3_!Pqa
zme=l-5P*BahneBS!h8a9^z$PfEq-FrX=@hhzijw8jGK|<wanumxGNNGNW|cg`H?4v
z{%ueF$Kh6@qy9=ea@pvp>s)|Ddtu`*=W{J!Fl!mJ23^r*3)<@R5ZW-G7z+hOI=Ywh
z1IHa!E*CF??w(s5>8Q0<PF^l9<IfdHK(%Gc7EN{kK_q!y4T*g^YAck)r@{6&(TD_f
z9j{gXHNxu%-fQf8M{UHXk05;{=_B+W^r?lwqmWADNL-;t2YrynNAmyZvY^jcWUO^T
z{ChCIhQt@499kP(i-@w0pWcG`El57#e}zbomDec!60DnHH}%d5H8PBn<L2o#$`#S)
zGPSR}5p6$|VmqP~+Xbc6C=aC~Dm8*iE-&NHwS)D|_J?o8e2Ec~gB05%Qi#t%%oiR;
zN3B4Zb4tCOt|-lh>h%t-cz)QlGMSlnQ%IN^#Vws0(fWejlVo=Zu|AbXabM-OKpVRE
z3bMqi-w)cfuM$oDXe{x02`T`{BC7<^XD$D0)OZa>nHn2uoi~=}aS!sRW_BcT-EtJ|
zmApij1bwcXPQpqOOwi}25AtkyUdsR}<653K27S2xE^*yP#mamz^0+74-6I2*qi2of
z_Qh_I;E{RRpp*T$&y-dRBdOkq$lcM^`_4z_>s~Ge>~oZ_#gck_0L=|9faZF0C;SAN
zP##GL8eqGg0jMvQgqiP`IxR#*wEAsaW4>Xb)RjQFDP|t3C+!ZUSv;8E>it*Q_v|f}
z6WAB`#}Tohn=eihbK*(iTPmWum{(Hqh_SH*PRHqGD1%+5p}o;C)whOQP^U%bt?rh=
zfH3^LYQ(R7>+<0d7syWV?~b4MAB-=ynBH`aFLv~aUE_;gV*8sP1Mdt{#Q#|j<eKzQ
zmFNHBe(-<BvShwZbNs(n$&Z$|Kz44UTN>=|=sQLvamhUy&`5HQ%@9fL$hG2LMrVg>
zLW}>n-8Es1{fNmrrDZd8AZLZeJN{%}aP;<;p~LLQlHdN1maED^`T^WHOkHDz5heYv
z#TQ#eUv~)lBL8u_pg(9oZXfiizTkF2zg8as_D`7eWezwp4`^1fYzHpQJ!k%f_+qs`
zYDm1KYrS80mg?sbw<oUI$jH_)3F?v$mk)+n+0!YJlpE15LXROQuH1c?jgjP3JK`b&
zvd-X3g!0q$i*j9T)@UM)VQP(ev>a+;35xq%_t=Bc(clrh?d8-tU~PRIVgDDhijMi3
zD@!-fXT{87YO)OzP2B{G>3)o=ErSUSv)3EyQ!yKKTJq+7)SU|f%zqCTFX(J1$aO3U
zZ&B^ca#exHc%Opc_T@k~WLf=?XX?5=V1cUDwQc~sG&3YR;Pc4zSm9Cv2`dWlJTWl?
zCoc4ct3|M?x{`ue^|10_>K&A-N8v#(T|q}SMaT55f;YYv8`HN>EWu5suW(IIU1H^c
zrETrE{(<|=>yl@b*0WgOe!8rp$ur6#g)3t49+WYz*Oa_Tq_(Dku`zpdzi6R8Qrk(%
z{rl7nSl-q?VO7JJSL|7W9RI5uc#rKubj*S@>x9ImH$RZuhlD>CE4$d4NpJ&g0AQwb
zUiUU|7<TpXO7AcyF}r2C90gb|2-vHnz@K}pITNS#V)|)yEiKsvW;Wl1&|+Z-4QvGa
z2f;P##On3%mDop>%qddyA_+{_tLOIOQDOc^D@Qw78P!pWt#MZQ2&LDU`5&oPt%O|7
z#Il-h;GS{hXXMk5Oq+2ZtF(Ih74;+4PJtS`q6(l9T2YU+&`B=ULaXFPB_E<>r~WOn
z1>@zS<E*$Hw5_no62&Jj)MUtChoC2D>KR=1OP)QWuz=qKX6d&!IPCd#k>IfQb-{)6
zf{G=<S<ePXym?a}(gwAA@=Xt8qO9XxH3Stzq$=*;OyS_{rR##jmaGfrzu7Z5>+N;H
z$mfD{o((GIbt$}s31k)@=en=125o&9=kz`rY<R;%e6lBxVtAgms|%^h%Z50+*dv(a
z;O-)Z4Q3Lmg1NVbKht3+p7(`!cr3{H4Z;PPh-BT@ydA10M5~b5!@PUEgJX1vR+rqN
zWXyqs&AloIr)q<9*-I3tEVCkP>@8;?ojy#N>=xovZ>wa<tXuR``No3|?$wa1E3+t5
z8a^E49|Ydr%yHM?AlqQ4>1+Au9FGAPoky$0`w<w<Qi~QAiUR>Ovotq*LVvIA@k3EZ
zoisBs#4;E}Bq0`#`+pZ^Xqid7>5dUqoTkxpLdyXu*rKK_CtS6G9AiXYW9F1ssJ`Sq
zj!|M>m_fEID^&c)0UIqhyq+l(azk;#*$6iJ*U#1&O`Q%;?7MRvKJ2zexM8WjpgYeG
zCVxTUNNU&%)Qvw^mCR2TMr-fnh^x{I>cEf6iaFl?2nqFt3%Q1Mi@RVsQ{m<D!liWs
zAYj6x!w)YDe!S?i6NA_5-eD(VL19Dnid)8s53Y!fd8w{&WsI<q!6UCn#`N7&+%Va<
zk7a;!8j^d}5*Ql}JOs!ZV1EtCJ-GP3Ff%Y~zY?eAChRdUfsL29sv)@jM!Mcm{c`i0
z34vp6CejaA<T1Q5b;{hO3B%x(g$!?u#YN>`#woqSoDB(z;l)UH4DWqX#PD`KeOrdt
z!8cKS(RVOBZh7m%@Ol7-7~6<03~#g;UX8u)#Jv2TY86ePbmaIQ?D8XX*ZcaWqjEWZ
z_Xag8ZLrcTW3w8>DHb?cq{HOV;&(?W+3~wswqV@G@XF(Nc2*==nkOz4t?z){z185@
zU59>m!0vWg7Yhb$OkcPypG#3{$9&F~s-Tqlu-f%keGA&k7-oCOP7Ll@KBbxOh@TI*
zSSqQ?wn2_jyvXd&GPpk=ftoo(`STdrL!RR=DcYLBeIX-;MJD4aJPLa~%s0onWVBZu
zbqSL{QZiG&%*;_a7~BKLe+PqmjD1Vb;NE^iB}-nrNk5hA?{{$bq;$yFw#(rD&TMrJ
zo@yK9zCMaXkgsQIFp;m@^&2uc`yxqrIDqCeIO}f_eImWjWq&^J+MWLHBFnm%vMakw
zl4lpLg_{1AxUwp+gSfK#L|obB`guHT%;}~1@nvo3z<&~7R#l-+!ogg8+1Wc&=Z@pc
zs!8I@?iQIHHtT}S+F~6o?UdF(jC^tXAgp&ePgzi`_Ij6tfi;4UtIpxe6(yu5=Ge1R
zk<=V}6pD+>a0gCIEtlg-43;Y%UkA4xJLR78Cwcxn=+nKt>*CPYO3IV}ps|aWm%?Xb
z)Lty^&w(~7c9OPM1-@&Qi6IujwNP@*Om+`H4~qM8@|LvAf+I`LIYmlL+?I;5Y}D9_
z5OQzakBmLGL<<4p!ujTpM>8)}=<~W@kckuO>oj}zhITjrHr-+Z5JJ<3_D|~)50}s3
zgPJZ9EW!YpXOPC^gPy%pJ+wE%H`|DOJ(jW&Yzl1W2{KEblDVEB50!<P=Y@2}0j+uF
zz{rp#kt^CSP4v1t)w?*7=>0lTiVGtXziNaZH@}s<)8bgoF9m~2l+ZlNlExg1cecv+
z;D8l9xSDntwe~tn*$z;uMQQv~4O85s?QKNQjxJsJ$J<Y&ZhCPwi@_|1nc&X(s0Lgu
z(z>?rp!rk!mb?69Dy~H+M<U;NYVzoz4P!QG!EQ*F<3{m*WWYLZ-~lKLqhhPQVu7vW
z#<9p4229wjUJy)O0$R`jni_>HbuKdeT0jUUU&exgHnq^=HZ`I!ItJbJPMgKry}{b9
zY~v4MD;o^1?A5>JoI&?yUxWU{sOSt|%^v<~!v>iK;~Rm6t=O@#>W>0K2a3p6Hzd9k
z?T%<jETl_Vgb6Pf>xO&dkY_}KqwBfCDRoVu@H*8}Or2_gfz(03>Q4GGa5=5E`nli^
zo%204)%_A}CbiDnDVXvg)K=TNi8H+qqnSlp7qX~-S`UZarrT?zxpnC_l=dI$cBAS}
zbk-%75f`t$q3}yCw<?TQZ@hI#ZMXUYDOiMUtX_Hx`o!kK;Eo}pazy~N4~foPfeA0w
zC%&pfx*HK=$r#zd4Kqxx(J_Vn3Z}lt0@ex%6^f3k<Cb)TI7g*W<{Xm<Ca1^)-Zb+>
z9GK1vTIN`$0nI$fTO@gS?e7Z<o`9w$!N-o&Lcs)%C0L+Y1<NbNLLPMjBky(J-?GKV
zmLu~ZGW+G`8zw%p?`jFj^H@Wk*wxjy4_TzaA^QA7yn)X<(M`SYLQV8Ph9qEFMi4It
zZ%-Vkg6NP0m4HWOVKKj@xE9BVpqlIJm^IkdrS~Te%a;5TCC!z#z@u)fgfc((Wp49j
z^!~)4Y?=F2<``e5#U-0_e3{dH8NENTU$)G3M^I)bTZXU~wDCQCFVgo^<*9s>6i8QB
z93?P`*Y2wc$Y%Sj&Sz@GEm|m~e=wBoGLP0db`YWLZ}Z2n?P?TUra+Bj-%o^Mx*a}@
z_>((;23fpKb(>y?t6h)putu>^iaU-Q#P6ee;1R{}RFJ;!E4x2vN%i(WZ>9oG=5P2U
zubsr_NZN}d-B=1TePu@wKaCZ#Rrad0cTB7*fX&=$;8KwNJ>@MF+~NtijM~!2LZR9(
zg}`f&@fY*|3&{ENE(>1oJ~`3%j`T5KBOr4>98;xDa(JZG@z%ohev}W_SGbedRVSCX
zZD>-2_SX43r6*D}<p0#)SeI}tqz+-YN?hn@8FTQv!C~3#GHA;d@tP`4IPS1>Y%=6J
zGU-%^{>sveXm(nTxh@ZGzaJd=KE-%UUq-tQAi*L?z9Ly&L`@r|P&aG>2nbv;ZJ;_?
zhJQZL5e0LduetV>3y6H<Kcu2?l~jF?Ymg#y51(*X?C>vsI8yd-7R7M&o1fKhFfzf(
zkBbahY6mRUw<wb6`x0D})o+swWX(jV^CmKeznJ-}RO{iy8g=_;G$STd6M@)dYMVhq
zbne;yU-YShf<Jz;Wy0&%MYR?dto(EXTL$}2PXCgZNQ%WM8MjM}?hPe$H`0unAQ%C$
zX%C1U^tk}j%c?%HgFeo_^p731Dt!5PAWzy!hMj&QliV4ENT1Aa8><ZJ<W6;o6MH9)
zC9xMbr?U;(tGi1qP8^#&vv0C0adTf>Zip1pbg0&{iJN{v2ZKo$il&50Gt$mv*ZDL;
zy-luBOu~|HUgizFw9}OSnTPFEb_rr|;3$5jmeN$^#kdD*)?aai)Ai0I+39*4NRh60
zWUbfr#2-@5xb>F4VWVQ-)T!m6ed{fZRtu!$!5wk$3$DRx{;-X(fr$%>pUXK@hUQ@l
zTQDGAzSieMZN3`LdyhM4&*HX{56ZBVU-R56A~&W!&Y6-45%C`+J(8MgD~P0643)3-
zHQ`~7Ymk-H8^PXWRx4R~q{5)vKWZD04tOMe(MLg&{U~;#k9+XZ2i{PWQBmD;<dHlD
z@dA3PWD5^UB46{AM9C1zp_bp7?`bbV@+QmJ&wk4?#`^DQHh2WNiNUxA8v{sE_KIk7
ze>NhPHw@UQ30P(#0u#2}c$gcoam>Ic`l|+F1-f#koIF~!=E$0_WvLPWVc4h!xXPES
zQMvEAau4`&Ys6|@fXnw_EMY+Hvj|?}*TZLRj@7u6n5UHk^r+z_hh}p;=yI5)16+H{
zX)lED65mc-u!t?GBR5fx0K3l@_)}hi^L>FcDZo%kmr#+uEJZ4EwJ*|?S7d}QQfAx8
z$pAIJ-&MYh-b1+R!u|saV2xE9GySqx<ntHj<satr&mljmgcCX@9O;01qr&~JpkUa*
zQNBQu0(H<W^^frNKj^d1%*#H=XCEba9(CFUMGo*qnthS+6cHg+q)%UmBLAWw%~5yI
zb|9-%dH{bQv_8KsEJ&Y)RZVp906EiD`tUC-;-S`%zGA(tsbe}Mdx#tNhZuKt=6^*@
zd%Mwr96soeh;bije2dJ5C+Xh=lk!9G_e1>#oOzNb@;^_0#uLV39`CP4O8%SM#Myv)
zML*Qv4cwaDsZbgzq!^xK#^R~ZkAe{OYZ%#V|Ae5Fvu~Oo47YHYetZn=96l=Tf(#2v
zrzug65OFz<;EWul0y<<1eDoZ_ecUXRhYh_bBNEn*S<Jq$p&n)=V`z=Lw3K<#*>o3v
zPdTkkH@#Rjl&rc;Kb75n<xC!X=2dZ@t7}pEV33%z#%BF(x}Lw)=2R(*6!P<E{lv@1
z+9hjFd5aygIga14f|tq=I)%iTG#hwJF`BtHX}T!oMU-ay>hrsRkIIbAZ<TQ&A_ihs
zDhb3`zDYGjrvECJ*`kX1#Hq14&L|ASFBV6YC}F<Eq$h3r;vzWwEc_R2JY7^RD6Wo5
ztr9vme83jDWy^r2l&p!c0u<RrUd;iOdZG261BftEtb6DQrB;XcW`Z%J%4_gTrsC4D
zzKDIGf|2SMa<px(B1|2vyFBW$n?k6!Q{v^f^VP|V=rUMlpXVLntCV`nR1o#?&IJeG
zWAmXF4<T;-+nMs*m}$YaAuA%NK!Xb-Ht2h55+!2^BdN+N&2s)iK8=p~tRdOAS0u3(
z)tUQ<hVi&DHehLe{DbCMvFhcwv`4GI8vkTNVreY#GFs`P7y>OGr}HzVS^3iLi+voa
zekr(p8q3ziW1U=E+wwJX?Wpp|77M~H6TQ3%RHahPN>Rmx)24%B)oc_6lXnI8h;wyq
z&ou9jDkdr^2-?1ni~zRl3Y&hKOPpL(P;g4B``?vCJC8xzrI?l2Q;E!5-NPJv5c-pf
z#IU}P6CI3g8s<k(!_F{hB=0x|oj}O9qr}MBGD>g*#KT}U&^(#4BOy^IQKs&3MxJdY
z%Nk2{S^M4g<Vp^t<jIxMr$Z@G3)MI=$^zPvco`+oq!$|zAf4FAU96GRNt_+{A~Ns8
z9uZ6fV>Q^fkC(8(GLFS+RQcGn3}4b4yliQqN{(NNY*;4gQY~bq%dbKiQqpBk)I_?>
zike=!jBfZM+PVg-0n+ly9+AT3u_Oqur>ZI>&AWtCdx(49%5H3caH;W5e1-EJ%Z_0;
zAmd<ps;(R7HI<HmiHqsaW+%8RlHf2pahO`aMuYobi@}@(ioOg-U>=y)?YiUelV*I8
z7QOut!MAl|AvU5&;aLO%<NBwmMXWmM6ZvE3QSb<s0qq2h#2z(*-Vf}%4~VLhZDhbE
zw5O(9?51_J@L7oqi4}=AGkfIbQ?$@TtLHZjtnF5$tq_cB)i2-DgLcLr4)&W@Mmbl(
ze=6p(Hopehm1#ta)3@gIEKCzMxBO3D?#xna$2ujof1k)0?YC2`aR^H{&jLhS8_!Ct
zofiZ6u|uB8^j3dpggdU9u8g8jA~L@$h=5JG{{euAwy$X7cCUW+)=>iRrC8!K@-5+N
zZc5I3uLt|(eRqzGc@dyh`+KLPdjA~?!YD*SaP{+i@BNHz9F?(pdGp=sjub5<Ss+aR
zw^c3+)SvP9+j!|3qOn#R=v<^J<!mfeSzvxwP6BJdG&SJ0f!mqVtV1`TUr4|@pEXB3
z>n4(&HlS5V+Q5*?ZMA_H_-1E|QwjW5cLu;0NfnUBqc22Aeb}n%UKN00SXDr9NYZcj
z`J@UE#O@v^uA>Uf^ciOGYuY;`{J=kQsz3|rQU%)W@15l{_%-965m3$$p+(!P0)(Jo
zQg|nfP!&)ElJ?7ONBsV1_;IQK*o%)|75I~v`L#&qsRB!Ua*Ik#T&U$ZUlmC9kKd6q
zUfr?3Tk;z{^3bzan_u-qo(fbvRe3WRtZ=lz#K^-qGbvY?Vq}QWU^UieA#7fU8K7$T
z{KEs?2%bw#mU#y8m(jwlrHU4)ckcrc(!OH8YRCqw)dR?@I!b(5y;}p7E6`H~p78}L
zRA7zI_`w0Lpx&)@$`$CL0@Hl~yHoz8FYv#<fZnZX$`yEhKMGt<0rrJe|5SYzc>wO;
z_~w<6dYfal`H8QknQZAPc<7qvRDW(%gSPK|%cmjyp}J_YpZRat79r%i-5#o4smeks
z)<k8M<(N}vL$Y_ThQtyHMP<<e%cXRcnpfCllaKA@{ar`9(M~AaA5VFGd&K5hZBAAb
zUg`R+$LIoI?l~Z~N|()0IY|AziE{SLPN%tA2-ke4zbg)~!%mmY*~%fdBb-E($FlTP
z<q!AG;$(<#{aoMD#cHWPRk@ZvCa2lW*HbER3p{8QzQEwF1>RGEx5<NKH^o(B?mfiy
z{>%N`?>7|9YvXkl`Ln78R>-*1Jn!pX=nLpQufPi`FwV6h=C2~vzKvh_BERlhWDjAi
z-WAchuOdBtkqdp1%P5k5=t~WB|9z*T_VoHjBeL53MIT~c17MzHv8_<SM=K?!cR^h;
z(;4ben%_5k7#%*GApPMr>183+fiKTSoQkj<yy|1ShLw+=jku3b>LbGOG(MW!t$Me@
z+{hHpY7B2Xjp3L3lF?}lk3FF>B{R>{Pvy&#9Q$~WIbqg-7_Tj4N<4_x1u9G|5*j86
zPhq3`*hV`|A&t88=3VuPNaBTmO{K`!CPp%8zDt{M(a*P|O?Yce0*xBMZmm#8RYm3%
zYtKQ%utJDcKgxKN`Vs0AgUw&bBz@vCI7UvNU^KJJ#0V<1VtyB8g2uEhN26X4mEiV{
zT7q%v7NG<3REhc_Z&71$SW!d|F+>C`Qtt>>q?w#HQD(D|IyS3KR46H@O&}@(oeNHW
zyQE3fiQ<p|+m_)4SBv<B<Z<wwR;w7YKGQEJ|8&tOD$pm6E+2oh)s7OIkvAlbj^S!b
zYdwu7bv5JC*nsx>__F3jvFataycDaRf9tcc#JpHy5!~;kNH@;@MHA0u_73gOYymYC
zZjMxc9K>h9mue>twF<=Q+Lo`f3dGUnw@l6H55>|SioO02#3Kj}vFfYKM{<sK3+^b1
zjKn+QzUHYBgUI8TD9wYMDlwITJSEllUZE_{nMd9_7h9cTg)C&nC>Gt#dwn(Ed2^Zq
zIEMp`Dj(NW;|EoAAhs#(;t&>uJRb0tD?^Sl+Y}FWm;!r_mh%6WhN1EN_w)<GrT%mM
z;+sh7Wb})#(J#77zrce9GChY;i6r)Cx?rJCE2^}WtMl}W<oLCy7f7)G8TFz&>P20W
zo&5TOoOY2M&n0jxIkVQco3&oocXzr)cik$BYJpc6hVJ?zY}#k{#-=^Kcc@j|Z6|b2
zt2hB7vB5wlTDIwx3QQ<gUqI-!`oz3QA*(Ya?DdJGVeslVTJR+(UP<B^YYRkc%1Hx9
z^~cVBNqJo@YE0938L!<&3fs`HNqLVIE~-zg%<PI@7AxEosb17{L|wN+Jhj9X>Jisb
zD3**LBzb*BlnH@sUzd2FA})9HGO9ycVh<*LGi!_B7>c<;`b1vl%*(1DvaG5f^1+Z#
ztU?h>EQUm@7`jrYKTso6vT2N3?lz#7o!}^YBbur`YO6E1;-uN$jAi{A4&w6n6(aip
zrrm$44X#-(%Aj()`m!1IEdMW{Mx^L@0tJ7IBWQ8RCp6J~FAW2<bcV&71$2ujzi#Ly
zC=S0%H`!6Zj$##uS&wVB<S7o9mXffQ;_wG1G0V|;*2A#F9K4rP9HdV;#bG8XQXGl~
zY^ylj$u}t~<GLsg?*sY5e8qw5b3?_U%5EUA_-YS9Tw`m+fl=Op;xPG1aSHguKT#Zx
ze@Z}Yqd0sbiVYY0P&b$f1X3I_C9X`n-ouYe{l^#i=oN>#+gBV`e5c|7^Gv_`l^Qtw
z#8$6Bh{s`GtBkS?N)$QFVzLRN7B3BZB5rvtqS9utCdZ!SVdRS?3p~3IS(qjoyMxK%
zCG7VBRiAg=gXYi(_M|4e?M-V0$pDCO%iD3_ROK^$5X>I7-N$)ct-s{UcJy&|=sj<{
zd$tPP><g5s!0&v4yL|z@=k0YrrUIw<0udGXi7#-eFQE6ljqWJ{1@`d;V1S)wm@=@a
zsJ9pM)iQ$)^CfGCJ|E!g=}$JhmZWc$QgNf2$&Gl>whPNgx`aQVs3CcTIUD}Op!{`W
zPN{f!cc)Zf$dj!y(aAPWPrHp{oJKLxxB2H{hn>ICcBoN&qQby)fz~ue;Y$qPyxVP@
zC?lZ}xz3mSsmj@H9A&8d2SrVPTh8t>>?;!R8bt~O`tj{%TenvLZWK<mFjBgZ(muy~
z6ja+g`*!+d;j``hM(sQ$SfC{IQT9uOB>-C<xZjl&bRDt<exU+WDd6=96=^^uP?10Q
zB7f;xWRi-U>)WsdeTxUC$rsRjUK`_8pu)8w-mf;&nh>;6>x)FY7MZUiUjjN{X_Z%z
zS-!~bzQ|q_NlTw#jGvu=K2gAOBivk|50zc@iMJ$Il!4BiIhllFC8P_bPef=e)E;)A
zPqfJ}6B69k`ot6wDIeR_#Mb)6Rr(l;_QzTK&I<EA`m?n@al-Cobo#{Qe^r^1(WmLB
za^laNKJg3YjkyP0hN{Dk^@(GIr?AmytTNVV{zmyceZoe`n7F0@MErm4KX~$Zz(Hs$
zg{c1x|G`G=L|y#{_d1wq=%xAX_zymPkoO<FtT*JqBA)Xfyv!;LOng>N`K0Kd=%U6x
zu(<zU;6FGKb6o^?n`weMh#!Wp6+O6GZ~w3T2hWBRvGV@A{)4@@@gIE7`48SA808|C
zvB0uj(A9tNACSOy{ReN9w32*uNB)BZ_Hq7$m>+r0`Vacopuh7Ubg%Lsv`^lDu!y>m
z2Js(!FG!690(P{l!(c;VLj$)e1dpU;N0u)kymPD;(9zbHFp|2W5KS-ZLFn9m@Wo54
zO)Ch4;_Y;GgB+x8cku`O&$&U)L>9qODv=(tMecyy;fO9+z4q27>kcSuyW9bTsS#-)
z@^iZVIG$>&HwSm<!Ff1#5JLbD#{-!U67B2(u@|C=PbHH&m&bi*CW@e|gI;aeXW&Zd
z#OGbxoG`T^@$C*h3SWX7vvIYRN8v}B{aKH~o5_Phpt&e=d4`WUkHRN;gSB`5G-s6k
zs;9UhQ#yuKKx@J>=D4`6W`o{8-<g%ii&p<2v*)D`k&QvM9);IxrSYOw2U+~WIz`-q
z#baiX`r2V;Q<D{~vL1y8gOX6Zf+JsBln0B6T0p!<;nkE?9hdmJ^qwbTolQwo>LH)v
zA+Pdf2KzF4&y%u#s4^e0->2TT_%hvnnXh}f_Vk`7X!WCaW~MFUJPKc>?oiI!)I->@
z9)&4o0eOG-)jUNu%Q$06JPOZ*zU5FlpRs~O(o^`A+94qH@1Hvvrt^oj?V>JDh6!xD
z4CTB}*^q2U1jM~?k!m#$b{7!e?Or&IiajgmsUY2g0BrSaOZN#BC_C9d;hXg@)QO&X
zJMb@DLZ<KXFD#(8^dS0f{R=THMaC>cb;Fan?<RZFTIsagd|S?^u$NWgYQVGgCuGXz
z`4iSyrL=`+q4GR`Lbi_b+zI8_S7x5<X6g4kyb0xOSeBk_8zd|mwl3?ejX&Y9K#KP#
z9L8gMtOO$hg5mt;{RyQvSP(R|FwdY2=lc_)(wk!eKqRqae?oGlYpDoUXua;$rT@SD
z2{(bmf8U?5BmEoU-rHnGSZ*VSLd52&{~3qE4z_t0Nw2Y6xI`Ov9)$!SE{oz)NYD&+
zc26v`JG*D%lUWr>+>DO49lyeJyyo9%3M}7<TL9C?`()==_=i8cnb}T@`e)9vykxt6
zh3Q&RL5Jznb8ElC`$&;Npw~Xz8U$MPjRoW1_bYT*_;>vZZ+J*#_s{(b2mVDA{O|b{
zzR|;#SqrAJHUVqM#$fOSAOBN+g)bi9=1v)l*}*r2x~NRsp<m%%Gz$aP^xMX-aIL_E
zIhXF_2CR&k7%HTrTsiYRd9-$2LQCYe3h8Y4rv`Xsq5CzI5B&;bzTBO*oV_?ZLH1A~
z{d%YDs(8JtS$>6=D~H%DYhU9Qw>3@uBYfNAd^;^_2SH5Pdi!<;kw*$Cl-_CjdB9Hg
z1y0W^(9IXvOdi&`(64ZgUlaTKBKzkR*$61Ac8RLZlLU;<yRyLdpZ5^1HNMQ9YR3B&
zj`VHJ^!aD!<^RCvzl8i*zrsWPYB|9dn4DMOEnna$3V6T5jXwJbpM7Lr_E&xO?t<sh
ztY6_GU*rH^q(4Q(ge%fNSSR}juOj-Tj)1%R6+YgGLVOyEt>_{~&VS#paLjtufB3c3
z6#5mO=>a`oM40m{ocayS=48@Dd~@MR`ZvK;GE5@D3$}dg0(+P-JV6&t<mUt8hq?G0
zQn)wZTIqC^H|vMNd<Z^cW>H*PE&|$Ceubkzi2C&b*=+xWAT-@}Fkx1B3r+_gLxsMp
zU*S{A5h4zJuM`5qQ<Ci-tClVB5sJ)xyk8%~hHkVCtuPnnHPpitFos#J-uo3^O(;eB
zOGnHvey18retw*ODj&MiY4uMsK|)yX^P0W$E42GiN^$X>C+KXczg!~9I%1F3y2~XF
z)3TELx+?*mLw_H0DtOO-AIf`Pyk|2|?=!Rc^V-X6K<(u<p!RJ1eAj%J_THky`RzT&
zdwzRQ>V3QI<<+S6igO)Odqug|F6~{lReR@e)!wPwwin(95yo_jw0?^>)w3c6Jo^%_
zIv=@ZyvI_5zT^iHveVoKqKF)W{oM`c=U?-lI(slT*%FJ&-GzZb97{C-`TC|ok;G>R
zT7+*))((zrSQkxoe^tvoV>mRD+&hv`DBB3PV-VMm5965w%|)^5H=1@P5J)$3G_6Gv
z7qB~gDYB)mk5T;L1?Zc&h9#;ai3W_tcwAN&H1$3;(R(3VikT_Mq55snzDDYD;$fXU
zSkN~lR@oapt$aK$Gn{k6^~^o9lu$&D;yO(E=5LAPB+aV6!dwomdr~w>JCi%j4a{-s
zRdVf*p6GQ&(4hz{>xE0Uz=*)ox&|@k#-eEQxIAxF_U&<1oxJH=g7o5;213}^+_1s6
zl<d9~{Jtg#*+l_i$x>~MCQl`t+6zJabEPNuLjh?5Ri_SCS)%7{P&~(XpRVGo>7*Cz
z$Hr3Q!e{`5!-*xv6-84gDI{+Y-%V3EaVAim1KQ3ciqkoS*XpS&5X!8G8tphq@<~DM
z;**Lwr)y8~oJou>4$E^<T!lVGwI!vE<YMzzJ1Vco@xMyiFTFw7RfD62FGRx&wI3qg
zj%+uZlpquqNZ_2wiJ*sya7yaiU-brUk0@*F!iqdkq-g>$GW1Mh!ob+*9M?h+-j~K9
zlx0nin>nCTVo?zodno-j7H_{_O{5XKeQ@eV5sn$MEQ*XzL_LS#^be^`<F7ztClLkZ
z#M1Oy3ez6_iXwf09($2dKm=iMZA-I_`7+X~GSnBOkD>~*KPdO4p-CC#x@V5^Bj4)u
z_5`K`o=$V^;9PHCi02P6<@U!N{bVCd5kjsDwQwg-FssMq*B2JV+nWel-{TS<g*V-Z
z6XFdcpzziu&{oLrxPNs3MYJ>&(lA(h;^_!@HVYu|SgMgpQG-5>@q>^k5Mzw9FC8_-
zBw!A#Db;UBO&PX`<9W5i&u@*AgFZEb&EW}Y!uV>He7RBV;cDS+K_qqkI>K|s5`)Uk
z%`)Sro|Kh|a~oz3&1(0Q;1{v#P8VL#1${ch&bWS}?}ND#0Ei=r!<(<uDp+4*zF-*B
zV30v;QS0tb)^C}yKJEq0nj^J>>Ov^p<Iq%LPKVdAAK5RO=$CoeTt@?Ls1~HBP=$Za
zlo0uAIMAE1d8^mn0&*(|XR5X2c=4>}8!Y4DVFHo3i^Q+A5!u%%?5j7}jFyGL3N02x
zmKd%6wt4hi4S`no3#d|K^QB7Q6L$a;N^mLqKZH|6wpb!#jv-qn9!nl+ms4}7E!CO6
z0SZ*28ZdkK#LG#vEVEFB?#hu`cK!4h8<`fFFOuVG%nz7E>?#Ls3)EinQtkospA@@d
z9}#Zy0+yq<nkwze!zD3IH#%O_%n2v=X<u7EQ1iio*`jK3q{x7xVo+2Bidq-p@axgk
zzFrlNhs8B72R(+yA-ejN_7~zf>U{MBMxQ>0n%ulLNsC*t!JzG0x|+U)Ke<kdcR+u`
z7jjvG`7Z>J+^1ast^ZK%Q<iD_yGJIj5lLWh=-p-hap2LMYpnze=mfZFBuHs(%W;PV
zceY0hG1zP{hkdCb{8;YeL<oO)-M558jcibeUfh_6EhR=v5Pw}gqkKd1P@;4xJiho0
zSsICp@NLsgEyo|$w3}&X!0?!ePbars5%ls~TeJoRnI)fsL)ytq>k);x<4Tf;z7P_j
z)dUycE;fT~`*vA)z4^y(T{)W-Z*?U3Gs=&E+b@hHucz4!%?ZowG*zm_QpV-6l&{t5
z#D&619yeyaqX&cpZeA4f7c;O8BGP%G4pVk6kJPp^ER!|Az4^~AT((>g#Q$Xb0Qypw
zSf;Fg(+`WqNa14h20TKuAc#=`JY=vBVT!DwNixpz3~WKQvk#^wEqtAJu`;)cG*fcW
z#*<f0>?2&D@Fv`|v0q1gknqtw6fK6UMOf!X=+j7<7T|nTho3G>df1;K?RFh7b&#3D
zEf(7#SDCqvS@>Hj;FFm!d{Krep-QV)<VOx~v!s0sv0Yd$YO>+&YV5Kw)_;^wJBnZ!
z`>xD>JXIg*^qzD&D_@8?M-y*kmkA=*isvVfh$PeoWJ_NWndljd9xdh(G3O-6%kgJ|
z1*LjC`~~ImJS8GQ-9|Ykv<MM_5Y56lT0)&1#ZvBr7%J}-<{CTstP2@#GxFa@d^^g#
z0pUvF6uBtl*vL?4hYsR<@1rE-;>F|-bJRo4KPj_}0}M3EuPs{rPV=ehKLV+r=dD}S
zIWAY{IF_ev>g2}1)&*r$6U0Yb+zb_L-#0_Is;4nm&xq~S!-dsWwhr2UDn{z%?)%LR
zo%B%?^1uUVo%q0VFKMU4!R@oLvMZLN-lP(#ecXdh!KJFezZ2}n+SNcQS|r~ea0fxS
z9x=Z6o)k>F4~kM!qYhBLEkOEM{~qDjTq&-aMRvS=hFZ<yd(9pyx)r{48=|XK(eIHS
zebtgt-hyH1s|8-X>hCPFx(1A!vUxK5ea?4}*|tBD;>Jg-1X|l7&M#}`_JC@wMTF_k
z?PZm-eEKIaN04^s{9so7xr?2@q@_Ot)cV)D^4p!4PN_eao3;9h+}4sN5-L;wSMq|p
zWc<f0aEsxW7}(c`v2W9#f{e?iwQL?A#BXAgsbzEjpzVzwa84p(s0Mt8kkn2|?!Q)R
zMf^BeM>t3#?|W>I#lX{eP}q@O$_64rw>WvK#}V{E6J<Ft=%3(OYJcysXLijme+kpV
z+s6%-{Ibn`ti2R{HA8mjV202Bpf5gCzf?J!U;Q(u+bX<bE%QJ3B~yh0BbCuRq^hA9
z?7gS?k3V4`ved<T^O5O9WQ}kv#nJ~PA;MFZm8yK1@_XtNW<_=4HFo&zi-!O0&s;9o
zp7#q4a}Bojk!zOERbUh1&Z9NVRUGD;rd%|y{+ThXy&=`9`4Rce+ZQ!|fiEH~o52);
z4lW{g1s)rY&J?OqBp}_OW%JEJ+pdtH&D65_ups_Uw}OK8_2<?!?;bo>e_>>3_wpeA
zo~E@u9#mfz8Nh*~jXfgOd}uAUdy(2=S=l3!JbEWo%^<#+8Z?Y6X+UH6Tk+r7Onv=3
zJ~Gg`09&WNNsCI^_S%VzP<X|MF8@_)zIE_e0`=gwNxjfCo2FWm4`exGMDrjqzuoj|
z|F~x`tG#s<Q6Uk42qH#k$;eQm)3og_2IFYA`&v;l0w)UAhW(Z72lrCuRmgy1xWq+*
z_$rQbM_CJ5;prmuZMku>xx(^VPEEzCKP4Qe1?bY!2A1sED{UvYOlTPJk-ZY;0QyI8
z-ynX?Zt5KIV8!%w-zU`|?le??7{qsFH>F{~heMV*c}fAD`*P;ThIT%yFRIj8#aQj<
z!-`*P*6ARu_(XihQr^y$M-{<dj6|P$gvl*UMe;{GpC*FGSh6ll)Q>_&8fT~C&334`
zMQG^oJw_37EWQwku!^O4L39b?F*2BIGvJ;eI+UsxihiI{Lwl6j5>>W}=7N^vE(+oU
zc?qYL_|>H{m-)%-gpJL1rgfTK#SfuZH<wEKekx2zywONR%-d;U<QATO&cXu!L5oLq
ztuGRII+6y>CDDRIx|<iY?kvjZGO2m*_rP6yU$Vy$PP0S@E#0<4jbIP9vRr+svn?k_
zmExKjt_mUpSdaw^L7Y$zE6gJw3)a3Ine!hK?`8q*Ci~phyrK20!eG)SmaAY^&#Jn;
z2+g*JmtltnTnyz9q?wsrn>hSg6~yoAvO0x9s{D-R%#&6nL4UDDO>Uj(+hv`(0d|Bu
zBjhkuN5@hZ7ha|@yPu7B=JUxMw=6GDEU>dE-4l`9&40b)V%h;uc)%X*Ri!IIpWE6V
zs+A(BztgT84Tz4!19~l(d^f{!!j%0P3YR&Sc-R&`VR0Rd&a#j6@7W-{Y?|gH(H>h@
z;w_+nPi<$?n;~z_<u58X5mZ?dvV`K-a9!8P4uxC5&Clr=%?JxxmTUM;acZ@7^Ozei
z<sPnq=dpt@d%>3#qwbjhWyQ2e;vYoj*a`RR=!TWLD4})L*U@?DonnR0MpE5>X+Ptp
z3@=D<u;;nj#4~jq6!=kLFstv6PMXqp_qtScOKW<k6L^da4-PFTxalvc69?1U&NuE!
zYfqiaWSLcWQQ?%6DAN6+DLwO+3@GjBkC`?VEE^%q+nPi)kkh$4@}I99zi0A=3?8u}
zh%dH#r+K193pvs=Nwwp?e>wavGGKvV4JJ(zQGugi(ps_WiJMo$hl5EQ+>1IEO!`7E
ziGSF!h&+Ajxs$41U-XlsGY49`-Na23?w(Gj{h*)7#7$dPe%T|KbfaFdnSs|0s}pNm
z7vuE(@veNnZxVQ!bd*G!iJOi;At<<MZmO|I`rxcQgKAW~{)FPPAbuOPV=weIGnih^
zEK)x<lG?5C6ewf8A`bUKy-AXmJe&0#aTi*lS;YC0!&9`7h!kN$p+68roh0)rZ=*0T
z3TN;U;%>RnCYim+l&U;wfQogP+wByZTHazSM3~nM=}?~P=U|s?#!k@}+HB;P>c=;V
zksi%G!xz2JJ9|@`Z587i<%J$!uQLd#!>=`(p`V%+e6#7lftwN-kMbN0waV*9=Es)T
zbG#ywD6~AdRHA!|z3V76ai`U^IH+lUZlA&vB=PbJO%?tHvkusJfvh!BY~fT)v;ri)
z!TQWBt|;v2Uaov@UTaPNUzSp<wxlXwUkzQhgB>~?|1Igs?&Un*F}x>PIQviq)09h0
zYxnX(J|*VWCKk_2_p9CTZe0*ri`r9K+xjhJ^_Sh@CavE>R?q2a;<t{h9_6Jj@j35~
zvS#xxpPGVfJk-{&D04hRKk+M9<V5@IvY*UzWOhh^mbz9YmbWg*r>>ixVysI;R`JB)
zRIUZb@zX4~NF7~j&SeyWS%8dtQl#5d%P|D=jSVbtSDy``VwVKkIvl&MSk|vC^FxTZ
z|5aaIGGJp}Vnc1>^~664+v`#_n&3T8(x191-TS1@+|ruaiHC_>1oTaFYf~o;7E*59
zmugF>w!UyZX|~jq+QJhkc+3>+uueaLc7OSiqmoUlG_kjpDm9?ymiPY^-Z05?5HZ7T
zRgSTIMJTb0#v0X^nBP_65=q&Jw-LW8scC=B$!4HyNM4JY%X!A{EWCw5_JtPPF5P2k
zRb5kk(%O&~&VpKldPk?R)K#n>i-O4?F?knv-<KQf935-@5KxQjaM_F|Z_+MB5Ldi{
zmgAtz$$A*R5l+v`&+N+@y@V1+&{nC$TR5}Bz6zp<=0o;tdH^3o`-9d-t&8y=Nh@Ko
z)Iu4nUKzBVqy#VA!!myU0i*FLGp1IHrximI3xfEpjhMtbzR2215sr6i+SRRX@ryK@
zu%ByJ#wjjfF=vJuf%#NuopLO~QPOKRUI5YZYnM2tcUBM~Bt)!mWz){~KG4tLDOwcU
zK`ZC+gJAMBuxL-_w;h9C2AuT;Q@l9CT&Ys#v0y3e6xS)20bW<aGrPW*M{t}Pui8q1
z+3!R5U8E*C$f_2hYGPlcXMD-se*oZBi}WAaH1>LIp5AV$6}^4=e+l(oknwXk9bfC$
zF-9?x!dhl7{zxqoCo_F(XBOY~#xLZ<3Uh-0+?f88{Tv4`xy}-L11aL8+S!0zV9v2j
z+sP{F6WOW;IG2AeD;j8BZT5uLMR|JOK=zj53E9+xwx97gXXI>1KHWkItd326;mDVf
zCq2zB!M=R}9vn-SIn!TqT&ejA)X0lg^i6edL5%hz`$nZu4?8azl7tV<ng~Ns<c2_;
z-I}bXd!De83iQ3qeP63rA%C3xjxw(JW>b{P76FHt2y92a_!%uIGEIU48&IdXeKFJI
zN#$euO`(;%gX@!USCs!mBm$C)F;PzE`}r53Nrd;2rgx^fEdE4Xg4^QJya+L+A7&zD
zzq<j@XxIbJtIczkbvYK1-Y6N->N$1_o`r{fdYoj_Beofz8&vhJdGf?Ipg(6N6%TL-
zErD!X=&6Pn)8q8dv+X5EmttrQ;@3e9?E4Hl9mZ45(i*f~WL+8DM59<#Yod8nV2f`Q
zXsx2t?Nn;sMWIL^nNLspG#Y$}`qrBlMWdlsfr<mZRZdBbWI{8N*brGMe(f4m7L`vQ
z2O1c^ki})`^eQs94F81n24XsnZ3N5fM7il&yQzTel<->KUDmAvEiYO5=xI)|YdaJa
zq_5$F!#nO*_jp)V2LtZ0(>ra}<jprbAAKZ+7cHN6HnDW~PuR~(HTFyov+OXWe@74I
z5W3DLR98}umsk)-Ap|9dnzFZr9qj@J@!_l%&I_vTGkUIBShxb@eqhm1Q;=%xm3|ej
zk{a0~y$*zj^pP6bGyQ&-_g?8&^4_y@c&hSO?+W9cW*;C+|J3q~8Yc1wLEFt5Q?bnS
z5<8Xa+z_wSP^Bt=L^<;TY%tw3j}Ku+Tw=d_(;fzarFzdZX_=QMh_>u-&)}Ojov`0^
zkLYGz=tOA}=NeT=FZySGE`uOnt;uFQFX_KCEyDgH7dOg)me-7^$$`@2&39CzkCgXA
zS`XJDwl3853(pcj^^Muqsb;oo*Oq&bXAEpN(6*|XDR_3V)pRkU?M*cyVItV9e^ZFH
z;TjJ3hXY<D?B(A7eut#3Rvop!QkAEaAJ(V*T3s|Nwl$*t*SjuPna^c8W4H!o+2nOT
zSAow}oL`rH5wkp1xoBS9HV1mUTa7O=BEN`zQIS$##EwV?<u13<Wv!);+9^|G$6t%C
z{w?lVfO2^V6STBIA)5|JKR~LRcYGLwO1z+u4?%n?>9xV!FW6XH{}ym9eiI-yEqbst
zAbXS+G`}bgVV85yA+icOSE!(%H_~V{6(d@yq;*~9I{9)6Ytb(gZI`Msfnp8o`4u^(
zU62ZvwkC{Lkt7zF$B|~V8I-F0v0(bK1O*nB){Pjk6@xjKDbg{YLZG#>N;w~dMR6v<
zL91J^2<}PP<H=ulS0Qgk9q?u-zH2lz0HMYoDSS6lJ&y~dmSB6?-TcPtO`b%yBcS|D
zTm<@xXzaX!ApQKOt`k<27;E;jq=8<TUh$DWjAsrJ!ujECrmS`cG?z^G<$eT?N3@cb
zHcrOv8GO>j5G6=U9LKL6@)>&IpLzaM$#@&gLVm@|ZB9ze;A8&$*Bstv>ffP4V8asH
zZM>wP_)Jq@{D`_VX#T_jr(7tFIm{cTu+tzlYTqrS1xo?Hrd7pODz!9NH$_{b3U>xT
z`4q6Yt_U&a3V8E04Jt^x)2>spfxl(ZJJlU~pt*KirMG_4VkEusV^1)-wO$2R!M;QI
z(#_)gUO{D(Azfq3=-i+vP2zzoY#z=pRV$)ObT3aIkl`U!dAb;l7Z^jT(d`$Zspwiv
zMd_t9H5c+MNI$>=Wwp@sJkY2Ex5#Rw&4msN(v$Snrrpn1h4d^)|5{J>>m59?Ha_6j
z#*cylPS;Fd$wW7Q6i;J*wjE4ntyOmcwj16c{#S;{>qYOrWfws^m7k|A@!n|l$&EqV
z<E&BPc8TcaPR!hV9jDRq76P|Wz-xYV?)T3=w{;bg;w{v%zWzKc56)X@9GfXmwE(&3
zwq3u-rK~T#h+AtdBRHFo3SE}JuKKsKd^|;`yI4L1$u2;m!%9_{C6I9A+(;2gZEKFm
z@_*=X8+(MT4`W#@rG+wXBe{x0%g^zkLtL#vpWLmQQ!Q_;jM*Hk&3N}Z!oOa_D=-uQ
zL%P%!;uiB3bx1mGvPF*|mwU`X+X#EAKawnrbT9(Sa-01Q(b``C#Yt;9Hz!)MLVhHZ
zy%)&54q$eW>JTtpxRpa*BS}{2MJCcL>MN-&u|)V|g5YWc`Fc%^)bQhA7v>~oP7VLQ
zo{x3U-_!FEJX`Zxx>OX5Z8BB4Kh6r|J(ce`KRj#~K(L+eWR)lVs+TFZ{#D%N4iXDW
z4L@u#35%#G^rxwD0NzF(58$8R*#J1BuLW=(%v1ortWNR!YYUL)Dub*^8>5ps*guUm
zrFvo!UI{+7r(cx5q3;iuxA0wh>lA*Yi8Xe&;#oc89uaL_SY!eq&KM7;nm&-GGYcKO
z%U;RCy8*`<;9a|?g}0A~_aNX6``Ft*q=(wE>NKyax3I=`+B27<pQTUXi>rBDuI77P
z&3C(+A3NS*q5~v{H3xa%O`uYd{NAeXD;Y0YKc>+_WWcA~q%4bIr`cCChs}Uh8mZLq
zS8yOSzhf<QZGXKi+pB|I+d6N}Fc0-@pGq;8_2pdF_19YjbnaoZ7W=GaIWW_w0*xR|
zvkJHe1kkV(X{5sNId>z~kzp5O|6HP~7fpmJXE?jJk*NClTm{T0@c=7Cg}LmD#G_4q
zXl83@p3k#PsfZP#!XoxXMHc%acA@(<MbfvxwL|!`F4U)IJEC<Tn~hcxrgNi(hk9<M
z9<TQNGa2$sHA#=Hq#<+qF21rXP(xJN7w8)vj`X2WSonNe?m6@jUy%7;7Cw4vfeL$?
zh45|Brf+t~_?YE$m3c%D)~`GlE(IL**d_>bQ^}b=JqKil`_SC2jD0EN2yN`rEKL&j
zSu<@C2N9vkKMiy9;V~w3SZuP$JvDp~?#HGBb{nSen%BlrJ~4B1_|=xmVbd8TMufw%
z8cNr^dRj`;e02POj;BX8Id)j#-Tte^k1QlX8%o@k^hv6lIXX){PRV*6Q<F!M9D;1b
zH7uPC(I=g)3p>$~M{{TYKkU7EeB4#_|DQrzY5^xG#i}d=21(gWp@A+0657B-C#80Q
zB1@XKDT$;>Xl7{3W-tkK97c<vf}mCwKSfZgKq-5nlmfC8DuSXc0`i^)C?FOTXur?b
zx%WLw+Jb(5ejnf8ALId@_r34CoO|xM=e+K@%R5Xz@8fA5Qb^4<2hU%ha4q`i!E>il
zL7@$v@5xE?vBHw_S*%eflO=l;vsU`>8JUjlfhMjkYx>H<mVUiJU+fvSv{Da!{|GLB
z6l1e1Lp}TZ7Yn*-D^NS)o1`&RAk2~8n-P}mZTNk{3Qx`tm+a3A;(wMWBzs%I^RpU^
znW{4%rv)|6u<pZjI;iAXWoBQe-)uiIf!z0q>^tdO+0q+qJVhT(*WOF}9A*&H7Vu+7
z$JhdnnNP64pH=)P_~J7A^!|~U5=(z7*85O`1->(E%lMm0uaBndyfv=m0{_^)hT;ZQ
zR@q3>-sM<#;m+XAFSz+#Ed6!daW%uWP~H9BkmRlL^!|0@=9VOXU6(#Z4&wAItjoz|
z(HhRNyWNiW3rHUE2pfI0agu=c8{YY__B+<Sduw3hbfDY5&Ph#jGXbdE{=ye{5l@%a
z>%%pYqWU!3d)X<?o(Isrb|P+y^!%9~V_##OjHQtt>`h7VTRJmNB3lDHh?x5HA@v+a
zpuu6Wb?L+6W1?)BRDW~E;NV#L7z+NG(ZXKI;IW;I&+q;{Hip^~JJzKgIjOR><gH7e
z$4+j}0|QETs!N~AZjnvF?;ZmZm5XK+#N7nyx^H}s;DDNqy)wN+*sdk=#y=^Eu!CG{
zf?u$Ku`Zotg8Qw}b?2{HO1j`^d{MZ)*a*2X@kN;4L!_`sEt>O~A&Fyj6oRu3Z`7sF
zo$e_}+V`RBRB8I$>M(MW$QmWGE~5b9)cpu#w?jPVEM}W^@XWc8l6pWubBP@#nV@>u
z1R^Y3i=-n4L+aD6i~4UN#fuu8MkmIY=#*N|s#{-q&~@uZV_c+nGnLh+VHG{c@rgS4
z>^85m72}(FmwG3A1i!`+(RAs~j5uHmZ~n^5I^~5CY~RoIkaf1Uv<Ca_DE5si!zrl_
z=X8kD9&U9fE4Yz>e$P&%uz2d}y3CK>gbguHh8*fA4<t}-B^sd`(?5GbDI_TI0ngYW
zlZ^?E938Q)@7}u9t;*hae=rlZ5`Hf-x3Q8#8wFb@DPZKvy41_TG2ak}R|ON-iUtIK
zb+A3znLdoRwU5VCUxv-^aU=rH3@oeHy<&#w8PA5(j$Q+kQyXeFKkZ!HE_V0d5v!dC
z3G?jlte^-l7}B#P-Q7jUBD|BlcL}e=?K9~v*_k#*r#2HYwCR2v0HqKH*tRLqt|kz@
z3#~YFviDvrNxtoIt*Fh#)%bd(w;FM=_4PbW3y}^D{avi^E6j>&N1e736*oGbKD}R~
z>mM+}YBoQWWycLIb@fUQNRaP#JPDRtvp<?{tIp^DKKX+I(Cs&&e>*q6jF(CFGZ*qO
ziQEo4WDF`XQ+dVjpqdr=B8FyrAt0E<KWgZrhnN-ICAH3!*}lT-p4Vi1B;wFLhZF|=
zr6f*NV5VBfo45jv1e~Q=-S-8>9;VnSCcy6oBNRAGCFOZMj5sCSLv7-BkkZT~jf&~J
zHNW1V@c-_-){_*8%Ts$F?f9MK@!veJHRL}(uhnA>`oDHw>jw}YL|5maM3CUwbe_&@
z-AYG#{s+%WYT@WA#w+U;#y_|JKYvcE|Bw%k=a9MVb4N9!KAw6Z_U=Xw^_YDQPY}sY
z9~4WM$M~*Vx}JkSk3@QaugDfI1?FaKv#d8`{h%_Vt^RV4tV-}T4b{xq(`^I0S73JT
zW(EhW*rLuKzr+1+)PB?BXE<Gwo-&E`+v?yjDeTlAq-{#IOX*ar_-msJ4_<NV2Vxlf
zwa)0I%46N*C$Y^6=REpA1qTx~XJn|9-cDj%S0GomlEk=s)VaIZ^>T^1I&hwE?wWDp
zQFBt0P8D9a$QiiwrdI?fK7lC9ddOf63cdj(il<vSYn6Ict4F`IF)rT*99w{rN$gOk
z@0cb|t^-OsOr9(a*7b=LHU_4r>8M)bFpo?k7rqK<vGjJ*Yf_85`qN_fDY|GBvzCU-
zqVEsVU(zl!kcqw@JG>KIB9_S@-b_9>4|!pgxM+i6&}`a}8Ma9WcQciHF`bbj_zH3q
z`g1a8vta#pa1KZkfj~Ik?W_)EA=|}B4RO`@m{`s+xERfm_ebXfswE2Kh@}pEB9<8+
zvjb$U<O-feLrN&w5ybbKGF2z7p<kX8kfj9^5nd587(#gWIla4&cV4*r{FHii-;rU=
zzW%}bvhT1kL>Y(Nud?0^9>xhGn{l7qH`MV<F(%)AS0EC4eYJm`=5=2EY<XXn7NO<c
zTc++v={p2qIP>)uA3|{M@4>P3QtNVj+oj5hIIt_SmIbHuG-R)K_{MMR#Nc*#2}5DX
z?7mh=w4CoPCib)?yQ2bKY3BTy$y#;?a!?evaPk%Zf!tSZpM%?zS71orR`mJzi{gSq
zEn&Y^Pp?Z)n<3HrwXP~%z!}RSeV<}+z{K&#u`xrEZ|f7!uA$Fwo@A!3LsUiN=VDPB
z1;Iwv&0tF%6<VT(%J(~*U)J#wgKVkRfUiywhE0w19!mm6vxCgFHKsfIY3l<Vcns=n
z61fUVN{--`ecGBRizQ$2tC5=!B8f=neOQdQ3gobQdMrJK_N+}jT!$*^`?T}Z`}QpN
z?ZMM#EpfMi#aLnP*rGX{WWtx}y3Kp%ZK8{4yR|}&6^R3x>aa=by<-{5a`<bakr_o7
z>I1xE-b{>ia0E^Pltu@qYi<ZY!8>XQcA`E!GK5!p4>>b*8u(<D!?`}i>9&Z}_K{w-
zRerCt?xo?(G8w6cdtq$$#(sP_-uQ5>b!jmlF7|wImuPxctduNsGn4T4R=8oFYgCeF
zN$9@qaodYNo-5wVonwqY76Wfac{ML>32%<mmLD43Ebh|%M~gS5#v6pvIf#=?6YnhR
z62<8qTz2Eo4w2s9!iC_Zm9S@NKYpBG{P>Mz7K1WzNZ&5u{3Mk3ALRJ5lA=9do>48-
ztEjE=rCA0i&zB`i&st6e@-0PJAT1B{la^zUmW#?PgYji21m+_5rLr*(G8KReq_BTR
z2ZyuCN#!oK@=a`x5^LBmZAl<eQ?TS?VvQ@)Si>5lga_8#B-T{l18c71$@ZaWyf`_z
zS?Z9c99J;@m*n^%CU}0lr~0W(QCs1MC$NYm4=M|!kN#+uM0yX^+6V4l%b?TR8OM^f
zR;Oo4RPE)T(LovOH7a+7m2WJWAeKapB~ekSoQ@@~Ok+tj$C5k5l7sGsCBHG2xcMrk
zE60}`#ZKe7SW`TXF3IsnO!53N*Ag`=YODM)YK!>u0!h^lbKz`TWVnb;41_<Hp@2Vu
z3J67}Lj2*M(ZN7%HKE)$t$Z6z#-9q~PlfoSoQ^-POydvk6E8Bq7JqiW3;tZQ1%KRl
zGXA(GeFT5R6we=4HBEjLwH5xv^&Kf0Q<`aX!+vE6=4+GRkxVl1|6suv+zC-Tp({*|
zj~Sl5U*4)T53E>h4i?g<Av`!dd>H2+Vj1Uh4sJ3R<((#&!7qG312?$b2g((=$Oobd
ze9H%9;DUKRP^v(a0+3dZRSK*8dHC?h@L^T>a7k|drkK!w=I&8A|22tEJl#H|0H(X%
z()tw3ECom%Pg(&|ALYDJh*1$ze>Bpg?MWYp)PD|Jw~Ex8KL)9XU(NPlJq7;_tUHh-
zyncb5G!tHbtS&tm)yOFei$eAV*9XUPXq{zgr_EqON$?XqKk~OPBVd>vxPEyn2!O@^
zrNrf6`=6QSa^4=mR{+}|x5#D(+pk(JA@RV?koyvK8nUK>grDC;C1}j3GNbW(JL(0e
z<4!3Jx}l^leV0Q8&jq`(r=o8#^2j?K_W9i$z9@7*i^Eg7ub*unrMgcsGQt(6P4#Qn
zE3{TcbA^Y_L8bSK^sHt#gR-yEKTiletyBtF@F2hXqn!KlIg`U<?2;bw9*4Yu2Ri+=
zBYKlbz`h}FPw&1)hoP(@odWAwZ(V<pDeZWAgeD~I+MltK!XwMSTCtH2UiaKWp!-GK
z_`m0&W+O^uKytUp@}nzO2HSB~gv%Ik#`;njLCU*%3IjFl`io2vN0v`Q`QVIj<jZ}#
zc0Eny>juNw+Y4r_i=x*b9YXfl07nwnq}Ya(5&snH)#}*2|J)vp7SRWmO&Zh|{n@Fu
zo-fdzk<Vs1LEy&!<l!3!Zns@>Pe(N;SoC7~K#`rDAe~`2Dd;@byPy};rB<?$*Idxm
z9Wh+cay>I<xPS!eCo;8tG!b*&$^>Lj3}>~@1?~A9S>C-ElGX-PvuHxu;gKHhN5bDy
z_3Z74?WdWEg*aQ{PB~*@Ly|jZ@4{W}a4Fu<F%KkG#K+AkO}<^1S<n$Y@y*SfH(IH5
z$PJVhw&>evwXnxF9$m3rq*tDjSb8$lIhJK{C^|eSXxtoOvViBP+&kHpBG-yvdn@t{
zF`vgkXzsd8I33sN*PgR?@HMip;TPIuL)igT6ig_}I9|boLi(v-LSgM;L(AcaG*<vD
z(-4Vs_F4SlbX{U#UH9Mt@}Smb+J<lJvguB^@Aeq%{DjqL0hx8S$nLK55y7!+Ezm*%
z5b!J9pa3pzEsG{!uIoM+I)BNmhAmi!v)xkaKD&s2@)I`M@4B?JPxo&H|1LAT&1g51
zG@&fU{`bT;f@!#oam`9LWI|(_y|P46Bp;)Y5BY164GGD^k)C4*icNBBC%8YOSWupG
z{a*)2%>%^CV2OIb1H%|Iz)8b5o^LGC9AXkZs{Nu`D##4vOq8|}F+)Q%{q*5LZKNW)
z+(YF3`b{53Gksuys-j@6oN6fbJl=DBd8BSjJhQ^%8Fv48&NOQ_5=)#KjA0ZN@TPfd
zycz9z)12eYsyuJLxFv6L`-#=C@<J5N3`mM#NinC+AvS#iOgXmyluK{mM=7t7rCov1
zQ<*$53pAb)Jvw-gEka6D?RnN&G_7EUrzsb=0LbZLMHvKQm@UyTOFbRza5Id&L~^!R
zq+-5$4`f1~J&J$4KB!~vSDGEk<Sy*@w&B^`!6iApEL`dM-zB_FqXA7j`}qgka~Q$u
zgEtI}`#xBpK4?ZhZ#lZC4;E~#4?_7|Aa=*uaM*LJEslMpe2V|oh5XOY?v@sJK{)9u
z>V-(}IIH8*vM!~Ddr0u)Tu0z7SeqE3I*1<4`Bm2ulQgnxi)Jv)!;?4`eL1cp{Pcy6
z_?qvC^O)jgk5otG=5N|}B-T!zp}MXY_h`=+c=Y=@`Cj0`=pqpedlw{53XW%ITTaB?
zJacOtKE$N_QrmEoWAgVgz+MS_W(z?_UTn&Fr^}Ps`GzLBFa8>6FPv?0$;pS=iQT=O
zNK$BloxqESQ^ah=8)hr6#ebJwLR@eKD;Tl#GT~Evx7z0ZLOh)oLIoP)A$~%4YN2xW
zmC}bVIBvDxdXzH&M9@&aVoqAv$0xz7X5ugm>cMbUzxn>+>G@GR7zo&0b8HmG37;~y
z+J{GWIkvPu!!=PUzKrx)&LW2G;d7A;l`(6Q|A?akr7fR;rg|tDhF(>zs`5#kqp6*q
zAW1wmz?LC{vGj4Q`+7lfoVR^7U9-z7Hq?!IJ-Kt=!Hho+PjGG`@g*Ikz=myztw8{3
zEH*6p*Wi?8%4|uJf3c;iO8FGFG-W5M*PJP{t<oD#ijR21?pUiiwWc9^3v)uxf9sbr
z^@}^ljM+{O%TDm?-|G1>Z$^4X75C4eS@cg-ad;pf#69CJ)(FjH{!p+VUVfwOo#>I^
zDpF<7=6!L!<5Vy1XLzZ4^{q5puk!UCLAXFJGOWvF%ZZB_%*LLQAKdXP3Mi7N*{G(1
zeAAR~l1-zWeoOG2O&97f7yk}}FUyW9i0GnBb!enVfS|BbBRvO`OdTtk$aHHarSomp
zjyl(2ba{4&hP79yDl>Zs|2X{_MjxT*Df#+>J8)%41NS5-)cLiC{E8^&*FLD85;McT
z{5mn2%40w8{Msj=zeBk+zxKa^YhF>`1QJ8}wcX4qJN@q>=->2c56;#pdFo-?vlvfV
zGqZa@Yp{{N4Ci{E4<Dk!U{^w`+|8qyC`vXC<X02NT_Le}cCwxKUk~*u-lpLyN{(~C
zBWraZjw0@dy~X1@u?FKW#T~4}O{l;U1s?DLg9W$wfbdyxg94OssV|+SnZBn&iht`L
z!r4}qnHPmted|VY?tgo(joJN)_i6QYkMKE9=NC1|M!ccP2kRsof@ydcRP7#A+qW^y
z8YgQW%9*_CmAk)-3kJDH=d>X;8+*#GgY@d;msG+XZ>kSiX1>&XDCQ*w;db9YL^oqC
z4(>oB^!*`kFL*&e=#s6GH*DJCdl;$rb&sK{DVTg?y_k6)GA^8X<A_HsntH88r|KHR
zZOptMiS!&T+5ea|vi%T>y3D!%$r>3hcZYj$;!k2LMs@HRWX`7DtW0Unt$81g@WMIw
zW}^i=5ze{mx@)yU#w-hX2~SIc1Mv~cUSq<CRh*(RvdPx?a}({(JKdZ(HL1cT<OS31
z8TM)h{>tSVM!6NT(a2cg3fUqU?|_!ZF*gpQMP6sKidM<E*8?(&R?4okX*#!RYJp_L
zgKp}JGPzQ%>DICD3(3+otKvgakSaNxlitj&KJWA-9`uz%+|09eXAV9*!2N8Qqc_`K
zbKLaFWfJEM8W2o19Wq{vcFd_&a%Nx<ON}4i^)<c<E&x+75BeMRZLt&=`VTopvLL!$
z<igVt=E(B#?D!sEN_uYod8_-u?G}x%=(_>Gl?K5we6iVGlx(k(;3bU+RsJGronEWJ
zjqUZ?w3r6ou!#XNe1Cwwg;FNpqRYKrLws1T`&aM?cbu5bu6s9`*K6;f$U|IO8?*jT
z&5gk>n~nJOI_1!MU0tS@^}4~?=gAZtcs<)?B^tq1|3lsBVK1>8i1TYFgD?cA(}O;v
zC#|xib_m{}5gM`K;@%vlvB7}lYQ~1(3`U};9w9-^RE=fU6TE`z@}vJF7x&m@Qna`?
z4c17FzRvVUYV;NPuBhWtaWOA>cLQVe`T_s?*Ss!NFx-b}`eo$C%|8<0fNmNUylRH~
z1?dla@7K@mlGEu$iUA%Dx^1@sC7Ty_!6OMZN2TdRoqvv}XAB8GI4sl}Tdb@zvj`Vd
z$s<t4oWQTF>$`{_r#0S^c>M2H)<NUmS@-8(igC8GK3rPkBH^NR@yhy-EzYYAL?-8}
zvz2ud?%*A)fen+~$~qdP@{Q>QE9+xcNORb-dMwpZfkp7E>*e+Wy|MW>PH)(4IfH@{
zoX^r5rAUod)+gC`&|E?+z8V%4>J4tZDApTiu$T-(X)9U*e^L)eO6e4|JJM8_dc1DL
zn!0;8bMfX8c*!(+M?O1eF&@0*D>mMT2j(hbR<7U9xvye&r`FGiif76=)TiqtHursY
z&SG8FQa9%LNKZF$s_CogouXe&4}33{9;qqMomcCKMdFzpA*qM$lo={&#C@@Q|AnV(
zUFX1f`oL#mV|Fh~c8Q0v0#(B?QHqsVb>Ba|$m!zr4fn+k=dP45KxURxfVe2>pbTe{
z*~~FKXp<{8J?L@tg=V-o-zvX^?SwE4+Kc%0HCBk#q5)f_Q3QI@zUG^Mp_ed9Kr%J3
z%q<HH#<GT{!mgC%QVks+Vpt(X?*`9NWZz$;+kVeeb}rGuP)V3NY)_iv6x#_f#VfXR
z#+zbGa)ue=ei(6z?HA<nIMDAyc;{KK*NXNbOh!fh+jxyDY$r&iok-KX&e5)c(!SxL
z2HH#P@WR)PKug1<SBO^bKUOog#jOjjb%`dDC@d_8`+g~<cMVOJCOU%RRO~2U?Cw5C
zs4>fafmVE6vl!|;3gxTJ?_wyzVs8&0uFK=2g8e<Q)IYe^dL1Z6$Ipr{_oUOgL^#q@
zYRc)%A@OmCM0&O-5F8Ki1`4zP2e+HPm%>CZ6Ygz&+H7^veqBb9*4XRDJQnGZs`A_E
z61ylioKO~Q0y+k1V6SKqz%dlnvCX9g>YJg8EAZw4aOPJBBPEi!)+^9gcBoSNYCp*5
z?P#sNm&OLXrQ=2tw!?^L4xxP~M8#9(b=}8K!jP+fk>GL-;ovA)CW(AbX_X^{V;Dy{
zxYKh}k<!wT81B{98TP7UbP)TMQ(F~oLr|T%mUQLn?<-BzHL66_<I+I%{$W&Hm%dw`
z(z*<rfgWJb5Uc~d?6R>|4&K#}$DUYp7nh5Vcsz!lqTfh9a-|;^W7Z}1i=}tH*PQ3+
z$qeGeAD9`x7x^}a@=78-FYzxuF=k!zk6K%}PyaktmpZUa3lnuRR5g)Zz<GUNHaXIp
zx^QUQeb6E#S%DE^&u}YTgHNLi6cf7(g@Iy#jRLjA{Cst3-(z_jYmK0Zz7dJzxZv5&
zPmWm^>0y%0Y+a{O*POYVHAb;a;lkMY>l1s9e6sJ!e0fTh)$Ux6dze>q<7)2?P$LgT
zoj=o<Yl>@R_DHElHY+n*3$A-ws)VoL)V({uIxpt%BKuqP1A=GUmFiRNG1I1~?;Jv!
zUmZ^!_=md8v4E%n*`-n^`)llzW{lHqXaAI-n~W}@RzTb3&k>WUynU$CZ4Z+^c<Sf*
z5v^TN2VI3YJ_9b6?u-d(@mrEtRDJ%K6cdkEgXurxy(Bq!gXxpx>2I3(k>fGZ!u;%N
zO8X9_g}UO|@Zr<`L5i=uFQQVs)LvqfNc>5@sBVe^mnwa@J_-Iw{XNFb!5UjBwlA}_
z5>IsjAnGYwz&mV9@+y&d5}*)sX8Y>x0^{=#N-b`!<yU{^R3iM03)&}RU*LIT^@+gx
zWx7BjJ!qFtW4-u}CXJFseHgE-hOprdd3ID~fnZK5Q##FHxX+hY1=6YYVopq_2Qmn_
z{kwn=J%>c#PaLilHxVNGt2d5^n%=Xt_>n%jEEeWn$$R~Ut9-F^cNalrna&_}_L&*L
ziIH1RKY2pr)>)@=5#stCmR6&kK-BtPH_K4nYxxKZ3MoEjc3HG@7}hKrJAnJtxy4a;
zaD4my?Ok)Kty)(0W@z9+ZZp67({o3`^MZosF8@rDMFr7|^U;?TL@x`U@xQO&StYOZ
zacble#j$C+=N3KO`wA<N8-ml3_c*;Ea-?I}Kh9O&IREZ6s?ato<Ei`Npo`&dKDHf~
zC4y$|9TH2`yoZfQz9y&Oo?3_%>G9MWT|rzLAMrr&70Tw&ulkZ2toj4+Pm`){!0VA+
zT&0>1io-fSt^&C2a<DG<z5pzNhFX18?B3T0ht%Hn6H&|eiB%IMT3M+F*oq@Y=!S$5
z|EeGJVPX&Fy^LZ^DAtCJYC(bli-|!W5~|CL+AZ}kpT6#WG8ySRR_*G(mwDg%0g18o
z05CBRSvfMc?uEL&SH?cICid>y*p~*=PL6}KJUh7ipGPGh<qOd8;ejFgg!cLYNj_M3
zvt8Z7J|H>Fbfpc8t{ieV$~MP26|pDeixp9ey4kbhjl%Aw@6<RFsSvHhDL=7lpvDCs
z>3#t#UmrR41E3qS4c7f1qt~tX>5I-9pWOLdBE=UD1Xj$jvLHeDtolV-hy7NwDD5Og
z_wuR_B0UGPN*7BV9NvTM60#=9OPu^h3u#4Kq~`@z8@vB?RHWxeJY<d@;E6RZrk<#A
z_u;L>;j%Wi_uzVt&vd_K^`4GVVzi71G+1<@XZM$h7ktr$rvp}N_q}eP93O=i$?aG@
z=-z1E`#X6cO7hVkV|eWvkVwzr`{}K=1alzd9XM?c2@Ot;=)6X1znj0OM9&D%GEqS<
z4Yliod;aO8mlj9A?W4PVG_vd(u469sSExhpw9%uY?4>xUmlgK%iY|4Au76*~v{W=q
zM|7{T1@|~bE#q~hX91Ug)sJ~6(mRaX^XyL3A=+Spo}A8mdnl#YlI&^{N)OVLBVYe&
zdcvF5c|{$X>%^x`_c(ELJ$cM~l2YqUG4x0hM3&bNPd(oK;(+c~!B^Yp;v@;Ji+ATC
z-^HmXtdkihIzPVS;MluQ#=f*$b<gHlWCE+7gW3Mc7cMtNdLvkT2`_!)cW$CHY!x+f
z>-ZV^oF`8B3-_YQ@o}wX<&ke6zXOeiv6rdwF!qbFjL%4aRs=tgl?IXZ&Zc*yqtVK}
zDQWl&sz7-(^Z}TQPEhw5)1?mI<dy#P{GNNX=MwRjKgACzcs8CBAL;qKcnJ+EA#&^2
zP9FK>$c_4bB0dx-0(ahEnmwLzJ5+)x&r4IeA<oYt$pmU@F~8veVrXgrshO(Bt`1W1
z^pI$?>k>qmwks>4l!4xBr=jAx%T%<ArOL1ChPv$c8mlIlbfuWi_Y!uv3~rGss?@Y$
zy3bXvUs_zjFaO!|Xg&DnYX3}<m_6#N8tx2om_$YCFL>z+P#KN4I;a!{9DI+_88QZ2
zvw2E|O&XwuF&XUrQ@~pHhnVKYU!-p9qeyQjeAcc5Q=MuSC_Fx5WAM_CG}3@O!EH8^
z+hX`m)p&uGOUYvj;#e)C*u~&gJO$hRkQwcvJQ;os4%Oh41SR%?)dlO>1Ivm=)yCT4
zT1i$};|85MklPM>FCmb<gTc%=v||zXhzZ$yh+YhPF7qsjWjJ&O*B2A^pP8(N{k5BW
zo@97nWJA;tx!@k{hD_%*#RY`3Pf)|+7%c6gfM7gV*ko^@if~@-uKd#bX1(wHfcN|5
z-V2A8{(va=Axrz#=GN#sffaArzu=`yN&I1M{X1Bv@IXii>vMFBd?>i>8E))xw=jGq
zmp+#1PtU)|{}79JKEI|<b|pi)vjd@Is<SDvOK{5f-3=B`>9U6O*&V@7kLn@88gPcK
z-tN#z>b~G9trDO=I{3yx-2Qbd&DyaP8F7&ryvT@4%U+-(<o)R#qTy=$F&r?|9-~Ol
z2Ug9X8}V7kbZM02FuQ=r9Nv@0t)`HY>{>-HmUrYPxGEikI!S#M<R@LT2c}N9&`H;z
z9j-Ma;WcYc|0Z=4Dx=&K5=bGILjUIUm`@E2pptFq-D#9ydiP=~$m`t|>PmJ!g+^7C
zEF(_RU;{85>|x~+OHs<7L{e#kGnl4iU-bPSS^l*XS7rxd1|rMv6>#mIPpfTS9b5O;
zx-adPJjl)ax>wruj@_s5T3g^#_gbRv7r|+p23y))HzuC(DlgQ4=&~D}?(#a22zLdR
zSB75asUb_$5U&&at2{Akg*C#d#4S`Hw`!0*GQ#mwcxENZBRz9I=elABZw-leKhR8f
zT&4;&et2G@=MMM0RL=|C^D^l?J?k$-t&v^YR?r6a7xN;r%XtsxC{G>pjGj#mkx}I6
zkH<y+QROL{kIv}}qSbc&LCy;*MIEK&D$U0SikAQ=UhjSUn~Gnlcu5)j6rZxcp?|yo
z$`bSd);hB#OnBMpHK`;k@2kV}-p1y{Qs#B=NOi8?eXNn&g!nO4pJW{)NlG4-7i8ra
zg?82U54|gtLJQMNQR)jeo5yl16>4Y$o%lWzTHY?i`USVgi&7wo978lsmTzOt@a>X2
zqljPMq)vTagIwhO!AAQH9?xE6y#+F^)+VBxeg6ir5pU{H2NMF@m^B0BajNs+uH`74
zN*Lp2Ad#L;%saz6Z3A1X7M6zP8?8kHHnKc6oS~C?Tmq*)jPzVW5jJwa$wPkRemr7Y
zJ-|Vro)6gqu8ocY!`m~XG&HPE7bo;*>WiDz+4jiwuDv6LvAX%#2v=Jh{YIy@qq!`$
zPrkU<_Pm&0E9~bNzMzJGOgE0kCzky*rU6=V!dqzUPT^fx(MYrQ6~XqIepP*DFBy7(
z{LNfds53&*$b~2CYamFXTIe#C2M=H5GA>bz)!9GZ)6u9zImF=`fioo*O54Te!w4ri
z?wVGR+o`q#SD#tHch7bA9|EXzeVrP}wdSsVv(MX9%s<`5cW<(^uzNKw`zvORU8Bnb
zFfYr+J?Vyc@E4}3F;Gr<u#P7go$UT*vnG`BDTeA3mok!t#c`|r@&kTyM(if`6>2<h
zt4n$q`8MADIFBrUNW-)X+SJgB;3ZaRv*(d2wD;a@Vb{fIeKN^I4VQlVcS!$c4sWos
zc;fpaXgjQ`hXVQv;8Hp_mYT*3Cd=Un@>VL?AXgBx`3|Vao~N=F$4nEL6!(sWnmAiW
z%Oe-AgM{pB+O7e<mo5>$FU|ghXiu*#9fu~>b2?{;H(CpFUzt&Tn)dYT-F_ojm%TB9
z6N!I+^lCDLTL23gL@qc4a^tDjaa}Nend^3+%h2qdf+y2nf7V*#xy+*FU-1fNo8D44
zO>o~vhf4hw;mEVd{*nFo#m6az`>Vo!l)ob!i^V-y^EN5}A*CU2oGN1inwS+&{oUr5
zXHP1a8~;Ugq|as<EjL~MlZ%Qf3LV5*QKr0A8m#_<L_LcwMJFv^Wfw(6c^Mz`Qu68?
zzF$cSkMFlvPE=eej>DblczZ^bt=dsFBmT~(_&aSuL_w`3r}nom1=T%_uOi&%9_hW#
zQh2WiLx~S;Z=O_<{XWrZ7qmb_r1y)k$UaEt<R^G31vfsQ<6E#!;oS)b59#SDdTS}S
zj8<OxUG>PIpX(<w;mug)%CZV+Tjqannp{3Fcj=_yCeuF9&BRBR?P|i(R$9Elsr*gl
z*OhIEh$c0oE};30%}IKl`jc~CX{1H*cm~TMAx;fzRYPXjUf)xq=Y;V;=oP~`mu$sy
zd!gmmp3v~>B#Y6K;LpF~k~#_)B0gz(E~&*R>6t#MwFs(8lr${R0!lT>r>gLESNj6l
zzUx2RV=+p)uO)>WEW6g-oxhnL!E^ktVI8(M^}&SHhc)-Uw%5CVsfolkbbrVV`5)}e
zDEyGi?z23c|Dn6={(YWP>(Bo%g3Bjz!ApeP?fCmFwtMj}Lqmr5;$LddE}<^?cAs0Q
zd-rc!T!??a#H?J}x1uI9YInO5U&c}V3Z~M4+Q{;kxdT7G{WTT`Rk{Ly=N7aJjp#ul
zMHLpi;1>M1XODO@^+xI`-GQH30Jt8=|3{3eS#-p%?gsptMFV$r*Zj|4m8q?u&1bT|
zf9G8(binJGTFX(x2?af{6Bp5v3$uc3Wk_S?MQYLW!5~>zD32l?XI*I05xm%~xJ%2X
zt6P9U5)p|^OHYBwa4S)@yKQQQlBus2E^_a!TX{d-z0dXKiT=I#qU-I--TP>me~i8N
zBQ|k@xC($f8QRhvfRX2e%g}TqpS0bg3T6@RSf+W0*ti>v*2uR_>_Va53WZN!C<-Z-
z=BUu%hcw^c=*<0m8cMFxt}ePnqo`EKq4!79E1AlnX~&2e#<U~KlsKkK9wW=ApD1UG
zKx_9)1A@(PO7}7@VA#bol|SpHFfKg2K$m)l`w`RhgFa((r30VXU!~TcxrW^AB6v#L
zP2gqiuDrl%7XlY$h-E_5;r&U4IFD!9JpBcCTn<ev8QsLM2EJv6W;4>LVw`F_3<#3v
z`}&5fJ_&|t6jx60Ic{Rxnq(aJZC9owMLpYJG8*8l>OS1+7D_qDsChNm*J5BLm*NHw
zO7O<4igbUTa@_9R;GHx|6w_oEPRoI!i>A}|yF<2{-*|d9pY$bzyCU~chLhIHu4LTt
zd)q)><gdjYpCW`_+!IlYXJ*;9{~56{S33E*AYw~BUYU;Ri(GJ{I-Z%QhJtRs=>Dl9
z*vc`YFE(O5i>$H8G3)fz;tOv#AL1z1em4ZwFwtMFv>_O8qsA2>X`T@dDRy7SN4yjt
z@d8bzm{m+KRK<liP*Qxr-&D}MUH$kP>6vI0d3~)>w>^s7edyhv3wnkYhv%Tm@T1@)
z#eM~6FH%!*>K!72P){?w^jxN2!p-_cVmkQcKYPxJB=KE}<c~);A$3l@#XeeDRh0gM
zPpdNQj@3b>Sghc7gupHg&>0*YddTYr8)Dc4IrKK;(EBCcTX0Zw{g~Gxy>%GT9K?`u
zoSwZ5|CVWN4L!Hx>K~FhgR>OKL|E0|C{3bK^E+PlJj;>OOywzPH}Ujp(;Agu_rXgQ
zM9w*4;twkW6f0<l+EX634KS-``7ManYyD}+M}5-KxwyET)!ad3==c?SP=v&3m?jHK
z=A0uoTRlL;r>}HNHmF*a%%M5a`_1zmy?-}Ry~Z~85`EPLPQFjxN8Jhf7ah=)>#49O
zGlR}1saVoMp|*`_nIKX3_5;lAD9s~H9bEM-Cl68t>J^cDq0l#6nUw29HJjA><1&=t
zK`TB&EdwTu4z?g}3NELuVF5>L375K;DSbZ`6;zOy)%GFoOc;wSJIKCLgHr1+9_pox
zcZzSqsTd=mRt9e=pnVpmpMq~21zVb{+s{=pk8rl4lpdC<qmAXk5(<>gxXgav4LZ)@
zjo7f8xrSvO^<^|SWP;CZqrR_xOnu)_eQ@j$BVSUIMoMT$g{YJq1-G8(q~$0R3nwk?
z<&dcKK4mt@@9Tc!5?R9A@Fl|C%F9jXZ3vbM(^=wgsI-)6o?#EaK_X;pt;8Tb)*9BJ
z_hWufa+oTs6<kS)qQg?rVJ|4PZod3J8%rf<79oZ6eY!b&j$(7uq`j?ZZ-~0{{z|hg
zc$7>684u;zm(3rmuf6!816S2_&2zg4Fa^BG3{tQ&<Yeb7F*w=G3eA)m#qM8h9(@+L
z2$&ULOS|*jNO!wrKUVYMMsjxWEkiWJR=zF{I6&h#k(d=6y3RG+RpJ$^8h-inuHiX+
zb2$Sg+pXA4<uK3kY0|#<q7^rQIMG)_Twgl)g7|bLuYyvZ`mV?g1DbBS*140)gSTEL
z;qN&5sQH=9<l3_!3C0-vki%YGhU#{i43lU|b*>J^?yg#g9eO7*naZhwD&G*yrl~g1
zV>n6KphLC8Yt2eMWH0y#=Zn6?AR5i{R!n0>P%j$4n^g)o`NyB1T}j;SitAnJbXuf#
zEnj(ze0zY#^Sv*yPhf)G=@A@>VA~PPxa^<naz5Y45Ws~HW769*50PiTKn@S<`^Meu
z-|lA5K<caP7YLHC#SS2Ke85V*(6Q^4+IJ9G8EiMOZ#tk8+)6Y|ic|Xx?J1~;v8Ui!
zhG(4WX5f8QG2260#BU{t!)&RR?2nBHxfbrA7M`J#muV>hnBycGNsf=;-gsu6!7Sfd
zrii69zF|tkc|QupTv<oHE<q0+P34OvdIQTQW)5UN=*<sASM+@We+JVDoF4;%?UV{{
z26}SN>mtQrHtx}ReYiX$6&ifLx2XatxYHS{-X{g><X3qkICs8nN4?HT(c=qqQuGc}
zSET6m+f0f+{Wm8?d!nn{{K{Gm=pG>@F`sS(KCx#p`xH(_Kh^G?!Qmxt(=5rJz=H%t
zO%1+@)LScp>hCGrhTs_uHQDk0%h=gFjPJ!Op?P-m4OsHQ^k5GD<?L=RQ%iw(hr)dg
zwY%%%Pk-CPglwapgaNZB=n1(j$=374L2|qKJ+(6XYlC#_8AI=%PU|yOV_I!1(~oIv
zu&>4&T~xHRr#%I|yF*3xUeuubtmZu~?}z-b4eC@eY6bM@?_1$8D7e&^RlIfK-Y)q0
z`|L6(6YG}In?dBeWGApxf$e;tOMziB)<}RUkWkb|Y?3c!Q1Bk2D2Y>9(j(LVMB?uE
zag02w(!1Zs=b^4qUmS=)1h2AzF?*k{SpX+U5)Bj^$W;M3Y458~ePHYl!9ZAtdbd3I
zw%W>5MKIl5wSYQy0>2cje}ci2r2T&DSzYR>K7XC~YQFK^cNrwsL&@Z>&8SOg$`$K@
zW3cE<v7unl1sfT}*`a@>|H;^**Sc0S`aW&Z_%^gib4s#*{$s9Q&f1dr2oeVu(wo6=
zm5><qZ@4`!cdlyZ;1d7(Y<2$yKG2p+tIi6WVb4)@hZ&EpV2n97(D*9eE5SI;<S<y>
zuY+^fLSt}Ul9){8i|44fHt>BHDjY_I+2=sHTTo_qT=z3l{U+e=EucWCDHVKxZ#J_I
zT`IY0_LDx<oAkF*l_+(X$^x?TH~3T)zO3rPR2ERG3zQ1lCmNqVl*}$s(<U-&Q^24_
zjRKIh)>r7EMdE=XSTT;G`fl>g4tA!e`j$CuwYT`>Y~C@$q+o^}b&HCxobjTQW#KiK
zaY9*CqLsV2d|wgw*12R#bCZAsJ2^p72Pfe5b!Wrt@5-A>%m>yPUUhv>UMI+xO+cE1
zZ@I~2FrVM-=Md?5>iz8ZG0L7?)%m4@=O6lK26-sd+0#j`GBt98Pg8$(ZhmZJPX{OX
zOj+QAe_qv>yr&d?O53R;^cQ@Fys<R)NZT-12cPX!kW~=1;&?&2kC4Yd*oYc-+)Zj<
z<(tnt{#C#TktW>`T;eB0lY$ga=I3>Ut;)0YBV~S`>VTGCLTBGCE-#KJ9WV@sKfbg+
z&LwYq+#GB}TV~p6{)*rOO@nAPU|CA%bp?U!ukc&fy@4T>F*Uv+m@?1WmR{&a)y=dm
zxQAhw{Q)*6Y{@?1L*Z8l{%M?4>EEMNF=Uw-@@)dyHw=AO-A$>%2#lkX%nMbQ+w*(F
zXG}7${jJsh0H3N7d4Hf{SJmq59L!Moye<dmCb%NhlPy+62*8GYLq#z~&Qva-G%4VU
z-~!5XRqvF~H_}zTzpMIdmUu&OQm*PPR91pwL%9rfdhosqL>(CXQ)SuxSOWHZLg|GG
z!;IO_@Y>PRb%wD)ZMb$9W5Z8>V{Etw_rFBpai=E2tYJ}s_?LYcABC#Po|+#I45)0g
zk2k=vW%a3kul;-?v>lIlzqp!{tJj(}DVK3|_Ez5dCT2H*jeY-wlD@j{BPD&23Cx|&
zkB|26@9=E)?@b@`zC6<N4oouuY-$w^I)OCV=W?80on4)K#v}Ap-#!46=zOH^reYH`
zI#|yb$^MAc60|Dog6Fe8$u(|Oc0^7=NdnXlpHnIgqTp93nIh9_!z%2UkYT|EK3QHU
zJ_D$6z5bo{T(934v0h(#qxJej&$?d!BLsSesz1l)$U(TIF~_=cj?R~Jnk#39E9ZP)
z&c(&$43Z+HF<<RaV_Ff^Y_8|Ph$?ySupjq#56qXI%6=Ql!}vo~z^8lx<=Nj-z(=X0
zpLxEO2T3NC*|+jcwt?X^XUM$Z>za7_krZ;$hOdEUPeS%3G)nmV9Hi0Dqm%UW?{daW
zy_TJwHwFazrjTqGCA%h<Y;|@eQcV0m6U1Lce6A@FF~iwyZUR#sOuZ~Zw)<h4pFPTI
z_E!5cO_RwZJ79n>`?nmCTPTseq#!lv2^zP^W^PknTS4K79P5*9IU?`2mFfa(5b1dY
z2vkJv?xJ=%vEF|!)^R?33J0F5W9dB$&LT`Gv-3{RCQg*Ei@VjlyX)k#A;I!i%|r3L
zvx^jLFrAfLlIIQ)BzNLuOSM1QvMMN-fMlwE-bo`zVMkP_&TBcN9M8;Vd4MI*Aus{|
zDn*afxA&w5&%>Vc?JY^!sz=lz%oJl8(20PSowkeGlF2cW{mig?uGdfHjAz`yS%OY*
zqQRZauhymh9Bh*BD1(<Wc!wtq_&@tJqQ~Hl9`@K~MSp3d0H_%@S4J6sZ~_0KMa<*K
zyY4kQ4#sh&ES5fxNqXhoe}=L#?<U5i)&+n4rlyj~gL|H3M@_ocd+`P&>Q(-<7V5$2
zk~l6lYb~b%xWj1Qpn}RNmE|WLrry=xYm5VyIm!J|ozqygxF)reZB8obd)n<6qp;Bs
zOHKdNci$Y&^D_o-!$Qd0ka!~aGw<;1E>)$=U_Fsn>iK>+FWD^(ZYPC+QK{}mc{SKk
zSz%!*Yhsb$S4>X%etcOZ%e^d{gCn8PaeTF<2{M|zQd|-XW%L-oPN)NpWU7(~MD8a2
z^IyaB!f>IY0zSIUgUkd6LYukVUSYABK0b=P24+!JNQy|skEJVPk)&pmq+Q@4y=l3A
ziEt@Rv;JYNN%sd==N+eiV|2$;v(cyB2eQ)F^I17wGF5+@hd_P@PJ~<B7lS=i!su9r
zgDmmPzK@Z@)s0kw&7Q}#t%CAo=<V>}2Pj(vS@V;#npNHdM%Hbr2j0efQ<{S-k&2M$
zlkiJQ5_ziy<^0nB&mh-b=5>wPzsjkQLFcIE{#@9xpt@(|J*V%=oSO+ED7ZNojdo&h
zWzVD3$I1%dzOsA5D4IzxYwgR=knOL$T|beD=3?nmU%`V8mB57%IC0n<8cd`z7M$Qi
zU1rz8!Hw8jt<`i$8!jP>jt(z~NpavQTC6fs&%_73nc#CJd?29LdV%|X>bf`aIp{xv
z@Oc80{)nf@^6eM7LSpHGW!jf01<2<hEBMs9<e9&tVqD9qXg*`1vNCKEBjj3}soZl8
zahxd(=7=oYml00#HwK4Vq{pg1)bNuNs@yur#nz>EP&-yqVs4&i0a=0j>9-h2+!{6R
zh%z^&T%xpkeXYG_N3E9i{P&Q%!k3HG=T7jF)@HlMLB418zMU`gM<jGU!{1qbfW3C(
zBd2&Hy(cRA{QEVQ;;HwF&TgqbNlCDx30mndN~Vb|G||2stj&r3lIVY!xV~!r>7!ov
zQRC?1><a{(UrR?Ndb1R)Udd9hj}Ja8xsxFEo=mx7`vB!Uj)2=gqkEmOZDQESCxe73
z)=((87lFNp5|SlG^V=-(25+5)a3MgGWYCl?yU_~k;?eqb2??@w7RUUHfMZqfQ&1%(
z)TQ?i5<qWjBz7o#c^G~*n4vHtE8Wy{0z-c<m654B;6$D!AHk`T3%(AQZ9&=`?E0NC
z(=LU7bC9wQ%U-Kol|!F&-2MXk)9b|0Q)Q<RpOnB!Ve|#3*~IZ2hT<vyX>>3}PjvtA
zpw7pY2S@1%&-i}1B3JdTab!$zWZ3-2kulSe(ftH{Lt`&NfjTl)W%ZFe|14{Y-a<$9
zUF@U!b`8^YlTLZ}6RGHp=HM=QX?dy+ZsN&~u!p%0b%fjj((+!07X}(X{&<b@RQ_wN
zD{QDVIfXtciWxD>RLM5SRjayS+vBR<UWel<(ldj8k$7}jp$xnO)u-I~8n(T!C#1K^
z(YvFg7o8haIC@7odcO+28ZF;2OSmD}NA%M4ieLp(LOsQTU;C%#;2NH?$0Iu`KKuFb
zVYz=`@|Bf(b9Me`76mv@%$?gCk8ZhIMOOadamS;-p%Glt)_l^7UDEHkq}ThTcaSvf
zubBn4$sU{2BN#yue647Rv@)&SpH^xwlkwecV!HLSigL=5Gkg$IkH~Ax9wfb$X_W>a
z)@X4k_YJ||Mm2!lQ?CZ&Y>W&#N4<-<b{H(AJFN#ocUZ1Fe&RcQvGtGF=V7WP7D=bg
z|F=Zr>q^CF7@=8lX4ri{*H7iF$6U8v%}@>bQd_{6k-6v9Mz2J#OBIJySU@`aElEZw
zdZb!Xn92f5^*f)+*ttzHzSgAdc@6fna1D!bPtsf2U!X`Gm8<(M2_L+_?hIqHtx^4O
zfJw>sToae!hE^}EM4^Uxu5#j1mCrNN<vGdaImhR@h&;+WmD=-TKl}aM)NfU`AwOD_
za(~hJIkalX&GkO5U<&Vt@?P!vJ|+9_BTb_p*0ccba-U4$N{;kE1FX_DOf2FE6}VwT
z&}Wkt+c;49Q}PJEmBVRTXwEokz+)Rkv=*i!J<Bn0_DvcUR35}l2=uXoNKdtFU%Klu
z5MmuKhiqP3lNwmo{odfn1-k5vqbuV}`R8h_^zeKAn+!-!Kn|Z1dEox-?4bK-qPu6f
z*EcP;-}A0`kYAO@!Q}^54{!(Km9E6FLHANh`FrHNOFBSLk=?E+cfoWuP?6QN2b2?M
zTX&4G<&8#myJQ(@$<y6M;>d34wV=~FkBB0>b&nRx)MZYjKe=oY|8lt||HjKY_}7W6
zz6U0z0Sehx`;`F+{MtoRu=z!o3-GCv9x;{q)eL4X>+<V^bV0MCmWAt7gT`nmXDat;
z7I#Jm-@r-igzJS<)eY|ZCz~Zc!#4d?Kb3p^&W*XR$VQGu9zv<C#(EB=oS+Je<qEkX
zU&zW$R>*CxkUwFSBuDG%(J(&}@@jCMdLMO*{lgV1nK@jpTYmSVJ|*qzcOUriHPh-+
zk4pM}KaFqd+5Jm)_P+bINkxJflOQIT4!!~lbS&j=I!20*du7p=9Al^Rv^x5*9nIF&
z4?4~qm5^48op#hZ*nw|VxtldIpvwAGww_BQ1%o#PkL)0WRMb;(h1n3dIl;V7GS0r;
zUg}r0fxU6+%KRlZ$(WK=)1Q-0I)%hFC)b=(b82?7NM0OV4?p{UmG95utlW>PTrSJ1
z;HTsXd7E3S5qu9`mfO<k@+7&Xu-C<VqsvGLSIGWg19C&~Q`B1i?4EF)O4pq3KjeQC
z1seaEq5S9kzt9Xf2To&K@IS7up#cRWWo!H&lxrv5^6&BgNf;0R4>;vN;QyXfvvvN@
z_O7wgP$V4x=Tga5_<y{jk*+;4?OWl0|NCsZU+Z`4*2tATPeyu6P;6aQmA{AOT41SM
z%r1YvBWqf*@(u!=^|o_@I|r5DkZXXO3wSBjU2(TMDwf{kev)ZO4g{RUouKF<wN0DX
z>HPiBI-URQxsY63f!^9x^&rWq;{pD)639v+?ZgK6ZKs}M8&55tPk*Rp#U#?`Dx3|Q
z*Gbj8$;$bvmBClRFBiP<on|z=Smh^3l{87V;0G%;!P6KD-6Yxz$zUkH1FD+FR9-Hi
zt~S{zp6OUWPIvtNA(Ce*&z;2&O7I8ta<1Ose@>Po#&)l-5EJJ>UwQEL^=QA7>ESq*
z%P=*IXnf^{1!amP34Gxqm^pGRQ2LxXvEXhEdt{ak2;737soE1AsQ6!)Iv92#LA*xI
z`pHzKpp$gLr>LDK_D)gF#9!_UJ42b)h%pxZq>uhaKH84^^Z<ags(r|b*mbao^UDOY
z=;69FbGW;R%FER4u6<K!-x*ojcMg(Q*gpI`gNB6d%L5A0HNX?_M~$t5Mvn3E_u7~n
zb`?Py+09Q~#y(l8MwXpqKC9DJ(255gR~9QnzJYJ~=!N-cyRr5tu!=<T>(goAAvPVX
zE=fI;UC-lUT5gW31g&?Dt64+`y;R2;kmtz4&(r*DF-$+>!2ca`hf(^~)T&yp_u)$j
zhj|9;q3<7}{R8M#kN#dGHcxw{r~NKPW81JO)^S1WW>@?Kip%NK6BrR3chC9CQtxw%
z%u+HG7&GVikUcx6Y=OXh7w;J<9sDptHwQCW;&A0i-%lmv?j>9gCuHuVel-lrJt;D6
zlk&EYw#xk74d_7%r(%yNe1-})BN=QD;d13Nsb`gvF|5P+8TPo6BA$AY`{(Q;5bx+3
z65Lec6mxmO=zY~xkGFzm9PLm`vnWKjOj1&do*|q0b&DR4UloGT0^DV>Q5Rs=NeAdt
ziIJXDp|-1P3R5KlaswIpfC`(_#M1};gV{n5+obZ%v2a9Lk@n#`lp45HjP9#6yytJC
zrtwlx)a;sA(25#MH$G}GLQ|(SN*ywvSkErIAzU;U=+HO%@Boplm07r+OLgyhzFgO#
z4_pKlmMqe1>t0Mm#LAjGX$2}Sr}5UQwY=;qj()_V5ru-Jmsy+>lmeI0GI9O<`z24s
zmr*%C4YUP^nd3n>2c|nl$Iuet3G$tTFHUuq;Uv?WBq?GsUe;!DaCq?22V!!oyf-_M
z-O5@xnn~p5wfd;rj^3?x5j4sdxf8{8Rb8$PH<8|BP)Vj}jZ@OLql1@TMjO2$5g>@R
zl_Gll5p{_AD>JCmHYDH`mQ%D`L-CCJ-B7G!taG86qJHh84kL;abe~%-URJ(GEH6KA
zQ>N13a;Ejtw;4!NrV&2V0A<P#>6t!yJ&M#v+odTf^otb6eN#|J`YgQp!GpiUw`_!<
z!`;D43Zo6e@H&ORln<{`c>i2jqT}R77SsvYz3chzTE}pSPSdN-rMp^{r?=+}ZwI%V
z3X=*8#naWJYv6l&(7vnGVlUHp#hKG(f98nlf%RhN2K43dU;@=kUk-OP7Tnh`=(_vF
zuFA<L>&GN{bkGFPq#$gJ1oNkfz5PcHn=vHO`je3EZC8+g(XUGd>tL4-_*;@l@AXWS
zo$O~n4Sm7yDH2V65UHHj_1h|FKp$hu4R9^_$p0<&uj5ua%_jN~8TH~UsFq?LClNBT
z^IiEP|86hSFaqmdJ3sbMz}|1RsPJcn75*59NMEKX4c?zVo9v$F-BlG1(T8yQLYV6m
z99l@aP5c-XbPz3F9V3@Cc(rol@F<6@u>9xU10F@bZ))#11VeZq&iC{>ynjsJN3#13
zKN1h_3)*maunUu%!-LnGnGW&bzLVUj&*MQ&oPcsSlT2puo%f*m<MH4Ml2eD_K{xdh
z9&8{s_$?*;Kf!~k2WbKlQG^HYzsH1pE<P~f!Cpxx@@+UY_|fF8;lY|0&`@#Yv=A=|
z4?g3+L6XOVf1q>;<F7Sr3ZT-bSGxEgDn31IK0)-;bp2$i7DA_>(m%iM^izljQ@*f9
z8-wuIsjd5b^jGuIMR;(Z<4`bpJUE3O{%Abd_&n`vH5tw0U8&*sw7phJx)=|>b+>EG
zL(&EXjU3?#`;BRdVc#c6BRlyiz=OM5Ba?;)m->Rblp#NAU-Z!}`RF1%STm6ZZVM02
zru7AQFiCZ&m&eG$&l-OGILmKo@p$lhreM-9mr$z&{|X=OCLHD|z=N;d<(P24hJ2p(
zeLd~JQgo&O51#xFSNtf7%i+Oke#O4L0RN$y-HLNl(Ta1Ng0<p&94pQpaS2LtLjM)#
zFNywHNVJwYwdj0wed<8Jip(Y8U6LRrc@s8}{|V92e;t}n(RYWR9M^YsgDI33Ow=%8
zN%_Vg0e@L%eo*DatenK1dOo>c?bAB*WKw9n`*mhq(#8q5&RmOA$-1X+QSe6+dd`Yf
zr9n9_RaPm?(~D^i=EhR5Nb|)r$z?Uu;+eTCYNp}@dS9^Y{MWQfSirs72e}wDRlk_K
z<kr+)Y7JgfyF|ZhYM1IKxEi4j;q!*z2NLm2?aHtwytKVsF}^wYz;?Nh$HYcMK-#MU
zx~d)pAE4@<9cbcxGNC%z;uzO+_3S3dn5kV%DVl!<4}8@PX?G9CxhuCoeYy{X+4+hB
zbT`vQEh~s>u&CMx3&7s4I7efdre}oooL8u(;gnVR`JSx=9*!#Rs@feAQH1Aqac_?x
zVtUXTp@mHSVn20<=^2|Yr+O!e>XN_H51HiRSlYsdq+_XDl*CQvxsA2Ub`gL*Qng)%
zs^4*BuY~Vi)Q6zet}JN6PLSeYat`J=94&T%bV82p%3dPj#>YTNF8#ZCSY(L0Uxt^M
zv?{|-e1=%&+@<*(2BiAs*yTBwgY_V*f*ecoIR*l~qWy9l2WU|pWAZsJ%jXzG4(=^0
zYR0er;&SYe&v9u!$6#{c<0{H=w$EYbnhX@4dvQJoAI}1?7w5R{DuyCdT@8*h7@32Q
zOr`jOd6-%<ZPK{FXP9RhwvQ}7cX4ES^5S&;rSbHn(dlWI#nbgmCZubZaz#Ki(sKsF
z9M4?aOt+r^FgiY#zC}ah>+#fElUZG=*{ppeXp3mj4&IHY_g%7rvCuuRj6E6WuFUR6
zEqQrF>KgBLV)zk~cfp&|9raxrQOr+F{Bpwin2@dsY7Op~-iP$9G0BZ&)?LfZq;V7y
zUfaWMC>i>!t13#JPWF2TLXY?I^e#{q_!DyG)Mq5|1!2=>#x;_3Sn5GzR+?0I#WI7Q
z`y2UFwTt4ZyTl&h&}Z2@Dbs%wN->uCfug-LXcyR`H<#;8de~V6v5P0^CsTEf6<Qj6
zQ0Fv74Ej~vMZUP%%9OV+t9^96qPy=>x8g^mjZ#Vb(BxR!B7@zJ#YpZ#M2N$`79-+f
zmVEp?Wt_s7=EDal{G(jh{6%8PoYW7DTV94nJ+0>DIW-Df<XPmLWS^DUmr}?KTJehG
z66w206LRV|%N;*bVsa6uUiEL<^(H-R5{-pZBlVN1nrsD^22Vn$rg40K!8kS3XBw+a
zc}`v7qra4oHkcG+GA@w)K8uOjaReMcVyVZ2a`EgQ#00x%ZOl~G9;engK}Zj}@D>ro
z_nGOeP|pQ3p+^EAM(|6Yk`V0gmUKSrCp@2}wh+$;cQ6^|DwCBZi5Igk*^4gaif8VU
zxG~^1Z*9P(uQg$0(B(fYuGYNHWHsAMcL&{&1JwC5&Ew}Oeq>5Dow9Gh>cPR7*U)=i
z!OfcG=KC`gpUg3Cmeou5N*q7D+4b2|UsKCPsPX<V7$VWWThWek|28=NwW5Oit_{h!
z(%Jk~eV++q{PxsUeQa-MeIAN5Tl#`1W0tfXB&dl)iz&4|3rhDkvm~Ya6Ex)Yjmq}u
zYHR!XB0X2o1c$Iv>o{V}T@kjk?`0Y)ob{<-=y=Il;!GiuO%o_Pa`2$@rk9kQwO!(n
zw^_d%=#W+aZG1hHE2U`L`116;txLv-1cLwsZ%0ab6r5TS?28ltr*=^#|D+ON+0N!y
z;8Uj8n%{;O9Z=%1)keCr09)zkg+V8#_Cta!-cDhwAz6*I;4F%EtoD2O9^$>~`3*GK
z_dK@1S1W2jr14DCGKa5T-8#N15cEY71j38`?`8gXiT`zwtK#K6<a#%_N?JjFG`af>
zY{_`Z<JWs3*}AG)@8E~|ssRe0pz<9)C+eM5ZXF`{W{uMWXBnnBcf}Ui>N<h3^tpvV
z>K7JO1f-4@Fxdh~aew<=F)3G0VnRn()zj3^;QW<_A6G|FXSnVWPgl+7W$-X=bxfoZ
z7-C}0BW-0k%v7_P?*}+jA}3^(TDQi+#w%gKRBa&+)V;h80lgaHfV}7Nbq;UH_On_e
zW=0vy1*j+IdHnKIF4>>+Fl0$sSb>+R9Uq%YyCt8j0N)rQk~8X=-@9br%_jpRmRe`t
zyWU`slAVtlQfYWGLfRJPlNt6=vhVoPs`JTu^2rSFDA}sZ9m@H9K3P{jnIRn|JHnUt
zw!=1Q(C+eNPkP!SK^sO~?cxdPdH_!Cl61YtH=mL)@G-4e#`OCMcz5t>ACGelc=K1_
zjfSx_%VOqiz?*w-%)^@%*-N~gNDoS3$-QKRGC@yQ(=);HSC!K=I?zP|6-(QjSb8B|
zgH77mu)1J@Z6h|Vw&(Ro&jFO)RW*~6!=fX-`U+hLU~GgheVnP;O=u0O(}pQ$fWI$u
znFB4Oo}<o`0iJm3SHcTY=Lgf2Iq2=dGD4XjDB6RS+5XLIrfG&fN)QwLYyD)Z9=D=P
zgX8?r`-}%G&;QyLcdIhxt;29%){=a*nc({n5NY%UM`E;YF^p0YTz?dSdIBDwT%qu!
zT-dK)8LkR$e2j+QZd%bdT<(g?vH1ChkNZom;dHQBO=rig{hr{#qO7?6{>^J*YkJtD
z1l4~1(0;3d_9L@`AUk>p^8BxS`<1Dn{l2Uv`Dk-wd>ND_OShnkCVrlP?PJ^=EEPXK
z%*oZ~DHVV0eaDD|(ZQdnv_NA7>tRqq7)`eVO)QBifF7kDdgz>u^H-0j5^%?glEll|
zpIF^pmc<POiP4q=A)dZgFEk$VutOu`OdMue?I;a)f;#X<6HVghRDMD;pF4cWJxewc
zf@*Tfa*wv(SAz<ERoZa)B)&um_dOTp_g|%1)%QpkbF?1%UQ$Ok-QYN1C1J>O{--|r
z%Zkq2WyHI;!Mc|y{Cs(kZ^JjFYJW~5_kFAXz#nrbHH7|{7si_5-nu_#3X{f<@yE=7
zTif)<%!2FXZs&*jV^%TtgdJ`UvSb50JSv-h*AXfr!LF7K!4u=uF1cdXkfH!C3|Ak@
z(_$;9x8oReu9!?P5utG0^;qF2yi{4eN6TF`LA#vt{%3vv;(c3m1RzM@3LG%*29}X4
zxpTAw>9u9Z31tf;VyqK%>6gEt3d(Gs$WDZ)$oA>D9_qJV8Sd4o?zc{P(q9o4ty7wd
zcPs0Z>+O;fCcnZ)JHISWu=l9IC9%*9>=vt(_rc1otWsW2bhx)N^dG$&JoV>r`So;V
z^UJS(ag}efT5GlV`ed$ID`^oIr*66OntG9|(QLid)>+xU>6ZBN?I;auk>398xYt0<
z7VY?##DFGGQj_zmtuI-$99vAVJ?=tJmjqvEQ2LJ1b?I-hWlHOM@@Vx?c(D0!r|;$y
z2>pmG16@Y8El}4bMvdP<PtATq$3;F`h_Rp#dM(-sO@VhSrLH;ue#utxQYOZshe&_p
zslMynRdvK~2uFJUgfh;pS*8zqX&Hnc_JZ2PiZFcjJ5gAH$M(4OU{(geDR!HkZ%%G4
zK<mM3UjeO`8?A0Vc#EarID#P1gPc*L*t<Z$2wXcb(sK`X(k$Nv6cPO96t2UP+{=BE
zZk`@2e*Pn=qys7Vn^wE~<}yk$w_Y7C&Pk#wf>&&^^lI=Ie)FqtJ$MU5RWz3I3(Psx
zmRo6j|6$jFFXfVI(K(kc2Ljh&Nz~Byu~V){?b^<z%b~y>7dzax&eCl^A+p@oE;s7V
zkp)~K)+Gjj%`|@k#i5ntP)hH6(l21T?+tS%**fOp-2R-=!EYYG`rql596N5bY@8W%
zg-kThS~ETh*sJIKnsF7S3h)e*Ms#b&XZfh@Oi2!V$?C1VUq6|uSFE(splP&|{13gQ
z|HrkioJTd<!_f_%@?|YoG?#A<2iwy=iDiqmU%OvZl^Dx!n0c?}{<*^lotyKw1lJQ5
z8<0tEH#!WPnmv+#LV359_Plt9tMSwRqSYO~=j66MFlsliMXcDAaAfdD=6Tt_SQ*s!
zHPttZkjGc!6#iyDe1O7d<il4e_ip*{`<i~|)Wd3&Lt^LPZ-*LtdfuQNd6AyW`GP+e
z(6#v~N7C8BF)H+Z3T56fXv{TYb>&~H)ZwFpf1zY@!!OuLp)Cd_CPaf$e;Sy3+ETN9
zPbWAX?&dF&@0~&=9{aRG+~VMO_-wMr<oHefw_R=Z&-C@5<?DA#-50?QwuXI&VuA|Z
z0BTaBLL<4VZx?SZ`=-lEw#y%6eMdKFtBZ&m6fB?&MNd-i<d=gRi5C1B<8uuOzM?0P
z$mbAhA(Oon&M>ZmWThl|L+~LG!&O;u?ZE9aoLtB7rg@+wIz`q0Qykf{`oAigB7d1H
za&_OiVRO#+4_VFV!^o@sg8<h%SGfW32(YGL02~A_HNI{kTH47;e=z4yF#Ql<hc7{m
zI~r=Ud*<W%b{6J4P_aV<P@s57u!n-j=Mt^T{s6V4+ynIjtzO{j$>EbN{242Y*NZkV
z+gnh8RkT<HWL`p38Lw`Ah+hl`TKepDg-(mPgq&KBI<1bk;$o6@Ro(qde)tHlfr-j`
zLiy#O3(*?EeHBiHoFx@fu-{@Ut3k(FAw{b}WfoQBvB>Tqx$VF7<L$Do`+Q}vQq(TS
z|1Ij66luN~>Di1O!YQGE+aR5;y7M|njQmlOlH?-|MON}v^I7=yoqx(tQt0OFx4xq)
z&F;-Wo6GL;@rVt^p)08Z4*k|~=m0_?htMF`e8p)HyoHc3sEW5n8Z;YfH`k<AFl@#<
z2S0s0eeU9LeLzWU8ZC>o5E9JFo=<(+u$nwuv&_jO0sLoB_KSF<KBDZQ+bVmJ)m<=4
zUr9^4jEg0a-b*1od$0u3<k0xvAX{zxUm_1!p8v*zBK{vig5Y~ke-!^0oBbbQ_TT1s
z8k-ba<Snv$_sznedvo3z=Nv(Mta4VnH)pl+i{*@V4g_qx&m}uGpKNJ9Sq=j{{<ceY
zcs|)R`D8f=Fl3Q~0Hyh4OY+Hbj-c~>rCD^X_BbV%M3zsxhP9}r!UwEJElbzm?3SdK
zi-B%7Z+;qFHah2&S_5|A#@Xjj4PIt42Z|W>)4Z={W%hDP_T!`GHroh0AyvO9XucaD
z(TNFzmtD?zG7UpcXmKnv=wFXOPOA1Y?;V%?(UDpUksf^QCr;trk5RybplI(w*@vp7
z3V*3L>0xPtco16klc~yB`K7_mUMcKDgH+s4d~r!-%HxVZ_~=vf(I(-C(;&(AVF#fN
z_b0G8I2{?xKAE#`!AT0=m<!i92g-!hv_(P3U9|h`Lkin{3b@9%d%NOxhYf!JO4qD)
z;#X0FM|vV})0_0L9}}d(XX__Zb)^+t8tm@IdGBb%SPj0x7uTaq`3Aq@qvz(Mt-(JB
zb*jO&2hyrb3B=Na{)r18{BTvJ>Kh&0P7P>p8yvx-wBCC}+-S*rMj}03%5NVuI+G_i
zZi540rTIlTd`N8eMw6M68V5Wlu-F%jz7xKUN1ebaFE9IEL*-6h9tJ@37|Kh?w^dLn
zakxVKF5;W$*PHY8COvE>O^0ve^^>WZZ3UMGFGH4GO`rCzwuH|VSEfAQe&wSp^U=n)
zG))oTc0K^Uokt+VlZqTIW*&-&XuT^v=(-=P=E}*VM91jhn_{6~%n!~LcM7%t7K>b;
z_Gs$}7Vx!i<XLKT>sx=zzGQJ-Qd{@9edy;d3fA8aH~*nd%W?B*z=h}LIS&<av)|}z
zgH*BZ7<EPwQ?K!F4%D0Uu$|!xOnt+eRuuuIXs6ZpXt<dATL_Xc?&UMR%cv}1>U1Cd
zLO$A<I>s|~#R&L!pfS}Mp8ej_$!ktZ^zOlvSp3xfBq=3;){;bQp|x<WDSrAliXCfv
z$opAM*912~E8ue{3gTyw``JXzgx=-HA*%vZSmrH!@JF0F!kJIl?}p$ZeuXlBqvkji
z5Zpps-=DT9;|r`OEDkQy%e(ZlZ+)2L2=QwJAYANUV?$2eYHTdO+(j=_G>eO#mBEa)
zG-jSOq*fe{rqt|gLRN6@u<|fpL$=PpvSS&7hP!yW|4Fe7)*h=*ssF2ZFO9(E{W|AL
z{0z=S`{BLEmQa5V@0~&@L^G^Q3GY4m<^P9xuR_%2@y3>T?~$KD;$DwS0{(B|y&I?^
zkN3tA3ONMcyLsOtyjRcLkHBPSKK7sEy_x%Yy!RF+_an;w!nVr(|AP0HQD*`FvF?7P
z86hkc#z_$T?9q?n|9=DT9mLfz!o(kg_Xhi9AA|Rv5B@E@H~hSR3-4XL!j<-4!F%s$
z!kON8U-tUtw;pW+?=83)i_?wH%v+o$SzBknhXRp#4DEM6i}S%HPPhFY1zc=#4xwr(
z!`t;HJ?sjCSe$e81Fp03OM^YUQV8+huY7U6%9J<bfAi68`RF3NcMRS+kN3_l<FNqm
zov!fK@m|+Wv^!m1*zUQqi>}?D0e%;>Th>TAen(HrOX63NiLLQ(9@3liuwN3S!D;<~
z>#X3?;6OLdb9nF0?>jDCs!aI?|HDV0n~yHSd(-xzRUYqsinQR9-yWd)`2ICD<nZ2K
zX#IbN_r}4>kHLGf-@>;ks1w-Z@m{5XgyY+vR&JGV>u?K59Ih9?i})t`_2y!|Ne`Q+
z=A<j9SgWcMR&Z(X4rCSLy&hlO$;y=H+g(1oHXmJt_x9KuzV*j@F)=fb_ih6j!_S%f
zJAR%e7KV5)Bkuf1c(0EdKN9c#YZ=@e#5l-v^Hp$!=jKKC6mhfP=sOQm#k%9w8AVLJ
z*}pkLZ_>l|fG;q0lQpesF93<~-p^=wA>R9n&$NRw<(b;-qu&&fF1iTsJ-8SA`)IuP
zN|Yr33%qv_PC1A7RzWM!Zg&deXPEo>wENkCpAd)@EUS7fmt~SDy!WF0ZV3LUNh5gg
zUNy(3SxwwF@!nFs+#257{9VWXr)|h#;RrI;M}N;nuT*pa-s^aP#^mtcWJ>*y@ZR2@
z?oUCt^FeBDy8HeitE}cv{`rIhpK#z44t&CaPdM-i2R`AzCmi^M1D|l<6ApaBfloN_
z2?zfF%7K}Uoh`E(Iur9++D;ogwxPaZR(l(v<g7%rE!o-{ZEH_N&unaMne7{JWOQb-
zrFAx`qb+T-TV^$NM(4E8i_UCqYMb3OJ36~D(b(CP=!_nG@WGZN%3rcm$&)Q@iNi)&
zYNd+KZS3eE-X|<hcjzJ8N;hd?qPe{-dS=tS&K7>>wsg*IOw4K?8=c!eJK5S4o!{6Q
zoz*_KqooyUM48X9Z|8wfo`@!zn;<;VG_PY`6aVH4YUw0e85<KVG-hmc-%e{lozk{7
zwnm%g&7-sys<et4#*Upeuc<N7)X=mb(bOhl8r+-m5o)+`iFeJ7$<9Q}nN1DGA==yE
z*;aC9)2u}Myd!3|x3?Z?oNsCCY?_y7XiP5H^4*-4)>d*VK}m6!!9`eKGB!G~ore3q
zgVNbeb6VP(X7AlEdDA@l2m1Ey92;$D=xFbZmd|f)nbjPH0sEen91%Sd7PWL9bYy4C
zSxx05`n@e_OU~_Bc(7<Lcx<4&T4T@bq~r)LwIo^)nzLYLdmDX|Y)!Ou&^v`Jb`+8j
zqNDR$63x-J#<@+=eM<HziIyW;bE8$!l9o0TzG&lumd+Ar>uj8>a^|Vv&aov(jhDD+
z$$^yKkxY!$Q{$}WmZmeCW)nE{;E@$2%}uQxNKC`5jt<{5Uiy4!W^4Pb(>oiABVAn$
zEwdNE`NW}z__W2*hmFb=K{pikZ!r_1a~dU*CDYm(k%VZ%ItwXIL}xWJ%o^vNmYmzv
zmWb{r;o)yTCGoP`KJ%N%O0@h-u1}+rPCUA9;)IbS8z$6Ft*MLGPH3o|Jo&iE4fVBC
zrqmo;J0(i@`!N7d;PcGnX%gEeH>jEtkkUEA3z>-?lH3XlLJ6b(#(DD^7e<>IP3p6G
z^F#ohKa(NTJ|{}=IGIO^O2$Q-7Ig5Q0q3(JOVS(j=d~o7)LhD&)|N|@Bmd|Vr`Aqs
zsF~6*W$NU*iN_*sVp4Km6C<xM{lcRcCYowQP(w}U6jN12X~nMszBYCyLe4Q_5{+%M
znnZJAVMkN6L~I>@zyU6_-%<Ph*SRWU_&dUPMs(Ulu9d5c*Bl+MjZT<W8=ZPwv}WRQ
zQ)9K0qqWn=*G`&RcihAyOG<`*MEYDhm_4%*L2Yg9Y@XND(b_nxsU(@0bI|CmR(E8{
z5w-P`rk)t}MITu*bZAXt?9h@ClvAwN#zs39&O|Yd965IEY?F_%V@=^T%xOZqHZ-=)
zZfI+tH&<i2Y3$f}O`WJNsRs!!{oWYuY(n|WjwTR{gQLeyt~<7FVof}1a!G9^CF2{D
zr!^;{jcw6n+v#oX^V_0r6hhXf1+$tuqy+ZfN}7U~l=0}|O`9M1-lokR{NKj&aQ@$g
z=R3Z;Y4b7s|7K>>=JWZ#^kOzS7wK(C$k9|1om@L9UNgRSLiFepMVkGEEkPMFJpI56
zbv|~kkp`PkW8GvJ{CJi)wa;WgwV7ox4JKK`%CygGIju#Oqj8oDK)#_Sd(Ju*m6Kzz
zW$&NMXZZMfbH&gt+pc+Rw7zaiea+PIF^!Ept@Po?6`(O+vMqUWNTQ?!+u|ik%F|3}
zXTzDJ8cv%vtD&`JW@lnHy0~H1f(4B;TSiulJgh-RgugIXUJg%dN)!}9raAN4=Qhl0
z?C8YaBZ9}63Us+kN{UjCMGYof)uKeSGdT;e(m4lEvk;x;4HTM~u1cUK5>3&mQ>H{u
zZ(6vw%9`7FdK0h+J2R`HV_rMfBeAeSDx{pz<K)6rCJ8WjdSTf<I-gf>Qp%GSP9;yn
z<fg{i3(H6B?ed}D8!?p)a~XoO804K>tt|IeH5#2;&G!+Nh54LeX#h|(eO%iL=?!I2
zU`TA*S~23G{<hwq9fsnJzfBE{u0*~c!wmhIpDU?B&<d`1B4ZwlHRNBaC-NajSuPwZ
zwZ>Kq-t2`9jAch9`Y9(UzFV83PLvtmvc9f&OG;)nwn>^C_9Mycv11*Oi?(9Jv5tvm
zbllv=1q}{Bh2>97&YiSyY_zkv5i4ZqW_Ej1XWM=W(xPFlve|%Xz1oH`v!ak4Z_>OW
zn+HHjf>(3#ve`MnHLqz-)4V1uAUN;83?FiceQe1H0kJ4Noz*N5;89v<v~i9gc1g6U
zqkUGhn-hq;^GP&wp)<iKhr>ppP~eZp77ky5_M)Idppj>_$7Tj$-~?}@g@B}emf<IK
zQ^8-Dt`lVCm@u!g?KGIx@9!jEUZOpLzRts(Tt1&8EH9tJwXA=EVLHU1Wo~kAVTp!c
zLn`~H>ufqBDLSLfrcO&Rsquedy3Xcy0Anr{dTA!=v$Z9GWa)1k=?pEmMaxHiMLA^s
zeS15b1d+G>N4k7deZQC;YtmdVY#phrynNE8xgCjx(b@Sv>GwYO#^L_<HU^vTA|tMU
zdHvG2wxe>x46;U8lsRbYWJd@5F>*>kvyGZDdDHXnT7uU0#@S8tipq;ljpxk*<!+Hc
zW3O<MXat06tk{l8J3-W(_OZaAa3a7w4dBEZ%9+z{0=^HrO*RUv*dQ%s_KCp$2S!Ue
zn_B09vrj9Dero8>JMGwSe%G1Aw$5V;^c8ZRk!)-gB(Y+`hmbPO^k*lj<IIr_CFT25
zB2(o3_dk8Uo<<BUIgZ(hwU&8wvJE8B-gfZNp(O`Lt$lSxO^!O))X~VS+?&H_XUl1A
zjS0{^f;XZc-u#&Khl~IVnx1X<L?Cr7%%ds0t-bA_kRGp_nKPE`<3y=3N2@`8Y&&9$
z!sQ<)7eXCjcBb$JA=%okSb;FHugjHEQW6p-lJI3T;gy)}NSN8qRMsH};O^|aVs?p`
zP`TNW7uTlQ<D&l^%{&)K&ScMKcO``_`?uPevmd@K-gMT6@I2bo3Fczh3w~+tE~HWj
zYEi9BOn}K|D!0PP`Av<dV<fym@&+}O#%+!h8yH14EzEMzyr$C-3hW!^1PIfqz6oE3
zpk%h2*{XA=&TAnhX4A(B@+I2}3JF;t(vGQ_S`!}|&55~OE2^w**1{-OZr14@1SyGg
zQOs&>YMj>~{}HMT<YqI95aySJWk*BQi1W(11jaHGnxB^vHMOlh8n&Z<BTZ4z(tQs;
zq@tqp;80Ca-CP_^(V0#8iA+;lR8l&x#k_T4N-w}+`FXyF6pkG$3~i{w=6%iWt*FGY
zUPC$AZOqYUoDav^Y0Pul@=f_KAr6xOFV`bV3Vd88;n*xu_ZIn<N@UbZq6ZxrEg4D&
zwVzJU%g2PV7#A&ZI*#YF&#fxKNeBchF(_AZ1k>tyxR+Ww$xthw7ISm`h3qSr`aMwY
z&D`YId{?2PidiB)Nz;NelypYUwd2a!%D6}*<<csKnOno7!pXU0xnesHj!s3*&1n~~
zGHn#PlEgPK7)l|hYMA`{zoA1Xw9Jk!Y){JG(BT>vGrj~5Ta);SjtIr$E1ikfgPV_>
zaa8oUc?GfZF10o-;LU+U^J&BGXjGO13zIj`Yj10}NZbhrN2j!-lN*zXb{O9>Ybafc
zoXUmj$Za=&fM(99&v{^?7TSQDbzWn%8Qe}%QH!X1a%T^n-;CTjmzP*Tv*zU`)J+on
zNG$LZS*?k@!N4J$oQG>!cv=-ShHd~ca&O~u-lpMa9{MSvBiy0*$C~^jMm2m!WPGbI
zzb+vYUjf~Yg~z+*mdtJZX8XJnL+j>nD`}{iJh|q?hMGxrzMnL^oi@3aewUNM44?{#
z<`YIc+6{lW28JCMwHm{o54p(bwcJNmMMoZd_`wzZ=QH_nJ$9@S)Bt~^?;FY3+S&oK
z==V1zfgiFynP^&I)5yB`#4!yGr?n+DwI6v%Lma;<Ugp-8Sqp0qsjcmoncy)KM~5U=
zT8*`nzcz77!{NU6y4HBh$ir%DEp}u>U5gL4%tfosY^nX<=AUwS14XpVoVgW}iij+r
zFGo{I#N@9{8QC!9(1w<lR*|yRzpdpjY*R(PO;bi~rKDs2PkUbiA61e3-*a>h0z-g+
zh@e4n7q2)oxpzGhk|6|Q7)ew-Cm|Uil4DFJ9Ios}QAFj4iZ{CPMn#SH?Z)+DU3H`4
zeMJ{n+|@N6t9X$4f2)s~H<S0cba#LM|Nr+spQPTaS6yA*U0q#W-LGfitXK_2C1}&N
zQdtEC3H<7H9W|nKyOy2`6JHSj)P??-0D003dviqu#4I?N*v8P0yg(HqJuU6<80&Xg
zNn&|>^3}v2t12pF2vH61J@BKUhC;MxAq?-`b%+cnyf&owx}&}cqDzA*W%C;N<;zMi
z1QVjU##F&?P=MW1@E9x8yWQo#vmL<5KdOGa&;d--Cn&6DXVw9re?P4QnATbhxr_V<
zbr9%xp;5o<gN?MVSiWnW22y~tud23up>NkL=;YtXp{2QASj-dU69xoN-pNZ3&a`@)
zm$MUZ!DZ<I<U>_rh90Z3xVxV}|GAiSA|@o{BMDFl1!&oEhXTb($C#yj+1~BdfO;FB
zzflY&m8c$z7C;#igfV&iFUp59nh2DDvXpQ88npYhn^4KIHjk_2sFXiVKGXIU3Ye&N
zmhBytMBYsPjdbL9R!`k-x5w>uXS;LUx$Zo7zPrF(i1iSU$Lq=V<alyDd7gYvfv3>x
z_IkWtZ?-qbo9oT<=6eggh1u?GPqsHZJ3A*kH#;voKf55iFvp$a$?@i7=j7z%=H%t%
z=M>}==DKq|x!&CD+??Fp+`QcU+=AS~Ja?Wa&zqN>my?&9mzS5HSCChj@6Pw+d-JpN
zbMkZZ^YZia3-SvK+y$NjZ$WlJPC;%#UO|3AK|x_5L@Y%1g<xHXWQ9N_R73Rf|IPCC
zABnH=aD5)Jp``RDul_&a1d=0hKSN_c^gDe|FkL;QBtU$TDlR&Ij4u70DV`Y9^g6wM
zKQ`gLZ7;{KD>!3xzKQ>xZISu7XIr*KIswxG*8_HcwJq{aGGlK5&L7U$kATmQWNZR{
z@4ImnV_v|qdotDv_|!PYZU&r;7+b-2+aje9a0TFez&8N50y@9nh68ySI}2xIP8yAT
z2ew5v;_J1d2;L)~bT$x~gaUK`76Envh5>7A1CjNBA^Sk2AQkBx1Ca*-Gx<Pd6U|hU
zfCt|Wz_pOCYY3hpUw=BjSVO@xM-D`0L%yyt1Ci3b0rwn;4BdyZp7BVJAWk|y!s|hK
zGXXaN76EPntO5KHFa+qv;WV9q6@XoUHGtiKVZdI%6@dMK>j2a7F=RKO8}KPWKj0gH
zA;3=oy8xXiZ!h3@z<xkCU?#pAtpF?ntN{!Go&nek*iFwklA)UF1#mN9AK*~bLnn?H
zSPa;WLmr$|A8ybA_TUhX^fcs;lcE*_cHnfgM*+L=LH<y*M`zJMWF=sF@j&EWz?vxo
zk%NcfxpW}X2<Qgv0L=6aMBV|Ub6}YZ@=nF~Vg$<uBJ%-5(*`1!1E!Y`L^c8zO~-e{
zXb(06&(tmz1CgzO=|_P-6tfR-KA?Lh@&zpNL+%lf2QU+`?`Y%?=&wRM1NKzoJ+<p`
zs2{+N6R?I4n0Yb|{zN-xo-z=*0kC@x@&PQWL%n7IHen9{U{5pj2e6|B2lfKiga;yi
z=wE2bK%@)M{hNVEA7J0PXooS#X9eT~EIJQ-0XqRV0(Jv_3fOx-`0s(|3&01^y%O~V
z*bmqZ*trV)05h@IARYQw)CoH3fEPhe06PJD0Q&%Q(0_W?qP&1zS3pic|5Zp2n7$6}
z1ih`f8u|#BdCfp1V=v_Qd(;D9Kj31(?k?m@&)1<|0Q+u2{~3?+-h%u9JMTdI0fz7$
zv3mmW_o5#FW<CXd1q}5f9bnHpXb<#{(5KKl^p8Hk8vy;E4Md)&{sQ<lAp0D0XQEtR
zpq&A`ze2wu_%-B1f2#Qw^+)|`0uIrDJ?P1dMAiX@_KQSP_5<A{d@Bmr|I0|^azMWu
z=VSnej*LXAC!u};R}d_TMBV`G2mBhaa~jg^kLL>T1MFNHiF^v!``bul(k~!aM<j9*
zVBdL>NH<{3%1ET2o>xU8{$JvG4e)^Oiz5-|WaM`R4(<Rfx;hfs09bPk_yKm^6p6SG
zfZR7nBJ%-z@4$P&{yXs=uoEA^7r}0I(7{K5bV04eWjlQqvn@`y?KLzxg?_jiVlz}d
z>w9fmq#J#YxzeY)#!erewkV~89XYP>!0bt=8JWHmaQ=teBHDIq{7JZ}0ltgUtBYvD
z_@i%vVH(6mxE1&-1rF*bF2b$DpC7nPfkC?fcH{3P;JCt(jC9#f_g9D#Bwuw5^4&|9
zgVdMGQlNM{Z^qL!S9+x@MUGV{>tT3@?k_INBLg_1H{vD(mjfKSb(HQf;EED(e&8w+
zaP`2=PQWb&u08=rzg-wI;HYi7fI9;?Dg()V9ONeagTSv%z?1B~z;6H^=0sdn{>{KW
z2pm)n!nx9y+pEDv)+e(w_Iv_;25@hf(7Tbwjd!2oT{ZEV>PlZ}FLjMw?kIC*whVEN
zEq0|(ai#durs-P-wPf{3GZr6qUlUD(_sbonuFPf51xQsYQXQ2>vUZX@|JW9Ry5o>n
zlC@UIN_;lpUD3DOB2P!(A@6058LmuwnasS{l~R_*h|e3K-3;1VqMbr=+D{=yR7YRq
zUBT9E5tvSKkq*)CpJYHrbQ9)0cVCtFJdrn*d$I$1gfu<4m;6MzMH$LmZu==iT$#nX
z)V?%U0J4*irW<LJQ2&%>mA%Y0cBP}(mATwm?3%ocmm=ZKLtK-AL0V9t@=DW$zFv;B
z_oAMUp!`HVgJK!gbAzrhQMWyyqxQQaN*Al!HdIQvU^*@BFuea1v~Kt`n}~J>$ulJ?
zPpOvY{&;bUpM2)|7eG$w4|bydP)FmbJTooQe{Y_C8j>_3eJApNM%Bj}%73+EiYs%K
zbBb&7N?z=8FHb6V6)a0Gb=5d-x48;{K}~@Il(K%nrviUlQI;DZOC{RP`F5tLU&YTy
z{HDe8D|7iBPTLSOhSSo{0KXI%lpF9p`9t7KZ8b<XwAJ#YQj%?|tH%DiDXa1{`?01k
zrlmQYcGEZ0VH-(TRv`aU_?fTZUh0Zy8<ZugD@FF&1YMbt#_B=-6w<DT4|jf&Ogl(+
zW4(qPubbCHahl^qa~Y8hD+23A<kOoq5ZRCFd;tbj=%rDIlumcr9ByPWd8$FH(JN)U
zg&^ajZrD-qkm-G-gVUnrL}zjwOv#O%q9n~;k${?-#&W=-2mDrg2O=MnPHB52`ibKg
z;G!(j)U-3A_r+<MAT2<;Pe0uj@#Eh42RIKRZ8_N`WDFkz_>(|0_A^Cu^I#gX$sM5i
z5&r5T+&kBR#^*|3X17lt;z}t_n~MKv;3B-6kHM}wXCN|D$!XM8UsP8~?UNyPqSBYA
zkqz1a9&bSAgK<wfqHHg0(9zM-`O>0RNc7oEq&XOeJlukOonOIO5^aW|+-Qf&T%o~r
zUYtg@G7~m)9S)9#TPLpB_@4vZdf+}H%&{Z~@>KTR?uRHP%IHx4mP0}b%m~_enRB^g
zrM)~VZD|^6TvC8lCjNRM?_oIiwiWlz6Ctmx&r;On%(UZS9)bTFG?#<MM`il8EYoVr
zYZcj&l}^~Q<z!ozB~5b`+1H>tfkCTAZ3t{E+58_-jxHRu`~&V~``a%-K0;Tij>o5>
zeR0muQuTh7UFa%o@N%bpHVPpv(iGBdqOSmbFX*o@qn{V0FClu;-A9ps5#~5qRE|}U
zNa&!bOGvxSS?21pEi#TPO6R{ux*zdt<iCZja)xC(W1koLB<z*2r88Z<b|K%vkgo@G
z-P4e_a}m-B9a3%Qr_n+-MKJ`VG4v$R&)<wWFVR<l-sPv}6Z%Z^wtFG_{q*igDTA>M
z%BT&>sSWG_^jzp@wDyU;kmphGaO3FVGpPKjlE+GWrPQU6eG3GVt^xXx(0|MgX)bs!
z(vw~+C*NZk`4RSd&;o<;zdQ{{lmoY9S2L039i(|0_s%CV$<Q`J^z&s-dplB=34JX~
zJ5ARB`~lF9hoGUu2O?#VkJ7EN&$J$|{Ps&s4Lr1i#;f&^BaHd$Fe>YjQVwIA#l|Z!
z#$dd%zXX10#f0$>x=U^IAY{wIVSOdImwjZZ@Ks3eO?WpS?|!P>#4B?s>^|n(r&1mG
zO~ysz*ivKvz_bp^(?oqXf>$Tz>_3$k*?_Gm<GoWbKcunfD_AGAk5T_nYs<->Se8`g
z>a*GFq)jy%f#NjcQv{hRC{93p{<?d7s4uSopUsFfjd6m{E8rvabLz09DQg_Q)lT0k
z?pv8ux-8l8nr#TCSTyXjO#JmA-Q*9pMJ7`IHz3{6r1WLU%k3+ZR`J!&H4c(-GiX*I
zW^ozO+`K~>k2fnT^&g6n)W9d6iZRQ%${^#6HICKJX+p#q5b+c{iC8Me$r_}&1#`Fz
zq<796EFX;#rI;wKD8~^&xTnjHzsr#>jCjhqR3G_LW~07Or7<sNqo%uhY>sgl`AjrE
zT2~v8Pj}@&WEo{5`f(ZT`-wwb={{EqtSaT34w~_Z&wLNt;`|OhMf6+P9;2Tbm#^LN
zLXv5|<n{<VT@RicXAeZ$sqc=EWm!pMfwCbOKAT~trQLxGKMe^dA?-S(OGnJ-Vca{v
zfGk2MNahnDGYk|gA<6s{=+=YoC913UrOYONRne&lE>Llr{rm(JW**Qd{EbE2>R7}>
zU!=T`gv>EpPXhF4OILySrJzj-z&63Zb57K4g^^j+nP{tN<o}kD|2qS1W&hf=qZf;L
z##->(ST_*4o9Zhd`K`8tU;OyoX|w+|VQ841M)GVz`f0&|$eqx8XMvU{p$%hpr_9x9
zx0hHnA@$A8P}23M;m0p<ull8$OBv>kzO*Vi0HR&c@&zCrkIBBf6|q@Lm!L<nF?I>c
zV4R>-h<-C0Y1bm{OiGJ(Uq+4*7{d@@ek}X`qmZiyG!&Y0u0=To-AquFrcH%4KN$Ev
z&^!v7QB;><Sr^LRqA}t@DKnG~UW*&_>Bx6O8+3_y9tZlP68tl$9*vYp5gmt1k!E%n
zF*!<8Ci5`r-!VucU7g}Ik|_-O^`P$|`h&DgnA-{;FgBxyyCTYP1LzCd2O<{}Jq6xT
zm*)JZ3jUjjKj>Ezy<PK<`9-K9<*7^+`bII<l!b`lk$wD7_8;R|p!~ra`&S9-h8iIK
zC`I}$iv}Y1Q62w9rZ@Vu@XGBEnD}95ARWbG&nG$Gh)XB@w^DSpla1++AK8U_k!~Z>
zl~KC8kWREa97-55)HSJ}sJC}O#}Gd_gydQUI?;#K{J!Qi)Pi)6h#qg*Py~HOzPl|_
zM0`&J##JNyH7es|yt@H;zDm4K#=BS>z<*i}U$cffLo5yfSqqS^2I(pgXMU4x(@dm;
ztjp~sVq7a*?bO4X{i&?<-(|76G;jzTM0u`5+Wy}SL~f)!12RuluTlTjj$*_tXL%ag
zuC*EPU(UpLZ@4Ep#XM&j=7@gsB~_u7PtgO~A3^(5eVzHpssg-vFg}K<tbafx67{{t
zj=9pHu|xQ1r7p~LZ=*2_wg~<P=IT)&7Zd)Y%qP>R*G%N~Ao9BD?QM}<+&e?a3(PR?
zC#~eGoU0vc>{Jiy5TFX3Wvqu1vRl*P@76}^LCpy^g4VfgATk7XE$b}SU+hiM4l^yy
zex_?I>J<H7j1vs&0`DMQtgfx|I2g2{vtiefh13J#e`7vmKMFZu)(6{JmPQi^<bZp~
zb{I%+fNWclE}Q!2N-)7&WB(MsS{aQhP=>gvLWvj;HdFfL1ChVceCG_Ae!ISS$dTcQ
zHjB|Vmk6IP2P`hfT8QwcaxLVE`HrUklpp0HQE2VNN#o{TS}ynns~sW+C1P4JU!%;`
zZFdYa7Yte<{ia^9*?{jmUnL#P*a@CpcE_idnuhTJd^bbA3N9Upq>ygls>WXda5<L^
zL@vTu>--KCj5aa)X9@ARGS`Ed6|SxW9ebylR%}%MPVhYg>o_xM?EZQ%-`Kb*=B8z?
z-Z73f$=l~i@-Mzy@%-oZc&fP*c(!kcXCunL73QcKwsinHDa#&fx0sBopNH%VT#Ki>
zI&9NiEAZE8D|dxX7=(cVH}PIEE>nH4M}E%72O_speJ>td2CMqc+fIE`IeIWWu0-5$
z4En}Slw+1_@d+qLajYCi55icMgT}59^857pfyg}EI~^#87`xDKF{M%AE*ZZDUCs-N
z?tK_L3p$ej3{CflIUU)MEueb}bcfSeavA8LuSOq2#IGq3e*;ViMi*E=>9VN#_hhU?
zKK0^2B#&%Rn@qok;_>Evl>%}3G1G3eAyb4+S`2>oV*Rm}_!Ve=mOg5!D|EW4lGEgd
z%C`~xHoZI$`GV@zCHWbB5c~D8s;EQQ?HOrg{bQjTF^5P&NMY?O1CiTFo|iH3CiLe)
z@deDcGRzBz2m{7n{G9}z{jUy0HtY|c*K3}!dBGr^?R7X(M@5Ti91kng?3YGg7;BT}
zN@PnnBCpNRW2z75K7;#5c{E0<)(1Llj!Vq@II$FC?0AHf7H!%VxsdAQdhmqi8^_oR
z(9wGHqu*owgvORf2Im_qW7HO$X;l!avrh0EKQIuviSqo-_V}rC)Yz{u<%e+mRP*)`
z{uSxWkI1WrMP#4&wajZ*`ov)foz~bQkz6YK9u~63#xLp<kC}^9D*D7q@bf$IL#`>{
zx2FZaxOtnyez$4i%hISW-y!*iMj|7~W=^!=7n4tnuU$@4hEvlVkI*b176O*SsDMy7
znm46j5|*)7Boe?q^_}P(D>LRiO-ZZP-lvG^oq=$F5z>4~^*6>sK4W=n9Fxt5>T<F6
zxe_w;?;R2IK`Fy*5!0jou?2a3jdxd(U-08j*c<q!zp=^;{D|ja$gc={8%`#kNfz>p
z`c>m9`rKUN30y){QpCWiKXrm<1@=c=fl75!)F{CY#rl)bf5d&b{Z`W^D^1G*zdrC=
zcbwAkL*WR-+D6T>YV4Q~#-<SPL@3?ZO!%F%Bawq>yclPeuE_pdq{BENEh$Psb>c_5
zb;m~{?@|2d8|{Bp#LoeYZ3_RZf_%Ecbt3E#_0t=`b8=lIvWRTLIZ~EY6c1TRvFqsi
zUdXW!y^H+c=-^eJb`sKWM*8`|NTij@(k|00{~0z`t#^o6dl@X8{jq5L4=#-y1k2J8
zAg4A%okiy;!e=A?r4tdqo2&RA^7HbiI=un>*UyVYo~M5Dk*?E(u`;G-VqTSMZfJz<
zBc5BqbJBuHgx2w#uWO!|8yn|pv38n{Ah5%4uDem5wC5-NG$rQ;n&<AzNp0T+o-4zV
zNG7%2E0U+tMx#w=AAsN9nc%lz6fQ#gKBRAKk3{mwrrwP7@Bx<F%ZDYEQp|ShDqglS
z2_f4tBC0$i%`wNGm1(caVvfBXS(%MlqAyI^5Bh^WNBfWrFGv}T^Kgn&U>PLV7Z6aO
zyiY<pKlUgM$9kLdmc+afFJ77CTb68((4>D#n!`p}mm=$@af7UdU(*F1<Ijmi_M*I>
z-nH^mJNF^|k4S$ZmH!HvemnD&nXZ1D<0SKT7I9=MR}LK6X{#fVkExIUIk8;2PO+AO
za$zF>tvxFpXW}@{a%QEUieibnSqvUuU#58Mk3M7CF4jCS9bjj`uj+VZTjU_z%k(D*
zdryxM?7TJnjlbH)UvjYX?EEbU`@5YpcE5uV&pOb7L6@>OFJw962i?=Vj9ieP#JAYl
zR@;Iv?Ccx|o)zygoi_e^J9Z5f!gSl|wuhMG?OxMiMlY~&Y}UBW#vik>TW$Pa8@oll
z&hhh)lUNgfJc+Hg@vD;9Z8pA@v*&F5b<VcfcsFOO?EE~=zOnNUo$OubwRS3&khKyy
zoXCT8@7zb`He^aAcAed2lTYKa1Vy)<t+(-q?Cd5x$Nje|Yb|@uRW|;%LneB~#$Vy=
zBO8B?vmb4|-@z`n^N$@Q?j4-nYv<Q-b~Qgl<iES=c-7<R2oQR|J^B51b|}Bx$)@o&
zPFBm8J6Rk5-obv$U$C>g?6MsWyv)WoKm;3K%~_9)f9GVc+xS_WeP-jIInfyW11G!L
z@i2M@m<~A{-p&RGe|V^<m*KJ|^1?sbHm0z(XzUbrgM)vW!X9z(A5z%M4*pgOd)L8l
zO=j;n|7r)(leCBBvlNb7@S7jv7mj2Q;rfy6dD{_Jj%2qwI&46l%lX-(*y?0@y&;AF
zFp_<jG6DB}sr;2u?71O?|7OV1NcM5s1(e{NVf@WeY?-T<9?njG-UeQukJy*UMoK9&
zjt6YzH`v)m8^;W!PqozWa;VigHonHj?xUuq_P?szW~;5{H`?}ua&5A)ztD?S_K7`q
z_6Q~W(LQmt6UCc|9X{t#WaU}s#3!loCf=XQe&iGXk;Gn48s3%4Zb+WkmBPMHp13iU
zy_w>=ER}tmvezF{*<GnfG?b++9kMiaY0A>%rAbTqQs+{~Qu|WdQnpk`0sjEnJ&7Cz
z{JoP6zYBkx@wXL!oA5{Y4S?PFqt>bA9X7T>>F0U2IsdS&OlI$+J0`QOcK*j?c9w&G
zo5HSgaNzHD@J-3=&ko*~%w82u^bdhQ%gH}UWmh?QUn;xN$-hixFFJ|-BPYK<nGHDk
z*+Z}qh`*T3F6V^5i}N2++55cs+GKWT68|UKIEi15yplOEpHO>4w$UEI!f$L>IoO2`
zj{mo-4*myw2ya%{_|v1=rRYebsj|CAvF~l;H;<y)erYs&$nm2c4=*M0?=#qUN&NQF
z*k+Os%(uz6+O8PEx>NZDd$KL59H<{t|7d%CEPEl1Uo@7j8A_;Yhu&#>Zx8nVFpdqx
zPq-+L*IfMi4ECwGzj!ziJu;kw=GEc+`Z4U?;rz-m_~qA8z^_f`E5@)}(~0JjbdqKu
zonJSCtsO!4pN)X<myYC!f^Qf}Bu|XwAB|+Mk0cpy8^s~qpGNU3GuZp1_=Oqlo(!US
zKZCCs&Hk0amxIA*e&HClYz*Nq*@Hi{2fJ+#67$VHNStr?;8%@htHx4Uo*6p=<?0{H
zuiuj`-;)Y_&7Q;`l}mrFNsy#~|7c^YNkgH-6K!M1@i04>FSoHNe5vjCq!=4)LpItN
zdNW-}mQH;*n^&@OejLn$!0kDr9A|6rYi-mm7`xKOZ?&;Ulv<6U1e5v6V0pfc%^r8M
zBm%3Ulkw&xzKFF-({e!B78`b|o$cWGe~p8G=3w`Vdzc0Eo-N{D^d2NW{9q)`*&i14
zBr>Mw+Q#Cx7n)#a|FrQt!A6+ZPWu?V6<zlN2fxX|u5}Oz7z`@_gCa*;R2)&d6R@KJ
z-5qv)ot^%J(D`c+0{-GqA7k&?_=k3OH_X4CJ!|LKbos8G|HIB6B<<`~Dmv{wThiJT
zcD3E!naVcW_rm=xjv@GuPI5&m>)=Vick_4cFnMcI2z7f389~@OynwO87?n!)5V;P$
z7Zw%egW(s_?1}FBP6~AXJja$4_V*;-o5KE-JQ?>SDzz!#!8w3`vhm9t>`gR=ll7xW
zPGSP<evzHb`$Z({`DBVf&o4{Hk{)h$&AOLQUkAnbmt+51QrXQ;{x6ik$*)XdS8xu`
z=6=psq_9tuk;Qk({O(k?j0*NQ`nNijKLT5q%8~GOvTVq@yzC}0d(E-`_bF_JlRtxz
z!O8!T%)WQ>50lxYoWGgO9wTPYCG%yeY!lr+K+N7x;VV<wzfw37u2;-vhA$b)*k49X
zzG?zHJA-fAn{{RIhxcZkqxoAC*n^|_OB2|uV_w7*as7DM!Y{}3izcuY6As3<(+OaC
z-`=Ab`*3f*d>^)TZw?-iZ+gQEAb)J=<XgtFFNgB)$FSAI_!nc?55xGDG3<I5zj`eD
z^Kck^cGt*H9E`oX2N-?52VXmuoj;Z%(VDS9JV*bC+q^fx?IywPZNcr^p~P*o;I>k5
zdt&%=;CBDW%{$~aGfZEMd^~FMJrmfv41UQzSc%~;@6Fba=3h==y`%Xj6WC{>xII+d
z^C$3IC$KIm?q(|P3sl_i_vY8^gPAS|4+t3hyJ}C{h{D%xop##|c76*~oy>(a2%sCW
zlKS~J+j`sCPIi~lr+pXm&+Y7S+b=sE>~kCc!OkADbKE~~FTL2wRx2vXBGZf1y>{4-
zb&m1RIoS&i{)CfV?BowR*?Nw5uuGdAwznOtY#sIsr;?v=^;Gs@5`TL-yCQk)U#7En
zlE<Dmjh&amJEpO9Dg3MH?4cC?@pRTdBo{Q>hVoa-ZR=b|;=Ui&+sD=n=l7MeD~9t8
zrR>w;M+1NB2!2TkyLJ@ud?kZlKZAXh!M`qJKa3&F3w!MUW*O@qd&F&rvzPbcH%%pN
z`3`(0@W^!5x%aPtxjM57lwW1?AIn+CzWndy?5llA&MWtu1erhDkNB*ZbfW{LH&5nw
z6tj0H^RLQT_W{K2_5=BQ<?M$8ClTv|eg)EZ4(5OKv9}Hx+f~Z0%^JJ5l)ae6pD$(~
zWbr49*+3S5xR_m=%~zJNkFq&3xGaZv7PGEA%I3|y#lYWJa0qhwxR8HxB#ZoNKX5+h
zFv|D(!}yvb*+b&~>BB|<|L$RwDsmWcyX0`HteXxe*`7L_zj6e7>u}=#^%4B?BiZ>!
zQZ6qZ$-g|3Z9bAX-%^AIy03^BJXgfm6|=q~%H&@~{KjH-K{4IG=i_&RfsdmOS576$
z-f}ARMKkFBni(9ms&wh9O*Y$;wgdiv$E)nTBZL3Z&fgscQ_io+;6FO}qZ#~uC*LrJ
zzv<+w$M8ouzj_S6D2exv=FcbbN5=5allaT%*~$Ea(R_UhkBsIYrtl|6^K(-9TN(W0
zRQ^c@e|!kPbTr>Ogs;iqSEcbUM)7TF{PqmKX(+#UG)IsAa|XX_7~h(~FLv>BNAthC
z_>H6an>2=P8BRiVlXtjrB<0sPlBDSvMQOT55yzfUlpkZ{l&w1u^D+EIt}3)0K*nl3
zKi9@c-LIe?bFVGqLmLe>Z`#-ogt*4e@1@xUrL94_p_DdaOWhyN9fm#{e!=Si+r<5`
z3F$P)O-|cccHYI=-|UVnowkP^s1~-|xeB$X>vOyPwsQX(#-6tEOT?7s1I}Ky^S^NR
zg`K~_+2xeqRtJBEvrC=)bIvxvAanKyCz0RC5mbAE6XL=o&~?*4NLsxd9s_oNd}-%T
zr?Xca6Y;;-$$N&g_xL3I|1^m|Fr0mpJPH5LPUSDAv*kl3;s0f6{GN1}!b$l5z%c%&
z;p`b#3I5-aF8Oxa4uz;M+xQ*hsgkalz&^3_zwX5_p1-vhd%*D!$kq;7^uTy_=TMGl
z?Zv|~@c*wae$L+Pvh)o6{}dg30{d#@c{YHaj1%9Vz+N1~Uz@<rBWv6}jz12>IR4xO
zwprYNJC5=?cRXI+GX9s0ol8dYp$SAbK({Dt<pGchBkapbYz<^eW}EEf+kR!|mn5_6
z9H+uV<$PH(yNUA+$?Q>a{})c=FC?L12a@RJi=-Bx(LZoJ;g^dsmf1MICA`_rUr%PA
z+W8|XRLZ+k*u#z$(2ch^|0tQ=PWAmn5<d@4bP~S^L!Y=mH<^;INC9_@h!}cOhyoQY
zxKHy18T-49KLTOk7^Sdf4t{eA`#m~W3VWKG`)>51WOimUx%XEk^H1QYC+~y%w@JQL
zDcHU82C;<>{^+#5<;+9*yPWsf-khF%LCP1lb7v>NHjFPnK6$H)e>6S$hvBZ*D^j<l
z@A>WQ)RiL~f38TqeB>4)dO71D{J&;2Caw34&j<Y-6TY?ste8lNpP0zEosztMQZDZM
ze|aeWpK~AvzpV!%;}r+-uV%5E58@xsVox8$&zs5KKZtkCWY1>tk4|BKJCwh93j6+0
z9yy*}<mTTT&o1_?vf;&}UjD@iY<V_cbMmlnviY+o4O^STU#lLrA%}0Q9`;qvo_PC6
zUgZq|)|>CTdsgaW1$*8!EA`z1NB7aGj}~sRy>=}7<kvicoDWO?`|<3S!})6`vnLMc
zkDttbIGjIw@~|t8;MY_RyXy#kQROfgO3?rD$o;|e%3=t8Tk(|Vj%7DZAsHT?!g2qE
zxc{@b|N9gw?hjM=Ysau_OZb*!*aIc}{bShb(mhf17fSh!$0wgX^#IVkSjI0oG5O;%
z{_Kg#+r<4P<y6mSPA`V!n`iLPk7Ab`MVQ-;;!hsMx{pHUn~vgtJBod96oNXdC_3>)
zCI8mXzNsV`Z}$Un$<h4rquFgoa}?}D+|Np0U&Sw}X7^R`mDTJYRaER}kKykf&z?Vq
zN^s?|yz7+YJCEhtP8jy|u~hgkkL6Dvmwd@_)OfcZ$6q=wx#u{J2EKnb|L5%F=V#M>
z=ZXB06WNB7_-iK(`{PN}0$-oRyH6f={>juPTTkID1IfP+@bhbu9|-VEYmyzp1TxHS
zVak@Wq5DJWaD9qmY{ehC%09W6rnK-r8$$qTm58UDZD()WfQ2tBNYV?hhZ+39mT{2?
zv<TdLwtT!im4D!(@XC2<>>C^Z(-3y1eZOx~S-*Yqx-@)D#9wu>Wt{(g7|m91OoO%K
zFQ>6($^5Kg?6MTTZ3x?tO8*~BC7QQWc_fv6k;=j0sUhJ0;Sm1SFoy93?EjI*zZ=TV
z97+tX8pb~u#xSygaE*(9m(Ff<@z2uP!!G{pDAwyj(ldwit1x{W&U;6)JBIUhBiYl#
z`Nbny?{I$32(~4iL%#b)@|#DoKaZp`e1bt}6pM@`{F|d>u@80wR{!c5CwmFj+sXds
zpeW9dj(u={o0EUxWKY17JK3ko1<S|-eVE^7XKQTyIy?JJ#W<|+Q;z)w&AsigV-MM`
zLk(}X^FJlA@9jfSbmW!H-lA`wpXGd85_>F({y&vO=q+TlwkB1JhB%=d56AIqha$*y
z`A`anJ(0%VuyJhv{;U1(_N&v_hupq4ja{BJ1owywY#74sPx%Gz?@#6U|5Pf!eh9l}
z2;qCF)-N84fA`QoXvfbZWBRYJK=IzRWt?j#cSLZWI~#B=|7<w>9e;Z`M$bO}@^JRA
zWct50#lCqs=5C{L|9L9^vkT)I-Cr@3zw2V_h7rvz!}ul_yV&Kx{U2O}f5t_W%gMbs
zkA}Ou)R>oEjOY@3)t0f`&aPCspR@o3OZdIR*b}zDI&T}sK1$;FzdYIgkD=_z<RQ3!
zG=)Eg|Ec1B2)_;*mqs*Cr11}jvRj8baR1s+!oNF|C@&rcmgkf5q2AJey%u?HvSplQ
zXP2rx&$N-@Ksfd5;c(~qvf=dRm2}pH(QY{V(9X|=^bWo?oqgcA)Y0i;eaZLQ0KP#V
z0c{$`{Vi$s_lL8Nq1m{9bf|sHaQ4Aa!hb%LzlQr^;(i$aLpnRlMX5HEJOlLaC8`%l
zc7@H4n^X8hqu@KeWdGwRw#{MxZUpHv?%#CU&l-s#_8EF{Ps$MdzXR^YD0bTry8k`g
zi&4}Ialaa+9?AYXl<=<)<Ijv_FS!W+o(s+#yK6Y%H>C5oMzZ@xIB@^|2;%d%5ySzJ
z8{oelL8)#fC-6hn=l%yvCoSjy{{P<^_}?1Xtr}P+Q)QkdVUL2E*T%QtmE-EVLt?t`
zlrS^_meg={y)Eh78zizu!6F4i8mjb$q;a<$izOe8>`8deToV7jCgHg&;khs2S@TVV
zU8l$M)$e;0e!i*)jqkI-v)@QQiS%xT*XcE^Nx=8N881gq!h4n=N9Gyv^yvxjYZBgP
zCcN)Tc<)Yl&z8pXFG_e{l<;1cE3y0<Zv{IP->%ywMUR4-z9`}Oaz)>-@aalFHGN3o
zwU!=`Dc|Vlf`sQO3D2~jgf2~gLZ*1c0+qUIBpjw53;eR4_EgXFRXbvPoVd~z#CAb(
zEmrTbE+8%}lZ)$L1CbWG=~vZ`QCM7l#R%Ib#I+HVM!MjNifhqC326@<U9?V3mm*_Z
z-j@t@Ylbk}r7J@Mh80qAVMSbAnUxZ1e5go1YdO1B!LbxCE}h>%M9SZDgv8^VDN!C>
zj(+vL@i6)RJN29^AOH9N|7SHYjXvNsx!g4pS)`y}!5Rfa3U(;isbH6a-3s<7*sEZl
zg8d4zS|+Y^1v3?ND_EqUU%?s$Lke~%*r{Nbg53)CDA=oDpMw1gvN<Y$1v3?ND_EqU
zU%?s$Lke~%*r{Nbg53)CDA=oDpMw1gvO1N&f|&}s6)aNFuV9UWAq6`W>{PHz!EOb6
z6zo;7Pr-f##X%SlA-!J8k*T0t!6F6y3f3qXQm{k8P6fLZ>{hTx!CnRX6zo@!1y%VK
z%v8{=V3C4;1#1)xDcGT4r-EGyb}QJUV6TFG3id0==BoS^%v8{=V3C4;1#1)xDcGT4
zr-EGyb}QJUV6TFG3id0==BfM@%v8{=V3C4;1#1)xDcGT4r-EGyb}QJUV6TFG3ic}~
zHmpO0^!ZYbOa<Kv7Afdgutvd<f*lHWD%ho9w}L$i_A1z?V84Q_L6u*@Oa<Kv7Afdg
zutvd<f*lHWD%ho9w}L$i_A1z?V84RwRF%JinF_iUEK<;~V2y$y1v?b%RIp3IZUuW3
z>{YN&!F~nV0+qjlnF_iUEK<;~V2y$y1v?b%RIp3IZUuW3?ET0tGP2ohGDG!W`-vNs
zKi8e$U&aytgom<{l3!&`K4uP1`)<$lc(QV`+=qDD#iQr9UT>B==KzJ?ekK>BV(%gQ
zB9cf&rLyC&!j47q%`X+fjS8Q>Od_6E_)iqRPvP}&upbx^AOG2s5DQV_ny&CgYW{S9
z!Z#~?NYVEw{JRS8K1U*w@J!bPhvZ+hTt07-fHf+7=D8Aq?StZaQsF!9lFxK*6J3b2
z3ORf4k<a4%CEOm$CBA=!#J?f|J5%91ACL%f<`Hh6Q26y~gV(`|{wsy=Jx?M|Q~14-
zB>(lQo+l~%G=+a&;U_9NZ&3KpmPkVF??x1U)|nFjqT;h8S@Q2$D-rY!FI`_My!~|f
zTqFStrKs{=A`$crDqXKC{1ip6{o5m<KQ^`(>-d`#P@AE8;HljgDSG<$g|0IcUeC`D
zl4yo)bArzn#Yc(BZUWv+Kkrg}{AVc!3f!ac9SQhn6h1K?@DA`Ke@#NZTLgYI)AJgg
z%kUwxTukY?#_t8Z4YLnDPttfR`RNxzY-}XE_YPGtIsu?rd8es-b)15}Wu_}6_@uLr
z-$_2dlV~<Fjrb$%tLDSS3V)oyk7HYu{X(;f>r6$j=f}EzA6EFj-^TOL`4#aW!?c~#
z^QF0%P*S^x-j;l|JN&G|caD{UW9eI5dtly0_1}%XQgmr~W&$tl##D)?J<@dT<&yaR
zjq<rw0(>GZ@!jG;FYE$U^|JtY;=ewD|L+xj%@|2orufhq7?f`&_88Me-~7<^rNZ~z
zCh_!b5na>q-p0nU$x45;{HF?hI_pvOrtu>&aVGvX-7>v6!w$EP0Z;9v;~RPMHTzc4
zhpv<e@tr7ceVFeOpN`>D9;`%*t6t;jU`Jfo1uHJ>BE&U<^)6EgiDnysC;8J8<lm_H
z^pB8y=u88;M&c|0%2&tFu90Y#2RzB2sq{_Ty}63sJyG&`MA0uFCHbV&VJ5h075}>w
zzF&MukK_HIH*}4Jp%eLTkk6txxIF`SlD{B9e)@Kw=sORRjOp6}x|%Qm5x#qv#M8Gh
zbX^2I=?PPM(j~BrJudL*Un*`_r0{lZ*QfHb4#_~b?;`>~hCTSU#Jd&!d%#n^eNRcm
zOj&Gv??!yaunt9^spt<Ec<6(QmlZ4gS-^{WcvdpNXG!9^RN-srU?*G}|A@kOeksuG
zVF|F!P4dz4OgxHfAv!XZOUD^=6#fq2DPN{M1v(Rju2&R3^KtpSpQ=wfH=5{m{1n5V
zxM~nkBD`M>M6{|&*KG<PQvQGnx3D9|N&3ECN%yn_Y>C2m*2wbSs`}|m3f~=)_<4%H
z5lu_^Cf3h|3g59_($hDHbkPxAM4ztebEZVIe`-Fe9TzG5L<GKwzOPI2xkK^ES9l%o
zo22MZ0iN_$`;iLG7HImLB_I0En6C3CNdEn|$!FbOS1Y`ZGot&5>k;5ZJDx5Z1kE9?
z*A;zewS1;CnCLoWZ^=J%ADQ7J63zC6B8hra{SF!+t_u~u<8Sg=4~L&=ysEcRO8&}B
zCBL!*;(Q27I#J?#UzB|43^uwJD13LCL@4!QoeJ-NPtwuZ33Pn`ys$qV5^=divupO1
z^*k-XK0FLOmCHR!($hC#bS3X6@ja@4(RYq?jRT(AD>H#lfugTT(1!(rKAri`l>BwO
zIG_MRufC9cmHA`S1%5cwaaZ{k-#sb%n&)Lb&^MBFU8?Y1E{T6hqS?a=?>}E6=o~P*
zM(nT3^$ST)XIRj6p~9zUNIacAL)RCY{&x9{M{y1Rh2)cYnk3ZyYdP>_$8@|MmQh^K
zDf+~5_H#jx@ln~g5=Ec)OUb7w!5)SLejMAH;I~{2yl6+IpIq@7Jz3(ro|JOZx3P5j
zfTwmWN@&NE6}|fzNk`{Y(sjSW_oPe2#S+b4Q26wZC4$cRqHFI1WWI^^>Uf1uSB`w9
z;@_$8vzN;BehJuL6~4<Z^@qM6rEA=Ql7IJs5~1~ffx@#_B%SJhto0ySpIcOY>hWj|
z@KkR-y^;@oCrj5e3a{52pibiYRPae>)094^D167k#2@37T9?v(<3qp`|HS_Lo}%wj
z>nx`#KFbf0e3;S)bWd?@0G{|1O^ENO-zmIaFVX#LOqOilH<X^JW@l4@CqAL8C0}t)
z1#T};_`c^QK1<c}qk_*EHdZ;Xy58PU^xevDq;rhu`ds0Qw#nza6@J{IO8z?}zFGq2
zQTUEUl2Dlgc8bEYJ!E<5yHdJ-0RgCg>Gi5~iDst=Jo=Hc^LoAJH^7VXZjgj7MNh|4
z*=d!fMj;f~rsx?>*l}t5Kfz1+?!gk{+P@I^F-)(&X?X$yKaTlT|5EJP0^o%{B-Gnk
z3g440%S+!^(lt9<($^d&@!J0%2Zx0C_zR?*7Y&#6t-zBWKG-4YwSN8*3Q6=#*)i=m
zo~`iibV;x03%4tLQG)+)Bph<$uh%^>%!zA`!t3=`jXwu?%GdoHDdz@dK=;m<?WouL
z^tk*h;E6ubo}Z%d{;y<ybT%Jd8x-EXRX)?UAi6$K_#V}ccS|&zSU~y0IZCj5hXGId
z_J1G=>6}EmUJ~>uZ^Ha#S)ruwdsfnEeY;QL^}3}VFJ1;-__u0(5N1<c|5Egc^N2lv
zCHbc-z0FkghX7CV_b1r@;{-mPWh(uL+K6klqIV~h_YQ#{!)g-7m#-9FultWxeCGdJ
z<~ufl&)L9Jy=_u<o6f+ct54w*{jmYT2XZPq33Dp0Lk^RCYP?cU=)5Jm7At&FwZ!Xr
z(3`-M9_n@K(<C{oJY4cgv?sp-p6I(&zD0`u4~o7=)wAvwUO3)VuI`s4p_+!VZiP=A
z2cK2=%!K|m=}4JxPlxPZXQ_PO1)lh4zAh1`%HlD9k;I1%l=R9CW#=k<uS4SLJOsKP
zEt2##YJR#}U>Qp-rhLb+^-ABM#^U;|z>i}o3GH|#@FY))YDd4Ke^~L+>-bt9URU&;
zZ%9HN-zb<O%Uh%3FxvjSrto^-2Oh<BN}7~Y$BQ-p@g)+UnV_E)z>}Os%AW}+KJ|hg
z`k?yhZxnu9sifEYTh#Ewj!<~_zOp{)dw#n1@+tZRySGUAU1OMzV{19@SM(hT`ja_T
z@kxlolq-D4B%8=jnR|9vnJll~C!)uZ4uK!X`V#v4ZNO7KB*u|`Q24~S(7w|oeWJg5
z1@NRNETNwJ6g}H0#AF{y!1gFt<$6^jwBD{(_{8xdbGoEY9AC<Tr#M4bLOkks0*^0T
z)xHLmExSbE$FTIbWP9oQc}nr`OQ`?+88Y9{P+8Aw6{AXpXXz5(qwvcVzVil&ze#4p
z?os$e|EgEvYiyEG&rkQOpmJgSReoKH;{Po0)Lx0>)Q^H5^`B6#DMv~A#JE;1@YG&?
ziat~Eze&+|d8Isbz5`wF0zXpT#{I{xdsBRJC1d+S&i+10u7+E79q_u&jg0PA^nJ=u
zX*;>kOmq4}Ebt{3_-f$I<X>w+f1L&X9t%D;7&<fl2V3C%z?;=Wzycovp6avcd0A^$
zsLFfXg8p?y->K%6TCe_jw0XXcS?2QZV}U;n_;h0fs{7>@_=_#@cUs_I0Dhzi|A|%R
z`4(8<%PjD-fH&j62zaXJ&>v;yA1nR8(1QL3;3uLcYEGB^1#Yvr-m##k{r_h5mSKV4
zA9yo4r&!>tE%?j>eqSY<5u9bg2j9S$=DXek|ES=Pc|@<|ey+-7%`xWXy}<(C4ZK--
zzqP>cb*wr6LxDHrbBqQ3slaQW%~(GdSkPZ-fxpKB|3~1><oOi%Ye|3b$pKw|QkhRW
z&YV6Ucr*Pex4<6*yji&x13wY=->>Yy_CvZY_&fo;nfya$o69rC0>2;dW_(I4@HH0r
z^DOY|fj6t4`z`1{u)wDrZ!YJ)z?<<u)B;}uyjlH+E%;w;fq%?`|BJwnQ95G;Us=%O
z<3LmS(@!ujZwc^b<(+MTZv@_~yjNTBzte)x(-!zm7JSB>DD8I7bFvnGP?a$Ucr$&w
z2Y9n`J!ye|!vg=A1^x%%&GOynBy)Tr@MiLqS>R6sp2n%Z+hjqLRe2X#(66$<Ujw|E
zoDV4e=`Tvg_bdKMC!5PT3V5@2cU#bx0dJOXzyiPAg3m=3^fy@0KVm`OYk~il1^$Rr
z%;i5Fc(ZoA0C;LIe~+w4HJxKO0&iAte^&IpDv*{ZhX?isCaPxjHei9@ug0AI2;j}+
zEC*i5*~`SG$MNyC=6v#iH{&zag8n)S{L2>j;d9LM4FYeL@9Dss*~6<W_<U-C-v&I5
zk9{icq4RRrnddvj0$&BZS$o|HJdOJuXWB(Q>v8{M;LY@5T)la|lYuwme~tzI77IT2
z18<h^8y5I~THw=yQh!3KKt7w)qZ5EPld}nUvwW{rd}=ny^m;z%oNHbWdjW68zX5pi
z&x_Q4gF_`dw$6gjofi0~Eby-bZ<cT7Jaaj-E%2ol_>+M*<G<X3{u&E<+E1%>SXF@l
z_W9=cQNWw!`wI*DJPZ1I3;NS6@XIXtth1oM#{&PX1^#sl{NI5$EARLQ^ZM}uZ$^Kt
z1^x~T{5A{zu2aqP-PZzN0K8d0YP6tVY=K_^yji(!u%Lh3g8m~5`mZhMk6vJ&@0|jV
z_+*#VT5;GXZvSXO|C$B<3*gQ4e;e>L-lZ!$QzElr2R541=K*h4KgR-ZR{skv_^hzt
zb1m>BPtTvFAWM}zpIgvZHks$!0=!vyF96<5{_8C0?*g9W=^ZT%`T0toWzFV%t^nRF
z-}^1-lUvN`M_J%Afj6t?V&F5CY({W0@Mh%=15f2D%9rKRzoBtt$ejKn;LY-Vz=D3*
zY36(m2HvcGj<CS{E%5ag_$9!bm3O5DeuD)*snuN0y)E!=3;Yqlk1#ffx<3*4OcVU6
z7JSaIz^?>;UlTsJTF^fXyji}RfFEhXXHuJaJrr8t{lJ@*x7C9FeBjOUWq}hatHK3=
zKz%S=+tBFA3rwqRn;)*7(-;iYHa51@l~>i4S5^f)Zt)_}+)^JbuL|dcY8zV1XZSsy
zKzK<g*fQtTU|qN>oVO65rM28&SrA$>r=hvt<H?hZ3yCby&^))r2ZmL}0iVxTF~^Pn
zKA)!`a1`<v+0}-FA`hRx$`{CLXlt#_a!VQW1A)55i#;BXcTR0vLtUUP+}hAQue`1*
z?D5piuWb#4TWcG_ZRK^8L7mT6TjiTsm1E=)mC56+3xxu6+nejc4K2-HcT??xVDvH2
z8mwz+t@kZ7<UV6oG;QAe+UEMkV19kD4wQ4_$*RJ!au&`<MF#3nUvV^5;ax3=$BXKz
zYiUM-+v~#R{uwCT!s<X(L7*z^b<b^ST~ymzA7}^%TWeAGfpG0SgXE|k*>a*u%M%++
zwPTeBymq?r3aIg@6{iGzamwQkR0SKM0iL$74@wn0t-ZD}5N;_4dpze*g^2sgs?q>8
zdP{wvwYGU)FhFn6nBZ0#@VWz~!MU~VjbZt+UcA+>{H+a5K~%h`+)ztnL){Yb%9C$U
zT%`%5U-HjGYDQXyI%*3-7EgXdb2vD!74nIit!)mM&#9OLx>;4(JE1cL^+DMjK0i8#
z(s56&Rw=DRbFu{YP-{y_t8qbK)*Ps6Fj(Hu0CfqJ*9V)!4dEr_4OB&q!L~NKtHnQq
zz<x-atrN;V*x<8nWomTQ-|B;lqrJ7t9oTNi6m6Qnvu)}&v?=Z@s|u~!w9vXu#VhkR
z1-qZGO})l8jj8$^RP-Deplql{LvvfOH5{mIUrhRu9hlM(j&`a!ado|`9k|3>4yE$>
z&~s<aAoUug6uRqad2%4n+=j+RCDdSnnv4>~Y?HFJFobPE=z6QqpC6F68F?GZFe92I
zx3;ylc1dpA{Mt~^*O(~T&d?!EV?9i?*E^@Zp|L)Ik)ydDof)#%H`E2&X2r&We34lo
zT;5jE;K@UmoK*>(EN|3LGsI)PdTeN<?jv|-XG`9}#q(?1+rkYCgFh)7v_XSr9g|M=
zVsEyz@PTG@@nC%*xVSDDqHzMlo+mF6S<yga*qm82sspnie%O;6h@}XG!mXa{C<A&l
z_S$G8cnjt=GzQvg=LQ3H7zG0@&2<=ko9i*gwX_Cl_*JsyH;0x4YD2IM-aHdZn4LD*
z&GK1OtGt1QRKF<c%<4f3_g~4_y28Cw=BR%V2(^UT8{r4|;s>i)v2F{S>kh<5T4A?x
z(ZLKF9xbA7)t@^PU7U(+k9KteO)d59@SEy`a|82(jiF#`TL6v*^DilHhA}aqRN}IV
znNx}@0)e*nIe~KhK8unBPN)i3z$<HLX+Tm|*BWjMx6hrMRmbXst-*N>&`gZ<O@X?`
z7HA}c`_>Ye*Vr-#<5@j)rj5)Pt7~ZrH3p%>H1?QLz{WH;1Z1bgDAc-y&26p4@LJ#A
z)U*Ui3{U9ID1wnR5STiv_$VJNe`z2<E?Uf3c=BO;;EL2XwgzkKmjv2^;haVDYs0>U
zpgSSf<Kq1=kDKynsBLUGJy<@=KNV^pH5d(169J8`$_+HYIAEB}4ot^G^m#gx<TRrM
z7>xqCZFMcMX~d<iVNN5t7q}LpJNTzo!^a3!!z(Ebq33!7zQVSKdCj%q_SPUItgiA;
zUHDVXmXDPlmj&lA3%tq=#my%x7H(*cSqR_mWJl(U67E(_8jY<tP_8SsD$iJ_d4cHj
z&s3+CF%Mb}IiCEcb~(*}8$Lf+w;))LfuNB*H8h#-wfWJP0Zop2MHhgDEUymCMnh7g
zqB3IDEcussePoaWx%FgO3_LyAwarV&>%)AfIoMj>2wyfY;GeOOvX!Pkp>mZlp1gTM
zxCHPUTbpYe+XA7GZ=uiQH6s4!H%jF(jTm%w{d%&a9xDwe@Pq<6fvLw-`l^l=T{_W<
zCeW99%&Xo*mD=dXn7G3_Eu=cdG!up^T9K&MJb{8?GqkHmj*`@?F>k;`1Frla33OZK
z)Zu+Ac(#RWp(`;*D2}C8GY@7A3t_H<ftI;*VXXp~Vg}oM{)K+wk{E^>G4vF~*iM~8
zbEmvOT$d+Dp`m#pELlBF=DhYM7}x*#s*y__g{s_G=W#P-4+^d=bYNZ(y{DlLlWfd3
z+M63rYY&oxWAIi6&xdH-&dx5^Okk6zs!8}PG3hQvtD<`eSJ^+qKf^emZt_8Q{R@3s
zLw%&7WU6C5KRR3(jT{`zsFBN2Mh+>xZtbqN)GcTWG}VSe5C<kBs`ESK29w#;&@g8X
zxW!UsV_pc`6R-HO*IGZbN$;aR4@?!+qI$-h4Lk#7mB$2p)6^(Ct#p=gPyw|Ue)hcZ
zd~)+!T1kZ1_)9X>!Jh4Ms3FmmnhfNs$5~Xou4$A9-2&s37^g`(Dqn1h9t|P+XBcKE
zWQZxQfbL|BE5s(rm<So73Pcudt!Txzpd+_7)XSg(_!L-8OAD;0rQ((Ov=r=2r==c*
z8sr}aq+A(ipv)1@s6-4%h8dz0N-ATFK2CvjLCh^9NWHmcnhRYFHI}23L~BHjgJKkP
z$2=)x*D#L%1u<nl!BZe}P@O`uK6Q6lqm$G(z*~#&zJ-B!eJ-3+3u8$UM-<V}pLXaY
z8j5LN%Iuf{(4t^^G@W#<kP0n?+kH1@XGhd((-BqA=rG{5ENF*E5np<x44R6p21dtx
znitm2lfJ6K{_U_TJcFwuKEI!}wq^CgK>A|!9mDN@jYkKn>SJTt?lE_+4Fql(7Ma`H
z(iC$C5EnrWRG06f$FE)Rcr&<L^&g!*%0Lam4vQd>L2jelQ(Jdhdqb<G+vA1dp^4Yr
zV7P9+h#)k#v^I$uRX$<^6itvG8?13*peh8bgoB9SPSwkS*CcSi9hN>+8Y+UO-wS;e
zm4$)8yykWhr1u6YFsfoEFXFRa_?2!%wCWq$LM;ftl8#qb?b;MeS9q*mw4D?qslj(-
zi4{sd3)Sd<y3A^%^yEon+Ez=m@jyfUVtB`~Vnn@+>OgdkTZzFl=Cr7p*?*%59tuQ~
zr=s*j_$e`OSc;^Bm$5QMn<jpCK|?#{+P+e+Pyy3XX1510Wyn=6c>>k#qPA&JtY~uk
zrVp0RBiyaJT8gE>Yc-6KIy{LGS|udLON=3U;EY4+Sfxfb=$l4;GY2=(BFBV?o6P85
zE$byl6s^a2XE8o5MkS7p`DSeMqf1qBq>A}=`nOQvXm4u50-;`|BStZI)8j#?H@H}O
zqJ=bl5>|*BIZ)r$g7q6(F;gvLbOPfG5?iPE|6w(%5IsvSWBHn9&1i~QElgO$Sl&dF
z$2C`6C957(U1ex_H)*n}d8GU|gv{gQ$)W7fGj?N+LC$?)uvx4zH_R=cU5nMXwpN-T
zG_;ACH)i3+X{0x_M2(GD+oZ&vyw+e7{CrekEEeR;q5cft8}sh=U|TCKNMUK0$QtGb
z+MA=a_2pG16djj@K0K(TGilN$bD{{)e}2Gl%fUI?n|HsC<+6lalQ2fL4Ei!SM(fRP
zlAZ&tdI&#4n|;F~=XUHxLfC9Oz9i~ahoHRK@zH-Wb#=9f2quL8eaAE!=F~oSU?GKm
zebZrFEn>RTG4}=%f>wqg*YtRoJUc(ug`hA(Kf^6FbHkL9q{1=<!Z~6_wd-mh*L%$D
zbcu?l88#b8hq5pl1RWe9^~7Gr^#(&^)HpoEhjRu8+;`}~8YWXQSN`X9?+vkd9Yzn#
zTf8_x>nSaWykfCDuuyCYiFOn{Q07K0MRZsnJSX(!G`7^%!;VBd#+;b-6{8%rbo}hp
zlS5&Jxs5H0WY36e%$*oX<;cEsE%6`e9EM7c8_RcG7LQlj2E>>UFq@JqHsz4vqQxY$
zdWl9$y>9B<!aR$)$$TvCBG@-5#u^_`Gl@Z|p7QTlah7&}mt9)KglISy@e2w%!(Nn6
z7tXG4p>bk_tpjpK7K;S=L56)w@DW2;n?n8uErCG_VMRBXoofiZE^0v3Z($2!%Luo^
zBa<6ZTBsrsudc(S3{g@MZPB5%Xv`ErmpE_H=(v@t(Feopzt?-N%Ez(*g`SL_adr8w
z%?A^A3WxzaY7gSft6nOQeQ@_@?2sFi3<_tU5-DO38%(2<I6X<Ar6<$Cv$kk)3xi&F
z)H%T@WAx(w^FD~h93<L_J-I^3X`fzW?UI&uTGTZZiaa~LVIoe~w2989g_&j*`mU!P
zAU|;^RRMPy$T7@Hc5KPKUTmIgsx_J<tOL~r4K|IOz+E;5mWxtxGtQ=kW&=@N_sot?
zzUE?Y=Fj1G=vIi61Rc?2NTgvQanUyBY#=<5uvWVho(O5PasEe-u{Dp_{O|w0eQG%v
z9HHzmdt^I|VN0V4PB3B#&KiZ!Y7y6?AyZp+8ao6}gW`J(Gr{=TxN&ItZ+qvlAa2!e
z8Pd3pViF?78eBpweLE$_ZWC<yFzh$c5g;HjQpKz~Z8h;>=8;2dzF6I9Kw#--+H(>c
zO|~-}L`OK?k+<vd>eV=l?j2=j)EE_7FghVEV*6X0$E$W2QG^0fTwiodfKGeV4!zx2
zM>Rz5q7vn+tyCU&ZGFAk!btlk<DB+{o@7w__>LsEfIuNk-BT-nHfnptlmMP<Z8+T8
zVmhW3(u4vVvKkw(gRiYU6l!S=53a}mY5KRb3s+UbX6>SXrsMT-A*w;P4g<h{VHtuv
z=9VQg){-zH!G(?uLmrdu(ovn4JK(Vu9)nu!^NF3`0bgvjEM089EG=G{FH3`+>9Vxm
z0WZF^h%QSDMyAWs1z47rX?*BJrN>tmA5~sLV^;a@S?NIaQHZbUErQYht-7Q~bV-A)
z`8oQCFxfgVkNpQRdyVB@Jnp{5-q{|LIE~wWsf^=}w%B5ycywPQI@8az&v9o<;HN%s
zx<K<&w*i3fPPaE|W>*4IdMzJA_RqGuA9YhsFj>dLo`$GKN2h>0TE|P+2az8?C70zb
z@zD1lCOhcJgZ^o=bM4Deh=6<>v9_hv4oKtdTo7QM;-hbk3goPv*0aRtThWa`u{tmb
z)rh&WahYO=%k=SHFYN7qZ^xOidxqj!dKe}JSN>-#wf5KwF~@9fqYdtcZNSv7JNj|}
z(hTCZooGA+P;=s_j_N6Kj$sqI-pVL8`OuC>3S7iSx%j!g$0NVj5)nW%d4wk<CilC&
zG~^C=;%28Lk0%EU{0KMFcYict#MWQ6W&>>$+kDM;?rz`k?wrg2?;B2{wq;PWM(f{`
zZ}=`U8gDTwLY(g|LwIrX%fZV$@y@Y{>I&C2>i(+rNG$6bbs;9Q2?N>bDG(VW)4FH9
zLj?{;Tp(%i$2Ourim6&urK4uoFk{>9Cq+Uw`jqEC>UbuU%!{}g7CGeyj?|B0i|KLz
z@Z?a$2Rml)i3e?t_cfB1|HMdH{1UQUZNfgBSQ|wvQ;!FOwsHPkgCNShy={!U?PSoD
zT<^)PuKJI+vaw@E?Y-ILFk1OP@jDYZQ`@V@-QG<Tt;Ym!MJ^!3VxogPcx-o&_$-UQ
zdo*1f5gslr-tKUDM11fQTONt2tBCx1)F@}>pY7H@tAr8@|I9G(ZhuJmAK<aZuk6K|
zDpqfLtfc)|_y)?dedygzw2#>6ZPq@z2gD8M^;W^=s7co&MLu>kBajkkZg0X@kN75^
zVk>iGU`V?*F}tZ!71Y+@o6|O&K_L8weElf*A~pou3NZN(P$<Xe6FaQsUIVcu@!0>k
zy@((0y!9<j_$J9@h1rv^5+EJBxNpk_#a0qy_huhlwIv4ey*vNG)vojjvw`K`@*Q8)
zrHUKZb~uSNZnxZtRX&U1G3qj@-Ac-J!&tY|b@ktNN#l)2v`d=!cxt(Lr%Sermhs=U
zxnySpAab`p48l*FZELR-)0Eh3+jI)916G>Sawn;D9n6C>yFK3P&<U!?@QGEzb^#Te
z@LGJ`7aL%5XxH6tPXOcg2GY(zsE)So&B1xt9Vx%XH#@>(c1sJ<<0Bo9*!fr6xTtnX
z8>Wk>*4V~C`YLC~8v`-;?P!Z&TvT*dtc<R2<Gi2}YooM#zIIN-LJvg)usU6bt$6Lt
zi)itXrU}swshYwgC%?P<jcbgb9;)NN2UTkrKRxKQqi$dfI>D1r-f`R(i(RSRxSbk<
z3mNB+Af9Eu_`TbnQ*?25x4fsHY;sJkiypDi4UBcY{QzI$R*-1_H;+x09cxfftx)D)
zvBkdcRYxGqoI172R~@J>o>C#d>oi?%(4`nOE#2-U=%-I66Q%?(i_xK8EDj<zV!b$6
zfKyPyw4EC#G&RXhbFuY%%Lp9~W1s`A5(9;8a@8to2jZeXvfIS;-6IdS3e%Sm<rT1^
zp2F53&NygRd+^lfIUe71TKlHi6f~ChMdpemVndpn!qbL!-Tw4v=iHZ{a}ho2@WqO)
zRBwBsQ9WtgZToFuVbqM22CUdg0`XhLcEyfGM+u|p*F7uFis5q;Q!9qUFpA15%BPgf
zo*l@}%Aql&swF#wU0Zd7@L}x#rf=Yzn}dPyB6-9JJ~7523FS={P1#;wMN^(P2miAR
z^XWgnc5U+J=H=%UWaoKu@!%m$j<+zUFfZR*NEo8?=4Iy<dJFP$u&mf5=yKd%Z+^Br
zKbKf~3dBE;HzzyWo12Z<s7HKr)J(xKoWh3FQ{<;SRl#sMdXOkWbWc{o7bM%8(2A+<
zu1;tDOJ<6r?E<rcp;mE_i#$)@s9<<LPA{uQEE-tf;<~`G^woh+e~S$(zJqW+egA>I
z4cPeSTUdnVDV|au@ML9Yd9uN<q6OzC6}J(<)08FQU@;xj6sW?{D5wCO`&Jk|4NUGf
z6&q?>gE#<&jysq`2ZlvY8WRVGi4Q9fN}p8~7~JxS+nce$7M96Km*w?{jL|yN=v=!w
zkf{x;<xNdS;d5EQza&uI+8(SDht;XNDW}hablp^i@ky5DseRT#PK*xj0G-)_69)=#
zUI(lQv2Sg~_tokfN3?@Hs!1wI++H(l#+I_+Yjb@*UTy$xF~v&?cXq)a-zFfrJn|0r
zl{hTV;>f!x)(igPmHC1{*qJW)(>Lg}fKLah_!2)dqLYZ?6u44+Y)Z#01Y4ULZ~{(n
zp|RDe9&s|kt{!-nPbUx6;#*S_B|?*72Y8@Ze#lxqpH2uuJF0F5wZVhLR?#-2K&kjL
zwWPfjXTF5-uB^O5z9<WZtLHbg8E9pz@2aq(BZfjaw2Z`!Gnb_FQPGfJF~UZW5Zm5?
zE|FWawGB8b*c6zGWBp_=fe_*Ot@v6X`c?a&dW}_UAwDv};0w0CCWf23`K_`M0^Tfd
z7Wx#vmPLQYhO^iQyL3Pa#`Nudb1SRElii9>d>e48lUTGf@7b~+&5~aTQv<-R1<Kp1
z+UL+}8$RQ!TU;BMgL9{vu|FAG5Dk5vwc-=v`Z#(0OK`Fy9fVa}UoYELalj@>@hx&3
zH42QAEaFg2!KS*VP#g+W&51Y~%;GncMqO_@eL@ZfAc=0zu{uZsMkU%;aZgL)7JW6_
zy03~?=6x0HO#7<rr>d`tSx-!@Fx>fZ_!s&mwTJkaRd?1L=&Gp+#RgNHTquu6Z9$C%
zYnw3jr8APSTTxc0_5(zVMt5>Yw`?05HmdpMZQ5!ml}h*+h9r;UuKKvrC)LMk4-v$R
z3v$M#qM@S_$C*_bh7M`Yaja;#ns#Q-sjXXp>ZojQnuG0jQ?ar_A4$?NsJg!y4@F6^
zKA<FpiE0Cy7>AQ$eXSPfrD3cP2WXs%h_}D)RID!(UBf(_D9fOZ@bKf*5hcW!k3Qeh
zN<$D1U{Re$cm%4b3Dp!|SXmpp+^3D+fXWNSj}7%v7l5J%=<+ZV7QR5DBj8_BN)wgJ
z;9@ef%IA{)25K#KJjbBcmeyfjJDoyXI|mVaqY}wJ8rSINCdkM|eX(KW6K!<i6UDcA
z+Y)@j-6ZW>gRz#gJmj>%<0Ts}{Un@_f?m>69oHSQ3ME<Y+{X5{`Gb`iKE_n>r2r~M
z4OAuQJKDC<hVHo74Glq!wQX&N1AdHUA?dOFtVW2&mU-CKAdK@Mg%!PYE=HBuRuLm3
z{}Ry!;3<~2wBy`O(HF?^6bDGsS8VhR<DeQrKP#1=Dxo|j`UEC9kcpb5ju9KZgy)G<
zDFU)@#dY;8Zy|WZ9Ms}A^j<kWQU{r-KAMwVgt|q1MGXpa8A_MsrH)q@S`zJeo*d*=
zE*FI)kmC%n$|97|TDfS;9s1vBF#2LkoFX>J1E*T}IlNT3i&C0hc1l7}L^uyv`5)wl
z`<M7}o-n>JgQqP<=crP`MWH_I7f#eM%?)(;G@O!_rf8!GPds3(rns(Y(YNb^O*p0*
zniQL-pw0ux?pRD15st-^c86f9OK`RxSrO?x=GKu9ffKn4a7N`K9L&`0s{{R1andAM
zRA7QBn-5qyRs_Q6JM)6zAcrY%YlyeMKSu+JDFi}E1vHN!6>ih>t7@zS#tfdZ|9~<&
z$)Hh57d3?b0!LPKyr{lrtNFIU`ruqVGwUP$uM#@44z<?2D9#H-p33N8=4Eg}11HoY
zSRXh4l6DL}K%CDvxK+sj;XoMK$)kfm%>0gKtv-VaWMxBEB#8|^IA{VN=EG077;+M7
z^0;8_0?dCg<Sd#MoEzU!3_fuq-U!!W(BZpAVaQE3j_#=R+K`y^?$$y?Z0d)zA?4H$
zXVy~;&2o!3jw6eDk>Uh1D<{(0hom>=E~JGAX`Jl|KeAylrpI|?b*PE!<g_U^dc=hq
zsQswT6SM_k-?)at`LtmeA~;G50<<eBs^4UemCqoKECMUz*IoZtJL4ku9jIS|02)ST
z`Y6+&Y-9!C6QKVq!zyY!594l|aJsdxVG>!`u8R(flpRp@D;;&|nP3VYwW1z6t6Z2-
z<kEnzFO6*_9iF&8+0d-}Bpopr>#Oub4x)P)(@TZe)xj$M2MT;mCL@*}9boUZ$rN?w
zG59J*LA2+#%b|zZA^(U>86uxFl_y6^;$jnPnvx*k*p4Aa8jBswsr3*QjX}h$Gt?m#
zpp2jAz~$Y&{d<W;*qJE|JlsK37+BB*9~J&*NX{=Uywuo`F6W(tEd_QM|6HX)E1>(t
zoKEU+ahi>4#%wD<Za19}h)=EN;3q)fX(G%Z$KGHp2$Ag-_Advgn<=+JPkY5cVllLn
zLjF{zPq-5@Hi_Z6)*oMnL9IaZ*0zQnOcqe_`V(Y-9Yr<h%wwxPb@Du9V_XQmdGL_~
z7{tU$T;j-qsDA+sj`J^eC-x`5bR8T=L)j^awQGGX8tj`T9d&4d!IH${BQ)2TCBs~L
zszI_xr~2l@syN-OIVesOra-N)DZyrV3Xoy7^z6tbmCC1`#pql|1}?&wk~9kMCs>bR
z0YBA3)|8BH{P?O)LO1qo<RZpVSVyuT$KiknV=;Es9_O}-uZ=01ImiY=c!UI$KPjdU
zaV2bn(~U7KG14Z(9Yn6=5`KBCyUKInV{=5qSeYg25Gk>Qg0tXJR1yEJ!g<TGW|fn#
zyir3+km|`cImYBI!cA<8q034F$23!12va^xN2cOXZbR^hqRgn!De}m5I@cJ1k{oSh
zj2o~6bDP4btkaE6lI3-is2JssYsJFtG0k*%B+aJf5LwXBB9E%dDaRlT^Pbqz(P?+J
z+0=|Q)QCVARFRr5ULqOH*k!(S@?)@dA$TUTiw0^-FnI|Fy(qCk+u=6=37lGuItHI#
z%xezTs|ZZOfI_A$dfXq)_~4%4$DZQbQ)s!;y66OOifBL?v%oLqELIbK<p3ds<6olZ
zvc+w_W}4Je2cswh`LD*{PW|?#S2OE`J50Y-VltNfd?WPkSWQnJby=LKfx|zVTj<*W
zu^3^}Vx({Sry|6!OCU%>dzob0YR5+OPlSmFhwGK8DQOAe7an9q1g6NJ?UD`<Mi~8*
zII(X}#5yeXhN*P2D7x(61DT91ttM>7uZ4`d7u7TAMG5~R5XO=EnDdK8(P&}h6!WK!
z%3?sKRYNK<Eb=b*%zV*0a~oQB&^)T#aYu8<6&!X-_ApuUWAslSz)&eWD2!@cT_Oo}
zrwVaEFiJp;RwyETa~o^t!KL@N25Geov%FwkJME4u$tj1iE2IFR=vL*14IDfCt(k1S
z*-jriyyG96$x}ZzlTSZ3gM->|NITADTR5vKfZy|?V~yaI2rP9^`W#q1$X^<uo!98Z
zjcvZT&@EI%8-J8S$0&g+Zk<QAe0Q2rx+WIGqA*QjeO*UYg`LtZY8)@(TeQ5Ie!Ncq
zC<{J!Zp0c!wHzvr5nJ~#^0nbN0E)^=O0Wq-{hZx)H(TV1Z5AG}KO#2|8zjVL3s1H?
zC)?vLEOh4<78ZDN3$i`gc;_v|zdTP)L7^unuh8So&dc@Wd);D325rD7@VdPP1v$Cy
zf}8?x4p@kN7uod6Q;>rzKb!vL7UE^Tn{v(}w%E3j<H^qRdb101^70F_-QYNAbB3@W
zyV{*79wrAD->ktNimLHJKcEm_>(mK$Ctvy%5gcA&F}w=1sa7)N0=2OxN-wBNtTsqL
zNMd9xT4Rj;TSoMh$;C=Gd3S2)f|pg_9>2yZDl>L`679bH>4g?fE(`>D72?Ou;N+T2
z&|@R)G1XHGiks_ISBQGxzUDUibsRY0YVV7j6;fa>CUU&Efq6|W%@jPsM;sJmHMs7T
z_>mqO1;o0ha(k5l3?ZAq!iLr`empR~_M;v{30wdcppIwW?RG~w^6&!?Y7c<16mknd
ze9RX=K}N#IS6S2}5uwU>m*2<`31zHVPakw$i`I|#D+dK`SytPUCj4p+V7OJn`T7oS
zLof>maA(o44btiW%Zj4J3Dk!))H6Xqa~+n2*cO;chy?@j2Fo=foNs&x;2qXUYAJ!b
z3pIvW7Db;}7H+fVwWyo6U>(a6q5mulm<^zAsjm&!vaH~I^;=T&>%mPwA<sIje2Gmv
z_}NNwt_4^5GgD0P(D%fL!~jbnGKJ-kz9mc&03))Q)7HlD(^^g9_f|}PWOX-Cdm&9S
z{_HC4dUc~=rowBGqHh$;0yL)IsM2dVDS_UZ@LY`NZz7QvoqxZ&(eMpLuhS*wKLhX6
z@Tb#nbjSo6uGm99a{&5<Vx4}hM6)VDN}|*IsX}mRxM-q$*8hoz@j4L?5rh0250h^-
z{6;0v^6Pvw#LuO(0YmzpBV>9FyH$FUpZ>J`l8UiKxFOz}U#LjF(Xe}%eAfBv^t$|K
z;x)aSBFR{0rM%HFq<(~#X!gWkV)_e!BN3DEC$5@!sH#&TWnR$-+$_hRF@0u@e5+wM
zHLl^(zxk};g?ML7-@8B(YpCfo3;nF&l?mzlRC*1&c98$|3F$kiL2zmKz#Al8?9%ya
z%q_Sv%3t7@EvcbuK20v#D*Aw%J5_q!{;WpbDcHN8k(#m0_(%3YLi*liGQEZsq;!T$
z>ybu1jT@3*=bw3=ywmXV{WYb8T7NY5FSs$LfA9{OUc->;znVTV{}1rOg+GTPnE$3s
zKmSh>Cf2vkU&GIkZnz=+VwHZeO0Ve@`>6hF{C9Xk^6UINRQe8;UfaRM^!hmoiK*}C
z^wZvva!-3+LS3=C8Faq7T$doNG5=}rsq`;O*hMc5mrk$YaJ)CB-}1gpx8*Mi>Wmc+
zole8C3F&)3lIeP1m9WE*H{I%V8of8t6Hb@E=5I2c|1}9`lW>MB({N9>`>Fih33#3U
zpai^TXM{4Rc)|{qe~n_iH(n1xA}znRpQ*rW*^M0fk|g#H{4Tli()nr}nOC#)t528M
LgA)=YJhJ}-!qX`l

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/__pycache__/__init__.cpython-310.pyc b/megatron/core/dist_checkpointing/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..bb59fa5df9abe6fe3c16e2f1710bc540d563473e
GIT binary patch
literal 546
zcmZ8eJ8s-C5S3Qi{|W{I+i;gAjf#X92!a%bD}Rc0#fIRDgB24FDGa#=oV)k{z7ktk
zzJjZevSAn=fDiK?=Z6{BG^-+6|8UXo%A$D6<fBaz`JJ9WPoN4_ngUB+mf4?}30Azq
zn%6kx(^0F;4Cj1~3%<Z5U*d|daLw1a;hXedZ;N*Noca`P8NYTtbbp2RLTMjJ?+yW!
z7{$S98`>(KUAj)1Yi9=_pMt=Ko82GiLTt9ZBn9ddy#?zXwX;|oCsjPnC_0Detnfhw
zNWD__mr);#)K;XTDaFT=QF~(oAxI^IjHd+X?m+n0e(&M6mv?a8HnHv;0p&f#Im%(s
zc28AeRA-oGz41U=8vRcO?JUjm$2`L#!!kp@0<9A~7Ic*T3@@7X4uR$UuwFWnmhE+5
z!@>9L!pQwLZ3kHBH7PMj3is>^_A-#O-!HEizWFRqI2QS^-83c>LR%e#_%Yna#ZPqV
RVBlB2j?W`*CdcKs@;}Ozq!<7I

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/__pycache__/core.cpython-310.pyc b/megatron/core/dist_checkpointing/__pycache__/core.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..66fe1ca242b9a4bd27afbdca734ed93b777b985c
GIT binary patch
literal 2746
zcmb_ePjA~c6elIwmK`T?+9F-Ct<|<-h=DEMP6L9XXqPp`hQ%G${lRom7?HNsN}@;7
z$r2=|6g#$`U_b)&vah7;PTfb?rF)OE6FKW{r9ql}e0qF;e(#ZTaj`|9jsDmg{q7U;
z7cQ!;28(;p^>Y|F2??j%Noh#o-%Xv&4c*KOJ&JTMt!4GFZs)bMk@=wy^Lp5PNO*($
z&j|NL>%<Kgga?!+Zvmxs;+)X1%@=t483`BpqFCZf!WZouWZ>~--g)MQ%X~$&aR(?@
z_*I~Exbv8FuN{67Y)d{#MKF*m$XL#XNj?mCqK!&+Cr0of9*OwrSSGpAK_(32%&_&~
z6&OSMU8krs&6C&^O{B*u)4EFw?>lBj@b5nwn?&X;JzPBh^of>vj9*t9g~dJSx&wnC
z;2aV<oQAGd(=Apv&$R&k9{d&yEBNsCmrRR_im1F2DMQ7@jH}=E3O|Z+mWe1TT2Yi)
zlVRSDqF*O0o$fTEh|4&N{v>Jv)Ud-pqBoM6=%Gh?BPJEgd&9)^#uGj2ZKZ7ZIA*En
znNgy6G-k>i^tQ#2871>izuoR-(|IqJsuU7k_!E@1^!4$9s>6Yc=m4Df#G{^LY5(z*
z3;Xww@h%KAPyGns30>id8h7px?uK>IfVl_rTIgGP-O`(u-hjCe;cpgK=lr@U^FcCX
zn-Gn!WIV|P#(bB>PesmkFwx-DBoEA}>hbkfD}Z((Cy1?-;HeN}9T)|l2XcV;${2{V
zQV?v~NQL1-aeBlQ2kA!SS}JWNu1$&2RDo{5avn%vSApDpB4QA>7RxM?`8mr}nZ7gv
z<T4ZN38evmcut~&TpEk>c?(csIM@Vh`=cZtAtM`)(<Eky-9V2;oD7n<`-xQxlHyG=
zO7numXps)qEoZTO$%0pi^5Xg>YBbfcsDVS`QL!{{Q?WX~p0W44E!6;d3Th5fO&qWe
z6)t3Mu^dG#2WzbbI*JsgRpCMot1HNP6^C<-m$Np~5Q4a=an&N8<2T#1O*_=?#Av{*
z;oO0~3Ei?Aazsv`s!b?B%Q^hpLP7`0AlR8p{vF6n$R^mij3pakbbqkN(gaG6Mbb2=
z_tj8uSjQsXF0v@%iQ1^Fp?E0(hg1h8GQSsQqVme8yHchb!4GO8-iB_dOdm?!O2!U$
zMU+a$qf&1mF3qc1aXI?8xMjDaM1u|I1-DWlZli0_$L*%N0e|Wp{Hm_3MRURMU;}|*
zgYgqgFc^lOILGveo;qhlFK`G8%-u8cV)589-f8W~Iitt!&rmx&;*k@VlHC8C=v(`g
z68!xF-PF00kR$gceU4#u8C*zY>e8yyr%8{&p0|0&=F|V&C^q1InTs;7_Y*D3puM$V
zZ&vS(&9XAB$?2`s-3aXAp!J2)vqCWgVI?#bE(^rI4QRKa(EUYw^HG26>xa=+|Ni!a
zqF#c$@Z?zJg@?CZ;UPL~CUw0smJ6ld;N~!+f)0w=8n4t#Xi?YUkk6p&B^X*wpL(<f
zx%uAfCCBa+^-@@jh?%uHV0;5q00y<daE_c)xMI)fi<M*7xTl_}Vg4SuXAUI*3TFli
zyn+E1H><EHujRv+kJ+9GhRL4DXJy~WikB{O@y$tW<1v@Kr3r5%%`viN9j5#JZr#R6
zy$c>t@8fV2hQi~MY^=~<5Ri|Mj2Wf^96rF|qDI<;UC?0fG`;V`zQ&wuwc7Lw{qVK=
z7#7_XTZT*V3+Hblq3tQk1(u?L(N2@y5;k>nFoyd{;XBdlS2WMxH}(l&0aNDxHRM4Y
q*t06ySv{?a{+;r5a~JEgMsuKuI~@Q@8{QNh*Qs}?-&t+1uKWvjspo?L

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/__pycache__/dict_utils.cpython-310.pyc b/megatron/core/dist_checkpointing/__pycache__/dict_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..591fd984b15ddca007e2e88080da6a45e144f396
GIT binary patch
literal 8584
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
Pa+CjpTl^8Xr+)swz@Rg~

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/__pycache__/exchange_utils.cpython-310.pyc b/megatron/core/dist_checkpointing/__pycache__/exchange_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..36e6d276746b0c7066dfecfb014058c2b721e837
GIT binary patch
literal 18506
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
ZQNEQwi2S+jo<i<(DEGZB<>ssJ{vTSX>EQqX

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/__pycache__/mapping.cpython-310.pyc b/megatron/core/dist_checkpointing/__pycache__/mapping.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..33e7e40842bb35fc0f33b3e998a9564e51e28804
GIT binary patch
literal 23479
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

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/__pycache__/optimizer.cpython-310.pyc b/megatron/core/dist_checkpointing/__pycache__/optimizer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..d5abc3a14d532b6033c4dcc29f0bbb491a1b6d12
GIT binary patch
literal 5003
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

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/__pycache__/serialization.cpython-310.pyc b/megatron/core/dist_checkpointing/__pycache__/serialization.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..5fc1be4060e4cfb06f0e3265f51f4467a07e4ab0
GIT binary patch
literal 14155
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
BygC2?

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/__pycache__/state_dict_utils.cpython-310.pyc b/megatron/core/dist_checkpointing/__pycache__/state_dict_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..688de1f449a6ed4e0c204a78ef3d388318ffbca7
GIT binary patch
literal 3849
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

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/__pycache__/utils.cpython-310.pyc b/megatron/core/dist_checkpointing/__pycache__/utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..9045bd8afd80d8da72de35ce7f2b96d1e3703d85
GIT binary patch
literal 11984
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
GJ^L4t-vZPC

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/__pycache__/validation.cpython-310.pyc b/megatron/core/dist_checkpointing/__pycache__/validation.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3c86126aa7ef1eca958d5f8ddb50ff31f45ba0c0
GIT binary patch
literal 19500
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
C&0kdj

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/strategies/__pycache__/__init__.cpython-310.pyc b/megatron/core/dist_checkpointing/strategies/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..550026160d9bd9e8d1f5324046de0e0bb6427d6f
GIT binary patch
literal 382
zcmY*VyG{c!5VU>ap@{qd)rkhB;4D!`h$<DKiA0fRW!dIz;m67LA%&Lj-~;%jYpM7J
zD)u7K!Ad*!NISEmjf=&cV41hISy4hhM)J29l3VP2j-benD5{vFp6wVVn!OTARJA3`
z*~?}9Ad-!Ju3Z$$hPD<#)mc1`-&~R?y0tpjpJ+subht>!bI}QueiXecAfxv&z%+Zm
ztcDW+6(zuM?R6_kilLD)=|-Uzq|x%Ji#8No(o8}e8LiTo{+*;Fd=BtcxQSl#QOu2q
zNd(^7!n-~jzILMBO5rpw#wG=wNM+AAKU=TvHvBgM9}^r*{wLs50uEq<EdWioA5K?3
Ss@~}vyfDef2s3s@=hZjFpmlfv

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/strategies/__pycache__/async_utils.cpython-310.pyc b/megatron/core/dist_checkpointing/strategies/__pycache__/async_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..686e7eb862f5d2f06e386977992635fb895e0a6d
GIT binary patch
literal 17795
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
IzA!)Y->OV#fdBvi

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/strategies/__pycache__/base.cpython-310.pyc b/megatron/core/dist_checkpointing/strategies/__pycache__/base.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3d95516a333c9abd017ca7677cf20fef0f4a8d64
GIT binary patch
literal 9716
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

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/strategies/__pycache__/common.cpython-310.pyc b/megatron/core/dist_checkpointing/strategies/__pycache__/common.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..75105e1fa814e6fb0bbd48a580f188b0748dce26
GIT binary patch
literal 6463
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
aGc}X^T3g0l;BtBueM7S}Q(rb$*Z%{-626xJ

literal 0
HcmV?d00001

diff --git a/megatron/core/dist_checkpointing/strategies/__pycache__/fully_parallel.cpython-310.pyc b/megatron/core/dist_checkpointing/strategies/__pycache__/fully_parallel.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..e28eaefb4ca55f1984185f54951c3e3afbad00fb
GIT binary patch
literal 18796
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
U?2w^1oC17o;J8@XR8FA(0%H_ghyVZp

literal 0
HcmV?d00001

diff --git a/megatron/core/distributed/__pycache__/__init__.cpython-310.pyc b/megatron/core/distributed/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..be0b1cbdf833066627f37050ae01a6c6655b4813
GIT binary patch
literal 534
zcmZ{i%}N6?5XX~kcehFl3W9hL^w@*V3y26xPgaDAhrNV!lkNudv1GG_`Z}I`rM-IU
zD|j-qE%*UVNcayknfYZBI~pCLFwFb3Tw#Ph!T3F*VBCgP!^RQE3Td2SjCjO*D$>2I
z*Xh3M>o|)$9jinqS<>l5rFxJJf==gXJlKRRXpGzRMYvj8vk5i9KE0Q<cXH8q!S9)8
zPs}l;gbJ?nJ+3=zma+%|CrfFVl5c`)%Y~waW4wlg&(`JTv{7n3FPY<iGe3?G+T)7l
zudI-!n5?!u4({8Y@gEw>0}icrJgyJ^i@koDcT_G8VJ?B#OAi!u2^h5Aa{SAghPV&p
zhHwV9uLUWs76hu0l3B+LDWoS=Q<r3_STWC;62zC%aUk<+G7|;!&YG)-8PPjUa_hE9
ic8w*JN+Ug`lWN@#u0yvPC2rsaYWM`hC`>%WNBA55CZT=+

literal 0
HcmV?d00001

diff --git a/megatron/core/distributed/__pycache__/data_parallel_base.cpython-310.pyc b/megatron/core/distributed/__pycache__/data_parallel_base.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3fc273a0024075855bdbb586eb870ba3960650d5
GIT binary patch
literal 4277
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

literal 0
HcmV?d00001

diff --git a/megatron/core/distributed/__pycache__/distributed_data_parallel.cpython-310.pyc b/megatron/core/distributed/__pycache__/distributed_data_parallel.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..732accb2db1f9b24e94191e8a20d6e29def0b675
GIT binary patch
literal 12327
zcmd5?OKcp;dG6Qr^bCi?;X{0A_2_+R#kEBG72A;IwY}16;kB1uSh5{V*63|c^^iU6
znI2a6tX51<)-h#>4x-p`a<JjpA!7%Df*?Rnx#kuirvSMGeaRsP44>@42Lo|-neVUa
zo(IKoHb4@DME6wJ<FBg!{r^?r^mJLlU+0Inwm<b1Mfq3y82vNw@hLpfU*p9TrUpu#
zezibtYjsVPb$VTAIx_;JU8omOr?Wy}wu|**+p1gQ+YCzWa=k3d#bByksaHhV3Z~oD
zdR3H5!A!eWuc2IKQ^9O|u0AKqm0-TTP+t(`>EKLzvA)<|sxPUEryMSOD@SVm?8^$P
zvYGn|oAKuM_4*S`y{)X)eu_0K8>?zsZG@fJdn<0c9e2y)Kh;oA)m@jnLEr^W6uYsv
zs--L2ZseeI)8BG}a0`7Muj6h89!ux&oj1jy!~AFmAZGl?X$GMie=PPoQOHp>hpH{^
zcDJ2|+l_nN?`)xV_6~PDQ8VOikKYgz&}f1gp+n#~Xx{m$Di=2Eyy!;WO*eL5%T|ca
z=WqH^%>B(??6J|N44RhCJJh@V=?;6DyX?hYv+4147JH2S*bh6-X0Ng1#ZiN>GWu7_
zKBB)v!BgrgQ|cO1>v~CJmzeGu%<u}V;F+yr%VMTiYFZDJrpk)Ux<6envl1)cSL##j
zIaWcN#->^IexY7rGpvUCX*MfHR?#xY=I<Nz8L!3`*qQsvzFMDU8vYmmL}N={i7jKi
z!B*JW`(}NPJ;Bal{5(6)F5q{8UG&ZXhRvP?j79bodm6P%>>2hfewQC8hEiVv)i0+@
z6A<NI(-oy`<L~Cp*X+9>QP<=4-EF_IZAWp)y~qaLSY-Phn;6F5>V>_?-V}(8*6dFQ
zQD}of?66Dtw8N$yzUlD*a6m!<xDmG7y^h~-MTfh7ylro~jh!wJy8zkl_P}Q}bn~9Q
z$vt-m<LqA7ZuWw}ZimbZo|9|vy-rN)h(kMS6N_>IKBJ)Rc9_k3oem90>s9WtUc<B3
zZCSV)VF5ArhM7DUyOZN=H@eqpZ1b>#Z3Xw%>^s|jWH$mgiUf3*_J^gu=`)}r-uCj1
zVihbD6@(vJo9#9ly>>5<y8*sjJHFS&0F2`3>2^eSlCQRC5ffbY*0$EJ*v;;TK4?P{
zFle*+fse?IudbCvpHK6x=$a@Ip`<8Yvqyv{tFyz+me+{a23;BJX5x9xp1=T;h63}w
zz`JIDvBN;ldxTX%j1k~|L|PydA#}KAf2L{2yysy%AqVb(M1Ko-03pS$J>VZm46#Wm
z;29CtXkZhl_O1+;PCM;I9+(h>bvetr(mJ|f;5Y7F%fXL>&R8Ss9tpM>vcnj7;`EFQ
z9KY%0j7y4&IT`za8SY?50!+6n6q1d)_h*#3m70<qX?ck2)Rf3eXQ2?sQPe1mD480{
zCLTzj5`78!H&*tQmU^HhI#VCQj>Osl^Z{Rr^#dg~_LaDBpzo_KlW7li6}=90r<iEa
zKT1#Gt8t0!O<X>lI#L#teJ#-(3$2xCohh=6{?l<ao{4L%Sq50G>F+7u*Y*L6$}J1+
z7RJvVDa_n4_-7gF9qT~lugQ{6-}Aom4Q)&57x0){RI`B5#ltg4%1z}fmtNQU#lDqT
zt;NXSb<whLxRh8&DlAnov7F_kc%UWLbtPU&EM~FNzRtgv6!Jd1ZekA050nS$1MPth
z{RiuJ-|CkRl-61PT~_Ir@l16tigiE1|B`C3@^eQ@Ty9N4`%XVppHR@FI{fZeSS6{T
z7GuTlR8mR`Xg`nsC02c?C1p1AP=8&+o-W|Ih;|cD?IR_b8nir#mZ!wLPxGI|&m2Ar
zY}ME-Y3}~Cz{I6wn)WMj^PH%;EO7Ir#LKr-UQ4XQRl-WYnp9iQx8BFh72teD>CYrH
zhgS~t!>iOvP%!>EU}T2MyFZijeoGBkL}?9cSr=4!Kfc!i`4Yx{;7B2CqwRxCf%c!<
zSk?F}n2gWk1*>Uxx!3gH@|F6g=6~wN8D($%wim}FTTr}{6ot^-lG|-gM)_7+f@DcS
zxzivn&i@urn88EyMQ?z!eWkDCG4K=;;*;BbGcj9AH1mq`H5DbbUyQZH1h=omdduiz
z^{qn7gx&;ib<lzyR-zwT3Am^U{yWn8rKEHS3K3>NDP6W)R}urg(4YD-75&PftG0yt
zycT^5W00njDL^U<NK;86hqP;f-^$T<m>y5HD$HO7!BrKpwrT!t@mpouj>g|kG^}){
zRZCQ6Qm>@4qeZ_%yX&kZu;=*tL-d(CoCS}LK%;um%S<#e<~#HS*_y^~A&J1%6R&Gh
zs<7kf!%{p?^U@lzYZc`MNR*bZdPUhU310a@d?uMbfJgFB>sJRWHTci4hDGo!t>_<L
zQJA%_evP0MT1(MC<GV!P*voQ@D6xEa7JbVPRd8k%Ybp0@82<z$qUM}SX7E10`(rs8
z+$UDnx<IA)Vp4@f%*Hm;lG%L?V{84nq?*hobIX{0Sy@r?uNB34@>}YzCT3Xd*OFT6
zDfFM|&nNS(r%|%NEj7&YOk!SF(DNdmvv{z>1U?jad}>3mB%cDu{R9vGe*VcjkJR)G
zu`L-v@^u}u73ADP2nt&~>~&FC5ymQaIi*2>4M5}Gi?5NR=mtV2KHrV)hTG|cu^sig
z-H^xjtKm!1Dn_=D4(~14lvo%$n#GUWYkO-GU~GD1-<TK}_TqdB5>Mv6={LO9XVYo!
z?e=^)VZtV*1x5}9FJg0P0nS-tJ1z9!5Pgi#QPup2;d1<rLq0`X5T1CdZ+UTQl6Ti(
z>2kvj8sw;W4!}8axZ`!;+D8$m&?Y^Hz7B(<JwTUpH{<~WiuSzpj0^t`5d+Q82(isZ
z?7!)yPj`B43IK9%+#!dsjR71T$%r?+D4iPVkXC7$5x`H=x5VJ&*$aN`wIg1obxvip
zqGfSXH|aAYAcVJa>JC<b_tTe}8jT)vQ}cEVN3@L)smD1yJ4X^EeU`uj-`Eovi5TO=
zLIu~P&&w_&dp!jilEc!4G4B{Lmza1V^P$D^+s>9tE@Y|)UMDReCff4S3!R*u^XAMC
z%itCzZh&%P`F7-h8RPVf_yEDjI<GFI6~6;NTuv9I^W(&qyIRWqTnC<X09)ZS-3FL2
zy&!?YO%q(|2qvXD<jm>CN$p{?86ozX+`;cK$U&4A1cYoW5`J11%r54FJrjFOO$jkA
z<^wOpE+?8zS~{>q0b!I*kBWW7e}kB*GFq3;5`T}@M5*ehrmT5nNc&25FP)bA1p+#5
z+e?ke3!0CVe~;F;!?w3hT(Q3Gh9KkmmLIQod(rm#t-#&74Xk?W@wU$yVJ^P6{;CJU
zBQm-AxmVZQS$VyIm`ni4qTbQ+I5)0!@1?c_br&M?AvaxY)q%E?lo8(eHdY+{053x~
zR717&vTACUY8DsNnpRdT>fG#{T2sqv74@d7sn)TjS5%FjV@)f+YZW!L7-%t$wPWjD
z?W>iNp)UXyYVgQ^St_gAFU{l1Qbnt3)Zf%GMl;@B&@rQC0P=!iVWz59JGKgCF{^Qm
zdSmaEn?uzy8tAV%5J*3EoVDw;&mekX?Z4VGU&40zGG31~zJebi7LQBws>(l!)&{vc
z`5%?Z(YcK$A`r2XAOW<m@iLrj#X*|jHqt*ZNZLj^eb@81wqqyDf@o<Gfii+n&VLgl
zq3G2%CqVLb2c>kr*J-<5XKdj6Flj__LKy@xj`u$C-cfN1wABx#1(+|W6Dvm@r=Wz>
z45=xRm>Ohgs0XpI;|Rx*U!@*;+kH!z34Vz_=W|UpVta%&;*>)pc$6?oi}VYfks6=b
zxb^weCZX*5U6{y@=bX^gl=R`(X>?7>wIfV8O_0`TJwiV4OVK1hkB<Bq>MazM<1&U0
z5Wcnx10@C(F`Gd9v()!Fdc98$z$#8rb^I0T@>%L~ffjnIP0EyF)<z2@i=Rtbdj9bS
zN;FCB9PxFU;UdjY?1XZa1sLbxURn}}L@FUl%VPUtn`sH~NW;2OS`<B+owO=!K(p6@
z1r9q<V%*z;l)yS|hv81T3>54@?vZP`ivZf`hEXh9_(y2s8d*Uo1JNc1T;yIG<Q!BY
zN)Y`Wq%K$hJ-j6IevfrXFXvn!R-D-@Nw%RIfR%MuYy1nebrFq_(;_)b=*<d4wh$hP
z)a8pO5t!8*!~y&U4gDg$NJP^MS!cowrD9H+sO51g51kJFTQs~RmmRmesg<Muk(!nq
zM<jy4|F6+hB%vG$VTD*I`Vn5WqNOfEb(KvGs?t0*4HI9a@(d_1<DGIDwJ1}qRIsKx
zhcEOtNX=HX3Z6MldD}Fpm$isDq+Em2GYU|wP<<AZEy2V8v8GplrIk@nGrUtiwkp&c
zunJYxQp;LRt6?45S8GtLCX_1b)V)ao-9UAYX*fy)lRh8}M>p|G6ohF73QA%XWo=(&
zDnf@U)!<t{G(?b6>8pu)h~VzfJW`HC&qTeh?9MZC&-FbvNWHuylE;)HBGyB4&AUqM
z7ug-pgY1edm>`Hq<4NBq&&^0TJ0B{uhu$zHC1QY$)gpfj3+ErD*FAbs9GVtoRwhbU
z26B?Kf6nRYqLi7F^@yJZ+Y+1;Dx2@2?qyQZ<dc?-Ian_uWd$VMTc4z=CkWD=Oy(U*
zN;ZfT`5ze_dIVVl6ozC$Nj=mA5f=LzktETOO;CGkbS5Vf)exZ&DU0?`D7)nt#A+d*
zBqG7*MNgG~7<DG)ksczdrV|5kYEamFG$0?gL^-Yh75d%Y@w@g&LRO{?NBO{S+HXi{
zrEYIfF76g34u?D-13?P?${=II6S&M-LJ;ulK%d}?)RY=ea7tQ3l)^I~SPs%9)eoru
zDWp%AS(e{B$uGBwA4t8G3snsq0Wq9Y4ZTL@`~8!6ViK^&#53oGh!Tk6)B!X^b_@b2
zMD1?}w7P+4B1ZD^F=9~?_O9#4lnsaBx|&H@rs$FX_c{<q_}-Dr@7b6AHE(U0niZ`s
z1-{4-QxJ<R>oCDfCk04ii*pqzt}c?eK61c*hXgi&K^vJ9Ic_`q8`~&FqV$ln7BRe#
zicz8>5)`UPP^kL~uaKt&hNa^Y{h^9P!FdP(lBO;FO_iVBokRN5h%ORqqYmk$?z8wU
z_K{ANLefG?NwWIxobcKT8++GoZ->2riR5#xn}DX^p2W&&mX5fPvc$LG(-pags4?<T
zT#3NWjxf?$-~bYL-MF#6T9O*d!oE1C7x_EVmm#)E=MZ6Sb)+rK%qjnEYM5=p-Ho=h
z7LtKgL#j8k*P(oZG>zXx-$$xs-`fOQc$Wt0*%tBUQ>ZiGag+CL8irca%P=x!)hfbM
zf46LqpKtuz-t|emdb*k%`rtH?P?Wjm{9{^#Sjivd%i#}DVze5fbHy~y?XCUy<`a88
zRZWtJ2mz!NGNl29fPgoIfc(RN<)nZR|K@HIP8XtB7$lOBoM6cR3!a^Hs6-+$01BaF
zxzI?afrt%{(FVe?jZBKY=|R*oL&k*cpl{o6@Nknj#goTSBq36+1pAE03^qFW11^U$
z^9T5#0|j0n&OT5M)Ry|D!f$~0HJNrr4N|TA9LWZb5Y*^gE?s#I{~$^xe?BfAAZ5pN
zB<rchI;2E=p(PTgI2ur#LI&$4n&kkgy~C*kcmXgWSv(}9%h=d^Q7G><^0KgX$~bR?
z9ghS^<kj4!H!fzv9UDK3NvlZrgbs3M&RuH0wOZjqkj7<*Zvp|SK|Q#SB5%=mX&4q5
z2o;>vAlERRAGieBgrFeezi(p*g2Wp%{0sCN$Py=p{w6Umg+b)wQFKNg9R;>!3W$%%
zkE`kM>NJGIzc4C$FZ_D;&RKBish=iLnNbpJ8cNmoXmupy{4QPxxl~n)#{6W9GbunA
zQ^e$j&}n!BPgKY2cZKf(wW}^scDm4qLzt+Jwp-krW7?PCV|@AX9=hnUOwJ%i(lZ<_
z+b-QzRuSh9r09lB+1lCt1Uf*CZCoAb;H<gX6yhXKU2}KA-xCL~L(#akac5N*VI1#Z
z+2RfY&UIsFC|#hfAnWJQe!{O4ff>R65#e$H9pF|M;EaRFHMs5z$0#4~U7SQxgmpqY
zYy9_U@~ZSja(yBy`JbX?fNR1tIo_lUU&a%C7_UT)N`x<7O0=j%z8GN+56&}0Uff6w
zm@=q0^4E4}gtw-<F9Fy9k)J_+#D^OYW!@Am%f39c`m3aVMo#EMBnJd4BjJjZ?h+CD
z(8NdC=_hHW7w_53Yr4H4zA`Sk(o4%63&=N8eWX#zPF@-4RdOA20@A&Lv6T#VfV@r+
zef&Lv7tY`n<moYD%#%DFa@fTkh8s}sWY#&(_`zmaYqle3DClS(r}8~IueO^=)8X!e
z7le05Ffe{PPdFL+o%ZF;Fbu9_mj>Km^_pxvv9vskj=Kt5h=~wu6O#}2PcZ3E-Xs7b
z>8K7wkhStX&R-Mf%^7ffriqX@_&30Xa52dF7|Ig=eX1=;;UWGOtSr<eKSh>A_rD=I
zs-UkiUDn}oXjSrtFHe%6lg{`+P5?nfLOOnhoLoSGWP~I`NQFsGAVoxw2vbOe=3d9_
z1AGl7g0#J$g%pU)(175wlwTT|EFuG#z(08inWzw4abIPGPrgh}b?!c9W=335`5zFD
zHTyk4pClWDJ&ef+cy@%vHpW!xjHHg(gwS%CQ6hVJDgzv%;qO6$Ur?5@RuXy4=YBou
z2f)WDPg;^FPv$Q=h4Pey7^nQLQOe&E-ZQigLH~b8c#6m}rTZS0B571mO$1f{$2?HW
zB9Q@|`1e7R6IPV}8S4HC6yQfFOqTYOu+r-IA=6_{K3Pe@12zg{(qEL)pNQKNx%}^a
zTpX_m38e)K*@Q<ONtF*bT%L~5CA2rjr+#CNcweN1+n6hzp=NJzq!gi1_z*v&Mw|!H
zDa%PL{0MFT0xXC$eho=KXuiqpKMsG4{b}0+_NO(`)<>K$byr7?NCJ(hLPMy+8MIK!
z$IM!ETriL==dv7KZ=eb4@UUTma4bzaO$bYdp*4F0X*zL>3n$oQXOXfa&kR@NHj#gp
z7w~WmkS^H`;Kdx-cru|lzLn0!(0bjXgxwbQBHi>MrVBXu_Tr({ff*8*Cc5)Kr`IXA
zCasC+Kyam8@{bAeA~^^5jgGSD`E{n}B!I^#P{iDV`CdnXC~&BX^xLJric2hThZ!za
zRTN@GekK-J?(3Z*u2U2cMNzIo>+7+&I-01h5|s|il!-Xf@Gj8huH6DN5vvyWK03hR
zZTM}O4=2t9aNiI_f&&E#;qE3Kn~W%IzKFHm;a?&&0RcFWO7)00_*s-UR;Oe>i&JZh
zUc^{Dpw|w)=xBnk;+2**dFZkR{AT`L`koQzsR5$XK-`8KC5mvdPvq_S3j|8UO@rVm
ztqp)?>HeP+jc93A18xB#DI_N-pAJU>`E1pC$N1%B<#7_&s)|I+oz=7a4O(#7p#vsl
zsvIY+IL>a*4dkI#T67#1Hjv$?@P<#*OB~5)ola`LD#oM+`EMfWFA}}{A@zDda7(Yz
zK?PAlgj}2~6Q`3@;qCB4Dv|c%Ptl7s0RIbm{S{v6bau4R@PYsf7@}vNx`;TAl6z<H
zh&aGf5Kt}}ztS}AT^t9zV;b6jXoc#pl(&_)t*2@gYj*A#?Oa(sTd@|cO0{AYY86fp
zR?l&UpR}CafC>Cfxl*xHN%wSG-s;M3caIzgmYUs<IXxurB6;a#338lY*j}Tn5~K#Z
z+mVRB(+i`mBjxN0sz5U?tO#&rTGZV5vCJm!cXRR(Q;H7;7fHrD$)yTv<<}VoHxDx9
zOR_HSgOtFmpA#pLf){v$S_my87$0(_bzL&b3nVYmIlL^WYCPgp1t&GxKlF#Tp#LZ8
C%JUuo

literal 0
HcmV?d00001

diff --git a/megatron/core/distributed/__pycache__/distributed_data_parallel_config.cpython-310.pyc b/megatron/core/distributed/__pycache__/distributed_data_parallel_config.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3fabc35c8341c564ff007d6c672d7b36391502d9
GIT binary patch
literal 1484
zcmZ`(%Wm8@6r~<Bo`=RWwrBh*iafe<fm%Sj$-*cCG;lXbS|II48-f-&l3<BcNy>)3
zP5z{-eo+B#i!SmDUG-j$oQ#210FUmuN4mTZQEE1u5V+*;m*w9HA%7v+zG5IRVVQFP
zPIyq0Cdh&S?XV7;D2oCjf*%Qwc>ICz_<i_3$YMTtN6v;H;T>`oxG`sz<ux+~$mplm
zR!XuuM|Jy(fV_ld76BoGWC15x_$%z0MLf)6F%Ux@U63*Cob7lP_iW_Zpl4&xhCQ2j
zw&U3-n~DUYjC*b7wMox*J)3%#WOK0)$q9j{XT84X_1&KBdp7UcfoF@JEj`=wY(HCx
zLx^(V*)luw+RC%T?AYgX)N3bRJN7KhPCYxhAUuI?p1LnzRmSS-s<VQ>f{y;oG^=Y-
z|Dfc$D(=7D+&j&%zfadnKmDH<&M)0Tp&6%I@Gcj$l62jE_pLinH$vB}rCXv~J~&(0
zuAv39rO<Al)m0(sBi~791m&M|qzWe8RQE!Egn<(GmF$}T)*%C9naqW8tGpEXHHGY{
zWD--uWVYQk(}nO}^VUtTy8K#LYG51pq=lL`4&x(~RZ&uz=QViE)va4GD3HP15H?rP
zyWCbc!Y$VAi^rwRv6Q?sRyA~Oc<V+|QByL_-4pzn{nOa{jkA&kh0!o8io0LjDP~*=
zX&?H_s~fuR3{0gWAO1XY&rDYo!oV0Ii>B#hmHU}du=-L~trkY;8{sEIZv|9hjZ3eE
zXu<V@!fw*E3e#lJGJ0DINnsDjWGnBpFWiViBO5`fn^4*)-qmO)l>XMSx>t56<tnFC
z4{%QLl~T2vQ_7@N)@Now8-k{H5Jm`NgeicFDrq(RJcynl>>}V<)^mgf!XCmt!V<tm
z&@8<|dWdj@a18JV(a+FE_~$+?RU=aTpwf~ls5dPto3@=P)61F_?{Zd))RvXzI1YQ4
zz7g<sY9+sU{U&XCJI$5e1nEzX57^uE@ho$Hkj~pXjlVrC)w~9nkT^`jFnF|L;13J5
z1?tELu%dpU5A9F)IPj6*o(<ge(?3xd9l|bdXzyAW-==k#z~^3UtmpXD=wdU&@9{_(
NoJ0~PK^QHAe*s|mpK|~J

literal 0
HcmV?d00001

diff --git a/megatron/core/distributed/__pycache__/finalize_model_grads.cpython-310.pyc b/megatron/core/distributed/__pycache__/finalize_model_grads.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..289831d3605af49b01764af524aa842d6fd13194
GIT binary patch
literal 9303
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

literal 0
HcmV?d00001

diff --git a/megatron/core/distributed/__pycache__/param_and_grad_buffer.cpython-310.pyc b/megatron/core/distributed/__pycache__/param_and_grad_buffer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..856d96a3e4bf57b08e49924a70c39b4ba8ed8f95
GIT binary patch
literal 22896
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

literal 0
HcmV?d00001

diff --git a/megatron/core/distributed/__pycache__/torch_fully_sharded_data_parallel.cpython-310.pyc b/megatron/core/distributed/__pycache__/torch_fully_sharded_data_parallel.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..7b432386f746ea96acad3f8452d2cf7684f60740
GIT binary patch
literal 4493
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

literal 0
HcmV?d00001

diff --git a/megatron/core/distributed/custom_fsdp/__pycache__/__init__.cpython-310.pyc b/megatron/core/distributed/custom_fsdp/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..54919eec0773856a94afce92a164a437744ca527
GIT binary patch
literal 279
zcmYjMJ5B^K3{7S!5YkFpB5{H#z!yM>0!_7xkfx)F%s4xV<V;5S6w`7K4#1VBrQ!-y
zB<vPE$$qw<^lba>_DU3(kIuXo{;JJ?G^Keg5qBk#Aj!hXS1AQGy=XVzvW#1~UU!*!
z=?w<b^n?jtFd(z$=eAjIj#X6gq$(=1n$LQu3qD1-DD;<pCNSP<AR7}H^Z_RrZGt&R
z10Cbo56Bvlv4N^fTHv5ZOu<jL`vbUh4TBFSlVIO+(gZ_}$vbt7G=oxhvPr4Cd08*-
Pou|zDp}rF9IlJZ;m{?H&

literal 0
HcmV?d00001

diff --git a/megatron/core/distributed/custom_fsdp/__pycache__/fully_sharded_data_parallel.cpython-310.pyc b/megatron/core/distributed/custom_fsdp/__pycache__/fully_sharded_data_parallel.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..15df148690eb57c8e783f8af05a5a3e893d968b1
GIT binary patch
literal 22313
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

literal 0
HcmV?d00001

diff --git a/megatron/core/distributed/custom_fsdp/__pycache__/param_and_grad_buffer.cpython-310.pyc b/megatron/core/distributed/custom_fsdp/__pycache__/param_and_grad_buffer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..e1d3ea57dde6767c5b10c2d155111da21ae6dc10
GIT binary patch
literal 58808
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

literal 0
HcmV?d00001

diff --git a/megatron/core/enums.py b/megatron/core/enums.py
index 46e7d3b76..c74700d65 100644
--- a/megatron/core/enums.py
+++ b/megatron/core/enums.py
@@ -8,3 +8,12 @@ class ModelType(enum.Enum):
     encoder_and_decoder = 2
     retro_encoder = 3
     retro_decoder = 4
+
+
+class Fp8Recipe(str, enum.Enum):
+    """FP8 recipe names: delayed, tensorwise, mxfp8, blockwise."""
+
+    delayed = "delayed"
+    tensorwise = "tensorwise"
+    mxfp8 = "mxfp8"
+    blockwise = "blockwise"
diff --git a/megatron/core/extensions/__pycache__/__init__.cpython-310.pyc b/megatron/core/extensions/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..a28fe0cf8ca226038fb4d3e75eba4a3171d16d75
GIT binary patch
literal 190
zcmYj~K?=e!5JgkzLWCZ~h0X;;Ty@pD=>fvf3{9ZTlw=C_Fdo1wx%C#VOhC{F^ZuXN
z3|G}oCG5SnIbT`-6luAniDi;eo!S@IhYI=p(;LC^L||MLu*d;D3{GHPqJ?_Iq3dxZ
z5bJ``GX`0qr2!?dKQt{&-wr(o0=fzL=-5Zl+Ic5hALsSCJxy$uk<R&b+$5Fi12tzc
Aga7~l

literal 0
HcmV?d00001

diff --git a/megatron/core/extensions/__pycache__/transformer_engine.cpython-310.pyc b/megatron/core/extensions/__pycache__/transformer_engine.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..e1944298d23f192369c18438d2fe65f91d4a0f55
GIT binary patch
literal 33137
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
RQt^^8ci{6pI12mK{|6We$FBeY

literal 0
HcmV?d00001

diff --git a/megatron/core/extensions/transformer_engine.py b/megatron/core/extensions/transformer_engine.py
index 1d5725cc8..ab6678551 100644
--- a/megatron/core/extensions/transformer_engine.py
+++ b/megatron/core/extensions/transformer_engine.py
@@ -1344,16 +1344,30 @@ try:
 
     from transformer_engine.pytorch.permutation import (
         moe_permute,
-        moe_sort_chunks_by_index,
+        # moe_sort_chunks_by_index,
         moe_unpermute,
     )
 
     fused_permute = moe_permute
     fused_unpermute = moe_unpermute
-    fused_sort_chunks_by_index = moe_sort_chunks_by_index
+    fused_sort_chunks_by_index = None #moe_sort_chunks_by_index
 
 except ImportError:
 
     fused_permute = None
     fused_unpermute = None
     fused_sort_chunks_by_index = None
+
+try:
+
+    from transformer_engine.pytorch.cross_entropy import parallel_cross_entropy
+
+    def te_parallel_cross_entropy(logits: torch.Tensor, labels: torch.Tensor):
+        """Wrapper function for TE's Cross Entropy Loss kernel"""
+        return parallel_cross_entropy(
+            logits, labels, 0.0, False, get_tensor_model_parallel_group(check_initialized=False)
+        )
+
+except ImportError:
+
+    te_parallel_cross_entropy = None
\ No newline at end of file
diff --git a/megatron/core/fp8_utils.py b/megatron/core/fp8_utils.py
index f18beada7..e3526fe08 100644
--- a/megatron/core/fp8_utils.py
+++ b/megatron/core/fp8_utils.py
@@ -5,6 +5,7 @@ from typing import Tuple
 
 import torch
 
+from megatron.core.transformer.transformer_config import TransformerConfig
 from megatron.core.utils import is_te_min_version
 
 # Check if Transformer Engine is installed
@@ -43,7 +44,9 @@ if HAVE_TE and is_te_min_version("2.0"):
     # TE quantization logic using quantizer API
     # Supported TE versions: 2.0+
     from transformer_engine.pytorch.tensor.float8_tensor import Float8Tensor
-
+    from megatron.core.extensions.transformer_engine import TEDelayedScaling
+    from megatron.core import parallel_state
+    from megatron.core.enums import Fp8Recipe
     def _quantize_param_fragment_impl(
         input_: torch.Tensor, *, out: torch.Tensor, param: torch.nn.Parameter
     ) -> None:
@@ -63,6 +66,129 @@ if HAVE_TE and is_te_min_version("2.0"):
         quantizer = tensor._quantizer
         return quantizer.scale, quantizer.amax
 
+    def get_fp8_context(config: TransformerConfig, layer_no: int = -1, is_init: bool = False):
+        """Return fp8 context manager.
+
+        Arguments:
+            config (TransformerConfig): Configuration object.
+            layer_no (int): *Global* layer index (including layers on other
+                pipeline-parallel ranks).
+            is_init (bool): Whether the context is fp8_model_init (True) or fp8_autocast (False).
+
+        Returns:
+            FP8 context.
+            If layer_no < 0, we return a fp8 context for all layers regardless of layer_no.
+            We return nullcontext() when: a) not using fp8 to train, b) layer_no is a layer
+            that needs to be trained in bf16.
+        """
+        num_bf16_layers_at_start = (
+            #config.num_layers_at_start_in_bf16 if config.first_last_layers_bf16 else 0
+            config.num_layers_at_start_in_bf16 if False else 0
+        )
+        num_bf16_layers_at_end = (
+            #config.num_layers_at_end_in_bf16 if config.first_last_layers_bf16 else 0
+            config.num_layers_at_end_in_bf16 if False else 0
+        )
+        # Since layer_no is a global layer index, additional checks on whether
+        # we are in the first or last pipeline-parallel rank are not needed.
+        is_first_layer = layer_no < num_bf16_layers_at_start
+        is_last_layer = layer_no >= config.num_layers - num_bf16_layers_at_end
+
+        need_fp8_context = config.fp8 if not is_init else config.fp8_param
+
+        if not need_fp8_context:
+            # bf16 training
+            fp8_context = nullcontext()
+        elif layer_no >= 0 and config.first_last_layers_bf16 and (is_first_layer or is_last_layer):
+            # fp8 training but this layer_no should be bf16
+            fp8_context = nullcontext()
+        else:
+            # fp8 training and this layer_no is in fp8
+            import transformer_engine  # To keep out TE dependency when not training in fp8
+
+            if config.fp8 == "e4m3":
+                fp8_format = transformer_engine.common.recipe.Format.E4M3
+            elif config.fp8 == "hybrid":
+                fp8_format = transformer_engine.common.recipe.Format.HYBRID
+            else:
+                raise ValueError("E4M3 and HYBRID are the only supported FP8 formats.")
+
+            # Select fp8 recipe (TE version >= 2.1.0).
+            fp8_recipe = None
+            if is_te_min_version("2.1.0"):
+                if config.fp8_recipe == Fp8Recipe.delayed:
+                    fp8_recipe = TEDelayedScaling(
+                        config=config,
+                        fp8_format=fp8_format,
+                        override_linear_precision=(False, False, not config.fp8_wgrad),
+                    )
+                elif config.fp8_recipe == Fp8Recipe.tensorwise and is_te_min_version("2.2.0.dev0"):
+                    fp8_recipe = transformer_engine.common.recipe.Float8CurrentScaling(
+                        fp8_format=fp8_format
+                    )
+                elif config.fp8_recipe == Fp8Recipe.blockwise and is_te_min_version("2.3.0.dev0"):
+                    fp8_recipe = transformer_engine.common.recipe.Float8BlockScaling(
+                        fp8_format=fp8_format
+                    )
+                elif config.fp8_recipe == Fp8Recipe.mxfp8:
+                    fp8_recipe = transformer_engine.common.recipe.MXFP8BlockScaling(
+                        fp8_format=fp8_format
+                    )
+                else:
+                    raise ValueError(
+                        "Float8CurrentScaling, MXFP8BlockScaling, Float8BlockwiseScaling and "
+                        "DelayedScaling are the only supported FP8 recipes. Please also make sure "
+                        "you are using a compatible TE version."
+                    )
+            else:
+                # Assert that the user is using delayed scaling.
+                #assert config.fp8_recipe == Fp8Recipe.delayed, (
+                #    "Please make sure to use TransformerEngine version >= 2.2.0.dev0 for "
+                #    "Float8CurrentScaling, >= 2.1.0 for MXFP8BlockScaling, and >= 2.3.0.dev0 for "
+                #    "Float8BlockScaling."
+                #)
+                fp8_recipe = TEDelayedScaling(
+                    config=config,
+                    fp8_format=fp8_format,
+                    override_linear_precision=(False, False, not config.fp8_wgrad),
+                )
+
+            fp8_group = None
+            if parallel_state.model_parallel_is_initialized():
+                fp8_group = parallel_state.get_amax_reduction_group(
+                    with_context_parallel=True, tp_only_amax_red=config.tp_only_amax_red
+                )
+
+            if not is_init:
+                fp8_context = transformer_engine.pytorch.fp8_autocast(
+                    enabled=True, fp8_recipe=fp8_recipe, fp8_group=fp8_group
+                )
+            else:
+                import inspect
+
+                context_args = {"enabled": True}
+                # Check if fp8_model_init supports setting recipe
+                if "recipe" in (
+                    inspect.signature(transformer_engine.pytorch.fp8_model_init).parameters
+                ):
+                    context_args["recipe"] = fp8_recipe
+                # Check if fp8_model_init supports preserve_high_precision_init_val
+                if "preserve_high_precision_init_val" in (
+                    inspect.signature(transformer_engine.pytorch.fp8_model_init).parameters
+                ):
+                    context_args["preserve_high_precision_init_val"] = True
+                fp8_context = transformer_engine.pytorch.fp8_model_init(**context_args)
+
+            # First / last layer in bf16 isn't supported with delayed scaling since it
+            # requires entering/exiting fp8 context per layer, causing incorrect amax
+            # reduction behavior.
+            #assert not (
+            #    config.first_last_layers_bf16 and isinstance(fp8_recipe, TEDelayedScaling)
+            #), "Delayed scaling does not support first / last layer in BF16."
+
+        return fp8_context
+
+
 elif HAVE_TE and is_te_min_version("1.0"):
     # TE quantization logic with fp8_meta dicts
     # Supported TE versions: 1.0 - 1.14
@@ -92,6 +218,11 @@ else:
     def _get_fp8_scale_and_amax_impl(*args, **kwargs):
         raise RuntimeError("Invalid Transformer Engine version for FP8 distributed optimizer")
 
+    
+    def get_fp8_context(config: TransformerConfig, layer_no: int = -1, is_init: bool = False):
+        """Returns dummy fp8 context manager since TE is not available."""
+        return nullcontext()
+
 
 def quantize_param_fragment(
     input_: torch.Tensor, *, out: torch.Tensor, param: torch.nn.Parameter
diff --git a/megatron/core/fusions/__pycache__/__init__.cpython-310.pyc b/megatron/core/fusions/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..b15d96ea919367e36fe1cc2517cb62b3af9f0fc7
GIT binary patch
literal 187
zcmYj~JqiLb5Jt1Ig$R2P3!MvySZ(FnY;Opgm<ePvAwR_)#shdITW?`y0)jr6_kA<X
zP}gl(0q;H5d{zC^l;u<=wndVSY};HOEY$N)?<*k93Z#h%P*4yKv`OG|MCh&1<0Pzt
ygeFMtMMw(_N{bZ8?al+t-wqQ61-Bdxxd@yaXA<XozdYB6nPj%=SpUXVQOiD%)G#;z

literal 0
HcmV?d00001

diff --git a/megatron/core/fusions/__pycache__/fused_bias_dropout.cpython-310.pyc b/megatron/core/fusions/__pycache__/fused_bias_dropout.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..dd8e298c29b891dbd4044ad82e978003935c2ce7
GIT binary patch
literal 1556
zcma)6L2u+V6t*2F<F+&1b}74CSlEhNR@w;?NL*GG5>iiW_t2h3NTY1*naPkzq8CTI
zMVV78!G-?-f=mCBuben@;{d$p&Y&(s1(x3PvmL+pz3)Az8Vt4>j`F9I*~=Zqexb$f
zv4xAzQJSAoX{LF>7JS4PVk9`NMG=ewoP$Cx!cmBOQioS;6zNF!aPFB<D<e!WSB8^5
zWD{}7^cLBA+id9_vL;IR_25cg^3nGHzOk$C`5QZWPw!)_z7}UJzW*yCWwCJTWo`4S
zObZvDw{>AoWA3)*xgAg1#y}?Nv(@O~9HM-I(pXd-`${b3GVJ)Ab#l(W7SQi_iR&LY
zt$*Z8-i4aA9G-Tv3m>wjv|=92<vhf-=mO2Z50+8Ky9m#sE;?iXbsmdTM9pibETnmv
zm(w_Mp|%&bal%$Ev=wACC(6=oPuenDCD+qX)m3Zbp4)jdex2Ld_*I@ZPJwB1-D3K(
zhUyhWn3m&job;yw-neG)4sQNFOJ>!=Bsy<wGD|B+%Ve6{q;8v8a#Ezzvn(x4VrMz%
zah-y_NM4v}YN0Bhefc6;tn4JKz$C~ma^BEvv<EU?;TzT$?!j9-<5X)bMwwBQH3z7a
zdfZcy;s;!D$qxi+coz>cj%qyw8o^4MJv6>$6Rx=yR|>1bu?K?Fj6PTovZ=h3ZL^EY
zVu7(V;yZRJ&)79Ty}k)^9l!vOfxdxzsBoWn^E?3|bo(1AJjLyXFzxbhJ|S|~8T<U&
z(o->fUQ|e9b3EL*@14iuCeV9-M>{0ThkSIG)0iStANRQo;C;IAHhdR>u`QJU$_6$2
zZ@1adoY=rNJcozm>k%p9>{j}ZH?Z7P+PCb-<k2%B;X}0V3=1FNDF!;ZJJ8V`f%0-<
zz?7N!jDS5Mb%ZLTu<JoK31!$&799uGF^DX~XNV1AMaM32h6i{U2Og|<<4IiA!i7Gy
ze==||HFl$h#}tYFq>{@JMJNFuk?(<v@B!mn1_A`si9qe{_Sf%bNbhEd|0SSG`fm3q
zTy$>ArUHafRQTG6&>M{8_!cT(A>SzK`J&QoVUFpwG@qi{<4W{}3e=J434Wi8KP8Hw
NS@i!9(dJ%1`U{x(Ta5q!

literal 0
HcmV?d00001

diff --git a/megatron/core/fusions/__pycache__/fused_bias_geglu.cpython-310.pyc b/megatron/core/fusions/__pycache__/fused_bias_geglu.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..1641833f0564703bb9cb51ef70b7e3977be855d8
GIT binary patch
literal 2458
zcmZ`*TW=dh6rRiOX0vhJrnr|BC<RJ|DZ~^I2njV6Ra=DGyi~kcNUQD6`jXmSGrLZk
zYW+g`&>z4nQv8C{-+;sqnFoXbsmdEtACM4I`Od84#7!CNoIP{fIp=)eoOQaq95A%b
zk2gA>FEaKAbq+TNovV=S0hD5j_gIsjqR0E9DL6}nlFE6+c6d|5c9mys2lj&Ut?j~I
zRDrd<n@laK$|I&K3EN!Q^mk-)5o61$im~c!EKtYP@kgw=r1%|HU)jUyY@^Q2;$}Aw
zTca$|F{iO<lX&`&Ymn?JRL*vJ0e6*{$Zy4%k43?itTE+a25uG{wx<^8NphOi*o2cV
zM2+D{e`8PJJ$uj5p29%;ZGCF|1>@J`<Li(2*7wMZr+@RW`oI7A(|TPRH&1okF>c%$
z4el8yj|Lr#@@*rx!^@;TdcyQ^Z2G6w=%oFmp}JY#=tQZG290(%ZwyCSr*WefweQ4H
zFKOhRu2$hN()o7dcG8Y=oen;@b-U4@+Ko8XNdp<_rh|;0i3;y_qbzJE?cQi@xNTf(
z(UBRUc|xpleF8>I@$EOVNo)dXZGrTiW@Dbi+5rYnIMQ$T)rE2B1ig%9Hk4AWplgDI
zvrnOKPxOV)^-1*RPV_La0I?@NhG8M&GswhPTBsxeq8vbmCrJs_*il|NQ#gfFV`mt6
zxNvxl1sHR*9+9|sn=DuX5)>{3?@}Jt_~nWkYYC7=0Q$uZO?=XnEln<JqL#+>VA_Rh
zfBM6}zihRBUe^>u-O+S~^b)BGl#y|i*FD4AWrnIWaf~K>VndjYawA%;Bbl=>g?FR)
z-Wyn)(W_2~bNqtvxcB^Bsn22{Cdc+0*(BE>86gVH#1u0^4YBA~Fbv#iZ(Zusc$7}n
z$ReB%VR!5RJL|@Kn4SU{aQ!NJF=VdM@mC?wE<h!$$rWpgL=uS8G9YK=!BsAj>zS1=
zL7tn*&0F8x7!Beaygd>XW!^?b94gqZjckHylXHskATnWAvS=#_TdB4#-;cDiRKuN<
zasI%#-NA5_>z9SQfK9aiGS0AJR%E~*t{(AjZMtrby~Kl=m*=dPn+%19SZjSO<c=JJ
zeTCDS;ULU1d8@)a8Dy!>Y)<R0CcMp3TStn>LH?e{h;`b?ygz&qD4$3|u78GQ8Idp$
z74GwgXOB9+zjWh?XZ$c6MExWTO%R6tRE>IMSHkeSQPi8xRI)tEyKz6sJE_udk{|Do
zI^c@6=(6kAp+1B>qYL0O!2=<jD!1eROBMYZ7J~-M^Avco7!k891uU^G1tz>C0F|SX
z*g{k4r&Y<OvCQ0ov(`_FVjW^p4kQwFa_;b#B24Jc5I%!W!8X}gl;|qH%65QtAwg-e
zq3J777y2zc%Dd*2-n>l%=Sf{4^@3lN*y|7rp(m=`;SW#Edp3hlUz~rz0SfP9;tEY(
zB1OG9rcw+p#3r)`V-|<lLABjt+0xhSdsKUT76odeSY;D2#*I^K#Pzvc?mDQI9Ak3e
z<}URn+_IeZ%X>m!qAV10mv%d=R9D?q{6m;fZoCbog|OTsRhCq1QO0at1r^+^6Acq1
zd&$5!TixWoWsq^B;jp)DBSMiqPaEhSo5fUj!*Yu^y)W~LHHRx%w?FLN!nTa+u*Z+%
z=kqG4dQs?4FjTMD`fXPBzo={UMP0-H3{9N0<gz8j0&B0V@uN|m(tS1lehsrOTVL&4
l4?#Uc%J^TDm+lG$pHWTrMMa3EfD0GmLxO<U+*-9#{SOCw=_3FD

literal 0
HcmV?d00001

diff --git a/megatron/core/fusions/__pycache__/fused_bias_gelu.cpython-310.pyc b/megatron/core/fusions/__pycache__/fused_bias_gelu.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..628c5e981e1eb2d4709bfb18abd0b335318d1675
GIT binary patch
literal 1570
zcmZ8h&x<5A6i!k<y1J%&b!U5b)`RQ8_0Wn_pdcQ^7Q|VR-MI{28Zp#X($&>gceP1s
z-5F|5y|A7<c@=g+g!vl;|BxI+R2b&wO%OrfOLvVu2J-Tfyd>ZI-pi}{{g^<Tes?g9
zLPCDS$#(N$@&R=H2?#+1Ey);1R?;~eGfE^Ap75WL6&-t^2O@O3e~*Zch@KD;Niqv&
z;mR9#WM>wQyMi8(VfO;=BZot3yR*XZNv);I7_M!a2V(^NL+JV~5DjVQ9yw(V6LbIo
z40%R{*D%n15#We@j||9jup1C~Bs@HagV25%<!j}S(K-29zWveH7o!UbOXq*mkLSPs
z{=?{u*}zmPn_Azbi|Np_{=*{GmL6OB_>8DN82=@cX*HLLD6~nYX{FLdk{2df)_R&8
zlxcpHrKL>Fv`~UCQ)P~m2Qp8MsupkFe~`>KdXiO2Cg5>VEi{f&aD0pBvaI))$F_Sp
zdl6pM7=nnsPSp#bWXMa~AYcT$<LGlx8rm@6$aCD##zUTfBN(x-xjFTPzusy5#vhQ|
z5LDoA%f>Ov8XxW9wx9``mQRIXRDc2>R){8l=i9%3dNlcQq&hGghL+|ElS=KN=z*{i
za>}dPST>nBF4y83ZeF`|mp@FiFJ6K*ji(}Zhu&o&4gZNebpsYM=vNwo!KU8@A<38u
zGG@{Pf7m(+L2r{Ykl|A@0Z$=8BS_ZHQ{t0x1X<Fty?gThrw8>SGZ2z145NSeievZ|
zC=Ge$Sbh$vZ-DKFuGkSdqlZIguj}-Y<daG{KfX$pa3O<S@-p+-2E}4on>96<PFoao
z;1Jrs2FotqJujvwgKb#*8<Q)a1Ossi?~a2vBcHKT1}Q)x8Q^=Yyi*8s<4*vlx(Ox#
zw2wdqH*%pXr5(4!K<&Y%-N{udFj5HhHmo?j)-&_v|Kk>6v=H?hV5Tu0V%DP(J-K-W
zcWag5e`{OIE2gyG1!2gF%m8u$zxaFl4U~u$Y@q9<R5nPL%ktQ9S!(O2D%Uo|=W~4q
zMTGOLOtt3xKUUQ%a4%L4jdf+0o$Ox0wZ5-wBhDA;Tykz>&gYe=OVoRue_5yHW~Zl3
zYKm+w&9o8<GgQ3{!tS_7H_P~(?Qei&vMgILF4(W)A<TC*0C5+(##uxdjT!S}%EDXJ
z?G0mvh0k7Z3&uVcjD0AR3LSAd<zi-|v^Et6%tmeYx*MG5+yAPVFUzg)IY933MenUW
XejkIQvD`$g$Jh?QiDEj4;~W11F)Lr<

literal 0
HcmV?d00001

diff --git a/megatron/core/fusions/__pycache__/fused_bias_swiglu.cpython-310.pyc b/megatron/core/fusions/__pycache__/fused_bias_swiglu.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..5eee64e0e1990cdb6035c92f6061aeb8d6250599
GIT binary patch
literal 2682
zcmZ`*&u<e)6rP#=;f>>j#H55kTWF!QK47a9A=FkCDpimwh>)UQtV*lJv$ogRyYB3m
zG-!QkIQEZ7)D!>GTzkryTQBr`vv!CLjP>5Wc{`q&_q}i4Y__&mWoYR?yL}DoU+SE1
zE;<h&`QK2INj_xl^2tX+FwRC!+vVgDLvQ4_ea>QEI?{c`j(EEQ+mpVv1K1TASbGKb
zimY0@`iRL@S$oA~EoOt&LG8$Cufew_*Wp_~^R3Ie+>o2Ec>99n`>b*C6gy&j4Q^Hj
zi4MDyJXRe}zFBkd^dJu*`E@AGj(LF)q&RVY7gIhJS{yqCKjDSgVwlp|I~5pr`WCI>
z8c%1c(>GqHKS`e(zH8h(8BQ9G;fKaK48J9H=QUF`{O7-3tDlYHmP~Tp>PMN1(pE3g
zt??x9w|0k7Z@&`_<Cg9xN`~V|>BH8OxEE=arMDkHX^m!ftCOj?g;<g-&FLA-@L3Y&
zVSbSGhLh&_(D<dfibZqEPF<{XwGN|0d!IM5No?>NFbY=iZ8il61v0bGUUNWa|JM*|
z1p|yr3)x^wwMNd>bE|K{VV4X<z!mitmZZ(lM0UxiFf88u3~w=Y;1LD+okE=OEhh1l
z<hA|FY>RC}3J1cpd+e2?x&j#!$d9|HD5;88I;B)Md_@^nK9q4fkv5e)>5Z~PstWl7
z8si$?vk@wyx+37-i?YNtd=_<{U%~sF{#X|-zsKFT>JmB~T6o^bCV2?S>re$41aLWl
zTks?7Rb7A^0MmaPj`{?Tau1Y?<>fcdfo%8iB?irqu5z`FUI((!X#EF}H#ebT*5;D6
zMeGpT_E@>F=f}{K9?<hm{byu&{~&qv__y6j+R-3chp?PC!jk$nuKO?wM+F5xW||L>
zuap;j>K2qO7nu<pu@2A=y~2U^b%k(v7kyv^P7qCM*1E$i()Yvo?&!O2YBuxeMI3fB
zWurZalr)~yhvV2>$W#(0>3E{UnWH<tKXc@mEw;RCc*wT?(|C5IvY1|@b?W6`&(FLJ
zb_FkK#RkUb#E31Y#slv2Dt~$9eSn&?;R{q>0O}s*DA<6Zq=4eEaI6YJL?1X7H2Aek
z&=k&*0|4=ptn184;+ZvqLxws|^GxN6B2h#`^*Jd@f5TJP@i41B70EE0XaJ<Xptlse
zar9`s9A`jera<ptge7!UT;eqf^Xdn}oR8jn?VBJB(`Xcjp{a)9D3g;R*|jkIV-gK#
zZ)&-YbkZ5cx}QmPgSPTDDJq8N6crJ*1N9B$4Z$5S!K*@4P_@YaQDUphcni|5FA<iA
zKW{`<>OX|!ccBXL9$}FY5Ehv@M_1&gq$^dz@~8$S;<lVz#Z2l`QlF8sS+Gf=GTU%%
zDoXUNmrm<)$T#5o0WxD))iNyLFE1@d^FekkL`B&nc1ga&ro^d_vg?T0=YUyMD#f0%
z1=3SDX?IJMvQ=po$5-^;Qt1|1@A79;M>+ikaz-GE<mL8K6ldg7l;(4D*xBqvO}zM?
zUfw1}z1@YHO2CuYRE}X#(6});4h`;*7c5`>mHmbL`xv(Y!W28~L`+eEB%5$`O*_Y^
zM0ChbaKutyd$x}%HFalmIM0Q;UAX(KaB(<M8+TCOq_=}lmlGVuhQEiKkl1ue%3d<%
zbwfZZD)V5Ym-i!-DQ6g`#(j~*2bRRfi^k*Op$!X1_3U6;+|3HrwDN!c?C36{Y!)tn
zWHcT=#%ejS&F35V1(2G!B^1?~2H$OLlx6jz{X%J`X|p@4=h4uJG&R+CeR~s{&G{Eb
zlfE#T_+nD@d0;;PY)Q2@m8~@<h$cFtLSusYHDRN);n^*GD8nZBu`Cro5neeRpFq^H
TZQ)h9l>pC5m2Y`l_4WGyVL>ZD

literal 0
HcmV?d00001

diff --git a/megatron/core/fusions/__pycache__/fused_cross_entropy.cpython-310.pyc b/megatron/core/fusions/__pycache__/fused_cross_entropy.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..e53bc7726bb2e4b92dbc4bd85d4fc73a7589f9bd
GIT binary patch
literal 3601
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

literal 0
HcmV?d00001

diff --git a/megatron/core/fusions/__pycache__/fused_layer_norm.cpython-310.pyc b/megatron/core/fusions/__pycache__/fused_layer_norm.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..7c31d162520115f17bc9068fa66cb62b0768e168
GIT binary patch
literal 3713
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

literal 0
HcmV?d00001

diff --git a/megatron/core/fusions/__pycache__/fused_softmax.cpython-310.pyc b/megatron/core/fusions/__pycache__/fused_softmax.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..b633179ebf624f572c1f33fe64fcb23891df9156
GIT binary patch
literal 6197
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

literal 0
HcmV?d00001

diff --git a/megatron/core/inference/contexts/__init__.py b/megatron/core/inference/contexts/__init__.py
new file mode 100644
index 000000000..1b1324db7
--- /dev/null
+++ b/megatron/core/inference/contexts/__init__.py
@@ -0,0 +1,22 @@
+# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
+
+import warnings
+
+from .base_context import BaseInferenceContext
+from .dynamic_chunk_allocator import ChunkAllocator
+from .static_context import StaticInferenceContext
+
+warnings.warn(
+    "The following imports from `dynamic_context.py` will be removed "
+    "in this file in `megatron-core` 0.14. The imports here result in "
+    "a cyclic import issue that causes rotary embeddings to import "
+    "from Apex rather than Transformer Engine.",
+    DeprecationWarning,
+)
+from .dynamic_context import (
+    ChunkOverflowError,
+    ContextOverflowError,
+    DynamicInferenceContext,
+    RequestOverflowError,
+    TokenOverflowError,
+)
diff --git a/megatron/core/inference/contexts/__pycache__/__init__.cpython-310.pyc b/megatron/core/inference/contexts/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3dd36f9eb26121783998b8697723414ffd5234f5
GIT binary patch
literal 833
zcmZ8f&2G~`5VjpBaZ@LiqKIDingcON91)_lMQ{O$L<0HZZ0$+B>i&e?b<^-PaO4em
z49>oCp|1cJW|KN1UCEzj#xvi}&Nr&x?|FF2pOf-O;Ca8C^ZyCad5NF-giv^e&%M+u
zf}+KJ5u}0d?2xxan1)-s&D)}rc6<-Kuic^p(YIYrmmi5<+7rj=v53=H^wYi=qywz+
zr`|ZaLw4`oosT&7>(MJ};H_MM2ARXTk``_)#s}wRC9lsoS2?vxW8~4)Qp@s(xnF+I
zN+1h`nQJDOgo%~X){uo(g3ODJq=MyHz9XKjHgmFOoRcdc8icxmf-p&J$*_WPaL!!7
zl3K0g<6LQ&lP8m>&nCp((r}m9EtZ>#TUS6yzR5Yu@Bb5KOa;hEEy-zRz!0r0)f)oh
z3W@@|G{mYVd)w&Q3T}y}7MWe4Br{E=Stu<qa4DBe!erd8huf*VzX83#=U!^9bUnHs
z+F|tcV)ycg<Elp=;By7W9;Odx>Kf!hY<yBjYpSJdw~nt+re=z|h1%7p``J3BGTKO`
z-5%8gvsG(f(ssen@zui%SZP36nUWuO7t|+vvYk-6gZaAaAaZczz^(6hPY<2#;Ln?+
zR05KM8Jhs2lF4gMm(!ebNE#Irr((jI6+?HsV<yQmCYjALT#7n+E>ux*c;VL4IPxfn
QgV>M#FbMo04F8huKd>eXB>(^b

literal 0
HcmV?d00001

diff --git a/megatron/core/inference/contexts/__pycache__/base_context.cpython-310.pyc b/megatron/core/inference/contexts/__pycache__/base_context.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..7c4e5c5d48d2d59090097a162cbed2b1e7a8400e
GIT binary patch
literal 1014
zcmaJ<O^?$s5Oor_%~snLDu^TU4SGo=&IrMl4<VrnQBJwIj_ovArO9GD5~;ZD{t!6s
ziNC@*S5Eu|PK@0T%I?BQ9(l$y&(F_Ok48fTmVb}(cRoTtY;b58f@iSw18@QfuS5xY
zjf5|POC$n`&b*5t@r5@>6Z{iu(2QGuXnTyukd-L$1hO4TAn{pG__Ch?n!uO%!b=9*
zxF`CTI0?l7aKrB2Dbw;zl}RNlE~j;6<R`QKX0wEsOly+WiWIv7!Z#H<8V(8Av{BG#
z%9cQztb`OKZOLM8m?`*m*acygAd44m#a6eRMh@|%!yzUw^Z@}@wIpjyqkz?x0Ws~l
z1Rj<~*H;n_EAAbrWA}DVVQH(BlhR*D?_Difd{B*CkRsbbl158SwBt@vW_Vsy%V>6m
zuDlLwS!T+jIQQ#qoYyNEi$a@Ng0HLiRmqlf&Po}t<dPW$DPAiX@5O`A$*bcO<fYpv
zI&Zsiq3Pycy1RE|S;O2Q9IPMS_DRvro*U1%{qFg86hEUc=qox#@bBI_{=W!f^GAPF
zn0P7#4Arx4FM}FD*xdyt+lD>;F&sGhLx26~U-Yjx%_c`(NGXhmq_i7Sx~fG}+Wj%5
z9~)L~PX?5VnnOBZDeq2Ls*PgYtfa|n(c!eN%MIJ3zu7w8ma?+K^esgzOo*_D`**xC
jcKJ!5P9WO_&rhc=aq!+fLKi;Skb7!J%#By*-w%ERJhTwc

literal 0
HcmV?d00001

diff --git a/megatron/core/inference/contexts/__pycache__/dynamic_chunk_allocator.cpython-310.pyc b/megatron/core/inference/contexts/__pycache__/dynamic_chunk_allocator.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..163552602b057dace6f4ca173924164e538414db
GIT binary patch
literal 3321
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
YofnDBYIkzAKc_3tNov)srnzPR12Tzv<^TWy

literal 0
HcmV?d00001

diff --git a/megatron/core/inference/contexts/__pycache__/dynamic_context.cpython-310.pyc b/megatron/core/inference/contexts/__pycache__/dynamic_context.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..381e2473f44cab434fc9a1a59dde98abface02d0
GIT binary patch
literal 25441
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
BMVkNs

literal 0
HcmV?d00001

diff --git a/megatron/core/inference/contexts/__pycache__/static_context.cpython-310.pyc b/megatron/core/inference/contexts/__pycache__/static_context.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..e46e37989fc153b34b3c266a3f45d4033c9a06ce
GIT binary patch
literal 4632
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

literal 0
HcmV?d00001

diff --git a/megatron/core/inference/contexts/base_context.py b/megatron/core/inference/contexts/base_context.py
new file mode 100644
index 000000000..5e61a6501
--- /dev/null
+++ b/megatron/core/inference/contexts/base_context.py
@@ -0,0 +1,20 @@
+# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
+
+import abc
+
+
+class BaseInferenceContext(abc.ABC):
+    """Base class for inference contexts.
+
+    Currently extended by `StaticInferenceContext` and `DynamicInferenceContext`.
+    Extend this class for any future contexts types.
+    """
+
+    @abc.abstractmethod
+    def is_static_batching(self) -> bool:
+        """Return `True` if context uses static batching."""
+        pass
+
+    def is_dynamic_batching(self) -> bool:
+        """Return `True` if context uses dynamic batching."""
+        return not self.is_static_batching()
diff --git a/megatron/core/inference/contexts/dynamic_chunk_allocator.py b/megatron/core/inference/contexts/dynamic_chunk_allocator.py
new file mode 100644
index 000000000..cbc1127dd
--- /dev/null
+++ b/megatron/core/inference/contexts/dynamic_chunk_allocator.py
@@ -0,0 +1,92 @@
+# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
+
+from typing import Optional
+
+import torch
+from torch import Tensor
+
+
+class ChunkAllocator:
+    """Allocator that manages chunks of memory for the KV cache.
+
+    This allocator is responsible for:
+    - Initializing a pool of chunk IDs
+    - Allocating chunks from the pool
+    - Releasing chunks back to the pool
+    - Managing the guaranteed chunk count for active requests
+
+    Args:
+        chunk_count_total (int): Total number of chunks available in the buffer.
+        gtd_chunk_count (int): Number of chunks reserved for guaranteed requests.
+    """
+
+    def __init__(self, chunk_count_total: int, gtd_chunk_count: int):
+        self.chunk_count_total = chunk_count_total
+        self.gtd_chunk_count = gtd_chunk_count
+
+        # Reserve last chunk ID as dummy chunk for decode-only inference steps
+        self.chunk_count_avail = self.chunk_count_total - 1
+        self.dummy_chunk_idx = self.chunk_count_total - 1
+
+        # Initialize chunk pool as a "stack" data structure
+        self.chunk_bag = torch.arange(
+            self.chunk_count_total, dtype=torch.int32, device=torch.cuda.current_device()
+        )
+
+    def is_memory_available(self, num_chunks: int, safe: bool = False) -> bool:
+        """Check if memory chunks are available.
+
+        Use 'safe' to avoid all requests being blocked. A fraction of the KV cache
+        memory buffer is reserved to guarantee that a minimum number of active
+        requests can run on any given step.
+
+        Args:
+            num_chunks (int): Number of chunks to check.
+            safe (bool): Include extra space for guaranteeing ability to run
+                requests to completion.
+
+        Return:
+            (bool) Is memory available?
+        """
+        if safe:
+            return self.chunk_count_avail >= num_chunks + self.gtd_chunk_count
+        else:
+            return self.chunk_count_avail >= num_chunks
+
+    def allocate_memory_chunks(self, num_chunks: int = 1, safe: bool = False) -> Optional[Tensor]:
+        """Allocate memory chunks if available, else return None.
+
+        Args:
+            num_chunks (int): Number of chunks to allocate.
+            safe (bool): Include extra space for guaranteeing ability to run
+                requests to completion.
+
+        Return:
+            (Optional[Tensor]) Allocated chunk IDs.
+        """
+        if self.is_memory_available(num_chunks, safe):
+            self.chunk_count_avail -= num_chunks
+            return self.chunk_bag[self.chunk_count_avail : (self.chunk_count_avail + num_chunks)]
+        else:
+            return None
+
+    def release_memory_chunks(self, chunks: Tensor) -> None:
+        """Release memory chunks.
+
+        Args:
+            chunks (Tensor): Chunk IDs to release.
+
+        Return:
+            None
+        """
+        num_chunks = chunks.size(dim=0)
+        self.chunk_bag[self.chunk_count_avail : (self.chunk_count_avail + num_chunks)] = chunks
+        self.chunk_count_avail += num_chunks
+
+    def reset(self) -> None:
+        """Reset the allocator to initial state.
+
+        This resets the available chunk count to the entire memory pool
+        (except for the dummy chunk).
+        """
+        self.chunk_count_avail = self.chunk_count_total - 1
diff --git a/megatron/core/inference/contexts/dynamic_context.py b/megatron/core/inference/contexts/dynamic_context.py
new file mode 100644
index 000000000..fd327face
--- /dev/null
+++ b/megatron/core/inference/contexts/dynamic_context.py
@@ -0,0 +1,1001 @@
+# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
+
+import math
+import warnings
+from typing import Optional, Tuple
+
+import torch
+from packaging.version import Version as PkgVersion
+from torch import Tensor
+
+from megatron.core import parallel_state
+from megatron.core.models.common.embeddings.rope_utils import apply_rotary_pos_emb
+from megatron.core.package_info import __version__ as mcore_version
+from megatron.core.transformer import TransformerConfig
+from megatron.core.utils import divide as core_divide
+
+from .base_context import BaseInferenceContext
+from .dynamic_chunk_allocator import ChunkAllocator
+
+
+class ContextOverflowError(Exception):
+    '''Base exception for when a new request would not fit.'''
+
+    pass
+
+
+class RequestOverflowError(ContextOverflowError):
+    '''Adding request would overflow max request count.'''
+
+    pass
+
+
+class TokenOverflowError(ContextOverflowError):
+    '''Adding request would overflow max token count.'''
+
+    pass
+
+
+class ChunkOverflowError(ContextOverflowError):
+    '''Adding request would overflow available memory chunks.'''
+
+    pass
+
+
+# pylint: disable=line-too-long
+class DynamicInferenceContext(BaseInferenceContext):
+    """Inference context that is passed to the main model in order
+    to efficiently calculate and store the KV cache during inference.
+
+    The dynamic inference context manages both: 1) in-flight batching, and 2) a
+    memory buffer for the chunked KV cache. For in-flight batching, requests of
+    arbitrary sequence length may be added, paused, or removed from the context
+    at any step. The only constraint is the maximum number of requests or tokens
+    that the context is defined to support. For the chunked KV cache, a memory
+    buffer is allocated up front (size `buffer_size_gb`), that is divided into
+    chunks and dynamically assigned to requests. At any given step, any unassigned
+    chunks equate to unused space.
+
+    Additionally, a fraction of the memory buffer (`gtd_request_fraction`, i.e.,
+    the 'guaranteed' request fraction) is reserved for guaranteeing that a
+    minimum number of active requests may continue to generate tokens on any step.
+    The reason for this is that the context manages two pools of requests: 1)
+    active requests, and 2) paused requests. Paused requests are requests where
+    insufficient memory chunks remain for future assignment, and these requests
+    are set aside until enough memory chunks are available. Active requests are
+    requests that have sufficient memory chunks to proceed with their generations.
+
+    The situation can arise where all requests eventually become paused due to all
+    memory chunks being assigned. In this case, there are no active requests and
+    thus no progress can be made. To handle this case, a fraction of the memory
+    buffer is reserved that only allows active requests, and no paused requests.
+    This fraction must be carefully tuned, as it can have an order of magnitude
+    impact on overall latency.
+
+    Args:
+        params_dtype (torch.dtype): Dtype used for KV cache.
+        num_layers (int): Number of layers.
+        kv_channels (int): Hidden dimension per attention head.
+        num_attention_heads (int): Number of attention heads.
+        max_sequence_length (int): Max possible sequence length (prompt + output)
+            that will occur.
+        buffer_size_gb (float): Total buffer size (GB), shared by main and
+            fallback contexts.
+        chunk_size_tokens (int): Size of KV cache chunk size.
+        buffer_guaranteed_fraction (float): Fraction of the memory buffer that is
+            reserved to guarantee that one or more active requests are able to
+            run to completion. Without reserving this memory, paused requests are
+            able to fill the memory buffer and block execution of any requests.
+        buffer_overflow_factor (Optional[float]): Scaling factor over the buffer
+            size for auto computing `max_requests` and `max_tokens`. This scaling
+            factor is used for fitting more requests and tokens in the memory
+            buffer than it can safely hold, which in turn increases throughput.
+        max_requests_override (Optional[int]): If set, overrides value computed
+            from `buffer_overflow_factor`.
+        max_tokens_override (Optional[int]): If set, overrides value computed
+            from `buffer_overflow_factor`.
+    """
+
+    def __init__(
+        self,
+        *,
+        params_dtype: torch.dtype,
+        num_layers: int,
+        kv_channels: int,
+        num_attention_heads: int,
+        max_sequence_length: int,
+        buffer_size_gb: float,
+        buffer_guaranteed_fraction: float,
+        chunk_size_tokens: int = 256,
+        buffer_overflow_factor: Optional[float] = None,
+        max_requests_override: Optional[int] = None,
+        max_tokens_override: Optional[int] = None,
+        tensor_model_parallel_size: Optional[int] = None,
+    ):
+
+        super().__init__()
+        # Per partition num heads and hidden size.
+        projection_size = kv_channels * num_attention_heads
+        if tensor_model_parallel_size is None:
+            tp_size = parallel_state.get_tensor_model_parallel_world_size()
+        else:
+            tp_size = tensor_model_parallel_size
+        hidden_size_per_attention_head = core_divide(projection_size, num_attention_heads)
+        num_attention_heads_per_partition = core_divide(num_attention_heads, tp_size)
+
+        # Chunk size tokens, bytes.
+        dtype_size_bytes = params_dtype.itemsize
+        self.chunk_size_tokens = chunk_size_tokens
+        self.chunk_size_bytes = (
+            dtype_size_bytes
+            * 2  # key, value
+            * num_layers
+            * self.chunk_size_tokens
+            * num_attention_heads_per_partition
+            * hidden_size_per_attention_head
+        )
+
+        # Adjust buffer to be a multiple of chunk size.
+        buffer_size_bytes = int(buffer_size_gb * 1024**3)
+        buffer_size_bytes_rem = buffer_size_bytes % self.chunk_size_bytes
+        buffer_size_bytes = buffer_size_bytes - buffer_size_bytes_rem
+
+        # Compute max_requets, max_tokens from buffer size and overflow factor.
+        def bytes_to_max_requests_and_tokens(n_bytes):
+            n_tokens = n_bytes / self.chunk_size_bytes * self.chunk_size_tokens
+            n_requests = n_tokens / max_sequence_length
+            return int(n_requests), int(n_tokens)
+
+        self.max_requests, self.max_tokens = bytes_to_max_requests_and_tokens(buffer_size_bytes)
+
+        if buffer_overflow_factor is not None:
+            self.max_requests = self.round_up_requests(
+                int(self.max_requests * buffer_overflow_factor)
+            )
+            self.max_tokens = self.round_up_tokens(
+                int(self.max_tokens * buffer_overflow_factor / 50.0)
+            )
+
+        if max_requests_override is not None:
+            self.max_requests = self.round_up_requests(max_requests_override)
+
+        if max_tokens_override is not None:
+            self.max_tokens = self.round_up_tokens(max_tokens_override)
+
+        self.max_requests = min(self.max_requests, self.max_tokens)  # e.g., decode only.
+
+        # Initialize context state.
+        self.params_dtype = params_dtype
+        self.num_layers = num_layers
+        self.max_sequence_length = max_sequence_length
+
+        self.total_request_count = 0
+        self.active_token_count = 0
+        self.paused_request_count = 0
+        self.padded_active_token_count = None
+        self.padded_active_sample_count = None
+        self.paused_tokens = None
+
+        # Per-request state.
+        self.request_ids = torch.full(
+            (self.max_requests,), -1, dtype=torch.int32, device=torch.cuda.current_device()
+        )
+        # request_query_lengths is the input prompt tokens length during prefill phase (1st step) and then 1 for the decode phase (i.e During generation)
+        self.request_query_lengths = torch.empty_like(self.request_ids)
+        # request_output_lengths is len(input_prompt_tokens) + num_tokens_to_generate
+        self.request_output_lengths = torch.empty_like(self.request_ids)
+        # request_kv_length_offsets is the same as query length during prefill phase (1st step) and then 1 for the decode phase (i.e During generation)
+        self.request_kv_length_offsets = torch.empty_like(self.request_ids)
+        self.request_kv_chunk_counts = torch.empty_like(self.request_ids)
+        self.request_last_kv_chunk_id = torch.empty_like(self.request_ids)
+        # request_last_kv_chunk_offset represents number of tokens in the last kv chunk
+        self.request_last_kv_chunk_offset = torch.empty_like(self.request_ids)
+
+        # Per-token state.
+        self.token_to_input_ids = torch.full(
+            (self.max_tokens,), 0, dtype=torch.long, device=torch.cuda.current_device()
+        )
+        self.token_to_pos_ids = torch.full_like(self.token_to_input_ids, 0)
+        self.token_to_request_idx = torch.empty_like(self.token_to_input_ids)
+        self.token_to_chunk_idx = torch.empty_like(self.token_to_input_ids)
+        # i.e For a set of tokens A B C D E F ..  and chunk_size 4:
+        # token_to_position_in_request is  [0, 1, 2, 3, 4, 5]
+        # token_to_local_position_within_kv_chunk is [0 , 1, 2, 3, 0, 1, 2]
+        self.token_to_position_in_request = torch.empty_like(self.token_to_input_ids)
+        self.token_to_local_position_within_kv_chunk = torch.empty_like(self.token_to_input_ids)
+
+        # Calculate the total number of chunks available in the buffer
+        chunk_count_total = buffer_size_bytes // self.chunk_size_bytes
+
+        # Memory buffer.
+        self.memory_buffer = torch.full(
+            (
+                2,  # key and value
+                self.num_layers,
+                chunk_count_total,
+                self.chunk_size_tokens,
+                num_attention_heads_per_partition,
+                hidden_size_per_attention_head,
+            ),
+            -1,
+            dtype=self.params_dtype,
+            device=torch.cuda.current_device(),
+        )
+
+        # Chunk ids.
+        self.max_kv_chunk_count = math.ceil(self.max_sequence_length / self.chunk_size_tokens)
+        self.request_to_kv_chunk_ids = torch.full(
+            (self.max_requests, self.max_kv_chunk_count),
+            -1,
+            dtype=torch.int,
+            device=torch.cuda.current_device(),
+        )
+
+        # `*_decode_only` tensors are for use with cuda graphs to maintain
+        # consistent input shapes, which is required to use cuda graphs. Cuda
+        # graphs are used only during decode-only steps (i.e., no requests are in
+        # the prefill phases). During these decode-only steps, the `*_decode_only`
+        # tensors are used, otherwise their same-name but un-suffixed
+        # corresponding tensors are used.
+        # TODO: @lmcafee, only use `_decode_only` tensors when both of the
+        # following conditions are met: 1) decode-only step, and 2) cuda graphs
+        # are enabled.
+
+        self.query_seq_lengths_decode_only = torch.full(
+            (self.max_requests,), 0, dtype=torch.int32, device=torch.cuda.current_device()
+        )
+        self.cu_query_seq_lengths_decode_only = torch.full(
+            (self.max_requests + 1,), 0, dtype=torch.int32, device=torch.cuda.current_device()
+        )
+        self.kv_seq_lengths_decode_only = torch.full(
+            (self.max_requests,), 0, dtype=torch.int32, device=torch.cuda.current_device()
+        )
+        self.cu_kv_seq_lengths_decode_only = torch.full(
+            (self.max_requests + 1,), 0, dtype=torch.int32, device=torch.cuda.current_device()
+        )
+
+        self.kv_memory_decode_only = torch.full(
+            (self.max_requests, self.max_kv_chunk_count),
+            0,
+            dtype=torch.int,
+            device=torch.cuda.current_device(),
+        )
+
+        # Guaranteed active requests.
+        # * See details in the class docstring above. `gtd_request_fraction` is
+        #   the fraction of the memory buffer that is reserved for guaranteeing
+        #   that some number of active requests can always proceed with their
+        #   generations. The number of bytes defined by `gtd_request_fraction *
+        #   buffer_size_gb` is converted to a number of requests that this
+        #   reserved space can handle (`gtd_request_count`), and rounded to be an
+        #   exact multiple of `max_sequence_length`. This is then converted into
+        #   the number of reserved chunks (`gtd_chunk_count`) and bytes
+        #   (`gtd_byte_count`).
+        # Chunk ids.
+        self.max_kv_chunk_count = math.ceil(self.max_sequence_length / self.chunk_size_tokens)
+        gtd_byte_count = buffer_guaranteed_fraction * buffer_size_bytes
+        gtd_request_count, _ = bytes_to_max_requests_and_tokens(gtd_byte_count)
+        if buffer_guaranteed_fraction > 0:
+            gtd_request_count = max(1, gtd_request_count)
+        gtd_request_count = self.round_up_requests(min(gtd_request_count, self.max_requests))
+        gtd_chunk_count = gtd_request_count * self.max_kv_chunk_count
+        assert (
+            gtd_request_count <= self.max_requests
+        ), "gtd_request_count (%d) > max_requests (%d)." % (gtd_request_count, self.max_requests)
+        self.gtd_request_count = gtd_request_count
+        self.gtd_chunk_count = gtd_chunk_count
+
+        # Initialize chunk allocator
+        self.chunk_allocator = ChunkAllocator(
+            chunk_count_total=chunk_count_total, gtd_chunk_count=self.gtd_chunk_count
+        )
+
+        # Store the dummy chunk idx reference for convenience
+        self.dummy_chunk_idx = self.chunk_allocator.dummy_chunk_idx
+        # Reset attention state.
+        self.reset_attention_state()
+
+    TOKEN_ROUNDER = 64
+    REQUEST_ROUNDER = 4
+
+    @classmethod
+    def round_up_tokens(cls, value):
+        """Round up to nearest multiple of `TOKEN_ROUNDER` (above)."""
+        if PkgVersion(mcore_version) < PkgVersion("0.13"):
+            return cls.round_up(value)
+        return cls.TOKEN_ROUNDER * int(math.ceil(int(value) / cls.TOKEN_ROUNDER))
+
+    @classmethod
+    def round_up_requests(cls, value):
+        """Round up to nearest multiple of `REQUEST_ROUNDER` (above)."""
+        if PkgVersion(mcore_version) < PkgVersion("0.13"):
+            return cls.round_up(value)
+        return cls.REQUEST_ROUNDER * int(math.ceil(int(value) / cls.REQUEST_ROUNDER))
+
+    @classmethod
+    def round_up(cls, value):
+        """Deprecated in favor of round_up_tokens and round_up_requests."""
+        warnings.warn(
+            "`round_up` is deprecated in favor of `round_up_tokens` or `round_up_requests` "
+            "and will be removed in `megatron-core` 0.14."
+        )
+        ROUNDER = getattr(cls, "ROUNDER", 64)
+        return ROUNDER * int(math.ceil(int(value) / ROUNDER))
+
+    def is_static_batching(self) -> bool:
+        """Is static batching? False."""
+        return False
+
+    def is_decode_only(self) -> bool:
+        """Test if all active requests are in decode phase.
+
+        For a request in prefill phase active_tokens = query length
+        Once the request moves to decode phase active tokens is 1 for that request. So if all active requests are in decode phase, they will be equal to active token count.
+        """
+        total_active_requests = self.total_request_count - self.paused_request_count
+        return total_active_requests == self.active_token_count
+
+    def has_unfinished_requests(self) -> bool:
+        """Test if any requests remain."""
+        return self.total_request_count > 0
+
+    def cu_query_lengths(self) -> Tensor:
+        """Cumulative query sequence lengths."""
+        return self.cu_query_seq_lengths, self.max_seqlen_q
+
+    def cu_kv_lengths(self) -> Tensor:
+        """Cumulative key/value sequence lengths."""
+        return (
+            self.cu_kv_seq_lengths,
+            self.kv_seq_lengths,
+            self.kv_seq_lengths_decode_only,
+            self.max_seqlen_k,
+        )
+
+    def get_active_sequence_lengths(self) -> Tensor:
+        """Total sequence length (query + key) for active requests."""
+        lengths = self.request_kv_length_offsets + self.request_query_lengths
+        lengths = lengths[self.paused_request_count : self.total_request_count]
+        return lengths
+
+    def get_max_sequence_lengths(self) -> Tensor:
+        """Maximum sequence length for active requests."""
+        return self.request_output_lengths[self.paused_request_count : self.total_request_count]
+
+    def append_key_value_cache(self, layer_number: int, key: Tensor, value: Tensor) -> None:
+        """Append to KV cache.
+
+        Args:
+            layer_number (int): Layer number.
+            key (Tensor): Key tensor.
+            value (Tensor): Value tensor.
+        """
+
+        chunk_idx = self.token_to_chunk_idx[: self.padded_active_token_count]
+        local_kv_seq_idx = self.token_to_local_position_within_kv_chunk[
+            : self.padded_active_token_count
+        ]
+        assert key.size(1) == 1 and value.size(1) == 1
+        key = key.squeeze(1)
+        value = value.squeeze(1)
+
+        self.memory_buffer[0, layer_number - 1, chunk_idx, local_kv_seq_idx] = key[
+            : self.padded_active_token_count
+        ]
+        self.memory_buffer[1, layer_number - 1, chunk_idx, local_kv_seq_idx] = value[
+            : self.padded_active_token_count
+        ]
+
+    def key_value_cache(self, layer_number: int) -> Tuple[Tensor, Tensor]:
+        """Read from KV cache.
+
+        Args:
+            layer_number (int): Layer number.
+
+        Return:
+            (Tuple[Tensor, Tensor]) The key and value pointer tensors that point
+            to chunks within the chunked memory buffer.
+        """
+        return (
+            self.memory_buffer[0, layer_number - 1],
+            self.memory_buffer[1, layer_number - 1],
+            self.block_table,
+        )
+
+    def apply_rotary_emb_query(
+        self,
+        query: Tensor,
+        query_emb: Tensor,
+        config: TransformerConfig,
+        cu_seqlens_q: Tensor,
+        cp_group: torch.distributed.ProcessGroup,
+    ) -> Tensor:
+        """Apply rotary embedding to query tensor.
+
+        Args:
+            query (Tensor): Query tensor.
+            query_emb (Tensor): Query rotary embeddings.
+            config (TransformerConfig): Transformer config.
+            cu_seqlens_q (Tensor): Cumulative sequence lengths.
+            cp_group (torch.distributed.ProcessGroup): Process group for context parallel.
+
+        Return:
+            (Tensor) Query tensor after applying rotary embeddings.
+        """
+        n = self.padded_active_token_count
+        query_seq_idx = self.token_to_pos_ids[:n]
+        query_emb = query_emb[query_seq_idx]
+        query[:n] = apply_rotary_pos_emb(
+            t=query[:n],
+            freqs=query_emb[:n],
+            config=config,
+            cu_seqlens=cu_seqlens_q,
+            cp_group=cp_group,
+        )
+        return query
+
+    def apply_rotary_emb_key(
+        self,
+        key: Tensor,
+        key_emb: Tensor,
+        config: TransformerConfig,
+        cp_group: torch.distributed.ProcessGroup,
+    ) -> Tensor:
+        """Apply rotary embedding to key tensor.
+
+        Args:
+            key (Tensor): Key tensor.
+            key_emb (Tensor): Key rotary embeddings.
+            config (TransformerConfig): Transformer config.
+            cp_group (torch.distributed.ProcessGroup): Process group for context parallel.
+
+        Return:
+            (Tensor) Key tensor after applying rotary embeddings.
+        """
+        n = self.padded_active_token_count
+        key_seq_idx = self.token_to_position_in_request[:n]
+        key_emb = key_emb[key_seq_idx]
+        if self.is_decode_only():
+            assert key.shape[0] == n == self.max_requests
+            key = apply_rotary_pos_emb(
+                t=key[:n], freqs=key_emb[:n], config=config, cp_group=cp_group
+            )
+        else:
+            key[:n] = apply_rotary_pos_emb(
+                t=key[:n], freqs=key_emb[:n], config=config, cp_group=cp_group
+            )
+        return key
+
+    def reset_attention_state(self) -> None:
+        """Reset state used within attention, after each step."""
+        self.max_seqlen_q = None
+        self.max_seqlen_k = None
+        self.cu_query_seq_lengths = None
+        self.cu_query_seq_lengths_decode_only.fill_(0)
+        self.query_seq_lengths_decode_only.fill_(0)
+        self.cu_kv_seq_lengths = None
+        self.cu_kv_seq_lengths_decode_only.fill_(0)
+        self.kv_seq_lengths_decode_only.fill_(0)
+        self.kv_memory_decode_only.fill_(0)
+        self.block_table = None
+
+    def initialize_attention_state(self) -> None:
+        """Initialize attention state so that every layer can use it"""
+
+        self.padded_active_token_count = (
+            self.max_requests
+            if self.is_decode_only()
+            else self.round_up_tokens(self.active_token_count)
+        )
+        self.padded_active_sample_count = (
+            self.max_requests
+            if self.is_decode_only()
+            else (self.total_request_count - self.paused_request_count)
+        )
+        self.token_to_chunk_idx[self.active_token_count : self.padded_active_token_count] = (
+            self.dummy_chunk_idx
+        )
+        self.token_to_local_position_within_kv_chunk[
+            self.active_token_count : self.padded_active_token_count
+        ] = 0
+        self.token_to_position_in_request[
+            self.active_token_count : self.padded_active_token_count
+        ] = 0
+
+        query_lengths = self.request_query_lengths[
+            self.paused_request_count : self.total_request_count
+        ]
+        if self.is_decode_only():
+            self.query_seq_lengths_decode_only[
+                0 : self.total_request_count - self.paused_request_count
+            ] = query_lengths
+            cu_query_lengths_decode_only = torch.cumsum(self.query_seq_lengths_decode_only, dim=0)
+            self.cu_query_seq_lengths_decode_only[1:] = cu_query_lengths_decode_only
+            self.cu_query_seq_lengths = self.cu_query_seq_lengths_decode_only
+            self.max_seqlen_q = 1
+        else:
+            cu_query_lengths = torch.cumsum(query_lengths, dim=0)
+            self.cu_query_seq_lengths = torch.full(
+                (self.total_request_count - self.paused_request_count + 1,),
+                0,
+                dtype=torch.int32,
+                device=torch.cuda.current_device(),
+            )
+            self.cu_query_seq_lengths[1:] = cu_query_lengths
+            self.max_seqlen_q = query_lengths.max().item()
+
+        kv_seq_lengths = self.request_kv_length_offsets + self.request_query_lengths
+        self.kv_seq_lengths = kv_seq_lengths[self.paused_request_count : self.total_request_count]
+        if self.is_decode_only():
+            self.kv_seq_lengths_decode_only[
+                0 : self.total_request_count - self.paused_request_count
+            ] = self.kv_seq_lengths
+            cu_kv_lengths_decode_only = torch.cumsum(self.kv_seq_lengths_decode_only, dim=0)
+            self.cu_kv_seq_lengths_decode_only[1:] = cu_kv_lengths_decode_only
+            self.cu_kv_seq_lengths = self.cu_kv_seq_lengths_decode_only
+            self.max_seqlen_k = self.max_sequence_length
+        else:
+            self.cu_kv_seq_lengths = torch.full(
+                (self.total_request_count - self.paused_request_count + 1,),
+                0,
+                dtype=torch.int32,
+                device=torch.cuda.current_device(),
+            )
+            self.cu_kv_seq_lengths[1:] = torch.cumsum(self.kv_seq_lengths, dim=0)
+            self.max_seqlen_k = self.kv_seq_lengths.max().item()
+
+        kv_memory = self.request_to_kv_chunk_ids[
+            self.paused_request_count : self.total_request_count
+        ]
+        if self.is_decode_only():
+            self.kv_memory_decode_only[0 : self.total_request_count - self.paused_request_count] = (
+                kv_memory
+            )
+            self.block_table = self.kv_memory_decode_only
+        else:
+            self.block_table = self.request_to_kv_chunk_ids[
+                self.paused_request_count : self.total_request_count
+            ]
+
+    def reset(self) -> None:
+        """Reset entire context.
+
+        This method does:
+        - Reset active/paused request/token counts to zero.
+        - Reset available chunks to entire memory.
+        - Reset other tensors to zeros (unncessary, just or sanity checking).
+
+        This method is useful after cuda graph warmup iterations, where the
+        context's memory buffer is referenced by the cuda graph system and
+        cannot be deallocated.
+        """
+
+        # Reset request/token counts.
+        self.total_request_count = 0
+        self.active_token_count = 0
+        self.paused_request_count = 0
+        self.padded_active_token_count = 0
+        self.padded_active_sample_count = 0
+        self.paused_tokens = None
+
+        # Reset request indexes.
+        self.request_ids.fill_(-1)
+        self.request_query_lengths.fill_(0)
+        self.request_output_lengths.fill_(0)
+        self.request_kv_length_offsets.fill_(0)
+        self.request_kv_chunk_counts.fill_(0)
+        self.request_last_kv_chunk_id.fill_(-1)
+        self.request_last_kv_chunk_offset.fill_(0)
+        self.request_to_kv_chunk_ids.fill_(-1)
+
+        # Reset token indexes.
+        self.token_to_input_ids.fill_(0)
+        self.token_to_pos_ids.fill_(0)
+        self.token_to_request_idx.fill_(-1)
+        self.token_to_position_in_request.fill_(0)
+        self.token_to_chunk_idx.fill_(-1)
+        self.token_to_local_position_within_kv_chunk.fill_(0)
+
+        # Reset available chunk count.
+        self.reset_attention_state()
+        self.chunk_allocator.reset()
+        self.request_to_kv_chunk_ids.fill_(-1)
+
+    def current_input_ids(self) -> Tensor:
+        """Flattened input IDs for forward pass.
+
+        Return:
+            (Tensor) Flattened active input IDs.
+        """
+        return self.token_to_input_ids[: self.padded_active_token_count].unsqueeze(0)
+
+    def current_position_ids(self) -> Tensor:
+        """Flattened position IDs for forward pass.
+
+        Return:
+            (Tensor) Flattened active position IDs.
+        """
+        return self.token_to_pos_ids[: self.padded_active_token_count].unsqueeze(0)
+
+    def last_token_logits(self, logits: Tensor) -> Tensor:
+        """Last tokens of logits.
+
+        Args:
+            logits (Tensor): Output logits of forward pass.
+
+        Return:
+            (Tensor) Last token logits.
+        """
+
+        # todo: @lmcafee, remove these asserts?
+        assert logits.size(0) == 1
+        assert logits.size(1) == self.padded_active_token_count, (
+            f"logits.size(1) ({tuple(logits.shape)}) != "
+            f"padded_active_token_count ({self.padded_active_token_count})."
+        )
+
+        # Last token logits.
+        logits = logits.squeeze(0)
+        last_token_idxs = (
+            torch.cumsum(
+                self.request_query_lengths[self.paused_request_count : self.total_request_count],
+                dim=0,
+            )
+            - 1
+        )
+        last_token_logits = logits[last_token_idxs, :]
+
+        return last_token_logits
+
+    def add_request(
+        self, request_id: int, tokens: torch.Tensor, num_tokens_to_generate: Optional[int] = None
+    ) -> None:
+        """Add request to context.
+
+        After a request is added, it will first do one prefill step, followed by
+        an arbitrary number of decode steps.
+
+        A request will failed to be added if one of the following is true:
+        - Adding the request would overflow the max token count.
+        - Adding the request would overflow the max request count.
+        - Adding the request would overflow memory.
+
+        todo: @lmcafee, cache non-added requests until there is space, for better
+        user experience.
+
+        Args:
+            request_id (int): Unique ID of request.
+            tokens (torch.Tensor): Token IDs of request prompt.
+            num_tokens_to_generate (int): Number of tokens to generate for the request.
+
+        Return:
+            None
+        """
+
+        # `context_length` here is the equal to prompt length, and does not
+        # include output length.
+        context_length = len(tokens)
+
+        # Test for token and request overflow.
+        # TODO : Should move this into some waiting queue
+        if self.active_token_count + context_length > self.max_tokens:
+            raise TokenOverflowError()
+        if self.total_request_count >= self.max_requests:
+            raise RequestOverflowError()
+
+        # Preallocate chunks.
+        num_chunks_needed = math.ceil(context_length / self.chunk_size_tokens)
+        new_chunk_ids = self.chunk_allocator.allocate_memory_chunks(num_chunks_needed, safe=True)
+        if new_chunk_ids is None:
+            raise ChunkOverflowError()
+
+        if num_tokens_to_generate is None:
+            num_tokens_to_generate = self.max_sequence_length - context_length
+        elif context_length + num_tokens_to_generate > self.max_sequence_length:
+            raise TokenOverflowError()
+
+        # Update request state.
+        self.request_ids[self.total_request_count] = request_id
+        self.request_query_lengths[self.total_request_count] = context_length
+        self.request_output_lengths[self.total_request_count] = (
+            context_length + num_tokens_to_generate
+        )
+        self.request_kv_length_offsets[self.total_request_count] = 0
+        self.request_to_kv_chunk_ids[self.total_request_count][:num_chunks_needed] = new_chunk_ids
+        self.request_kv_chunk_counts[self.total_request_count] = num_chunks_needed
+        self.request_last_kv_chunk_id[self.total_request_count] = new_chunk_ids[-1]
+        self.request_last_kv_chunk_offset[self.total_request_count] = (
+            context_length - 1
+        ) % self.chunk_size_tokens
+
+        # Update token state.
+        arange_context_length = torch.arange(context_length, device=torch.cuda.current_device())
+
+        self.token_to_pos_ids[
+            self.active_token_count : (self.active_token_count + context_length)
+        ] = arange_context_length
+        self.token_to_input_ids[
+            self.active_token_count : (self.active_token_count + context_length)
+        ] = tokens
+
+        self.token_to_request_idx[
+            self.active_token_count : (self.active_token_count + context_length)
+        ] = self.total_request_count
+        self.token_to_position_in_request[
+            self.active_token_count : (self.active_token_count + context_length)
+        ] = arange_context_length
+        self.token_to_chunk_idx[
+            self.active_token_count : (self.active_token_count + context_length)
+        ] = new_chunk_ids[arange_context_length // self.chunk_size_tokens]
+        self.token_to_local_position_within_kv_chunk[
+            self.active_token_count : (self.active_token_count + context_length)
+        ] = (arange_context_length % self.chunk_size_tokens)
+
+        # Increment request and token counts.
+        self.total_request_count += 1
+        self.active_token_count += context_length
+
+    def _swap_book_keeping_tensors(self, src_idxs, dst_idxs, next_tokens):
+        """
+        Swaps all the relevent booking tensors with src idxs to dst idxs
+        """
+        self.request_kv_length_offsets[dst_idxs] = self.request_kv_length_offsets[src_idxs]
+        self.request_query_lengths[dst_idxs] = self.request_query_lengths[src_idxs]
+        self.request_output_lengths[dst_idxs] = self.request_output_lengths[src_idxs]
+        self.request_ids[dst_idxs] = self.request_ids[src_idxs]
+        next_tokens[dst_idxs] = next_tokens[src_idxs]
+
+        self.request_to_kv_chunk_ids[dst_idxs] = self.request_to_kv_chunk_ids[src_idxs]
+        self.request_kv_chunk_counts[dst_idxs] = self.request_kv_chunk_counts[src_idxs]
+        self.request_last_kv_chunk_id[dst_idxs] = self.request_last_kv_chunk_id[src_idxs]
+        self.request_last_kv_chunk_offset[dst_idxs] = self.request_last_kv_chunk_offset[src_idxs]
+
+    # TODO: see if we can compile this function
+    def update_requests(self, active_requests_mask: Tensor, new_tokens: Tensor) -> None:
+        """Update context state after calling engine.step().
+
+        This method is responsible for:
+        - Update prefill requests to decode requests.
+        - Persist decode requests as decode requests.
+        - Terminate requests by length or termination id.
+
+        *Note*: All bookkeeping tensors (i.e., `self.request_*`) are laid out
+        contiguously, with a conceptual division between paused requests on the
+        'left' (or, lower indices) and active requests in the 'middle' (or, middle
+        indices) and completed requests on the 'right' (or, higher indices). The integers
+        `paused_request_count` and `total_request_count`  are used to track the boundaries
+        between these request groups.
+        - 0:paused_request_count -> paused requests
+        - paused_request_count:total_request_count -> active requests
+        - total_request_count:max_requests -> completed requests are moved here.
+        The reason for maintaining contiguous tensors rather than multiple
+        smaller (e.g., per-group or per-request) tensors is for both 1) speed
+        (avoid unnecessary tensor allocations), and 2) compatibility with the
+        Flash Attention kernels, which packed contiguous tensors.
+
+        The following happens in this code :
+        1. The active token mask tells us which requests are still active and which are completed
+        2. If no paused requests are present and no active requests we release all memory and reset.
+        3. Concatenate the paused tokens to the active tokens
+        4. For the finished requests we release memory chunks and move them to the right
+        5. We identify requests that require a new chunk and add them to the paused requests (i.e move them left)
+        6. We determine how many requests we can resume and resume them
+        7. We make changes to the request book keeping tesnsors and setup the tokens for next iteration
+        8. We resume those requests by assigning chunks and updating bookkeeping tensors
+        9. We make relevant changes to the token bookkeeping tensors
+
+        Args:
+            active_requests_mask (Tensor): 1D Mask tensor marking active requests.
+            new_tokens (Tensor): Newly sampled tokens, with one token per active request.
+
+        Return:
+            None
+        """
+        # 1. The active token mask tells us which requests are still active and which are completed
+        # active_request_count -> This corresponds to requests that have not reached EOD or max length
+        # finished_request_count are requests that have reached the termination criterion
+        active_request_count = (active_requests_mask == 1).sum().item()
+        finished_request_count = (active_requests_mask == 0).sum().item()
+        assert (
+            active_request_count + finished_request_count + self.paused_request_count
+            == self.total_request_count
+        )
+
+        # Reset attention state.
+        self.reset_attention_state()
+
+        # 2. If no paused requests are present and no active requests we release memory and reset.
+        if active_request_count + self.paused_request_count == 0:
+            if finished_request_count > 0:
+                finished_idxs = (
+                    torch.nonzero(active_requests_mask == 0, as_tuple=True)[0]
+                    + self.paused_request_count
+                )
+                kv_chunks_assigned = self.request_to_kv_chunk_ids[finished_idxs]
+                non_zero_values_in_kv_memory = kv_chunks_assigned[kv_chunks_assigned != -1]
+                self.chunk_allocator.release_memory_chunks(non_zero_values_in_kv_memory)
+
+            # Reset request/token counts.
+            self.request_to_kv_chunk_ids.fill_(-1)
+            self.total_request_count = 0
+            self.active_token_count = 0
+            return
+
+        # 3. Concatenate the paused tokens to the active tokens if present.
+        if self.paused_request_count != 0:
+            assert self.paused_tokens is not None
+            next_tokens = torch.cat((self.paused_tokens, new_tokens))
+        else:
+            next_tokens = new_tokens
+
+        # 4. For the finished requests we release memory chunks and move them to the right:-
+        #       a) Release all their memory
+        #       b) Swap them to the right, so that we have this order [Paused, Active, Finished]
+        if finished_request_count > 0:
+            finished_idxs = (
+                torch.nonzero(active_requests_mask == 0, as_tuple=True)[0]
+                + self.paused_request_count
+            )
+            kv_chunks_asigned = self.request_to_kv_chunk_ids[finished_idxs]
+            non_zero_values_in_kv_memory = kv_chunks_asigned[kv_chunks_asigned != -1]
+            self.chunk_allocator.release_memory_chunks(non_zero_values_in_kv_memory)
+
+            if active_request_count > 0:
+                finished_idxs_on_left = (
+                    torch.nonzero(active_requests_mask[:active_request_count] == 0, as_tuple=True)[
+                        0
+                    ]
+                    + self.paused_request_count
+                )
+                active_idxs_on_right = (
+                    torch.nonzero(active_requests_mask[active_request_count:], as_tuple=True)[0]
+                    + active_request_count
+                    + self.paused_request_count
+                )
+
+                self._swap_book_keeping_tensors(
+                    src_idxs=active_idxs_on_right,
+                    dst_idxs=finished_idxs_on_left,
+                    next_tokens=next_tokens,
+                )
+
+        # 5. We identify requests that require a new chunk and add them to the paused requests (i.e move them left) :-
+        #       a) Put requests that have filled their current chunk and  require a new one in a pause state temporarily
+        #       b) Move the paused requests to the left, and active requets to the right
+        #       c) Update the paused request count and active_request_count appropriately
+        if active_request_count > 0:
+            num_tokens_in_last_chunk = self.request_last_kv_chunk_offset[
+                self.paused_request_count : (active_request_count + self.paused_request_count)
+            ]
+            active_requests_requiring_new_chunk = (
+                num_tokens_in_last_chunk == self.chunk_size_tokens - 1
+            ).byte()
+            active_requests_requiring_new_chunk_count = (
+                (active_requests_requiring_new_chunk == 1).sum().item()
+            )
+
+            # Swap unfinished active requests on the left side with paused requests on the right side
+            # NOTE : We add paused request count because we concatenate
+            # paused tokens to the left at the beginning of update requests
+            if (
+                active_requests_requiring_new_chunk_count > 0
+                and active_requests_requiring_new_chunk_count != active_request_count
+            ):
+                active_request_ids_on_left = (
+                    torch.nonzero(
+                        active_requests_requiring_new_chunk[
+                            :active_requests_requiring_new_chunk_count
+                        ]
+                        == 0,
+                        as_tuple=True,
+                    )[0]
+                    + self.paused_request_count
+                )
+                paused_requests_idxs_on_right = (
+                    torch.nonzero(
+                        active_requests_requiring_new_chunk[
+                            active_requests_requiring_new_chunk_count:
+                        ],
+                        as_tuple=True,
+                    )[0]
+                    + active_requests_requiring_new_chunk_count
+                    + self.paused_request_count
+                )
+                dst_idxs = torch.cat((active_request_ids_on_left, paused_requests_idxs_on_right))
+                src_idxs = torch.cat((paused_requests_idxs_on_right, active_request_ids_on_left))
+                self._swap_book_keeping_tensors(
+                    src_idxs=src_idxs, dst_idxs=dst_idxs, next_tokens=next_tokens
+                )
+
+            self.paused_request_count += active_requests_requiring_new_chunk_count
+            active_request_count -= active_requests_requiring_new_chunk_count
+
+        # 6. Now that we have the requests in following order [Paused, Active, Finished]
+        # We determine how many requests we can resume and resume them
+        # Assign released chunks to paused requests.
+        # todo: @shanmugamr, un-pause requests using FIFO, rather than LIFO.
+        if (
+            self.chunk_allocator.chunk_count_avail
+            <= self.paused_request_count + self.gtd_chunk_count
+        ):
+            if active_request_count < self.gtd_request_count:
+                resume_request_count = min(
+                    self.paused_request_count, self.gtd_request_count - active_request_count
+                )
+            else:
+                # If there are more active requests than gtd requests and not enough
+                # chunks available, no requests can be resumed
+                resume_request_count = 0
+        else:
+            # If there are more available chunks than (paused + gtd requests), resume all paused requests
+            resume_request_count = self.paused_request_count
+
+        self.paused_request_count -= resume_request_count
+        active_request_count += resume_request_count
+        assert active_request_count > 0, "active_request_count == %d." % active_request_count
+
+        # 7. We make changes to the request book keeping tesnsors and setup the tokens for next iteration
+        self.total_request_count = active_request_count + self.paused_request_count
+        # All these active requests are in decode phase, so they need only 1 token per request
+        self.active_token_count = active_request_count
+        # Always the first section of token input ids are only used.
+        self.token_to_input_ids[: self.active_token_count] = next_tokens[
+            self.paused_request_count : self.total_request_count
+        ]
+
+        if self.paused_request_count > 0:
+            self.paused_tokens = next_tokens[: self.paused_request_count]
+
+        self.request_kv_length_offsets[self.paused_request_count : self.total_request_count].add_(
+            self.request_query_lengths[self.paused_request_count : self.total_request_count]
+        )
+        self.request_query_lengths[self.paused_request_count : self.total_request_count].fill_(1)
+        self.token_to_pos_ids[: self.active_token_count] = self.request_kv_length_offsets[
+            self.paused_request_count : self.total_request_count
+        ]
+
+        self.request_last_kv_chunk_offset[self.paused_request_count : self.total_request_count] = (
+            self.request_last_kv_chunk_offset[self.paused_request_count : self.total_request_count]
+            + 1
+        ) % self.chunk_size_tokens
+
+        # 8. We resume those requests by assigning chunks and updating bookkeeping tensors
+        if resume_request_count > 0:
+            assert torch.all(
+                self.request_last_kv_chunk_offset[
+                    self.paused_request_count : (self.paused_request_count + resume_request_count)
+                ]
+                == 0
+            ), 'The request_last_kv_chunk_offset should be 0 for the requests that just got resumed this step. '
+
+            chunk_ids = self.chunk_allocator.allocate_memory_chunks(resume_request_count)
+            row_idx = torch.arange(
+                self.paused_request_count,
+                self.paused_request_count + resume_request_count,
+                device=torch.cuda.current_device(),
+            )
+            col_idx = self.request_kv_chunk_counts[
+                self.paused_request_count : (self.paused_request_count + resume_request_count)
+            ]
+            self.request_to_kv_chunk_ids[row_idx, col_idx] = chunk_ids
+            self.request_kv_chunk_counts[
+                self.paused_request_count : (self.paused_request_count + resume_request_count)
+            ] += 1
+            self.request_last_kv_chunk_id[
+                self.paused_request_count : (self.paused_request_count + resume_request_count)
+            ] = chunk_ids
+
+        # 9. We make relevant changes to the token bookkeeping tensors
+        self.token_to_request_idx[: self.active_token_count] = torch.arange(
+            self.paused_request_count, self.total_request_count, device=torch.cuda.current_device()
+        )
+        self.token_to_position_in_request[: self.active_token_count] = (
+            self.request_kv_length_offsets[self.paused_request_count : self.total_request_count]
+        )
+
+        self.token_to_chunk_idx[: self.active_token_count] = self.request_last_kv_chunk_id[
+            self.paused_request_count : self.total_request_count
+        ]
+        self.token_to_local_position_within_kv_chunk[: self.active_token_count] = (
+            self.request_last_kv_chunk_offset[self.paused_request_count : self.total_request_count]
+        )
diff --git a/megatron/core/inference/contexts/static_context.py b/megatron/core/inference/contexts/static_context.py
new file mode 100644
index 000000000..79d865724
--- /dev/null
+++ b/megatron/core/inference/contexts/static_context.py
@@ -0,0 +1,133 @@
+# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
+
+from megatron.core.inference.model_inference_wrappers.inference_wrapper_config import (
+    InferenceWrapperConfig,
+)
+
+from .base_context import BaseInferenceContext
+
+
+class StaticInferenceContext(BaseInferenceContext):
+    """Static inference context that is passed to the main model in order
+    to efficiently manage the KV cache during inference.
+
+    Args:
+        max_batch_size (int): Max supported batch size.
+        max_sequence_length (int): Max supported sequence length.
+    """
+
+    def __init__(self, max_batch_size: int, max_sequence_length: int):
+        super().__init__()
+        self.max_sequence_length = max_sequence_length
+        self.max_batch_size = max_batch_size
+        self.current_batch_size = max_batch_size  # Required for bookkeeping variable-sized batches
+        self.sequence_len_offset = 0
+        self.batch_size_offset = 0
+        self.key_value_memory_dict = {}
+        self.decode_mode = False
+        self.materialize_only_last_token_logits = False
+
+    @classmethod
+    def from_config(cls, config: InferenceWrapperConfig) -> "StaticInferenceContext":
+        """Initialize context from a config."""
+        max_batch_size = config.inference_max_requests
+        max_sequence_length = config.inference_max_seq_length
+        return cls(max_batch_size, max_sequence_length)
+
+    def swap_key_value_dict(self, batch_idx):
+        "swap between batches"
+        if len(self.key_value_memory_dict) == 0:
+            raise ValueError("should not swap when dict in empty")
+
+        for layer_number in self.key_value_memory_dict.keys():
+            inference_key_memory, inference_value_memory = self.key_value_memory_dict[layer_number]
+            assert (
+                len(batch_idx) == inference_key_memory.shape[1]
+            )  # make sure batch size is the same
+            new_inference_key_memory = inference_key_memory[:, batch_idx]
+            new_inference_value_memory = inference_value_memory[:, batch_idx]
+            self.key_value_memory_dict[layer_number] = (
+                new_inference_key_memory,
+                new_inference_value_memory,
+            )
+
+    def enable_prefill_mode(self):
+        """
+        Indicates the generation loop is in the prefill phase (still processing
+        input prompt tokens). This should be enabled if the generation loop is
+        encoding prompt tokens for *any* request in a batch.
+        """
+        self.decode_mode = False
+
+    def enable_decode_mode(self):
+        """
+        Indicates the generation loop is in the decode phase (generating new output
+        tokens). This should only be enabled if the generation loop has fully encoded
+        the prompts for *all* requests in a batch.
+        """
+        self.decode_mode = True
+
+    def is_decode_only(self):
+        """Functional access to `.decode_mode`, to match dynamic context."""
+        return self.decode_mode
+
+    def reset(self):
+        """Resets the inference state for a new batch."""
+        self.current_batch_size = self.max_batch_size
+        self.sequence_len_offset = 0
+        self.batch_size_offset = 0
+        self.enable_prefill_mode()
+
+    def __str__(self):
+        return (
+            f"StaticInferenceContext(max_seq_len = {self.max_sequence_length}, "
+            f"max_batch_size = {self.max_batch_size}, "
+            f"current_batch_size = {self.current_batch_size}, "
+            f"sequence_len_offset = {self.sequence_len_offset}, "
+            f"batch_size_offset = {self.batch_size_offset}, "
+            f"key_value_memory_dict = {self.key_value_memory_dict.keys()})"
+            f"decode_mode = {self.decode_mode}"
+            f"materialize_only_last_token_logits = {self.materialize_only_last_token_logits}"
+        )
+
+    def __eq__(self, other):
+
+        if id(self) == id(other):
+            return True
+
+        if not isinstance(other, StaticInferenceContext):
+            return False
+
+        # Check all attributes match
+        basic_attrs = [
+            'max_sequence_length',
+            'max_batch_size',
+            'current_batch_size',
+            'sequence_len_offset',
+            'batch_size_offset',
+            'decode_mode',
+            'materialize_only_last_token_logits',
+        ]
+
+        if not all(hasattr(other, attr) for attr in basic_attrs):
+            return False
+
+        # Check dictionary keys match; i.e. the same number of layers are cached
+        if self.key_value_memory_dict.keys() != other.key_value_memory_dict.keys():
+            return False
+
+        # Check each tensor tuple in the dictionary
+        for key in self.key_value_memory_dict:
+            self_tensors = self.key_value_memory_dict[key]
+            other_tensors = other.key_value_memory_dict[key]
+
+            # Compare each key, value tensor in the tuple
+            for self_tensor, other_tensor in zip(self_tensors, other_tensors):
+                if (
+                    self_tensor.data_ptr() != other_tensor.data_ptr()
+                    or self_tensor.shape != other_tensor.shape
+                ):
+                    return False
+
+    def is_static_batching(self):
+        return True
diff --git a/megatron/core/models/__pycache__/__init__.cpython-310.pyc b/megatron/core/models/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..c3f2c751377343d83f03f3b58f9d1100eca78a09
GIT binary patch
literal 186
zcmd1j<>g`kf{eLt86f&Gh(HF6K#l_t7qb9~6oz01O-8?!3`HPe1o10YKO;XkRX-)O
zxI{lAF~2A=Pd`1gM8BZ4I78npCow%ZIWZ?yza%5GC?&oiv8bd{-#0Zqv7{(JPuIs+
wKNrf@PtGq&)z8gONzEzNkB`sH%PfhH*DI*J#bE;!EX_%^16f<l1SD7(09V^Dv;Y7A

literal 0
HcmV?d00001

diff --git a/megatron/core/models/common/__pycache__/__init__.cpython-310.pyc b/megatron/core/models/common/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..9bb87bd30d54dee30aed0c01bd2dd1fcbcc4b11e
GIT binary patch
literal 193
zcmYj~K?=e!5JgkzLWCZ~h0X;;Ty<sL^Z;RKLK8?bAxRfKj0f;aZoP#oCm`sDdGr7L
z#ZcGn1k2oeQ}?UlUk!%~Pi`4XjAGy19wOEA4{rsAyar`+0fUq<z-$Y|B^&4+&f|nm
zLoqff88MX=20dd*6b{z`{MW-oNrNY)U1sk+1(4DPTckY3^|?K9w>W*S-}8piiVx2-
BGIIa`

literal 0
HcmV?d00001

diff --git a/megatron/core/models/common/embeddings/__pycache__/__init__.cpython-310.pyc b/megatron/core/models/common/embeddings/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..dc9b082b35f64dde7bd98d7b5af1f0110e33b1ea
GIT binary patch
literal 415
zcmZutJ5B>J5MA#lK$Hk1w&4gX0doO_Xh=mUNX0gm6I;8M{FChzdmbvTv@I19C!k`y
zp#a24etz@b%xG-8T+TBL^Rntc@P13l&&V;k!xJtMc*cp!G-(M*JXg6c+G65`Ds|OX
zde+V`FE?3Jy%TI{$XGMy)IhzB%n#JrK!x6-e)=>i_j)Thm!@m-@%)*2^G6=f=zuEi
zM5H?Gm=cf8(Kz?k3A&F`1)p{t>)-PaBYlyqi>d!#zeL|x2(OtxNj$-)h2ClbT!sie
zvz{5~WCXVlJ**V#Hfalpz4V+q=Hmcs(Xr^Qxq4WG{^qc=UVye-sDNB+YXDz<*en30
b(#S~ZwHwCc8!X!^ahtv@%n%m&g4E;-dA)oK

literal 0
HcmV?d00001

diff --git a/megatron/core/models/common/embeddings/__pycache__/language_model_embedding.cpython-310.pyc b/megatron/core/models/common/embeddings/__pycache__/language_model_embedding.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ee230554604fdcc5aa3a9544dec6d6cc285a1df6
GIT binary patch
literal 4127
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

literal 0
HcmV?d00001

diff --git a/megatron/core/models/common/embeddings/__pycache__/rope_utils.cpython-310.pyc b/megatron/core/models/common/embeddings/__pycache__/rope_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..f8c6ce9a077960c77b24fa6b6d89faf141f5db8e
GIT binary patch
literal 6600
zcmb_gTXP%7nVs$#3<e-5Q#4JHaxAy+LPP_ie2F7_9Xqn*C>L3=n2X_P$0KwT05zC_
zdIl271*^6qyQCzgr2Lw^kh`^8<+oHGQmIt!+y07q-P%g&EiYTOu@W=q>j6MeqMg*%
z4vC(gzI;8?{hjlj?s$5-Y~hOj^<4Y6PgvG}(Zl35g@-pRizPp0mL)C8LaWOfj8UG4
zylXe?uG4UsrEEQqGCM4E-G*!Gov_#_qRa`shKGA0^tz=+$<(=FxjWUEGWlXy=}tGM
zVWYTxNIkT}8Z(>J-U|<RXB)H3`hgWKIF@>N<9p1azhUj%xEABlpL80t?^*9z5xbGM
zDTQ<0M;eb93y&EK|1@Et1pA}fDO0;Xw)04CWx`fDobMiKEErpP>tBppFXZjyREsqh
z<+401XFqfrN98FwFOMMiXlVg|i}D5eqI_J64-1Vi$(Q6)@@dpPHm-YFJ}aL?-LaB`
zwqKF2$P;o2&ySZD<X7csS(hjAB&2i6s=j)cR;kLesUV8tG)OyflvH^(z4G40v;LWH
zoIUfc^B3OEymxw36NG4actr<MvKs5I(r4mmwbQzQQg=l~Nvx4O)C+VFhAQ+E*i+P_
zllZCfyPe3tu5<!JC_K8_Pn7h7UN7A6HHOw3elJdZ)xCn+W1nB^r)`NAGy8g?S2llt
ziN6{KNjobJ&1x5)niUgu&6k~SW_O}AbG1tQI%;y7hT&DfoqlJ?Uw@5EYHhO}Ym4K~
zako=@%^BE|4fvcjuovLL3s#FuTRO6E$6hPo?%rWr&cIr8TNcuyEDqR5e9`(BmiPLY
zN$+DuH3KI35la^H+IOv=TU+R{?G4z#+2NEwz{Xx*_F!MEYH9P=Z>v<KZ6)yS9a=hp
z8B$VqqL#n|)inEBt0)!CI7-!eDn`pDu)J4m<+8x_rfwytO^%+1^C*rF*ZQ=$IJ6#w
z6ZTW%3FBVF`4-19-__INlDgJcQBw)50UF}fOv}5p0(U_UR%SPQ{T2A2E7kQ*Q)T5I
z9H*<gvEIPCSE4xbuY_^)D!%2y-CbPOk}gum$6G4(ho9q*KF7Zi>rnbhXH#X12R5MZ
z%?fF(o9)caUp{l1eHmoV^^Urc6_R$)Q(2`GNww}LDpbw1TF}!NQXismi_KncpEAap
zi%dtZe`4vU(BRW+^>*A<b=gVMdOL{Gq~7YJ^<F<|*UyDP>ryiaRXuHYw50b=H|pO}
ztsvEL^!&HKQ|}J*^=7P9y&FpvCdhZYaa13#YEsv6Px<|{6DGCZM)oLu>Ttn)%ovO(
z{_ypd@lMIJNW7xQ95&CKU5C4$xpsx|T^B!&-wgA1EA~m$>u2aA*?KlRgeewM=}-mN
zmCT$gaU4DXA6gCrpMOVYz>@jYT7$bwIJ>m(*gxW195Axh_`sgB27Hy9a()T!4)8c1
z@%vNBKC)MxMS$?Y76iFb3$knPw+kpb+xP*R?xJPxh2fno0=_#$g~iQZo@obBONpe@
zibN6{lz>6fJy#W16eeCJ;{E4iDVM|vbzMc555mg&1WL|Fy*|*G!@_v`yM}cppp_%)
zw8-y*COTD8w1aTfbkK(}k@^UdPgrIHIv4aTl@MU6u0D!eR%o{S@MOCgr104^XkOKi
zQJZ7brl4uT^>fsauP@_wDl4q}k-A}AG*6zU+KORg@HGv779|Nexl@{BbL>g}B&AG~
z3!VD|5?p`$TE;Nqs#e#MY`)tM(~ckF^`q1eQn~@-ncGds$<Zu~gS1KfI=V<3jQRHW
zco?uXxC$1#fW?Nx3<@8?MX+Fa8Wg0RKXI_*mOHTZ3#OF={w=^s&~B?}O5BMOFJ*AH
z;=qHeF<HEWzA4+b2W$sCJ7>W;thK@p+bW^deW0{Fum+_$D}~(wzsU#XIqL{`+Ss%P
z?#L#b$P2DvN#3NOW)@Lzj2U=8N5-Nv;T2+KNVv_mYF-uXH0>p)>-DQ@y{~Gk-Fg6S
z>ReYz{gqQMza$WQg;Z(K3E?6Xi2Lx;gPbt^948bjqLYYtRTyRy?-NCbDr%+eB~h!@
z#1eV@<uQYsm7Os4u8G!PME-)heBl_wA^rv$5T^D`Q?Lr=5hl)4Bzrf$cs7RzA)|J|
zz#)f<K}Qv(RnGvxKtwO0004=TjHhu{km&}9-A+1@ap>xlegO^ii<A&j^h=byj3g@p
zl14VTpw%Erbd9R&ROP^)pE<DN-;brE2kIODO461;MAu{vNqP23+u^f}{^p%|Hjli1
z0~PuSN(7RogJg7(it+F>{F)*I3Bj&9dU?RNiOZO@k6K_n$dmke4nTrigKOcwaCU$L
zvVn3WI#5b58<s3s^h9+FrnUupU}amv@pEg`2afJc5RjSis!da{srDusyfprToPB6w
zGm4FgYGqTa{SX>aU4!S{KX1o;3SSU<zVW^L1K1YqB(%aFJA^-kFn)~j&z#-aqJE3U
zC^!2<%Sn^wYjhQnp}Dh3+DT+`Y4;PBOS_+7E^jl;9-}#x+{}-OS(IC_wr$8iH+8lP
zx2#+27QbcRa&8q?T|}S4haSpZ%$>W#-?DCkShkB2Ddx%z{)0$CTnQi^IuU%j+Y1%c
zPp-EKi2GdH0Q>`d{Ral!L3*GX`+LEiE(yR|?!kF)ZuW$nIMXK<NkK9q>30n`jD%Xw
z3<;1Z0(?W-Y!6@XgQYP=+~}n35u02QC&cn)5kyiLfC(e5YETU?oT`m`{J)S&H-I2p
z63gZvpZLXea*1@Dcz-k@HL>z{@Js&2CfZ&w0l0~^9ABhbOZYuZ4n>qedjImnTX3iW
z+h)?*VJW|D-G)Qm<~N<&h1<?;>>TbCKIYdTcdFbN{=~kIZmPCnfUMMy63Ar*Sdm{t
z6!Y3igQZU<!DR@GXeuYH=P36SB~K&C%CChGp3p75*Z&RAhICwud;CuxgW@xP&OLW`
z^ZA3>3XWKN4T3uelh=_M*#fZ=ob&=Ei!_j%##Fn<0FWWQu#;lXm48IFm=i3iii24;
zr-LMa`}5Sye8S@AzS+;vCYeX#&3VjYUt$iQV`b0zUntor{y+L1RDp8LK2?*-_;hBp
zmwi7MTbK8Vk$vp?JG3A0HA}xq+r7S}=Tq=PpCu1{6HI%P{g|atwcrYD{qES8tQ6t`
zwa3P__O=7YC_uCnz|gOz(4Vp>y*oTPnYyxMEI`qMgV~^v+S|n)OP22x$WmT<6IO>~
zUraq33-43HuRL(%lxaCN>_1uV!nG=!zZ$|p$Nf|Rg+|bVX|Pk!9SF3Xb?)1Ii`9PA
zG&@GAdMX<37>y;fC$IM-a~D^Yj<6G15>O))(8O`fGUV{^pg`0y9145Tp^zz9*y@nY
zjI9fsPZ`d`=-9TvBJEKjN^l4vg6ohr!Ie<eR<Pkal48G<U@N11d<T^Da4%?(v*|9^
zmX~WM&!OQVBc6QFRsg5l*nI7s2r6vlta$w&1X`T}vGsbfP7|XW@SSE%5>qSRcx(7>
z!VuY+i!~rqVD<9|b`H5}B|H4U8*9S8rlYS3EKq>S%HI#dzB;RQtPMEwh;EQ+L<RXJ
z0_2|FxJX6}Fbt3dJsJ$}0eNmT{^ViFZ_qILIuf_yu^B|e8BRc`;Fm+2QkS{+DxSxO
zU`ND6**#D|4*vZ4Q~iA!^c6~8Me=~^Ah@3)qWe!|KyRSBHAFZ>OFqtXg8@sQH-{vs
z!NCaa`M5b2DVSps#K|4>rSz($PhoFXlrHShE^VSFc?Qq$`L)t07R%xh5bBnbk|3ue
z7*Cc6FN84KJ8n+_UsJLor*|C4bHWhbU|`>LsKvfo)1!K5^JC+UE7%?HIX+Eu2b;Wn
zyZgBUo(@s45>P6`y`4ynG58g<X;0Hu5$+1-hd?yp5EUk}LMDmhL(z@UOb7&APE~Vc
zm?)!3yWahbPB&Oq!fs9*`DvWK%1o1U`V`t|a?U;Bd)LNewW7aDrKc&WP(m9-{XCMa
zh(j^jmFX{2(c4tys`VbCb*_`&FpYW&y9ylM4Lx-16M396I*x7J@1IW`<exqv3a2s&
zj!2^ahVkS$l1dQ{%8&9HyUb>G7dWo5ySn$B>6t&nk-_EqAJG_ZVGdh}o6U)feu#22
zlu#M!pB?4%7o;I3>g{v+Twz`e;EW*?G)>N+(sVJ<G&uvpuk1Hd&e^~WE~v`n_J-cG
zxc6#@CPp;q{y&b*FPPP?mM84(jc3S%qFc@&-=*C63##ngzHVkQ&1(?K%?utmYfofl
zAIyyNQRVxZlnx^N1`gv|nw(5KRI)TWovP94RLyX8el|Rrr&Bo`6q^8?6~nmIA}huz
z=|!^XeOB_*yodLd)y&D3_Na9Ukoz`lD4lt}9|c{!U*?iklspQJw>~*`Z4}Ug(9m@@
zb-qhsz;JVRV*e;O2+a>AlSvak_QufdhUl{ebE-^78&NF`HgKR_%ZWnML56`_R`h)w
zfn(O5p&~jg(Qi=l79~XeIn|PLPk?BT>Alx*%-0Xq>!dZ4RU{QY!yQhb@sL*VD|7D5
z7y&m!{LY+z=6~kJQHkOIU6lPLFGDogb)B+Zp5yZbwaUHnGkn(MKIJFqnZG!*`&VLG
Bj<Ns%

literal 0
HcmV?d00001

diff --git a/megatron/core/models/common/embeddings/__pycache__/rotary_pos_embedding.cpython-310.pyc b/megatron/core/models/common/embeddings/__pycache__/rotary_pos_embedding.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..a6b22d2ca64ccf020e592bd708a2db33479a4e27
GIT binary patch
literal 6985
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
YRY%W-{;0sFamlP(m&|I}v)AnZ0`;(}<p2Nx

literal 0
HcmV?d00001

diff --git a/megatron/core/models/common/embeddings/__pycache__/yarn_rotary_pos_embedding.cpython-310.pyc b/megatron/core/models/common/embeddings/__pycache__/yarn_rotary_pos_embedding.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..44019b1201e2fc0070dee56ce6b2e568c25bdf49
GIT binary patch
literal 5907
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

literal 0
HcmV?d00001

diff --git a/megatron/core/models/common/language_module/__pycache__/__init__.cpython-310.pyc b/megatron/core/models/common/language_module/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..0af13001a04ded1029076c82e2008814a590e395
GIT binary patch
literal 209
zcmYk0F$w}P5Jj`Hg$R2P3!MvySXsF?dw?)(LJ~+aOOh@2Fdo1w*?J2rCn)HLdGqHN
zpP{bX2$sE_ZQaj`e>HrZcyh~7Vi4QrdKan2KfDT93L2El?2r;hFs{HfXA5VKW*E_H
zDApw<Cro95UK=cl;_lKz_<9&AX$YjW&+J2>2p*%E(P+u>%pFp?=!%s4X?d&<pYT|}
I$ty-H-gk*O+W-In

literal 0
HcmV?d00001

diff --git a/megatron/core/models/common/language_module/__pycache__/language_module.cpython-310.pyc b/megatron/core/models/common/language_module/__pycache__/language_module.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..5c5c1ea85fac8edc0818ad17347be751c480801f
GIT binary patch
literal 8286
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

literal 0
HcmV?d00001

diff --git a/megatron/core/models/common/language_module/language_module.py b/megatron/core/models/common/language_module/language_module.py
index cb26be122..898e7f0b5 100644
--- a/megatron/core/models/common/language_module/language_module.py
+++ b/megatron/core/models/common/language_module/language_module.py
@@ -13,7 +13,10 @@ from megatron.core.transformer.enums import AttnBackend
 from megatron.core.transformer.module import MegatronModule
 from megatron.core.transformer.transformer_config import TransformerConfig
 from megatron.core.utils import make_tp_sharded_tensor_for_checkpoint
-
+try:
+    from megatron.core.extensions.transformer_engine import te_parallel_cross_entropy
+except:
+    te_parallel_cross_entropy = None
 
 class LanguageModule(MegatronModule):
     """Base language module that has common helper functions used across GPT, BERT etc.
@@ -76,7 +79,10 @@ class LanguageModule(MegatronModule):
         # [b s] => [s b]
         labels = labels.transpose(0, 1).contiguous()
         if self.config.cross_entropy_loss_fusion:
-            loss = fused_vocab_parallel_cross_entropy(logits, labels)
+            # loss = fused_vocab_parallel_cross_entropy(logits, labels)
+            # HACK(yehua.zhang): replace fuse cross entropy to triton
+            labels = torch.as_strided(labels, labels.size(), (labels.size()[1], 1))
+            loss = te_parallel_cross_entropy(logits, labels)
         else:
             loss = tensor_parallel.vocab_parallel_cross_entropy(logits, labels)
 
diff --git a/megatron/core/models/common/vision_module/__pycache__/__init__.cpython-310.pyc b/megatron/core/models/common/vision_module/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..4f8dbe3eae5a6e01b5a25bc8fb66671fe1304061
GIT binary patch
literal 207
zcmYk0K?=e!5JgkzLWCZ~h0X;;Ty<sL^Z+3=p&4j0AxVWE#shdIx8A~)6BP8ry!rDN
zpP{DN2$sFIw(MuYzbZaXJgH`A(Ti<$xr<ohA6^kGIRhF~2CFD44<lv>bF$D*YU~F!
z8ORo+mO;h5KxamkBl+FA1NZeXP&D93n<=q(jyzm3A$iH+%neea$1LSOERXf!6CTSi
IX~n3;8v->rEdT%j

literal 0
HcmV?d00001

diff --git a/megatron/core/models/common/vision_module/__pycache__/vision_module.cpython-310.pyc b/megatron/core/models/common/vision_module/__pycache__/vision_module.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..51f579ec6e961cfdb02eeb1b805518994bb472ff
GIT binary patch
literal 974
zcmZ{j&2H2%5XbGr+1;+Ph*ltO$VY;fgmZ-uP^qX=cZJl7LoSvTJDZ?<Y;6bBg<C82
z#3S$k<&kpb#4B)Ooa~k$#7LgZc$~@a@7b+qvnc}0z8z<u9fW?^WM~AESFrSRa010h
zVBr+FbYchF*e%?W!~~<aND$#&BjHKs%8flSIzz#D^JpPg+^D*u?{l5QV^NEykl{~g
zhXUN*+tvGh*x5f<ywYi{N~w<OD$Q4kJv%fDWlcW?CsB+6%n>+tg(Hb@1xd*bO0fWl
zYd`jG5J7Q=)A~I{|FO;YH(X2lu?H(VFlsVxXvQ^7>aqmhOcraYXxdbX0e(#zEd}L?
zs<oy^rzh{`pzM53rAfl+l!CohD}C5SHcL7Q^vOS}f<t;zts6tlAHBQNpdLUZ1twW^
zt=duFs2wS38dWV5nAV-y*xfFD0D(bQ=mY+O1^$X*P6%e<ECZ}Os0B{z=>|l#6UOo?
zH;lm+(XvRp`Ymqv7)uJSHDkBv*QY3}OBsn=n<(Qo&_=7=MC(Rp(Q(07X9+K4WU^cd
zw&u!QM!T6lJ6%NOcK%UPD;afyG{p99qyFYufAfE5;rdcd0QNpCZRH){&BNjF!aMe{
z)lu<MGS*Jnwj0DgV;2oCwv{nsqD~l7_MW=d?QE+ukwpOo-xfM&{}O6uo&BZl!O|me
z6GZUiQMb1YMrt3nTDsF0T7BVQmSHbTS@?GT|6_w!SU=+)(SCZs)PY&1cJiX{{1QW^
N?IjWHJ3f9uegnQ13%~#X

literal 0
HcmV?d00001

diff --git a/megatron/core/models/gpt/__pycache__/__init__.cpython-310.pyc b/megatron/core/models/gpt/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..9a0293c186b0a6fa55fa07c1ceb2137e088faf12
GIT binary patch
literal 232
zcmYjLK?=e!5KO9vDir#S9&|q-;;CM&2=(M81QVJ-+LR<c^f5lbFZJrlFL-iOJUFnk
zJG(41Hp|uop&q4T*k4inBSCS%@;Q<qf*R7&8>K`fH7OQvitB<->G5){tdQnhB-5(t
z18bvl@%>5M65C844$8I?g!Taxw~lwv=m7oT6_kcI^_?3DL1`yg&s`Xyk_`{ecAHZL
j?Qe#=brNO^59kJr=}rg6w*5GzJ3I_V?qfC|6Xf&@ViP@3

literal 0
HcmV?d00001

diff --git a/megatron/core/models/gpt/__pycache__/gpt_layer_specs.cpython-310.pyc b/megatron/core/models/gpt/__pycache__/gpt_layer_specs.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..47d8bba028460c026f224b2859f995d176d89d10
GIT binary patch
literal 8295
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
VpVhBCQnc(t<sgiCB3`Aq`5!D&G@Jkc

literal 0
HcmV?d00001

diff --git a/megatron/core/models/gpt/__pycache__/gpt_model.cpython-310.pyc b/megatron/core/models/gpt/__pycache__/gpt_model.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..8bc11a3d0f5a3640c31a62e14bc6483d61af7a2e
GIT binary patch
literal 9291
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
D^3TJi

literal 0
HcmV?d00001

diff --git a/megatron/core/models/gpt/__pycache__/moe_module_specs.cpython-310.pyc b/megatron/core/models/gpt/__pycache__/moe_module_specs.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..1e4448d130b2fbbe14cb9ce94df8b501eb77386d
GIT binary patch
literal 2292
zcmaJ>&2!sC6xXg~S^kXUB>hMz-2)}Kv~to5m(l?`4s9oCJH)_L7ms3XY|ZRSW_Q)p
z8RtT|mVbch3>^7q_yhLJi5py@G`y9a#x66JMo;f+-`jof_cpE7$`(AsmpjA1Dwg%T
z5#}GzS)ait{{#|Q5n@(g{+J<-1B?uBGn+es!wW$nmmTKvVo=Qa0`qt&DDiSo=9Qq5
z>s(glwV=l9K|Pm?Y>795M$UU|nKy%G&X?E<Ukz6ITCj$!;|63ZvkUxUaFJgMF7eC3
zWxgJ)gJ&h!_|{4)jz!-aKS7pxqiV46#7fYSRjQOwsamQ=t5J<&dgZbe)#3j>{Fi2O
zWA<OB&BJokj8=Xq1Xm-pZ?)F`fKyu!TS$A4Mk-E|khQR0y_>R(CyzrBGDg{MoX}9{
z<*(ACMHMWo?d?9^&klGRWsJ&}t;=7EG#k+f^t!fBzsqQ%;*c4!+U=YhA&s|}c6P%t
z6%Zxu%tb+ZX@3|B8g-tHs8FyLGL`r89Qz~Mhqd(qRXs&}PpOcwZM_^zBl0*oQ?(p@
zrQ2CN$t?ZsKo{ON&-Clv&fHNK*Q_kqrVF||+RY?|{JN54yhrn0OWoip?G2{o=nW|6
zdc$apE2D$3KVCGtf~rg;eaEz9_89EC@ZE(^{sv@%B9tNNKCr$=%9>cBqELbq2CkuO
z;G77*z$eZGi*3+ts)F$sn-g1ZD)*$IELBj&+{aC>DenaAC$1{}T#oEt5VDdDRXHiZ
z$_J_%InR-NklPBX_T2i(irkmE7ev9cOm2cF4n(L=3KKUfLhhoftEI?`N->%^QTc^^
z;(?~2mM6uD7gb*1+^aMx0sgAT*Y8mVO(us~(l-DkDkaccGDQ@T&~9>=3IYgu2z@WJ
z9E`og{`MSy>-fj+kdkRt$vMc#QOp=Qpd_LrLHnVi5s4GB2h~?1O>W*z1tm|n{Ow!*
zmQNlt8cIsCQ3Q@eLBOsE6A9Tl6`f=Nna%EIkh}Bgw*QI0MZzQ^&{8rFZvVKP8~unr
z-8#PiC}Crw&STxAd9bqxG8>Ijp`<w@nStj9Imi?lr<pj*M`B5iulwX{$i>or$jG!5
zB<3SVIgDAD*Dp?_qG9AivD|49by>cdQ0>6c=}yZQ>wqThj$p>Q6dNGGg5nu;>oT9e
zGbp#3q5vMEVTf%=(-4DHv1Ev6$g&{@t=c;ZMG_|isU5?KqOsHssToo=#9X|hWQYNI
zt1MOwziP;uAs2vXo3oLwO?TCsou)Ap-yBN3Z~U(s|0OeEQ@@^p&aamE5cGe??P1Dk
zJBp=h55p8%(H_LAJ<8;;y~D!6KGc)8)i4%O4@#oO?Kc?N-D~q1UfO-YOB=#dCfkFN
z0(K#r^haa8Vs56l45qyD3n0}Z#${AS?rX<wU<YI5An(*EIPk~FJ$2k_&N+rZ#ZGQ@
zs<>%myJ~c{_z1$ZobJP&ofZ)U1nsKv2#PJR5k5HEtZz2!E1Jkum^0;9xzEgfE2lj)
z?bBD@@;^tZ54F$RuCKkrC#C)jG<oZ%tu}Dbo9|v_N|f*B90dBtyO%72GDpz=&O5h%
z1AtzpVkUFM>6OLkQ%ep=15N$$qM1H3wSyZ;`g5b(n~v@j_4zpDs5j%Fi}ybNrqk<o
zbmcxb1KklK71}vSQ>N`WQF-ffJkF6#v(mdg#q1pflDrMX!&TIPZxuCA72XEI_!9Dp
gRpcRjiVGOv0^oV&g5+ZS+O_e&u7h9ULj9lr0Cg^*lK=n!

literal 0
HcmV?d00001

diff --git a/megatron/core/models/multimodal/__pycache__/__init__.cpython-310.pyc b/megatron/core/models/multimodal/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..6d82b39ec299a71282bbb6ed21fe6b8e59a254f1
GIT binary patch
literal 197
zcmYk0K?=e!5JgkzLWCZ~h0X;;U3JyE=>fvfgiau7N-|yaFdo1wx%C#VoPwYq=FR_q
z^<!1-l!)#%UF5&k@UKF`RW6qTqdK)OZV#2#`iD0G#bCj>%s?0ujxaceY0d<-$D!-d
zTVQg@=m`@q(Aohx#qrRz5WXJzm@I^7tj`c;&rUpg(AtfTwLVVEb9<6*_V&Ck$Qwba
EKH-EkWdHyG

literal 0
HcmV?d00001

diff --git a/megatron/core/models/multimodal/__pycache__/llava_model.cpython-310.pyc b/megatron/core/models/multimodal/__pycache__/llava_model.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..1b2329f02d62b8234d3fd5655f5f1b60468e14e7
GIT binary patch
literal 26626
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

literal 0
HcmV?d00001

diff --git a/megatron/core/models/retro/__pycache__/__init__.cpython-310.pyc b/megatron/core/models/retro/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ab97f6aee24d312e106ed150ef34eb45be882cdc
GIT binary patch
literal 537
zcmaJ-y-ve05O&h^htNtq0E5>`wB93xkPu~|43sI0Wo$QzaN@{zCCa<-06YLMla+~A
zVB+i+wG$`#?mOS#cc&+l6oHiQi_%62eR=0tVsNhE*$Yqt<w!&#R#6@2apZAN_39)~
z0!~!F9^?bS{S}%H-agaY*H#;6voytch99Lf`bIbFs>m=8c4L^Ubb|$Rj4Ng>UTd>U
zTxucJ{7@MD3_q1}7svG>p^%Om-<=A{;oHz>rTGiBt>hWLlMZ`y=#BSj*csMX7+Fh$
zL&-e-hBKgP)SVvD1^4{F84yoHdLa2Q9d<)Xh31rYgWaOWAF><&(erdn&wus98YTh!
zfy@b*pnf<hbuEdgtRp4Uz>^e}BkjhPWT9BG;!H{6%E}1ZGUK*nDGLTCXlD0IQtvV0
n+DH;cSQ0KoD6N{xQ95t8-RKfR8zry&&UOSUiN~XHbQb*rU~8iS

literal 0
HcmV?d00001

diff --git a/megatron/core/models/retro/__pycache__/base_attention.cpython-310.pyc b/megatron/core/models/retro/__pycache__/base_attention.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..7d8ba3ab00cb3d38a14e70bcc1218c3f2f933796
GIT binary patch
literal 1793
zcmZ`(%Wm8@6eTHXq#2KmJ_4tYMOhT6Ex?sl-3*MPX@GQNXHjRR4WSV^BiVXPNvVN@
z*(E?$`HHUcOWbyqUue>zmz3t=pq3y$uP)C$_wY7{hZ6)({pXYXe1y<nX0rddF!>oi
zbpZ`W3F4TO5?3T4*o>Xhsocb^yu`C}w;WY|;@h!T2GuwjWArQHBksRK+!y1QPBP)a
z6$-~Me*7g>f@Wo^6kRlua*;J$NSfB1ih3Bgt*G0gscF^lt`sVI2S8AW^}%nVmCfU(
zUKGoa=%dH7QR>mgTz_$Qe$~wf2k`3@%<9Wj-8{Qp378*Uie(DU>Pve@W=`0D#=}I-
zU?5O}fe6BJ;&39|Yi~igBSzd6KKDexN5WkMuh9Z?p9ilFlkschqGV!1)(=g{J@7kl
zQ;#6@5gpcyX2y=Do4C#_Q}d?Hw-kN9C9X_wg;ddGLg9Iq7iu6kYsyk&t)gu%s5G?E
zR4%&;m{oKx%H}yeEg}(}(YmW>EsAA6Z=^b-S>Dw*)>|p+Wt*Sb+!zmq_(RZsF|?36
zNM%t|3;F~O?o``UAEURfnw5}g3;qY7kK|I#?2dt**@V(l>uAXCtam%?MO$07O)5RT
zH{CO8w{{fL-ETWrmO2LE&q08vMcsxodSU1^l$f>WMVmu>txRhLVy$3lUN+gy&IRPC
zW)-N4wIC~cdPih4YV=0?os%r>R9c=;5dFz2<-DkuCt>gD9R`i*QBQ-O?6B(TK1O|X
z_qfd46Ra7-WkwEs>KvLDy+qe|jX8dUF>1*gugTh3yPUjn*N8c5d~JFcdJlRJ`VsUa
zjzG1}(-2E@1wz+$(o_t2V4A5}^|hxu$f*t(E9#<UOqzqWYY^(st=<f?Y%47NS-)uI
z#d;O#<9^MwMqGSY4?XQFQ7-=P=(kvp8M6h1vA5{&BF>vi#Jo^#oTm+>Dqa?Cyy{dQ
zKPl7YRhE__hCE8nR;g@n<ITnY;o>r`h9VGWjTA9d3sI`rf{N#GYZ-*om!fEOD~}+;
zFX2-UpgHmhA-I2o4}l-xDSkokx$4n|rSQNoR;QI<Oivi=>l2KpjQ!rF<*?&3#+wXC
zHCfgEAQuVs0!dSywF7Fkc=X{wMkdM<emFKJwlN^(L(}-snAEASpb3zR$)_%M-vj=C
zi9`M&F8M&b<M-C?X?P&N1~dKbhMLGw6ZO<YmKs<w1=zyT-`%y_yDQO_Jgbc!_&4{P
t3($+|Bc}IT^^8d)bqjbeVjH%JSO@35*-z$TDWh1IOvxvZqA7mh{0AH*4MYF{

literal 0
HcmV?d00001

diff --git a/megatron/core/models/retro/__pycache__/config.cpython-310.pyc b/megatron/core/models/retro/__pycache__/config.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..99656c348a84ca6b84a205c081e694c65002a071
GIT binary patch
literal 2077
zcmaJ?-HzNe6t<JhB=fibopzy8Q}I(qDl<h$Ty+bjY(c2qi|)3Sf{>MoJu~TMoWXXs
z?5IVkTdB_g0;#?18^Am81is~}uYd&Q*vbBZAR~MHedqYt{&IYhcREc3&*bNulc#Nj
zemCIcQv>h`G`RyEMG>NyIvI{I{JWVmbt4xW&da=MEvngZEvrxc$hYHq7EBva10&{s
zj;K$Ar-%lucHkc1s7ak|)N9OpH*!8o$AyShn)8sxDo(Ok%5ap6Fb?l9CGy)jWm*3f
zYyxfdux=bV0a)G<F_+*xWugoPWb3+8{L?tuWt<wHR1(F=H05NE2?^^YCf3QvtAP9s
z1`NRwQRLi(!$mH2B9GNrow`?10|D|`0LZIQ!=jo+^{8o)Z&47nSQ|VW73x^jtmZAS
zMX<H1c}sR)yF$wrbt=ylixw)hYWK2e(NeU=&Onr9i_SblBTQH6+S7K_eTF;~odt=z
zx@AQy#hJf*TJL=LfF;U`ZN0*&(OUMm^s+G0lbOhk2cfCZOC>eT@?@9Dbk6ij$t074
z?~;u1v6{ScKtX-3G%%h(JVAIdC0V==;*Wp)!92fytk0iznWU65PN>Ldd7<=$)7Dri
z#!ZGCIjoiroTcN*Fc)TnQXi7A+@V40H!4pc%_wDij1s$Lsk^1^m@f~Z*Gpc`vQ&Wv
z3}i@{lqnzY=r>Cnq*6NCKU#+*dBK&ggRu}i!6&lIC}M7!3r+q6ok9obIevjKQqBYS
z5h9+dQG9^KwfUN=KliEg0&du@BhP+`o?y#(6%!ifKH}#+q=Nkoj2>f*=1VG|wQ?q{
zzi`SKW;AlT=m0;#)PIb>!w>O8^awp@P`|)((?kN)gw|REp0ueC2@}k__u?#tOUBCU
z7bf<K_UG;g{SWox*1erga`V>p?Jvmnot-U>uN-oBw>Lkt-29jO6UM{B=oOy0py4JT
zr<{e?HbMw>Ib?h<6*-^6s}1*JA;W*f4r5L$?kF~7s8r!FSCeqaLdr%EkXlE{RH*Xs
z(v?g7@J1m7M9uau|10LkM);0Aq>sZ|x<B{7DmVoCdaKvbHCfD<&>cc%uqH`4<N^_<
zRA|58qe3#Omya`ZSQZ>%%BFU5sq13~S-Ynjo8KmEX0lhTfK4o!u3@@m=z5O!B+Et`
zvzJiZ2(k5#keBF>creMQY(P_~29r34N;ep%YA`G0WN<T!$J<Gqv4NVTf|6M*)c)W$
z8^>^M`TMtS52n?4kmQ05%8Na)xeJUby8YR{Sce^KK$CAn*K`9Xa2>pYyLbUR@N0Ta
z?EK~Y>AeoVcU~{FSKRsf9a9*}GSWXKP0tZ)5M`@(P6veWc*+RTO+sMlA~WMQA>R~n
zR#|*PXr6$gK1|ZCR6;Kj5_6s_`!SGU3alyRs?@6mP{5}O>DnmE;iMfyEEvM0X`;lU
z!B$@*Z7KJvH4pPVv!^xh(@LDMEQ2N9GLE*pXhuc{QHRcimLEaaM4r<IRoXRZ9yI5F
zT4nD#Hb$={-ZSyeL#JCu-z_GEt&;19uc&WcQC}T@%7m#E`oe$O`wU8|EOT-7v{#|h
mOxh&0TR3q(dq{IW9b7Hn$u(1^q|wWB0;df}gN7Zqi~j~D4@cSn

literal 0
HcmV?d00001

diff --git a/megatron/core/models/retro/__pycache__/decoder_attention.cpython-310.pyc b/megatron/core/models/retro/__pycache__/decoder_attention.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..34332d438eceeb9d4ee34c22a4175b6e4a3c2eb7
GIT binary patch
literal 7927
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
R5|Jj=R{wgo@h@8+{U1KZ+bsY9

literal 0
HcmV?d00001

diff --git a/megatron/core/models/retro/__pycache__/decoder_spec.cpython-310.pyc b/megatron/core/models/retro/__pycache__/decoder_spec.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..eace4ba06201ad4520dda14f3ff52888c4ed4d22
GIT binary patch
literal 5426
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

literal 0
HcmV?d00001

diff --git a/megatron/core/models/retro/__pycache__/encoder_attention.cpython-310.pyc b/megatron/core/models/retro/__pycache__/encoder_attention.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..519b9c0ac5c68b3c075f83d33dda6a336239687a
GIT binary patch
literal 7023
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

literal 0
HcmV?d00001

diff --git a/megatron/core/models/retro/__pycache__/encoder_spec.cpython-310.pyc b/megatron/core/models/retro/__pycache__/encoder_spec.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ae13bcedb617b82a1920c58118c228725a9c99fe
GIT binary patch
literal 4872
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

literal 0
HcmV?d00001

diff --git a/megatron/core/models/retro/__pycache__/model.cpython-310.pyc b/megatron/core/models/retro/__pycache__/model.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..4e65888934b2d42dd1e4c2780632fc4cf25d45db
GIT binary patch
literal 3221
zcma)8&5zSY6t~At;(RU3vMeA<JL&;8(vsX)2uh1UNM%7~rB*@6bv%>AU4Jn%0d^I7
z0f|%pgC0OVaqHjXYcK5|P+I8cdt-ao*@dc3=6Pm3@6G%8y*HC|yDbBr_=oG$AD0Z{
zCmd8C8wQ_1lV1U0#?W9UBcU0QA&IP^W#ZTh?Wi`a>AoG-qsFkI`?b)Cn!~2<*TYuS
z9=1*6hQS)ld1f$&x1U<W4r|^udab?A7hH*i-bxq``@g_mMvr9nwZK=Ib30W*5_@6K
z%<9`bmWhDgv77Oj3m*IYjwifG!qoEJsV5j`ca^6&vcjBm<Ic7g>Z8o+bFvu7Z=u7D
zp$XOzW)7_;Iry<PW^tR@&}z`?&>GMjXiaD>Xl-6&9d3_TpBrP7b=lIh?y%k@>=ZlB
z8*GI;>;!M}))@m<wa1QLwaQMys?Kx6HiliW|8&;U_G?YOu4x!mceGj*o~tyUi_k?h
zN~8*Rso)o9l1r+loR*f-AXZ$AJ)dvTM}eB^k4X%xSuieqrX`Me5Kr`19*sC-I7-HP
z;)0)mkjLr*i~>pF58E(0+AWkACxWIT@wt@1rKQC@m`q17uaX@IQlD-kXD%673xOyK
zl#MA!c%-8R>-Cn~!iy!$MqFrlpN5IQ)7RattQo}VOt}G*Stm_ofPm1WB~K|H>tW={
zo$PqAk9)wdT23u6cFI}J)@9rWzlxkKtB2l*hca6ZN|3p!Mp;%DT+Kx6>#Qjd)P^^X
zEogER$lPY;%oOdp@dEnu+Dr1J6$7@Ow3PYO_=e2QIhkAY#@v}V=dF32k?#q!zH0yy
zZ0~0fa{z|YPc-6cny`M31;oSk1pNoW2FDaWr{^hJvq8NufmrI`9}3I<5;YacY%<mU
zMRACr3c&i6ovw<B+}vM?i}#&N*NcSQq&E)~p*OF|JaV`gpQ`JR@RT2qvMmPp2;=@|
zZT8}hWq9AE>SsB)>3Y!T{S8{WsF%C(s2ZiLQc*-+MVa@CE7!kYB8Kb#Nct~J7ob}a
z_9dp-4D*wwLCV7*<`hvJhR~PMMkR_~%oaoRC<sHUYsQG@sh`9eBI7_vMWym4P+gD>
zD*=e42>?jsA0%B=NecrxP%s__P@n0;z=L`aMYA~YJ<MG?7D=S#r-DBWl9|jUErv8t
z%8G^CfZ1Xa>J|$ks5>a_-pEt_l*(Wal$87d4S76K)BB6!4(B#qKYXNYQhl~?D5p{z
zy3bO{4oDg(2!|5n_Dt!t)Tb2|)uP-%0AwXKw&0L!6zCFg{2IN6Xu?ZiIT2V_#4#kx
zNR9)^R-h;g&mCcLba$WvOk~f>n)?MjtI1i)Mb;=b?6osn@^E}uYzHNFk>Iw6b`d9F
z?v<G}UDppmVb^_Sy#0DGO(H&EfmDO3mq4{1Oae7XXL35Y9(t3zz8CTV92bINu~fT*
zTYTcdp&noS{MH~U`U5`^e4x)TIe=O!l6=rlcf~2#bq$(44aDg$nKr3g#60*pX8q0H
z%0Y4L7e;1=I14OU9ndol9%sj7ei3k!@mO*tGY6`t$2{fvc%LaB?AM^_x=o=ow^A!G
zo><JBTZ~*Xl=0MfVdmBPr3Ka5^3KB9e1k&<<U1ft6$j|~ssf3l1v6KSu1h6)n|RBa
zg`CD-gh_!aFCz1h`gC2*(vSn=?c5#&6ac^rb2W6K4`MnAlM&3pc?egeMTw>TbiKSx
z-NOsgeUPayO?bR$2UV<iC$O*5OPZl_%eqXj>>m!>*;))IGax0I@R&m)yP>xW>C+<u
zLz}IXwrR(?=(wIOFyP`tBp)H6NX{U^u!;|md<<k8nydqHx{kSQ?wzYZ;T>}8Tl(o)
z;v7mqSzEoO%yC`xyz6Ey*99a(D4^eQ-3K!-EWR{cmnFXI3dD#&kZ5#f76dS>>2L^y
zjUY%+C9PoAEi%UEVF=t>eND7A+7Jg8W8%pzAdX?1q<esH`!yltZ(@<Zh)w<^HS!0k
zleeTn-VlfU4j0qkNQ=BC?WJGI75g9H)2)tgvi7$?*;~D?I1lfvu69!>{<(^%EGV7`
zf2wWDx@AW8F(b8!+4{m<A5-1+r`+F36Sz}?tbXLBS|(bYonBm?Cv|_4D$#(?TA7Lm
d_CuLDmvXOPhFmfv)*qWJn;il_vtzDW{{p*im(>6O

literal 0
HcmV?d00001

diff --git a/megatron/core/models/retro/__pycache__/utils.cpython-310.pyc b/megatron/core/models/retro/__pycache__/utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..6e41e5704704630ebfb95541fe2c356528e3b62d
GIT binary patch
literal 750
zcmZ`$v2NQi5Tz)|RqQxPy>!)TpfSfTMNuF?vNS<~bn@b|A}!ICMd3&%wb3!ZQ6L@t
zOI$m3=+v!K?_>us3iJTp9m&JH_wMX)*k@?fx6A4mXY2=E4lTjUTRe`OVk)ZHbQhy(
zq`2lP)_k6*M5PbOG(LFgsb~0-s7xI_uxYBITQ=_hL=<)t1})fyF8oXx2tCk#1x*pr
z-`*&v))#nwpP=(>5k2y+NZ>n1AijBdVVk)r^TM|4+<6OH<@d%{rpXZxY`$-iV~fdV
zP;}Lkg|p2z4&1tsw9;20Sy<C-BS7tJ%YcUQ=cB0XQVV6A7nQUi8&MiB+Lf!sWi89w
zLe^SfD^Rmmf?tbkT}tfPoWHvk%Y7~i<Rq3>>Dq~ol300DyGgqar=|9@9VJBYRYo$2
z!U>0C4F8=4&`?nQt1IoF6rO{wr8jq)q~cI5taCfhuik&iKbb}t^(9x*OQ*e?goIK^
z5e1IOk>H&hU>44ZSlQxYu#C1dr2o#HVpb5xC!?J9L_2cCOEKI`bko6&c}Seu=+IO8
z&J_CJM$f5{tm~PFm7Xo7`}~4n2s4Rbgkju+9)^&jprQ(~^U%!(h)7p)fZ56D6lAY)
V<f~f0A!?4^GoJBLJW7xIe*vf2w449{

literal 0
HcmV?d00001

diff --git a/megatron/core/models/vision/__pycache__/__init__.cpython-310.pyc b/megatron/core/models/vision/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..5a7741784a1317f56c7e17f1531b46ec8b83ff77
GIT binary patch
literal 193
zcmYj~K?=e!5JgkzLWCZ~h5ieOxN>FP^Z+3=p&3XsB}s)I#shdIx8A~)2?+Y(zyD`u
zG2Ap8k!9~^Tk=)#uPP6x>{w@L(TQz!eTY!jKfE<8j|Q4zf>j)p$3O|w94*dH4PCFC
zL9!IIoK#2)S~I8=*zYba#&1W@!C+)<T*Qqcv4@o8DM`7XmgoAAZ?iMU@;$CHYViTl
Cf--^t

literal 0
HcmV?d00001

diff --git a/megatron/core/models/vision/__pycache__/clip_vit_model.cpython-310.pyc b/megatron/core/models/vision/__pycache__/clip_vit_model.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..b319ed0c44ba389353597e26e2339cf3358919e4
GIT binary patch
literal 5703
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
WrqaN9+n`aPt()41#u-DeefdAjLP|;i

literal 0
HcmV?d00001

diff --git a/megatron/core/models/vision/__pycache__/multimodal_projector.cpython-310.pyc b/megatron/core/models/vision/__pycache__/multimodal_projector.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..a94073017e6e21d7819ab8334527258310c903a0
GIT binary patch
literal 2460
zcmaJ@-H#hJ5VyUXWV4r~2Uk%f+F~R`FA^jm@pK>rswe{Ws;YOWQiNpft(|1=_N%tH
zAE(?4t?1MJ1*j58y!8Lzukb5R`~y5d`51eXTmn}ddE$?m@p$Gp<1M<~5J8(hyD|M4
zM!(p}YV%?8DRi|Dgd>hql;IK1$cSJ&C#jeDBj1g^w2?JOO*i(_Ru+r`H*TcuEF6Ux
zeSvtBx1J#068>Xvw84Wt)NlU^no*w^Z};YH(*?3u9b^TsQla|T^mfH0(z3{R-4d*H
z4yq*OtY(4vEBi9a)wqzEkk^ZRoJ?TxVip|<c0UmhK#gKr<f@RdJ!!QC^NHGlfj}e7
z(TH$7@;DJb_e6vHqRAVgH4dJlF?QB>Mgb3a`w1GgpCTWPLbyX{wsxyjCty>Q-j>Co
zh;<>O7Z{<CLOW-ZK1kA(YOs>(sh}c{3obZK^0Lyfr>FIhspMGDX~Mb4snU@aG|D+G
z>oc74L<6fXoSFrr6)MJVDUI?;6-@*M<3viqPc&QFO0|rVJjo{mdUpyZ%=H3KqMUO5
zsDu;8<0Ka}1rkX%jz6GdS!7f#;{@EaQi2acC-j+|s2w-5mxm)3;bF0h58eK6$ad(;
z8m;-3DppR~UI)ky-77_$j1!?K?5x`4Zkm?VU152#rOxFFa}3)`%l;0%y$GHYTQa+_
z)UntGX9MGxE>JEy&KYA7=}ImFDV?Ng*7q>s*#%5*{a_QG>5dyK;I!iobPu}v4v0pN
z(IK8;j!!X0GjE0%nGudEtX};JGVw9~7SGTj;ocFEZ)tCaXJqDc|I~8&9PJ^u+koAV
zbYn&in=^lg4_m;84+Gu=+O`OXtPW1Yg^Uh)+sb{9p1BkH;jKQFZLsI~>RKoORZ7zX
zVKH<+0W2FYOUu6Jc%`i}(q6|jYc%cO=(pUK*#H1)mI*yAxamT&PlaSfr6CcFe~?7V
zbk$K(GCO1u=cb(~CLWeTYO|$Fz*Ls8gK9hmu{_Ge@wKmWRh4BSH6+vu*5{5-ioC`|
zf5S9@QAiUo=8Rx+!`ex#ovk`0rL=)C;TibNMxA924)TKCy#Qv__SI~r{rSUKlp2oe
zH;k`DI$m*uJHz_oIW}#^;xvK^#h#<z%i*-h#E>US52q0nkbF2v^subdba*3;CVO#|
zilLq+lCv_B`q6Mv9N)XSJIv;Vau^p<3|+RX;r&E`5yLYtuqFHk<s<nTSYf+*2S~5g
z#G51}7jcLQ_W#uh%sanrc8@QgQ_Tho2gcTSi)J4W>%HsH)%!qZ=m#{zKjLr52|4j*
z9>*1y7XYT-C3HeG0G8XIcj}!0w4t#2$3NYv@^gY%$a$@?6=uEO*p)?uY{67?8;Wr}
z9qhYDV3E5k@^=KJZoX2otcq0`C{9qL=bi&l)#w~7%fqexzGpm0WYd-6UX@6p*hEI$
zghxV@c34jPL|y_H$QF>kFE7KN>8{yndUMDv(7&}lcL<YjS|yH9tD*&E?m;B^hcHn+
zAiXdk0Va(mZvO52$8Ve$t+@;&03hGy3}Yr_^CuO?9meieQ99pgF~*CSG1&z5($*v6
zLAA6O)(%1PnqBM8p&W}e1?Dq5uUIi^iG6Qv=}@l&2@pW6LkRhcc;rvwlNY4X`(yK}
z<GR)Fm@5lJ4=kbwEAPkvDvQg~+8X*ljP9#JS|pmcU(TlB5n+{1QdOt>yDw*5F=PIm
nIlq{#b&*<`4Ys?_iaX9?7kpfQ#C!tZ2}s$Bu!%eK-$m~q+q%)t

literal 0
HcmV?d00001

diff --git a/megatron/core/models/vision/__pycache__/radio.cpython-310.pyc b/megatron/core/models/vision/__pycache__/radio.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..9ca3e2885feed847a1c74041bdfed00ab9530054
GIT binary patch
literal 8812
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

literal 0
HcmV?d00001

diff --git a/megatron/core/optimizer/__pycache__/__init__.cpython-310.pyc b/megatron/core/optimizer/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..75716f36a268299272fedae07a7169cd01607d15
GIT binary patch
literal 13664
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
Z|5W?Bv7+jk5Bhb8OQPTB(#RCw`){*As}%qM

literal 0
HcmV?d00001

diff --git a/megatron/core/optimizer/__pycache__/clip_grads.cpython-310.pyc b/megatron/core/optimizer/__pycache__/clip_grads.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..481efb5746051f940f61f2acf3ec67143193ac8b
GIT binary patch
literal 6061
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
Rrj6Uq6yr>cE81%J{{`~czeNB5

literal 0
HcmV?d00001

diff --git a/megatron/core/optimizer/__pycache__/distrib_optimizer.cpython-310.pyc b/megatron/core/optimizer/__pycache__/distrib_optimizer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..6a881abaf8ae37df15b2eff208baf774d9ac7597
GIT binary patch
literal 55277
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%0D(n`bzEY?E|wlzSb9D=NW4hwq-koA~>
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
HETRAa){RTZ

literal 0
HcmV?d00001

diff --git a/megatron/core/optimizer/__pycache__/grad_scaler.cpython-310.pyc b/megatron/core/optimizer/__pycache__/grad_scaler.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..58b57f0c6bdb29261e4342e8edf04885c2bfe492
GIT binary patch
literal 5013
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
X@I4BMm=d1FH+Y>@_=dT0cWeE>ifpJ#

literal 0
HcmV?d00001

diff --git a/megatron/core/optimizer/__pycache__/optimizer.cpython-310.pyc b/megatron/core/optimizer/__pycache__/optimizer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ff55bc5d66749ef567d839da59a1e028062d11ec
GIT binary patch
literal 33077
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

literal 0
HcmV?d00001

diff --git a/megatron/core/optimizer/__pycache__/optimizer_config.cpython-310.pyc b/megatron/core/optimizer/__pycache__/optimizer_config.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..0cc3dc13e428ad9d4f84a47196621400e46e9dc2
GIT binary patch
literal 3540
zcmbtX&5zs06(=d`b0w|z%in9$-<G|SyzAC&jnq!CwcWUh1H>+h5-kR^;)tR{k@O7d
zt<>F1ZJ?K;$DZ5fluQ4TruWXRABP4g(B1;%knMY;5hc5a00|fRk-y)Yd7PQ|<_$M)
zG-?K1(Z>&lU!F0He;`@BY#?vLPuv0U49^UWk?EQyK3kzRD!7G_?b?bL!lGMb=0n4?
zz2YmwE55W|nr_J}JTcm(&!E52Hf7bLDeZ?;h_)pwyEF{xUdUwSgCq^&h=z~**l_VG
z0C^jJ;*Mn)%y3Q5aIGK1P~3uNxi%{@c*R>r6<+I>S%p<k8lV)lQp=T+R+e(5td)AM
zRFqP68>|XGYKkqnO|}fIu31a51~RttY}H)@TnBqo+c%VbIkz9v_ExSO*UCz+oY2Z@
zuAJ1$8Y(ceQ~4Ozm9pWUR%1M-*m3uaVkZ<k>24}^O0m=KS#}P_cSf;I*HN~!ik)-M
zE9NM6-o2pM1>N$ZViy%#axbZQUDE8bVwW|$qSzJ1uDVxMziZldP1)L-wH3Rr*bVo(
zVq2QsP^_caad%63>FRzRW$S6yRqUo>w%cPjVSd|+?YP@2BW@}7E$`c}40p$~Aq8*C
zWlXYBFkyT*js}50IWxUyoMQ4hgP1$<tVvhe)T1L=&6UT}3b`zef{4Jq?y-KHB_Z>W
zwdQPU_kX$mr-y%=yt*gr`z-K>DS;Mr{6N}+Wc#+X_XdFVgmO9(#7oBslbe}fB;l+d
z2pA2a`;;@1zg@OQ6yEG}>diW=DCIRD4fczK&=<aT*_u)DTr0IO7J`UA4Oxgg3oqM{
zt3ec`0S(FA>`#sVy(gP$N_oHFU(ivm%v+NEAoAk<&tQKVvNjxxlyN2k;eYyPy#9Sp
z)^I7w9!u%Af8*E3{`!~C|FbCW_;-GD^Y6bM-@hv>swGQ=tP9^Gqj<!kG#km2xHw)Q
zQXcGODJ=SYVXnn57!PSe)JhParbEVIOzCjmh`^W<xsi7w{UjstU=YUC(-VcUpPJjX
zjSM*LV{*ugIDj<f{Y9^kF^it$=4>d+{VbJ;w=*Qe9q*}ZBoIQhsW8gsj80=HtNk!Y
zlud4gu}`9GL?ByZL3HHh`X1#xm`(4!Z2}3+WC@WA2~p{*%!V-fKD6=z-Z!UlR9FJ6
zz;73R;-3Hq#xsNe5YY6@k1SDt1ZDlD`709?ORNDaXjb4Sa2HK3c}33-?L!mprLZ_E
z9a^SwVE(>*VEw^-Ryi#AhFAWhd1xQlKQMk?J1ia)4+<{~@jdWWL0`{%KY@Do1d=YT
zjvtx^{-rgqine_m&r(`{)_}2m2t8{0?M<!y474S!Eo*H6T3u@`ttFr}P*Xd<IXS;O
zWc`mENDSu%4FfMo$4)#@e7ay=j!QH7Zl?ob?&O=Wqc&kDPYWlG!m%T=B#AjBp@T{0
zV8%|~{W?7t@_Al(9&?Ns9+eMZEZ#fdy=}|25yfpqX2k?62491Qd>ufps_l_iBuuZ#
z-fqS@>>elggL8g*-|=E5qO0j_9?n+`eanF=M+I}T1P*V89$>>^jp|N*`W1a0&Youh
zRD*><40t?po^l!q*glZA_ai@u*p>tP+KJ*6%5WBW-N~aj>z&i5(KG;i%o!xNcAWho
zi&U3P1d;E&5w`h~PJZ-%mGT=ndpIkqs%(D)M~`NXX4U!Y`)aT77A8X(;T*zwOp9_5
ziG=l2c{!c0H(_eQyUAFUvu>W<f_Jb}RRn%S(~L7&Q-z5^;t9F*?g+E~KIbu<ejjEL
z79GX-3U(_hZ?cRvHNCaNS8)`1hPF%67Azd_o7mRItd><(>nZmIJaQ;^bi{<T@%D+q
zzYh(+81{y60`zdB^oBHsN%Z_6?IoEQ_8x@Pe}V^DFC7Nl!}6bwd+#$i0C*gA-h00{
z($Bqq%vmp==lqH2-JgtQgODT^DOB1ZCFEmxxp)Lnvg(#)+DCT5KC&$P%Tn1kEwf_Q
zL9dvVQVm$?sB}~>TJQvIj+$k>Hw&+0<!G|`!R$boes*+Udt>{StPr&Xgvc6!lh4aS
z2G4auo@X?~RRLBe#Ebics7T8KoQHCm5E{Y8Q6Dh^OjzMLe!0t{3I?yDfFJsN389YA
z0D#YsI1YIe`E7*nAS|P$sFHh{R2bej!pS#KJBDx^;RM1d09gp4l%GZl|4$fv6X7g^
z%1Q^HFg5uFgo_B55H2HJLAZ)=4WW&29RWT#48DbM4*^qS0q!C#0^mHw?*M9sZDB-O
z5WAMG@9<oQXVfvKXjAtEyK0YiY^Uw&UeX%s5ZRfJI_it<Dw^weyk@i17~5sJl>ZOJ
w1XmwTB`D`m!KU-X$W6n6b6S|Enl?^WR^FPX$6Y)s1V*-QwakiT71quF0b#@H<^TWy

literal 0
HcmV?d00001

diff --git a/megatron/core/optimizer/clip_grads.py b/megatron/core/optimizer/clip_grads.py
index 0f33f919b..f5cb2c49d 100644
--- a/megatron/core/optimizer/clip_grads.py
+++ b/megatron/core/optimizer/clip_grads.py
@@ -87,7 +87,7 @@ def get_grad_norm_fp32(
     # Calculate norm.
     if norm_type == inf:
         total_norm = max(grad.abs().max() for grad in grads_for_norm)
-        total_norm_cuda = torch.tensor([float(total_norm)], dtype=torch.float, device='cuda')
+        total_norm_cuda = torch.tensor([float(total_norm)], dtype=torch.float, device='musa')
         # Take max across all data-parallel GPUs if using FSDP and then all model-parallel GPUs.
         if data_parallel_group:
             torch.distributed.all_reduce(
@@ -100,7 +100,7 @@ def get_grad_norm_fp32(
 
     else:
         if norm_type == 2.0:
-            dummy_overflow_buf = torch.tensor([0], dtype=torch.int, device='cuda')
+            dummy_overflow_buf = torch.tensor([0], dtype=torch.int, device='musa')
             # Use apex's multi-tensor applier for efficiency reasons.
             # Multi-tensor applier takes a function and a list of list
             # and performs the operation on that list all in one kernel.
@@ -112,7 +112,7 @@ def get_grad_norm_fp32(
                     False,  # no per-parameter norm
                 )
             else:
-                grad_norm = torch.tensor([0], dtype=torch.float, device='cuda')
+                grad_norm = torch.tensor([0], dtype=torch.float, device='musa')
             # Since we will be summing across data parallel groups,
             # we need the pow(norm-type).
             total_norm = grad_norm**norm_type
@@ -171,7 +171,7 @@ def clip_grad_by_total_norm_fp32(
     # Scale.
     clip_coeff = max_norm / (total_norm + 1.0e-6)
     if clip_coeff < 1.0:
-        dummy_overflow_buf = torch.tensor([0], dtype=torch.int, device='cuda')
+        dummy_overflow_buf = torch.tensor([0], dtype=torch.int, device='musa')
         multi_tensor_applier(
             multi_tensor_scale_impl, dummy_overflow_buf, [grads, grads], clip_coeff
         )
@@ -203,7 +203,7 @@ def count_zeros_fp32(
     #   - grad should not be none
     #   - parameter should not be shared
     #   - should not be a replica due to tensor model parallelism
-    total_num_zeros = torch.tensor([0.0], dtype=torch.float, device='cuda')
+    total_num_zeros = torch.tensor([0.0], dtype=torch.float, device='musa')
     data_parallel_group = None
     for param in parameters:
         grad_attr = "decoupled_grad" if use_decoupled_grad else "grad"
diff --git a/megatron/core/optimizer/cpu_offloading/__pycache__/__init__.cpython-310.pyc b/megatron/core/optimizer/cpu_offloading/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..d264457a6962ea9a2cb692f6304c204704d2efff
GIT binary patch
literal 266
zcmYjLF-`+95VS885mKaUc*GU3A3zZWic*kJq@%IS**ULd-&$*5q~k9<fG=H3#TTgX
zMFBC=&hE@gyF;thwJ31!8<$G|oW*}sMLd*Bbs-~+^diU?DTS#HqFH>&VmETS*^aM_
z=Fy(8wa+nQz&FeLrkZMZ-YEJtc|Q3e_^PxseG@ne77V5gP7~`MI?ND<<Y41<cWAY@
zkR7s7QF9()XFHvl`rD@+gv$&qv4y`k(8fX0@#sk#>^o2jd(2AR#c^8R2Qq`V>p6Xz
H^VISOFO^ID

literal 0
HcmV?d00001

diff --git a/megatron/core/optimizer/cpu_offloading/__pycache__/hybrid_optimizer.cpython-310.pyc b/megatron/core/optimizer/cpu_offloading/__pycache__/hybrid_optimizer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..0aec8d9434448edda7d213a90d8eeeec1c511c06
GIT binary patch
literal 13962
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

literal 0
HcmV?d00001

diff --git a/megatron/core/pipeline_parallel/__pycache__/__init__.cpython-310.pyc b/megatron/core/pipeline_parallel/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..2933cd8be90a204fd2346e278168834223e41d7c
GIT binary patch
literal 256
zcmYjLJ8l9o5VaSI1PO_jBW#h(1rVa50vftB)?g273$Jb2ULg*{0l3n(sd9x>*eFFt
zn)exvo}Qo2XRM6AZ*?gAUCsY#irJJ+ivo%%ZduR2IA^LkvUc*r%em#_vZE}{K3*{@
zaYA`{iSyv(p>4+ZBsHnQQi?V2!Q!;g3w||d-xDa4GHCP>9dsr`7?Osq#qKE45@c;k
zaKM;vu%`}l^zLJ~hyG84^pPN#K-M^_k7zAf5W+Z<h4>7&@om-nT4G&0r&?sep9kMZ
A;{X5v

literal 0
HcmV?d00001

diff --git a/megatron/core/pipeline_parallel/__pycache__/p2p_communication.cpython-310.pyc b/megatron/core/pipeline_parallel/__pycache__/p2p_communication.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ce08219aee3f9bd484f49c29a26b6ac2e218c85f
GIT binary patch
literal 12823
zcmcIqTaX;rS?=!X?&+DGnH}v)dy_BiyT)4W`i4!6qJr2FgtBF0$rm;;li4}FyR({`
zPWNc7rH3S55!-;`BtS^0K&=8V$`g+iFX53FD0rf(i#MvMa#bEEoGN@tV!r=B-94AR
zShmIN_UZ0({&UWM&VT<;cZ$WlhF|+{&TjnkE1LG7^fLUL#>=nc@>dK^6PnPQT1#Ki
zTgHmf%B*Bs=8CCPz0tH*EZj3qyOmwZa-G?9TDg@RKU>XwYhq=hRahysiYvudX{FSf
zT$$80&-8S!Jg<4y=8-jHUR#+Gw#Z)9R;GpH8K^xvuZdjxluw@~(x(ETj&06}qE{9r
zue??glcIdpT$%k0BODP^7-3FKi=#i(#bDL}PRG1?F@tN?n-X(gPR!$Z!OIZFbkSPY
z%Hp`V?W(=9kU}kRn=Nh^cVPVEd+P5LF6wU+cM%+qyC94;Tih+~LH+IG-m&`o#Qmth
zBZg0KQL{MW0dWGYcgDTOTPxy0w7R*I;?cN2tto+8<n_=>3gVPlx@xW5#gGbv;gt_V
zE{lf%d3QXXf*s!}g<VNJEFQu9_Xy*>R(b3l;<}0%na?!*Aab7T28~X;){LwRy>8Qs
ztQXsOKUdKsv)+*&?$gh9gx7q&CTq>6*L<qeUTdsZtmv+FFQ|4KU9Z__d({@fRJ$=y
zbzOFP-RQo<K-%7GK~>h;7Y_&PO7F4)a}OJh2fF_-h^>xnimKn(_UaaGLHwJ-J&Wrp
zT>d}mkUhO`;j(dMaXFzOX98_g7Y0gWH*;OX-4vN?nZ6Zf<h=*9*`Y4<o-Q9pyA|rY
zHuoFtpA9h^V1A2Xw0&Wm(A><*R{-H`=E7`fg-&P(`5jG|*DPIYH`ld3>Uo?tLG4a3
zY$41B#U1T>rk@XUyQMIHUDve`E5m%R55Y}_Rtz`6a1#vYFx>Zs;0mD=lzF@Y!xb0~
zyM*z6JOnoh>=ay);fe$o90_wfy09*q@+S;C73Qw%{Zd$ZT6@**Pll7b)7Ld!yY%;H
zHFl5E^SUPNAL;#ajPt*S*6y+ETE86E9|_gm{}I|;e<Uo2&}-oEZ0%p5LZ9liTD^9o
zUJE=o@Y;Syy8cG3>-p}g7i@W6+x3Imy5}#sFZ!NvgN|Dt^vJvTjrUrEIJm)v=ho^$
zuhvZ32i+hyE~e;Wwk00n!bZb)@h`ngy@tdrTN{{{hVW72wd<bS^xEsehL162$M@Y<
z19x||7SuO9pU0?S(sn0su@)fETFP_nZ^(83Nq!n&TJ^oQsFGMcnc#+1Q6;U8>Rpl&
z_e8ssw4*U_8*Ax6G}!3R_X6sDuG97^YEjg#wnj}z0=nOXRDa7RlwSRERn4^8=`_7s
z+r@6sequLex}1$puPH!a?0DU4T*i*C$xds(<<VG;P7k!fmJAlg^QbMnHS?s~uI6~b
z3wp9WM7k5{%Bswsi-h`RrlP8-F!tx($v{6<jK~(iyACxif-7AQYPdX3i?k*kIju<<
zB&|s&i!4^z5(-eOWcW5HDl?H4bYy)avb<I|xB}DA6Sb&R?@0*`swOx!+QH+GMYh5y
zGD+7)$9le3m5ug#)qAbJQERVz)$SwRXhOjH$i`|f@I+J`X_pRgh^*%ydH%U>WHktB
zNxoBLvup{}5!y0Gbr}dybc6+_%Ai$ljLfZCBZwyaEA9G*?6e6JJLohqX=O^1&X;BC
zo*QhEdL(*9cAbq}G?TU}T2$kesd@q(tLF_S*4nRrFMOuc^`pX|Q>Pmh22;{oO0jC%
z#>3#vgjVsR49aM7(21ESt{6;sLzBOX<$iE!d85<vmTB*oH)<X5{_=VwSnl@xjpeh=
z+WPr=t?4ZX8x1MQmIqgspY_&j0XFc|GtVx!;^$>@43<;VpBVjR(6u_E4VSuCqUoV3
zPi>2T47m7zgu<LQ_2jRl+aH-3Q>VLw`_$0gHf`OA|4iNa&~zN##-BmGf04It{;i-F
zbVtwYdDAf*JSC-k66i2b$RqT`EJ8lHJc=TkVxp!?W^ZGP_jjbO4p{z?M^VIO<6_U^
zpYQ-nO%`8+#bl3Smplr6GZVrthvsz?zD9P}3>~(tI>S9k5HTFQh!_s`9&oUru;>QE
zof(45ghpudczK3XmOsOAFATxKdx_yD7>+G}V24>)Y8{sPs|=eBv#`{KuyCI6=X=FC
zr}Ts)iIVbmD(<AhrQ$9s?xx}%D(*#5DIU1B^4AFHG!@HKJVeFAR6Ih(qf|Ub1u?KH
zK8L5MTvb*Qj0(1cAZ?-6CrC3->`>6nkMfzrpNJX2avzzx{5(32P_Kjv@)MbQuRtv}
zh<cz=puzXjFB)<-(8(XfPQy36m{ISW=BCxpwGBY#0-GRb5UT-tEvD4N)N3=#G;-j>
zk$(m{3G1{5kCAxe3k=~fwR6G-#6$=Ri7X%#_neQ%Aihy!fG&V=0HNqC;xUNAYK&r7
z1Vj!H+4IRvTSGHBV>2nfdNZDhI4U=Wt(xfvLo=x{1~Vyae;kiN*s3uG*aDYI{@gq8
z*PzOK^?G7|7PvydM6mefQauRUq}qI0=QeqQKotN9sjT3=l9L782J9J4P-w7Pt6wB*
z!ed%5Klj2jPs<5{bEzPft(0ztQHjf<Iq$O9RxVISh$^dK751nWuAmmiU9}X`bpZYn
z>|Wy5s8?=fO*3d^C4<*-{&y0-|0^Kluc9#Xrk*#-dLd^TB`7yikfcf-<FF@l!FlJf
z_Caq*$upSd0z$$9S=VZ(O=$Z}0p9kgkT@gcY0C!zEuTdZ*^>R95dk}n1~TgzT>cU`
zAPKnM)HXH05Snj6h~CoM`9KfBun?Hco7#@`72_@AE&UDc4P(s^hR9rX`Z>Jmcr%5C
zw>$#2&tVJ$p$T+KkP-Hd{<<ET{Qd;qq2TbIgE(j8xfJqgv^YbM&)^+F3n24-2T-Pb
zMdZcARgJ{4UuYLlXUWyj_N%|Gy{-o~>Wm=UF9gnx)-MJ*lqCw(`jf##SPTj~hW}Pr
zT-VVy5tis(hSW1Gp{|6wNv``Q*G-~sl4kYa=6Svg<y&qWP(lcR`bTh01te&taB?Su
zAnMFlGX3fP(f%<AIfZ0@2Q{wsXTl>0{btBew6Py}SApG6Lc(!2oI>kt+Byp*qK7ls
z?b&cTJQf}mg=^XV959<>%>F$r?@oqu1b^wT@mx-yZTUVzyfO?&5r*S^^eA(WpN8dj
z29Q(NH4gOV!}&PS`)^=Vrj>nLmp1N4=^h}tv^z_|pFnB}JG~GtghzG=?}cy*_gP>!
z8<y8HP#fjicg+35yaNKfn(uCSO>m{#Ld?(+ZlmpXD0pE1dc<vsA$&w?wZNqS3_dJ(
zNIf7Q@tNo~5k7XW+*C;Bo?r)h=>mtMi*6@QyHo~I9O5chHB-bzy5QsDHWiksh>&_G
z(ub}bEPd)pNe3MiyNyqp>M-|295PW1qXOQs)!kgU=F;p#u~{0v@l2!-Z`n*dn2G??
zS&~g873Q9xB-xh{*SzW?+*Bkyk6_}!C9?nRcGi-R6qE$o6pMlwln#iwujc!`7LpN)
z#hT4@`T-q%;sNj<_#hsFd9ddCh^CsJyVh&hDR<|>X>Ssnj*dZDhFS{+Ed;T9+B&Se
zhjudI$VFFpYqef8`25*g)Az<mcoy5xMmP{VUoM=lp~MNWS#)W97if94`UZ1?=LhNJ
zw7gZ1Qz^<OU@b9jdt&2&5|S9b9n>0azzvpgDq;1M`H+F205z5`<TPl{RLX!dFc)MG
zG@~qr68bH~ii4<sbU0#)1BPRMIdC{$<hj(y!LIR-VgQOH-X+I{eCjvhU*pcXKvMC-
zxMrT$Ze-3~sAR||VA=7JL#+u(Zm66@al=yH%nVh`QZa`jDy8uUCj{6_s2IxhK2A{V
zHnYb(TbCZPVQ~<v92OF_yW!lvOYV}%5tf6P%KrKGso}V7>2$LLF7wYU9Wcg$i<Zw5
z62C*m`2?K=zbBFkc_4nY;ST~o`4V710Z!C!`?1lzaa%n<pyW_jb}lyrY4m-#WP58w
z0VI9=u2*lYH4f;s<UWPuA$WeIFBs(n5`9&b<6Bh8Jr%Za9(vK;Xb3@0Bs5B8`y^BF
zU@V83@20UF?sO}#93eCaqrnDiU&iGVV-k0h<JCZ<^0)f8bjsqwR3ly_HiYj!h!^jm
z3O%wfZq<;>9QST##!^OGl5#)tOPJB88K=Oc+l%|N=>A<R*_-j~X+?D^l3%h!VqX8N
zC;}{v17t%wbf6NyQ;0W3>HK*tIMCS_1?1C!-O=Uk3~5lPFLVT2283P@j7>{quNk|x
z>bHqN8=K|Sh~YVPyjt^-z-~6LAg$aM@HSl1^proY*ZjnIY<aHt8n~15w7%ypxnFFk
zq$uDh;l*liG1b6O;Emt`3>Djv0Bj4>L{1K6wRz-4YO8y0tAp-jAAKlvpt0&TJMDFH
zOGuL@;^lI1QyG~8!I8WIg9m7(=SgyWg$kL{1KKImO<H=9%^vK?2K+Wm2dRa<Y<VJG
zM$kb-2ls7>L&kIO?4caRlo_HLU8F0&0eZZe?du$7YcJ7p1A<)axE`~o5gAJlMaFBd
zjdNq}^tuN@>dG_U$281<#@A=G?b8P^prTfyXo&^`1)2^8=Ff;m3(D~KfE?@iio+?B
zC<8LHs6-YHDe4!a3>F_{*P5ML@aQ9v0aHgN0VC*paGkF1o&9aXnk-4dGCBW6;&Z>g
zUAbxeD|6A&%Qe}ktu~RwOLdyB(q<PhbX0hu*A5yj?~77)q`Zx)N-8g#<OMm&!Z9SL
zcsYTqGQ0T(_zg=1&qXHfSCrXqbUBk0*-+(hXd}DV6)<0FhwRI>X3z8GePh#5zE>$3
zHj($ExpI7v?;V7y@*J9mBGhBC=1#qaD!EtDNHytFu9h!S=a;GYT@;Z+D`a@5+l|jY
za}3Ri!kh}}Ax50Z8Xc6|c*%R`qH2|_FxoOQx>DsP$(c}da`^o#goj5(tYkUvX5-2p
z02|lBFsXkEVE>0G%#*P71}@z&^1Aa;$t*dhgD3n^z7?r4)1;Q6cbgIl$j4HG!8GhF
zB@gnrkhkTlfOLb2F-?7jlMqO;8I(kzJAOQFQrhq5b4bD&Wn%$jn0nbj%Fb|#$j}<{
z_km!Yq&WGJ;-|BLr*QcK1t%zt>zd3VnlwUa;}Gdoj(=zQ3Hbpet&ClhV#)xApZK!`
z^euEi_L_~D+308bnY7nKIH=7C<2oPLQgW5_@%E(`Vh>*N2%jm91}PLwrrPiXyjvKx
z)N4<C@AIDL4pV_ouweWU2f)o29=zOUd~kSfyATg@iWpL!!D4UdQLfophc|KAYhE~e
z!#<p?Z)7Doo^TM8GkM5Y;6<|ye{gEQ){s8VFz6r@$0HD4>9fj_0q;JJaDq;^Vh)5Q
zDm2>NUXUDw=+$vmsm?EA<bOnZ#|0L78~jkp|7>c6`i5TkAn%kwclic@{@-cM)czP+
zxA&tpJ5eOcqjaWp;%6pwF&Sk*X&GWS&R&pzfLlyP`E@);GsCoN))Lam*U>0<s34h<
zS5b@*ZK~4?22@jl#Wx9(g99#DNvM2eg3v#t)PvPHlzM-Rv7+M0BqPKmAx;ICtX(3w
z{>hXa)B6c5yGs^CmW;N2&4x%O0)A>#R0Uk8<f>%1z4M$tQRn{f9}b{kBB_*Y`D|iJ
zBe0k%;xX;yn^-FB`=8*ZOwHJStK+>GiGQQ*z5}3nJCDP!L`AB*4MBm?{+T%;uK^@F
zGAxEn&|9<N*k}#g{mD0cb8N%Otfe`e1H|T2@A^Py_TBccscrw(LEEmf@Clp$SGw=k
zq5J+ehO3i9nf&N<DCO!s<|q>)Ng2ZBkIfN1jhUmEyYZzE&W4mZGGUI)wAVu+as)%>
zh|-?U_Uae-^AMp@gmHT4vbzPZe}6uY^DCdo{wyT+hjtj*9;NB_*HMbkEyd>pzlsic
z<$h{rfyS)H6R12yGQkHR#=9;$=CdE8bG{9rTT70Z_lL;=Vtgz))(#=Zfl~0PNRn*Q
zDW*w6pwvNN&2!<bQavmKmSh<ikmL^!CrL7aqDef#G_<$;4t4x4inCF<gV3&7>+<;%
z<;_Pvrz3%&4>Q<DTg5||*@R-oiA0H?5)shZBQr<@pxP~*?wAESytJ=n;gwl^n@(rq
zo|Q1Oiw|GnmEq$%m;h5Q<0vspAA5xsL?XNGCp4hV*v~&BDWP4XSaM%m@M#D#pOD}X
zdYpv;pTah%<iiPiq613hQPJ5L8-^R^zBb%ZBE`K1MEq0gl~OW3i;EKk;}(5>uc*aH
zFM_N}(k4cY4P^lf@XN_Bqg<f;3(WUfXsqOlPw+k&jqxc0)7U<U#sf+Y)AyDN-SI>w
zl+dMbqf&QP{uvSF&ru+TXQ3NVnZq$A8Y@Fqi{B&gF>l~F(<+%^R4;ysgz)>+=?5t4
zHj3m&(w3T`m+%r=sl?IK9*I+DsiBDvD=m(JAZz&aB<b})XpKl)OofWQ-A$y7C27>~
zq?=CFDP8dO;~+5lG$M8~5wT=jMs;6WJ4z0v0+|{)B|=P+G3jHvupAv|sZNfFPcqwx
zdgPA^C<<5uiF``&=L@3(m4rEtF8>nE75!}GUPN10x=4;mbkZbw6_TP`Nj`<j{5Z*3
zqYC4S$?Fn*d?o4oqUg4fx~0)TZ!E>4zH^`~f0V&-R%FsCR%D&$gZd|_+P=WvGJnkz
z6`q%!y65}9N#Ah~@-~r4M|>*EppZ?H=g%IgB=<;?QD!s2N`rZo*F41PgJ{D!jgQ80
zhI$4zU-SP5#T*g^1*4$frcdRZjIrt%#xHUIg<~2&cP!&W+crKhvc~&{lYh^+|IpT#
z?e~&)1HBFOHqze4d!=0df3>g8Jux>oH#>LCI0~ir5j<_akns4WF~6tg4)a5<15O5T
cN=7y9{0GL}hqT>Jy^#7C=|#Ah+0y&}2clzc=>Px#

literal 0
HcmV?d00001

diff --git a/megatron/core/pipeline_parallel/__pycache__/schedules.cpython-310.pyc b/megatron/core/pipeline_parallel/__pycache__/schedules.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..040ebea9bef23300eb91b4063d07dd34898b9761
GIT binary patch
literal 36421
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
VdHzto7ykwP51JEizlGA5{~v{L8eRYZ

literal 0
HcmV?d00001

diff --git a/megatron/core/process_groups_config.py b/megatron/core/process_groups_config.py
new file mode 100644
index 000000000..da39a27c3
--- /dev/null
+++ b/megatron/core/process_groups_config.py
@@ -0,0 +1,178 @@
+# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.
+
+"""Dataclasses for organizing model parallelism and gradient communication process groups."""
+
+from dataclasses import dataclass, field, fields
+from typing import List, Optional
+
+import torch
+
+from megatron.core import parallel_state
+
+
+@dataclass
+class ModelCommProcessGroups:
+    """Process groups for transformer model parallelism.
+
+    Fields use init=False and must be set after instance creation.
+
+    Args:
+        tp: Tensor parallel process group
+        pp: Pipeline parallel process group
+        mp: Model parallel group (tensor + pipeline)
+        embd: Embedding process group
+        pos_embd: Position embedding process group
+        cp: Context parallel process group
+        tp_cp: Tensor and context parallel group
+        hcp: Hierarchical context parallel groups
+        ep: Expert model parallel group
+        expt_tp: Expert tensor parallel group
+        tp_ep: Tensor and expert parallel group
+        tp_ep_pp: Tensor, expert, and pipeline parallel group
+        expt_dp: Expert data parallel group
+    Example:
+        # Create instance and set needed process groups
+        model_pgs = ModelCommProcessGroups()
+        model_pgs.tp = tp_group
+        model_pgs.pp = pp_group
+
+        # Pass to model components
+        model = TransformerModel(..., process_groups=model_pgs)
+    """
+
+    # _TENSOR_MODEL_PARALLEL_GROUP
+    tp: torch.distributed.ProcessGroup = field(init=False)
+
+    # _PIPELINE_MODEL_PARALLEL_GROUP
+    pp: torch.distributed.ProcessGroup = field(init=False)
+
+    # _MODEL_PARALLEL_GROUP
+    mp: torch.distributed.ProcessGroup = field(init=False)
+
+    # _EMBEDDING_GROUP
+    embd: torch.distributed.ProcessGroup = field(init=False)
+
+    # _POSITION_EMBEDDING_GROUP
+    pos_embd: torch.distributed.ProcessGroup = field(init=False)
+
+    # _CONTEXT_PARALLEL_GROUP
+    cp: torch.distributed.ProcessGroup = field(init=False)
+
+    # _TENSOR_AND_CONTEXT_PARALLEL_GROUP
+    tp_cp: torch.distributed.ProcessGroup = field(init=False)
+
+    # _HIERARCHICAL_CONTEXT_PARALLEL_GROUPS
+    hcp: List[torch.distributed.ProcessGroup] = field(init=False)
+
+    # _EXPERT_MODEL_PARALLEL_GROUP
+    ep: torch.distributed.ProcessGroup = field(init=False)
+
+    # _EXPERT_TENSOR_PARALLEL_GROUP
+    expt_tp: torch.distributed.ProcessGroup = field(init=False)
+
+    # _EXPERT_TENSOR_AND_MODEL_PARALLEL_GROUP
+    tp_ep: torch.distributed.ProcessGroup = field(init=False)
+
+    # _EXPERT_TENSOR_MODEL_PIPELINE_PARALLEL_GROUP
+    tp_ep_pp: torch.distributed.ProcessGroup = field(init=False)
+
+    # MoE layers need expt_dp group for sharded state dict
+    # we need this workaround until distributed checkpoint is refactored
+    # to have sharded_state_dict can take the PG and pass it down
+    # TODO (Hepteract): remove this once distributed checkpoint is refactored
+    # _EXPERT_DATA_PARALLEL_GROUP
+    expt_dp: torch.distributed.ProcessGroup = field(init=False)
+
+    def __init__(self, **kwargs):
+        for key in kwargs:
+            if key in [field.name for field in fields(self)]:
+                setattr(self, key, kwargs[key])
+            else:
+                raise ValueError(f"Unknown attribute: {key}")
+
+    @classmethod
+    def use_mpu_process_groups(cls, required_pgs: Optional[List[str]] = None):
+        """
+        Use the default process groups from parallel_state.
+
+        Args:
+            required_pgs (List[str], optional): List of process group names to initialize.
+                If None, pull all default process groups. Each string should correspond to
+                one of the dataclass process group attributes.
+        """
+        # Get all available process groups
+        all_pgs = {field.name for field in fields(cls)}
+
+        # If no specific process groups requested, use all
+        if required_pgs is None:
+            required_pgs = list(all_pgs)
+
+        # Validate requested process groups
+        invalid_pgs = [pg for pg in required_pgs if pg not in all_pgs]
+        if invalid_pgs:
+            raise ValueError(f"Invalid process groups requested: {invalid_pgs}")
+
+        # Mapping of attribute names to their initialization functions
+        pg_to_func = {
+            'tp': parallel_state.get_tensor_model_parallel_group,
+            'pp': parallel_state.get_pipeline_model_parallel_group,
+            'mp': parallel_state.get_model_parallel_group,
+            'cp': parallel_state.get_context_parallel_group,
+            'tp_cp': parallel_state.get_tensor_and_context_parallel_group,
+            'hcp': parallel_state.get_hierarchical_context_parallel_groups,
+            'ep': parallel_state.get_expert_model_parallel_group,
+            'expt_tp': parallel_state.get_expert_tensor_parallel_group,
+            'tp_ep': parallel_state.get_expert_tensor_and_model_parallel_group,
+            'tp_ep_pp': parallel_state.get_expert_tensor_model_pipeline_parallel_group,
+            'embd': parallel_state.get_embedding_group,
+            'pos_embd': parallel_state.get_position_embedding_group,
+            # TODO (Hepteract): remove this once distributed checkpoint is refactored
+            'expt_dp': parallel_state.get_expert_data_parallel_group,
+        }
+
+        # Build initialization dict by calling appropriate parallel_state get_foo_group
+        init_dict = {pg: pg_to_func[pg](False) for pg in required_pgs}
+
+        return cls(**init_dict)
+
+
+@dataclass
+class GradCommProcessGroups:
+    """Process groups for gradient communication in distributed training.
+
+    Fields use init=False and must be set after instance creation.
+
+    Args:
+        dp: Data parallel process group
+        dp_cp: Data and context parallel group
+        expt_dp: Expert data parallel group
+        intra_dp_cp: Intra partial data parallel group
+        intra_expt_dp: Intra partial expert data parallel group
+        inter_dist_opt: Inter distributed optimizer instance group
+
+    Example:
+        # Create instance and set needed process groups
+        grad_pgs = GradCommProcessGroups()
+        grad_pgs.dp = dp_group
+
+        # Pass to distributed data parallel wrapper
+        ddp_model = DistributedDataParallel(..., process_groups=grad_pgs)
+    """
+
+    # _DATA_PARALLEL_GROUP
+    dp: torch.distributed.ProcessGroup = field(init=False)
+
+    # _DATA_PARALLEL_GROUP_WITH_CP
+    dp_cp: torch.distributed.ProcessGroup = field(init=False)
+
+    # _EXPERT_DATA_PARALLEL_GROUP
+    expt_dp: torch.distributed.ProcessGroup = field(init=False)
+
+    # _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP
+    intra_dp_cp: torch.distributed.ProcessGroup = field(init=False)
+
+    # _INTRA_EXPERT_DATA_PARALLEL_GROUP
+    intra_expt_dp: torch.distributed.ProcessGroup = field(init=False)
+
+    # _INTER_DISTRIBUTED_OPTIMIZER_INSTANCE_GROUP
+    inter_dist_opt: torch.distributed.ProcessGroup = field(init=False)
diff --git a/megatron/core/tensor_parallel/__pycache__/__init__.cpython-310.pyc b/megatron/core/tensor_parallel/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..2331b6cc49fd1229d305ccc536ed8f006caedb80
GIT binary patch
literal 1728
zcma)6O>Y}F5Z$$`56hDLCChd!+p(=QQGsURoN_3N0!4F5il6~{;Dw-f>D`4n%Pq-G
zqQBFga__I<wWs`roXVkBwk)J>1?Yi0e4Kf2mOHZF?*{Hy{P`+-yA}k0<HO=_#XbD!
z{`xNmNsxphfRKbCu2;kgG)Tj*8)6ljqzNt3f;MSGhjd_#tU;G_VV$f)kMulmRrFy%
z2CzXkV3TaZ7TJPrvJE?A2Zm$_yJQzeWCVL;5BAAE9FPNlt|=bDAvuIG8N(4df@5+F
zC*;KMwZvmMC8uyk&fuJ!hd~-7?LR^?NjmR>>DuSeNuP#x{9eZFl9o&{A-JHil3G(<
z7$wV@+aFvi$&#39Llb7$v}1=qNl`)Zwm$JXFE~?n>sR?<DKz>GQ_q7x!zE9Wyh!bn
z*rle17g{O`GI3RJ%QItCepwl=?S=4}>4)58G*v92ERHLv1T(oTC@Wk*&x)8j;fg0!
z%<VUr2WYNoA<ewPZSJHhMIJN5?Muy_9e%|sVKmLJJRM{IDQfb6Sks=3oG6+ylW|3b
zZ(a`cN=cZPxK*Wi>g?Dq9xxKk*v-2&&B_<Lycf~si>$Phn<mP6zNJ3aStqpwUs?0t
zD_+F>uG=;1*&^%fEtoTJ8hy{n*DGJtOzj$O7MtKa)+Lr(@a@tO$NX2x=kvS|k)AG)
z9<nuU+HRcj__~yNVeBw<HzBSPMpcngqgZ^+l|92KegX^ayW6G(18yhC;U7z`%mb{G
zrH=Vhz>10qXP76`h8@*!M7tYn=tWYu%pTqZYBNkor(k})?CHHt=S1R3_tIV7IID_l
zJ>6G0x>N&U6`_gHLRd$@v8UPyZtMlBgRqIPjj)BVgRqORhcH6eM>s$jBOD?eBb*={
zIrwGz#P;va7O%vvVn@9m+Y)TXm0s56)p#LZl2?dYZ3kFcx_P2i53BSM1_&DnUbPqO
zrF+#w-0;%9YSeFA$_)|;3l<(B%UeJ*wpp26Xm8@qlWkM{QYrlusHezB_;M9x5_pv4
z+C&+XE_0OTCMqkPMXv-)-^EPu$Yi-n@Oqe8^oF|^tz_}t>o*b9>nN7Wv2MoW{2PfV
l%?o!G=<{-BJKwt-R0;kA&Tx&Mdtonp7QXC`2g7!+^$!PvF`fVb

literal 0
HcmV?d00001

diff --git a/megatron/core/tensor_parallel/__pycache__/cross_entropy.cpython-310.pyc b/megatron/core/tensor_parallel/__pycache__/cross_entropy.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..b3a52a2e781f6632f75793d2aaaa4c8057d80ccc
GIT binary patch
literal 5655
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

literal 0
HcmV?d00001

diff --git a/megatron/core/tensor_parallel/__pycache__/data.cpython-310.pyc b/megatron/core/tensor_parallel/__pycache__/data.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..afda4d24ccfac72ddb444edae08892d26f549fb6
GIT binary patch
literal 2785
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

literal 0
HcmV?d00001

diff --git a/megatron/core/tensor_parallel/__pycache__/layers.cpython-310.pyc b/megatron/core/tensor_parallel/__pycache__/layers.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..5368b22d5cac13f368fc78da354e4b61d8ae95ad
GIT binary patch
literal 30367
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

literal 0
HcmV?d00001

diff --git a/megatron/core/tensor_parallel/__pycache__/mappings.cpython-310.pyc b/megatron/core/tensor_parallel/__pycache__/mappings.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..9e8c00dfa34ed4edfa72673c3d7f766f14594f95
GIT binary patch
literal 15022
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

literal 0
HcmV?d00001

diff --git a/megatron/core/tensor_parallel/__pycache__/random.cpython-310.pyc b/megatron/core/tensor_parallel/__pycache__/random.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..8ae49e48f0c9eeb6d284b591c3d6d75be6dd305e
GIT binary patch
literal 13114
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
X_&H9;7-sRa;%ifOac=fp>GuBtCyCc7

literal 0
HcmV?d00001

diff --git a/megatron/core/tensor_parallel/__pycache__/utils.cpython-310.pyc b/megatron/core/tensor_parallel/__pycache__/utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..8a4ef6c38ea2bbf19f60514acb07499e519fc918
GIT binary patch
literal 3921
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
R{ekww>WkV<|DERg{{ZKqQ+faZ

literal 0
HcmV?d00001

diff --git a/megatron/core/tensor_parallel/cross_entropy.py b/megatron/core/tensor_parallel/cross_entropy.py
index 27c8f0634..bd5890838 100644
--- a/megatron/core/tensor_parallel/cross_entropy.py
+++ b/megatron/core/tensor_parallel/cross_entropy.py
@@ -59,6 +59,7 @@ class VocabParallelCrossEntropy:
         predicted_logits_1d = logits_2d[arange_1d, masked_target_1d]
         predicted_logits_1d = predicted_logits_1d.clone().contiguous()
         predicted_logits = predicted_logits_1d.view_as(target)
+        # print(f'target_mask is {target_mask.shape}, {target_mask.dtype}, predicted_logits is {predicted_logits.shape}, {predicted_logits.dtype}')
         predicted_logits[target_mask] = 0.0
 
         exp_logits = vocab_parallel_logits
diff --git a/megatron/core/tensor_parallel/mappings.py b/megatron/core/tensor_parallel/mappings.py
index cdd720687..66bf20839 100644
--- a/megatron/core/tensor_parallel/mappings.py
+++ b/megatron/core/tensor_parallel/mappings.py
@@ -439,6 +439,10 @@ class _AllToAll(torch.autograd.Function):
                 dtype=input.dtype,
                 device=torch.cuda.current_device(),
             )
+        # print(f'output_split_sizes is {output_split_sizes}')
+        # print(f'input_split_sizes is {input_split_sizes}')
+        # print(f'output is {output.shape}')
+        # print(f'input is {input.shape}')
         torch.distributed.all_to_all_single(
             output,
             input,
diff --git a/megatron/core/transformer/__pycache__/__init__.cpython-310.pyc b/megatron/core/transformer/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..853c432c66060f3dc261d4bc1b3d1f311b8c1b0b
GIT binary patch
literal 490
zcmZWlK~BRk5VVstZ9|J%)Dtft2k-|F0wML(a0#beEH`lzOLiRD&Y_Rt0es0<PJDq=
z?S`rqtmM_sjJ317az0Ohi{@k9+(7`oJh+U&foJ!$PZg*j2Lcul`a0l&2#ZieMRdd=
zABnh##kd$Bal|KLT1-V!Bo2>qkjCH61EkPiXS60p$u^T!&uJRiWT^6vmUg!78LzN7
zX{&7W@~%j$cTx$eUS+#uwO#(BT${xOxgmS1?CoDB@3%u|{gz(Yc&L?M)F#^5<K8f?
zRp<y6dG^Mfy>WRoS0k^+UR_?Q+*_)#7bh-#0yX!wPd{7KNI_A>v_TD#t|zLQL0zvK
zwC1GFOTsBK4O12Fh%$S0I@0|nL*n;fsFce6I!}Z!W-T)qKXiLLc^uYx@^{vLgjukF
H3%G&@#ov$c

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/attention.cpython-310.pyc b/megatron/core/transformer/__pycache__/attention.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..2a929375ed057e6d447eef5e5db2ec715626d042
GIT binary patch
literal 15253
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

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/cuda_graphs.cpython-310.pyc b/megatron/core/transformer/__pycache__/cuda_graphs.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..641dc5a41e8c6b6c6745ba937bf1ec6f143e3490
GIT binary patch
literal 25214
zcmb_^dypK*dEd<J?DO{a4u`|x@F2J#o=1WUz9do*M3FoY5E=5w07uC>OIa><=I(Z}
zFZ9d;#AYuBb+koEMcGPZSIMzc2P>r%9Xn1+sftsnq!?E@e>ip$r(!3WBu*47v6V!5
zn3Ytl$V7g>uV-c-cSliGzN_i&>FMd|$M^oe?)Kzl&cI*m>lfE+Up0*1=gsh63O7&T
z^8SHo7>?nX4P!<Bnk%N<TPqfRtwy40uh=G^B^t?QY9%FkyOC~YRx-`(N>=WZja+kL
zWkT|1BfpYI{ZwPJSy(AZS-LURoL-rhe5SFdIkPg;+`F>3IlD3|W!c8Q=G@Ah<a3Sv
z&H0si$xk#6G!L#ElzhH%sCjthuxa$pp!LbdJ<TI4N1FGp+$&EDjbiiY%F*V1EBDF$
z6z-3$9GCnw@+VeKN`6n{RP*%8Y01wt7Ml03+>iX;l?Og$v@kaQJF_bfd>U!xjB9N@
z=$7u7D`%a3&fFWu%0te6XCA)~I|rPD_<h7V<Q&HDqn8Zl9_Pp#hI3@oT6xU5*D0d(
zLnuA!+=tTp+=<P^%7<}(%sGzx<8HqGc>M{KeFSAEoRcU!8JC?y*(v8V%1)!~qxJKs
z_c4?$IQOIM{<!Q($Gl=JJn$W^?9zf6OgQdprQ7hGTGi)mtJ`Q)+b!RH&0nyB)N0Lb
zI9`yid1a^KSE`MQ=b@VYY^&SEZ{Am~TV8EceBW*1zR;<tN~7U6%AQ~G-GxLjyV!Lq
zmzOSG;k~!4D%ESQ3TD<^zl@4y)mqb4y<nDQRn(S3U)MyNx#t|W<=6aMFLn5Z7u~gr
zuiC8_+fKLPqGS&mZF#G0)pXTjyR}+dV<9^1yX9uBRleaWuhwp1H2W^T{KTb3`)Z{j
zy?L?Hs;r?i`PI%7<x1CYS1TR|y;r%O-&PnG$}ujlt-N5`tK1kV!AGV%_PEmVyQu88
z9DaAW2y>t~sfUJo_-t#f)^eYzcy2s^x#eefnxy56RW8!-9}v%2#O2vYd;<$<_U`$!
zU02;I)>ezvu2Pt(#;v06Q?0dDdfN>4mY=&)zI6HNmp@TneEQ|(S1v!dbm?tF9Yhn7
ze9t|*-fp^Qoto#LU9Yq;n`hT*{@G5~TR(fTQCYiEtu)-T{(4P0Wvs7%>uj_J55Dl?
z*=D#NXRDa9vskuhEzZhXuBl3A-79r&1v6L@xeKQZ-Ftvzv5?pabr?Up4*1;+o;qd)
z)CGf1^p0F{{h~A$j@2!$SG=N3xa*Xbm()C77>rTp4xucVDQ{b%hf)46yOBw#Bly|1
z8|ofB#pe(2{CR)?K7R3iK0ZD2anyet4XS&Y6p>W9z|mg<nKUk0@MUBi6SUQ6nj5BR
z_*OmP+fHKB^pk$dPy3m^xt`vze7kRKntkhr;hpre%zLMwHym4+|7F8T{yg6KoarR4
zfI4F?Q@xKZuDjK11fYsqE7rVXrRa4#owo8_r|946xJBR=fXk`q39q#}UH@#m>*L2O
zDR!B-@LX%v1^89nmq7xW-cs)vfm$zrQMuKcdjsuNTJn|ls&2VAU%a_qtFH62t+qe-
zaA_eIOh%wpB50|j_)w4pVpi9K)Uu#uV6%ULeYM?g1c_S94-%fQg5+wW4H}VT&k{ib
z!_qHLm#@6?^2;w>UVipMdHK^XKYL{eKm<1Sm8+bKay<Sr+y5Ba@d`-tiFvDFT4w5Q
z!OFj<&Y)-;sBqPu!sRh>4RS_sMRO&Q1?;ZaS!2yuNxCT~;n;6rbym{IC!Lh!Gsvf%
zjO4RU7ORsB=F0IjYSMMt#cVje?>=2z6H-<rUB;-pRg$5izh3b<-KgUgInC>C5qVbu
z-FOe8Ta+d*5iu`!TP;_e@^VG|t=5$17gujOc%gU|KOGQz*DDoIRh0|sEyP(b=&9n(
z8XD?){2<oOZx?kPX()yjuUKmp-Phb|*9QgG{WvpNaphj`))b&(1i*mC>lNv4rPy?v
z9jtBXVwDsx`eUBbh+qa0y>HZwEwgVrfc$=9)xHA^2`R-XJzoH74opKZdV4DFV_8pD
zkihe$x2<4$+mlqK(;;=YgG9CA1t}$y7TAC*++DlL-*HHq)~%M&s3v-^pqoPK<`cbB
zJFjVJ{GBRkQuHTe5;rpFS!4!-UbS`{FqiQC28`!R>MUAXu+$^?QI9f-`GOLZhz5en
zdLS#PBm<fKfdh%(8KG;FXdqs_-vs&KK-9Ev;@8^58eX%!0%#WUnobQrQ3pu1{KS^+
zC-0bBDNwfXJx$wWB2pWspH>&x-UZ{cvl~_)7<j;_XEqXjv-6Cf)mYX~Y~}747l4JE
zpsCl-`V&r;*r(r<QoC=fWhb$b#Fg^%Ta$Mn>-mNH)Yi1*_H5$5Zz|WHVb0&H$AGVX
z<}=m?=rO<S<bK>bVBkKpkwtrdt)F!!u3749c$RY#;j`SvL_brX^}f_k_9vYDc>{O*
z`Z?rN&g5GOd?iz#LmSDB{PlW2v$emU;#g5S?|lR50giAZg=gbm)L;9x?O)rH_U~Ax
zp<CpLkkhl4jb?2l;}rUtvT^-4@N1MozmQt~!Eof?_75=^^OLEb^PKN0kPA=-)$XpX
zZ^yM$nplt`X>vj`5fduj2vZPRLc)Ycw~9BxT|&YJCac+w)qDP>7U^5D2@bK1u6d|`
zy$fNEj4Yy1padEzDy!({fUkMIee#J)1H{gO3?($rIl9!#E;7sB_VUHWS1y3^icoWL
z1gwdl<TzJ|A9F}JQJ+l%6agT<xoLgHx(?w*@C!m_uIANRkXOJk6>Fo&Dm@gK&2a?G
zoo_%etG1h+CtpK7kyGZ3-uYc<$Tm`4I^Td`+wh)5CTeI~$4ODQbsY560M;0~;|pfQ
z>JL-49>{rR2iyh>rrfC9ausOFIW!iSYhwdZ=TZFQxD@&6cQ{?Dgd~_;uQ`zLLp1=R
zM84W+x7@PG8Q${3;b6~zB!{aKBpPl@J;c}3jrJNu>a`#X{ow`VA<<{b<yNKXmdk-%
zYpu3}!Y7{o<g?}FXSEo7C78Gh`McZ{4Fd8(>sFA~Hy-X9jlf!~2I*=WicHm4$M_YS
zT?i(?j{IAYUm+%lq!`SCEpC%1gRBenNRS{XV6ud<>gfS{(Y!Qf48fi_TMmV)xKd0&
zgGn?4-OCSKnE~YZwJIsH6Hb%}kipDYf5^8cg}Mg?NXViS$*?{3ajwAg9Ng)4$FDVO
zJ$GbTWjRBM{c3j=(w!F^?kM+$Fty=D3;P}1D^J<!k*Bhd>?uSv=QZInK~7Le#4Gg}
zJMtlR#4L{i4VGR{R}2AO85O-%B&pP#Y1@T_Z5~P3mTl(npE9Q*omrCw)4prtiEU;q
zl;Ua1oUx`&+sd$pr1?b7N+oipb$eRw3ueyBA(z4Pl)RHeE4|Yn6w#Iza_SOCkt>Iw
z1^COC%h$V=MhK1Ra@lED%Vk9-uEBRgRO+VdueTlbVHQ8Z<SLT^E0!Gjv3d~6CvbU`
zdoqS?TDEOj7B39N=2bAIRuvUS{)lq?u$M>TLtrAo7juABxrK*U*4y2NQ@rXHK`$B<
z)_tMMfFVkbE}*{X0rIJL7gxKjDuuc;LZwf;rL_{pI0!>d`6`rr$#iNRw^3^WJIgm~
z{yHEPB)8#KZlGiVbY9+lbwtcBh3~jjHQ9|uDf%Y0$X83n3tbTo$uG3T3i{qTvz_=$
z<DGV=3+qJ48wBWv#b}7J{<;h@6sAQ~jycc}cYshD&yMB{CHcV9gE^uUJKigij-$Df
zdG+)}Y9aEJSA2DxAiN4C$<Z?tK8ne}tD}rk%ZpejaLk>dG!nKkk?ot_&~T)E@I)@Q
z9u6DXMN|*pZo*7d>tO8%$Vj$IY27VWir{B!4Obe5*xrUsf};DGB5W`uE_gb4k%B#I
zbUj#LN=slGgzMd*p6Kv*3A%*gd`>EEgKui0Pq7kFV_5Z~;^ib(l8z0PDhZstME-pR
zB(&@GUV6G!q&15}0apt(;i0ZVy}=AYB0z<XtFX#Vj5dUIQI$e)7kx=fCf{LSmKIV%
z5EOf=940Q3Abass7s{8Pefq+ugX}X=c1L7iL-l`z%cJ>&$WHpDSh{WS2^2ns>)q2x
zh6nH3j^!jor%WPmJ4wl>oD?P_9n1~@=dx&xOW@@__qmqmDxbE1R=eFn;<x}1P7%<K
zwldOlEeD;U8YlvmhDQi*F0_2nAO+!yE!TCliirjW5Lc?Q)6pOET-`-n9<4Bavu^li
z-GVxhgE{~q{c}+9AbckJGy++@a~Czek$FE;blR>M5!MN5SG&}L*C6nKZHd((>NAH@
z`rap(RSlgcp<{JHTc}GhWa~k&7|1tV3@elSS_g809`b-#wqP+m3LP;;*4*`El~fJm
z5QaxPMAZ+OUrLKMLrX5IRyu^K-{uU^7GFqO;6N$xvEJdGmZ=oJFrp`N9(l<;K7|Yf
zdV|7z-K5b7vpE^fChqONRff`BPkM*_)K<D5YLY00%F{PjIn#FU>T@(C01>F_$8?u7
zLlc2EGZ0NgF+PKdr}+Uj!9XfP5Gcj7`Vc%2orYjxrxh8SdV<vs3-$ghvb?mA(TZ&g
zbD>wI&K#E}n87DP5ho(1ni7!-FC<i(m6C*YZ%6Go6S2B~i;CV1l2o!_an&-36eSPH
zAH92aT)XJarMJ^NQi;44@j}VqI+|8pCOZiQ4LtZQT*BE!D4<-EgCM{sRa_%~1dpe1
zscT5aX+Q^ZpU{BrWtVxq;xW65F~rlnGol5h;wQki8bHBnyK{>;MZ1*H4B84qQ<MNh
z+(fa~Ca){P&Q9|q$;c>8$fAGLsVG)?=V&SbO>oSv>187W0ZJmc-itCZZo=4!U!-O|
zxk+<E5l?K=4?oohRHKxJfjv;C?TuvL-b&vw`bnnO66$f}GJTuM_4SiNZ?bqJr#6sI
zY~^V%`0V{K22A!-eqqy6O<#-w{ZxIAlRR(WZU(LKE`__jPI}W+Rg})MOj=#^r|NRo
zPi^hHV>p?&sDh((YwnJ*k?yBe5BdFlD{qL3p9amF!`F?ic}i@^9Z+BK55icHgR#P_
z9|}zvnSKVQk%P{}PUQ>vUP&*g#-WgOYJ?2!gktY=LNqQd^%gaeR00QFQfMkewD776
z`lE$KK8&n{RA=HPKB}5nyWW+HBX0uN+?tq!i%yN21>6=z@ZhUZ$k`X|b0GntDF9TY
z<`-`Q&!x8@yp-CG23h)N)?j1kz$OO+bI1K&>fzGEkCq;S5;?(#H{IIWy6<gMcZmQV
zufs@Qr=FhO0B_kc?ub<UNg6^d2O9C)CQX7#QAmT7<H7^B{&u9{wuf+02zd7VnhQ42
zQBNKLtiDU7+PZzv=$#!V01<vg#Cu3TkKW$Bzm#mGzpyLl{to)8Ht_ImQ{BdodY#FD
zREX-ZiLxR(Cf+0K_M8FLIvXpWYCs=_Yh6I?V1N8rYniZ&tJO-?4HCUtC&&=R%N<(W
ziS%Wy+R4njt;$uX5TakI7ucDPFrlSGO|#`mdiw?om|+&Qt`ZcY2YN}>6l)hNjx+3z
zEBo!Tme|W$H4Uc9(R<VznqIIsR=lNYt?M79uI^o{b)+#39_4Na<ACm~T?zmtE|K~X
zemCiNA@BzCgK5wzdNdCUSz!@+;DawVYgGj|qhDQD9X68#X;XRzgQ*xdbb<OPYN)TU
zS^|xaFB%E|ySO}R>Uj|e3JGB_P--)Gq4~Wxo1BK~Yu%>W3MCd-0c-~<Fd5KY>vqPr
z%{*8U)Lnblv=g&;#|4UUm>dB>%AN#eA;RBBW*|@qDbB~F*s5E8qHcrW&c&oS*@xif
zCm~{_gcKi(NpTv)m8B6WPHcc|Z)HF{ZKfc_=a9?x6GAi>D8SHO3oC1)J^=xRB28Ys
zjNVMDmuZuwALT8OZIn-M?GZwq7K>@BpXw*eGuL0ilfA0p&xZD2i{v*Xp6S*E%C-G>
zq#X8JbIt0ff5E&=hik5Pc8H8dOgt29cA=ve#_8y&V6zJyrDzhv%BiDDVd{HVp83-!
zq!(e@Bbbe>Iz{oAOj4&1vNJ`p;}~626$a$8g|aa+r2YclhzaG@aiAt8dX|)kuw~u0
zjd?S7xA)MFWHOrKABs*Mk2*XVcQ~&*yi;ezD*3Z`Wv6~VM^Ya3a~AzvnA7N<jb+Cn
z(kY^)kj}lsCc4nDr{3g8zQE**O#TuRp|)RQjzmCH$9v!v>sH+|q@##Dk%~pZ2*=3v
zS`M6kFse{GErUL~4yj_Zf{+Im1<9K4f)4KA<+-9uS$!2rFh$ZSI*GjLL1L!ht9&Mp
zvc|L!u#omi>-%ER46T3RM}_)|c`xi#kRN(&+)pMV?J+{ad3+{i=S6njjlj`5mrvx)
znIvs=xUd=-8#4CYLSj_PjtN=>Jxl5a2Q%P^k`uQ08Xo))T%*GCSqRU3QpGj$N2K7N
z$JrTHv_EgG!a)yJI|FNjsM)YM%nPY8S5gT6$vG2mz~SrUok;}xWTbw<nL_=nGwtj_
zS<abp_TqN}wP&4usGUb{&e@OL<mW+!R|+6O2ZL$BluH8-ZtwdbN(ftl9Hr&;AxjQ?
zz5}5R!jraii_f(Z8f{>si5Ql)YKgu_hYL+RvE2s?37~E{l=cR1K;(y6By9E!T=*~(
zLRN!pSd46WP!qK+ujVzi!Eh1gbm@N>gd;YECT-f#$Rp>AH~94UfQP?X8gUL&XW$y~
z@~#53d}A}Tb&50(wjnlz1X3FgV*{El)0D&Vw4@nHvwjYY#wh3IZc@^Mq*IbkLqj&o
zd;A%?%<6mnS!e@}&ck(QlqbXd9P)6Tu}*zIStjnM!ux6DamllJ<o6&yr5yjj)<G~r
zqkIUt!;aR<0aFZM+puZ1#j|@QElOXGq8Dc0Mh||Ox%z$nG30;6Nul0R-0!U)-$?o=
zwoXFBNa6RC)-=!?P$4G`ts~h_AB5g=(AYpIN&U2wo`-XB4tmoy&da?l8@eyjZX8_;
zncg2PiWQLtqw%GRY>?}1M3UjTwi5y*Y9j1Iv=Sw7geQ98OR@2QaL53W$XMA$L|6j~
zLTq&ijSetT00TgwI_tVF;|^%Jid)*n`F`q*^deGXV(R9dUN}Xwhc=0qmM*HN09cVL
zY<eiN>jk>Mmeo2QFDwK}#E@uD6wIGKO#YPLpp}5Bhd~YSLJe-zPq5XWXPudWuo>GV
zsH|wG0gZo}Wl&y+fDX!BzDbf?u2idC;3|-)-3n$S%7^#{KjI0BY$iD5xU}e2DfC7d
zI&eKf4J*TV-|Tkak#jqq2<|}&F@cDzQw26~n4hbG){K0zjIQv@LTtzlI_uH5<Gx5K
zLM=K^1p7I~VYQL(Q9V#!=67=Bd7&Ec7g_MYsH<Se30WG-Yaf~VMYbbMj-tGJk_}9O
z%z0i}!WB79ims3#$1y|ZhpAAJ(+4NX5aX!<!9+k~M8e89+p6J|J-Ew)66@WlDIYGL
z4^lrbA1P~1cOe_tp4(W}I?^w*kAH&+`yEXCZ69q8Iu@imSP*_Rb0f-4>pqtOXb4>D
zwywQx2HA31JW7DL0gL-3G`UPJdl{KrQv6$?mkXY*$m4|^6^K0krzNEYD`(~{U7soh
zt&th=k!9dp%UiSNteJVYcVHanOJ&Ft1p5)05<M71eu#;ekso;<5;logoskQPw_v3A
z6PuK^?cM{IT|_m}n%r`4ik&EoO{KRY#!>Pfx3qi_*4K2Xcm@+d*xFUZA%Iyax(<Sr
z2DSxTut4oWnLJSB6wsUBVZlH^5RG0WBSK;L*)MStbEuet4o2-NmFR6FcmfqeFD;Mo
zr%Aj`9<_+e`y#|_4BSwAd~?gXgI`XCgrFeAMJp#zi;Q|w-R~o447Q}BKI}pD#2Pq2
zJ+p~`kXClMq@HD2KcOD$8(TT5Sa&QaK_)D~<QY($kmm7hQa{^(a^#ac$@ezR{p31R
zu)B*2h5U@a7yNTp)Tta=N`pTb^%(?@WJEE0#Rq?@@82|G7h3`!5i8YC?u8nLHtPqF
zPSlvs|5fwL=0^5Y;3zgEnazZ0v@#DH-s?A^vhn}ZxKPhf-wfyCo6^hd9lVA99IPMm
z3p!M;pVdkm?$b_6W@{=g$w*090}36iWN#%ma@XCkXOBRE<me8IDv4bE9(<KN{D?F0
zmi0sQ{P%`?zHMCJ9e&zJC?<F)XC31~zQ~dOl&L<f$11s_C@UfWDu2!XDbt&VqC6=+
zk8o`;zr~FS|2~8S!S0AR9)o&(%*kVZ^8JbW@%o8=zJB5wo_Hm^J0<U;eCuQ%bxeHi
zI;4_%5^pa0r;sBI!4e8-0w^cGvFYBQ(|jBVN4`A3FiLYn+_qHQ<}5}uOU=>lzasv2
zWTd4LazGW6*4-<_gd!4&n91vi8OMP90+@x;54?y%P=ai%-@v1iMnnThxl+H0m(`CU
z38PQcH&`%=%ZeJt&k}!0^HYWeGG_e=l!&{%4{ak~TFe+k?+q!RaS)CA^Jr&j+lV+S
zvg>#Gc~P1()IkB)7|ocP40=5o20=<}w6m+-?j3YIG$_s+y~lo-4)1DJjC!j633@8l
zL-kLQi`Dkp_zZ61=|4nA)NdoRZQ!&K$-qaIZ%yI1F!(!W3$}ytDM+Y)h8J~|O|IvH
zKbIRd>=AgKrDIFT4*VKB@N>v4!<Czk6l*cF<wXn%i-L)Et8q)Kwb;NQKJ0S0MJEHM
z-KK9^q`2Py)YcghO{m!*>a^XJ7>6*HmK+FrQwz?|&@c_=19?LN8-(|qDaPU@VV{5N
z?VAXA)&T+1^g#1!b`fT)d&v+B#6$2NacsKz9UAlKccn88&K1P?d!4pc!Xmj!`)8Y#
zTlA<!ZcluW{e-(N^3iCyxFqP(TX<F}Ahq7>z;Sc(;M7^K4SV?U;ON5XAQKH&uhSH4
zt1{QaX5Jtty1z@0t7fq@-KxDzgaJ=inw8fO8pO>Nx5^0M3Z}W<6g^|h#_T}&)dmR(
zvYi_*)j_wx1m&-AQN)y?KF_bcj3mf1QtuL_P%T@NYpXkaG9S$lOvZ?QuAn<Q_$){w
zstxgD-(=N)%!FpKAQR1BU~|yHgm<e2%Wk_xX^hT6d_u&xPx6(YW<m>)`YpbkKm>|R
zI5dLw3M92J^3e<u#AUt1{9{Z$#N-(y*i^!eCNY`wu%!eABi3(3gE0m_9(jfDC24PR
z)xTtZLKY|VGLsetIo$}$$C2t4JpU??%A*QWNYZ7QdM}mAm@}qj<stIfHbbUTBJSm_
znFQ?1a4$j_G%Z+?Gj|W)Eg<fQp;t2yB^e%XK{`tPv2{C_%b9Z{HLcr+-%Dj+!m(zw
zsV9|(9HsMl%f6klX7I({(H}_QmPVZ3T-;cwx{bm3hGraKwb&;C0VWv>FczYK$x`78
z6ai*}apO>fPxw&&87YCM87)q1n5~R&zy=N4r5=Pk9C5<ZvbICx8#EBq*<RkUAv~Oc
zZ~=RCy@0mhKp$=kB@p07gq1YJ7nVSDVze<@nRYVx&%Tw~upv;GBZAVkVS!@JKumHD
z!W+y55DZRH@T%`=zYgU;4F_O;GXXIz4Quz;`Wf|BKe;vQU<?qspy<ODY4=kHv~v;B
z#g8*?_~xL_^_vvf$`ls%s9!}ox3ynpZxVvoJfoMvn*UBeE5hBre)ha^{TD^JJP0EK
zOcoMSRu~c`MpSz-4E-sH65Ba%#DLVl05oWR_B+hI&SVEp@<#-ELJlp^mNj!1Ht1bB
zYi#Tt5(Og8s{Rcc*~SldVXwP(=RI_1XU@7?OaFYAf!*D;r3Bs}kM<5D5#dA}pJLJ9
zE}rN~+im(7t)t#RJIjc3BH0mNm-<)81^I!|0mSiN^I^aQ9W&G~Ai1dRB!`8c2*FnW
ziO*;OQ8B4j|CzU6WkRwVWWjedxmW*%h5wa_D9wM!+;^A=2l!je{Y@l68Z1I&M3FKc
zX89JA=b8L_CM46+C-qmD`!o_na=yd76jYe|Urhdp37-cUO<)ntdOvTc8Ct82Fxm*R
zqX7CTRQ&_YfJgq6w@FB;OT$g~UM@xV97*L2{t>4NGHRKb?;XBtPcpKVwr(8>ls5~|
z%C$~TXJ1|%e>rn^k{Ltp2!ztkk;b)%%llm<z;nYRJ%M4*r#4Q%9sGI7*`%JNQ1b>v
zSv-N^(d51bD3!P){gk@|sFIBki}(#trjKY398^>oSfRis)Q?J@d)E@`&-j^o7J(5o
zw5IBL+)Zv35E7Aal5g1?>DDYtrrzf{Jcj)w`jLhzG~G`NJ%7O810~nqj~>H@km`N?
z67~vG4AT5ClykH^1*;+;Rm*o*5#fhgqr{44zfuwAaM-p&8L23CwpifP3l4iFLBhi}
z#2XN}!aW36T}Hx1W;xe^b-W#Zu;_G~P3&rrw@OPIDS|>Q5Xl4RI7vsgxFPo7Mh#m9
z2*nFC0@?zJB54FRm69QlzJgln|1dd*BuI)_t+k}@vh;gQ2!%l*+%$?HezqSZCBj_^
zo)GWg3VMh2#6;#uXAuVx{_4&L^ZHkZ_`>s2b!qCQ6v$X@L4_bGb;hai*YW%)$cXn4
zGAVd+4#RCt$Mu}ppBS|b0fU(EeLFqKXVSD$?P7S*qLK7)B)*WECNCj@Uqt3j0{jW;
z-<mbzKH(ig)DSivZ6sijN;nBb@FcfVZ-PZbSV)k4#`hNQ9s5meiQ)E3yba4s9Tpcb
zPfKhawm%_09&YbLL{TVGpft2vge3sdOywx(!et4Y)BYO?o?_f2q<93%X?+y%8QZ%N
zIUGj+4YYLayP@{63_#Yw(GsAi?Z`B~V_skxXV8`2)HWR5#Se+xC6$K5q(>XBV5ecF
zG5D<B3pj}7)3K8~82}K!99z<hSGrd{ZqI4?F)ry1hf%1t4#W_olpd9O$Mh5t6QjZF
z0m=Npo?9vbm7d1pE{_m9GElDlqqsa$Y+-%V6y~^X5W?M*Z*3*G&UdUGJjAdW5|PyZ
zX3{_sBr$!BTbh^u21`Z05P#w(Zhw?OO?kw+ecI?fu}zxQ3ldtt!yV*12o~E05s5h7
zNwh74C=3k(COsNUb{arpXaF>n>?(zn2R%P-EacU%pmLDn9vgTwl8$?|yCz2Uz~+eo
zI#}|<Z1Ar$nPl=jU%?g}(oUG6g^VPHj0|+0U_z^KFsycNsju<1UuPn7DW=!io#yBn
z_HGUpQz>d3nFP0U6kwp9Ps}A}?B0nFG}9yY*c4jhv<h8tkb#vB7z}(LjyootNExiL
zHreA=f-G@A#BkrPL+tG{NF>Q1kuMuxFnrLAO%uP?z$*;4nAS8vOxvf2!bl=pTZo>r
zDIroiOT8=O;Uh!-Tpfft2%>|!jGaf?3mgZ}txE8mrXgYQ+>VeX=y4iTAdrPvj~G1)
zZyF$z&=`hbi`>-`iEaszvIG41Z)iZk3pRCG*iqDI4gl=r&Zt4>{SQQqg-kFDe=)YB
zM5hXb>h8DsdBU8Q?&!l;Nl;hyeda!i1mfyD%>N9N$C!KwNicy1B9$6(aoFEd9_;MR
zvxNvQw|B6@LCvBSZaRYgi>RzTwB}ieck||sP`SO05pG4%EQZQ2;zr<zzJUy&3eX1O
zj3OI;5h%4sHpN1Kml6wNR~}*)0;+^_!7J<?1Fyoy+3ScZCFF{ThF`pUmgRD<Rpf#e
z*zhLc`2ak^c>9^~?Z@;Eie6<=jtmePiZW9eILhfdQ`CrEl*Q5D$trjjJ&MUa%QgLG
zaOW_5mPWLDq9)OFFD~yJNI3LOXtR1EXwc_9Qcj2E9VCLnRWgrXlz0cJkwTJ1NH9Zx
z)gu^g3MSdqHLLwF@`yyMr^7s*-<fL&d)M!(mvD*#+Q5{~Y*=p^eh#Q^)u90+$M`km
zFhMV1g7A&&=eX;f%fJ>E5=$4CK|;@<$La(V@*o`uDd=*Xw*!If|M8ZKE}~mtbJH02
z4cw^Ua0BJ8;#>os#sceQ5@27wHpFx00G`|%BYGW`iXz}JZ{KHGcQeVnc@VS`wi*k;
z=-U<Cov>)Yi{wifMoQbX{v*5hCX&Fu=HBwu@ALi+l7+NJsu-WNW|WonB_ajpwZOcg
z`@Ap0CN+s%JL))eq60QOiX`pU-5CsF2GXGJ`VL66Q^!Y;h!!DEIpIgP3~J}v7c?^Q
z1P1H~r_MqP3_^ez3T{xN*c4mI^#b-xCt(>n(uaej1}h1W$BgYrbc7}P8Q5)7{WNSK
z$7xlO4HK!}IU(*<fIUu07+8(zAsNO5jUJTFA?AS-)^OUwHp<N2Q=k{VClncUSoAPJ
zH=-Z`cVg^_i16>CuGSN*Ac1egchCK_<95Gjo2~BM&v6ZiW7IWmv-kKmMjC4-;c$jP
zM7Hbd;*s97=P}-X1~)O@LQd&p6lxM=2AC??NsK+C&ndxb%z^s|TV;eO&Nbm12!l}%
z(Ai1cC4quYnn0*FELG7QWHh!N;~a>zCMXvpmD&S%3(|-JrcD4dc0ViPJSo64OTe=3
z!OZ}(f{Bi5S6#*osI@zsBvSc|sN@Jn!#}K-P{A=}AO0bxY^YIgeiL=;4jM*0@jL9%
z0E?&?1e2t!h=dU3%F&oL6$(&s=>h3@-1{PPB9MLyEq;w%r{I)H<dgOU#U`$^jXkln
zLhN8Y7+>!Z%%b&xGrNe(bC77v(%7V_GT4X-jMA8u0%k#l0y7z4RsvC^CDg?#qAs1*
zWL#O%<yki!);$hNjLjP&G(C2))_{>)?;6pkPK}`0s%m3%9wtj_=ouQtD1rhn!Kf8v
zw!tKv<7)$md;s);TS)+&ng<9}O5E~BLZA{>WOW*ncRI8uW2?p$xH5kjh!g;Tl0j(1
znKtk;2}~*+Q#Nk745qNp4BHfA>;K>5%Fg3O0wrTP80<~3WJowycnA09klSQ{#$)YL
zsG}4Tr0@V+fVCX2%>hI3d4gR$&ZNT1W<_Z@#LWPU)VFc_t1<Q@>_Q$L1qi~wpg}R*
z;C6}X>1EkQCQ%e2tywUaHHn+rX{(g_C4Nl&HLoy7JDd7ClL__<C&)oDVe&1Ou`9u3
z7$sA6MMV(_Rgzz46~UUfk$VYm#T%{jcINS1Hg_d+E`Kz0Z>EsDf977rT2)*le}pgo
zdCN$KLqwx9fUqGoDS3DV-1Mqe5*RX?UqSeSlST+ABGH{Jesd!DF?2Mu0&{|GtmJ_S
z`Cxi+EP}H4@M08#2kjpFwIETUitt|@jmhJ5^x0`)u;!Bb+vwmnQH$MAu>1c3$sl^t
zw>Dw$^ApgOVI%P&NNH<{4+5<qSJu<sA;cX(So)kPhlIpYlv@*bAbsM<lad2OLOdnY
z$<{Q;ctJfO@rzLz4s?+kU=I>MIjLU6ZmDS)s15akzXx$Ad+%V6Re8EK!(CKTUiSCt
zxDbedQ{~yAT62<z^8&5SOa6eQh^?flkUM-9(o4P5IG;}M{RL@>wvk3>Q4P)FQEjze
z-nQU?Y)w$|GGpAeT1Tu-L;`HZ3R*=HtJ@we710M>#vUhZo71>5fJ0F=GUpqW=2fTi
zWCF{fw>}%a2gVmZj<p(~a`fK9A+44Rf=sXv&oTK3ll@F6AqD#wLKwpe_wDcmzTs0h
z^zJ`TYfPm5>hJSKoDDScsu#@gUI%!_VUG8(=}@2B{#Y#l$FS)~&a#T$8BCSJNsDkN
z(El5TO?rAVY4smiFJb+3D^2dbmEW9f^9jqY$S<hbJM1_iKA7OKgQTK}GthPinR&r`
z&egX_s?H+=iVBM)ERb+?+M?FcN|~pVR9vDu<tY-h!{=<cJ)!;~M%|t>dk1!1sS%VT
zA0^5y;__ZVLS8E8ydg9PC}OGmm{M&62im6<J0CWAZc^-Xd-Od(JAfOuM?;dOUUa<>
zhx8<SUtXjTibGC{7cRV9M3nf0k?m}~-M%Ise@1M>6pqyqYh$AV<(EO+@N?^JoKf&&
zth$M-zX)oAgHTGvr_p$u*&UjXB6raVghWIq_n5%}o;Rp!*r*NXw%$k<28s7-+TcOE
zXGFn@jLMLp3^9(Nr)oIRVcV$A6vzKY&Y6okgDv{Ofru)~F>|G%ZmA~-d^6>6zRLJY
zS>{Z~5u_3F#GT-B@{I1?g0^!7DSayqXvS#s#UU&g1fLfZnd5ZWbo3Qg%oE`mB#^gL
z@Q6=~uRLele+)TuVH;TO*2)N&Q4o*8?7!m%iZ5Jkq*WBJktSLPc(4{C!(rnRm-wth
zYp4yU4))CU?E|oDQC;5TQB!<}2Wr9Ytv=!7AS<X-Y*TDp-~trr5LpkpebJx5My+$t
z8`ys<QHR)_izBsIcdO7(k`nimPytx0#!`o_CA?jq@~7*20N_8ucjZY+yP70#Iw`uH
zBw`V6ZM5({tuLf2KMAbX@uakbL#wV0N4RMk7ka08#)TZF8QYmT#{)C?MMTboaqJ;k
z3gduo;!R=0_`(2qv9$Ws54LiKd!1?e2mv}aiO0wlZ@9pzJmKyNeZ~pfiB64*f_ths
z%7~k0qj2Tny%vKGFXMZI{)|Qu0nfy-z|M{C@OK+7jfrgj6hoCuaTDc`C7c?3;#2Uj
zK{n@ME78ec93@>-MflbpmZ_CPWb`c13Bd|F8k*l=xtuWow*VXr(yu{8Ap(Zha9GO+
z>dQ-LSlz67F8p%PxIM47#vtNotz^GSyyYd@pn$KB9+DCsQ6OASpU6U@(q>rKz~VZx
z5r#fQvK4wL&;{&pV6+x!1a>=1L?s7J52N;Uz*zwbvpsYG*l&2eib!4uR(*Ct#}E=v
zAxA;!9}A-cduyTY;M9pQ5;8E=7|~IisP_=Q5c(&MzzDmIqEJB?U+W?9A_{y6z4$Zg
zEQTSRTs_PjMTFoq8~H)O@d&uOrXJxt7ufv=nG=V82|1X+sFXa&CyPudZEIzDY_Qs*
z8%#x{JUoC&hh?!n9W^gsdz6igNm}vQ!&)%Yz<r35^ayIFa^&|J=*qL??;ytT(DQ@`
z>RJqunn?ZM9LkQEb~67bxVL&IKG2j_NsyzzNT<eEVP(MZ8EM2YZb$$pHDOjbkRXg?
zLWB@>>J)>RVW%>neTrs{=NXX`(j>4b74mxh2=Wre#Bgtfg(E0i+!+b@*cai=Pw-%a
z8-`kf(-XuUzr*$A)I+=ndl=m!cn9sFSCz0=m66(mS`$79I3yCQ4v#$Cq6xZ1X>1<q
zOI%x8d?Re}4S%M-x1TD{_R}EiGuTcQ<`=BWM=&*uLMcc+Lar$YMcTl!7;+)bXd+w6
z#l-b#SO?C<cSPthpede~GiFPzRw-oa=fs~HRg360$P;{?0x<Xv5gTAL_zqhZOT=l}
zL%wiMdu2Oqug0Axpl|Y2w-OrAHO1TBXSNlZ)lbVo-C<)e!D2TGK2D3r2Wlyp#({YH
zoL<?{()6&Mb%0?14zQ<%@84ri;$yzR+{cNS6iyZQ?P{G`{3rWy8`v(msn)g!Zon)n
zuJM&R6T#RTa$!h;TIBP`_=xTo9WnDUmI;CmT!I79oGo4;QcAc$9$Qt?Fmqr-D9jy@
zl4dP#5M=;C4nq5!odaqX;32f_%zHq|oy2i+oN^hFn3vdvDieo^%S1?-&?ccs1(t~>
zC6giZAY;VA@WTXUU_w~HgWsVlA?6taK|R*snz1quWTs{pglsN+TrIKrkFu#}k;DEK
zef%ImMQc1kF5H8{Z7rk`IJzCjFUV#e*VBFjsuEZXa8yNcPgXM6tHBvZ@HV_sxpNEZ
zkSmrQbsy^ptv((Bx0Zpm*(KicR07>}+D*|Gb#NAS$>7A;OQ;nd!(M`&TaIimBltDX
zx-pW49~i0|ipq2y2WNI~5_~mkp1X14&1ic^Uy)(zLnDq1zXIU_=dR-fIXxTLo+CT0
zWgAdHrX4pvR#OmM0(NyM^DHNAg~>i9m)Y%;@AH00fOz7h9DgysiA}6)+&Jfr>|xWr
z&|3O){Lld=7numGrU)sF;*)bIRgt+fOaz&)GAFqAhsXt)i{WW~61*V$nggo^&%leK
zQ)#|RXdU8<G1>*0^Lh+VqJrK+rni6*@3>KnRy=M6%fr*ee+!IKZy;kiqKUyY5#(mU
bTc6^8VIp&VdU7^Bd*AG<#*guTKKuUx-;z!~

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/dot_product_attention.cpython-310.pyc b/megatron/core/transformer/__pycache__/dot_product_attention.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..2b98c7ea228bfe05e30ab8e05ac1282eabbaea57
GIT binary patch
literal 4649
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
A#Q*>R

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/enums.cpython-310.pyc b/megatron/core/transformer/__pycache__/enums.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..4275a10cebcd405b7ef94976c156047386de4b74
GIT binary patch
literal 1235
zcmZ`(J#Q2-5cPh4kVNDH2ni&%potW+6&*qWiKOAuB-J*Sv-aIC*<ByDx45+MH~0bk
zCAU;pr=wzKZ{ZSg@ySo)H)DIAXZGaoZc1QOKTfMNkC0!uxI27UoWRtV0Gx2AAq6=j
z+~wYP!aYI0IN!X&1;*zAFu}-pz=S*kCK?$Zn3yNPBqI}W=YkxjD>#{)mxy<V1B(-w
zx6c6tDI87;mpg^W-NNTy5pW-N2R4~XE}F~bLfq7YnW3Gg84S^t;8av9%Ee%2GpVvG
zq0CV>Uzkjo@?Ie8_`S%sZ%o}v&YJ8fyL|gEeudesT!8b#(8iQ@tQC~nlv0T98?<*Q
z{o1o;^hA_$Spq%zKPh|gm%DTSPoj3<`~iN`yppZRd96)eF{xOW&ufz}dR^tG4Vzz-
ztP#1XYQ^b-DYML{V$O_`-J8$TydCYllnSC?w}xkEg~~<OxB7UoR8V^o!_){d@f|;m
zoq>I@Fbd^E0pbtFbi@1afh9Uq%Puoe1BK0_0swd<72+a7z$;V&U=uBx8D+5Frlpcv
z5B5g)+S<kVJpk;4O@b~Yi0p$2-o6I!_Rc9n9uyG|i<n2yMX}vM5mTnG2O$R=A;=9K
zwNbOe$6BGd)mmJ#Ra~@SoY&plh9&DYYi!g>+QM;mZ}ia7kuY^tLs`^vtMm!n^a|!J
zsvT<MLVe%|4}iW0A3*Jc7sNe6aUWTEEjoU)ztJ{Q8)fPMHmD~EPXW#kw<`-~4bznk
zX1x~NMt!$7f<{6cTA%esZWZzp)4{`EAPlR}`q+ck{{%Sn+fdU%*ATJoARE71e`W9S
SGt~GG7Q2&R@^}(GOaA~x-x=%x

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/identity_op.cpython-310.pyc b/megatron/core/transformer/__pycache__/identity_op.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..a69166b9feb4f2f3183255227f6664a58a1070ca
GIT binary patch
literal 1376
zcma)5J8#=C5GF0zR$Mzxlb{cD(HH}b)u~evbV^a6Nd|ZF!Z0FjDbcH>)YwM16v(eA
z(2o8o{R!3DsdKhYy`!bX4HBS)Nb&A?AMf!o?e#hYM(}k%_|YKb7YeJx2H_1%{Sp>I
z1dYguyd|O`tS>}ZlAO}h#)UPqKxd04=$g_3*%ow2`mNvKMGk#jSBF&zdIvU=jHn=^
zhM*(sl8mXrb^yWPjhdIlCZiUjm7RA&CV808j<Wfyjtk>M5Na1b?q(79WspWfDtDYJ
z_vYx%wD0cjxl`ld)0IFl4#=83gn6|NOHMAxH~O7W$aP2-^l;HAo4UxPDjmkcB+MCG
zSf#CHG%jtfCc12$o#TH&%QeRQh-(c;$RFtiX)HYv>f8%>s(9i}!raRW9eDc@pA3B-
zNiPpVC0NE)KJyObgy$+vcHbX(akcmSRKY3m){s*yl^0eOU}-kUW~vQAV+XG=jdeQT
zx=DLb2kfJ*9@tPU!4XW2!e?ld!i~ZL^lh~UzmiTB!m0<g!B`a*s%%3jkhAE4pb^`q
z^UaleEAyg_HA{Fb87n)C#i=MF+;<uKSn#N_v>6kr&zMO?ZQ=#Js*t{nA~0ZF%cYAu
zj6vbGO_<t&#eoRA_J(D&_mk}f9KDZhhImLg=O4nY*J<q+i4Uav`Jbd)9^V-Z2K|bC
zHPBI3({W(1hJ_yhd&hu}JPvpwW`@6Mrrjt!lkV|J$Tbrx&C()g<3fjNa_pW5AvorN
zjDd@vq&8qm=7mZsxE#*8Ja<(APbQY`3D;7%pv!=xumjc>F+8WG>%H$n;UifR1PiXP
z;L0?@^u=@oS@;z78?elu)VVIJaKppfPY-4EH%-K+cUp6?-%u^YLpt1fBO0EgD-yw>
z^T)UDtT?E)5a2EXJp;od1h^(pYui$&?KjJ2o+>{m8%a{O4h(G#wTyWM?YaP^^Lokd
PJxobs=nmbsw!41;nd3W?

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/mlp.cpython-310.pyc b/megatron/core/transformer/__pycache__/mlp.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..88ca88f1afe82603b02b40f82f2ecf243af72bc1
GIT binary patch
literal 6439
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

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/module.cpython-310.pyc b/megatron/core/transformer/__pycache__/module.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..932b604503f72d3f02a73f8fdf49625f3d63548d
GIT binary patch
literal 7566
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

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/multi_latent_attention.cpython-310.pyc b/megatron/core/transformer/__pycache__/multi_latent_attention.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..7cc83028f8dc6fd09a0542abdc77b43258aa9926
GIT binary patch
literal 7593
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
HT5ta!@x=JL

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/spec_utils.cpython-310.pyc b/megatron/core/transformer/__pycache__/spec_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..0c8b2829c0ad7469afbe6b148bb6690657eec7a4
GIT binary patch
literal 2827
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
S+kxKAydApx=-&2~%|8H>HRA#R

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/transformer_block.cpython-310.pyc b/megatron/core/transformer/__pycache__/transformer_block.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ab3dd6e2cacdeea1bdb386e0ef6b62544e32d555
GIT binary patch
literal 16058
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

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/transformer_config.cpython-310.pyc b/megatron/core/transformer/__pycache__/transformer_config.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..c5ee0504506d1a965732f1187c7501681714b0a9
GIT binary patch
literal 15751
zcmcIrYiu0Xb>3YrmrHWRHz|>NjVM1vTU?5kWy!K7S#MjGXj%_H#*guEXLh;b?87s&
zl(n_nq;iqQZ2<qMgSdg)1Z@hqZPN4+q(<8SZQ8(Xfu`-h%)cN_0p&-Vp#2dvY1QvL
zb7yu)F|vW8B=*dl$36Gld(WJE?!7aOO`G~s_^bccndN`_omA?3M3R5qKpw--`wajq
zWu={z&TGa=*D`u0&HFB=tCrQXwQjw;meX^!9=)fQ*Ym<lJH55OOe&qK_3H(pWSvd5
z0et}X-B!*StPSZya^K?&*GBY_+NeHS8`H;X<NA0yWoOQ&ti09xX3FZdhi-J;Nb3_q
z>$Cbn>$fL_w%JNwO3f5*!p79XOgiYbOy4XyrsvIc2l<nx<Csg19c0f}JwM1l)%2^4
zy6FVnms?GcyRX!NqgelO->;uAODlHWx|xA4&_*vbEZbQ$T_~}glZ|@0TA9fP0~Omh
zeA`&HT@QtWk!ro_8#UWsZdgXW;ntvjxav`)R;|ZklU~VmY|FS^x<uQPf9!ewc|XRT
zozl}*O3z%u2<Tl_M$g*acFyX0G}W83vU-o5x4S1(pmZxrZ%oMvrAP0x`@zpEtRPsg
zU>SXrXzNqhfMET^?7^!;`mjBSk_F*r^$}<umAW=5%2-_2fTE1YltD$Ah$%xt8P+%3
zqtH5{uq}d(3f7}figjZOn-XkXunB#uNN!fVZNl3k*rdK)uqnmcA=p-h?G$VqF<ZO3
zOP{uPqyFuRdzWx`2$t3Fj;-CP`1c53Q~Z0u--BN2E@viF(igjgGp*0q_d)A!RqB2z
zb(g~S3U;@`W(B)PVMW326)daILH};iyGK#>#grML+^5e=Kisd%KOp7zDr~=Cvw}_P
z4+>UPyaR&GDeNJ^_9^V3VDkz)B-jHAdswjj3Og*=gMwxCM_}E3V($S(c{HXxq$o!~
z34QdSq8tUKUrHTPlw)zJhlP^S9}{0ZEZ8IZalsx{*a^Xo2zFFIDLsEouu1)t*!P%V
zJ^E?Ejw|epU?&uIR<M(TW%b8nD^Dr@6T&|&*dzKm`$^P#o-N_nW311pk{9BVXNB^(
zz91GoA=o+nDY5oRCA}C+pI4NpW6A|ZxfoLxgwms55?h{9{LA2nPvW9bp4P8OjTe>l
zGa`LSu*>?h;xAVe?>XT;qp;@%dseWFu8ZVzf@Sp=;#!_plow-)uFAh8<zEo&Mg3*5
z;w8m1g!i(-UJ=X?EUTNbrdJeyN%*E<OL|E(l@!kso~1BbFk7&!UWTS8A$^{H7(bO|
zC0h~Mio%u!TUJ<Au&Q8J^{X;UD~h)wJV&re-4U#&cs0T5f;IHISlU#)hVWihSW_@p
zVXq42Da;kjC-$jSIc>G9)i?9H_o-AirTduEt_8!FU9;|$F{RjUIQ_JLH@vo7lM|WN
zSh{MLd<`O6&90cf+o;c$8m_JRoswR$uTR6@<z-vr<Wn`BYC9}mZq-YoXW8^Lv#yzL
zrB$=*p+eg%Eo)88ewf;9cdzKE)=N&ys@5wSW;>7iv<)W7qR6^wOkqJ^y;U<D^ExKW
zg<!gaU>-EeRoC;4X0>TM)w*qXzFDz@U2A19ldl&!6WnW-N{v?CH_&jyt}WRXZKBGK
zvZhn@gXyH8)9}0vWcrt@mSxusuiCbQQPytyJ~{#YYb@KQ<pskX!cv$b1e?4@*{_+e
z88WK}LoD`c%XY6D6}Qo9dck11jN%E+{VS_RY1ypTZO5zp`n&x5;8-xAL@c+_Y_$Aj
zRS{`Rxw-!V!?nGt)iNEU)PM>ZwP26gY&zFBVj0Z_x=p&B8A;_w%isIuul@L6jt0Xq
z&9IwZ)j|HUy+dl-Zo?>{?Y4_drDE1<=H+0}v@Bz(YI+7o$#jDP39q6#BnHE9I|zq7
zqXh>;3D~zPE@sfhf}QIKM!9(iBhhU67<9O6Fv$L^HEhFvt!cZy7mT<K-$ZX#X^Uf<
ztF{&NU#r%w#<g&ude76R7SOn0Q<!uqrw$6Qu5?-+^!he>qJ~T^*n$MC)N)|1fl3U&
zfn?91Qv?&Wmg84ZisRlH{-8gRtOZ*zKD1c63x>r>U*+e<zH;`v?O!_<3?`^(nH6je
z3CtsnYgK=lX`*RZ_G-0c2iwEp3*BbLzOFRWqu|ZKWXJ0wXX7&iX9y-_IM#Hkq@v?B
z(_6t{MDpcUn4zM%9`avR0lO>MTC-~nbg*46S4&kkJ8YLQM@7GKKn$U18CKrbXxb5J
z+_g)M8al;>+naUtty}f42SXilm=*_P9ZKi%4z^h^%B?Q3yvHFnI!*F|E;vchM^C9C
zE>-I{C7u*Q*MV28BF`QpX7V{)hAOtlvFky9joyzc(X3!R7KuzXok}C<CHWexwt`9C
zS`CC5w_&wPNe95Qhw8;S7zz@uG2}OmMjcO|)Q-m`*iHZSmQ6l7p&N(ZTeGbyeNN)b
z<n2NYEF>JW84QpW4no<rUkyfyua6>mv-Mi&vpdK}tU*tJ0Na*K$E=qa2mR|9@LopW
z!Gw_CXs!f1*AejC)~bAdL!b15@q_?}N`<o|Sx9(%pl%`|-E`5$Fe(N~<0vR$lBSh0
z!VNd*i3FuTR4Y8rToN!CdxPx>-FBU;xTss{ot2-y|D%7tu(Ws#p4{mO@!M7tYe4i3
zKrlq67>qVn>>3>(l$M9C#)Mf?@j7CTkQsF`LM@(-P(@ohT~Wp;6^5^?Rm>HbgAnnh
zY#3Dd<TUvV_hRXY__%DlfwWYyt6tOeOQ6b71;f;*nrPW}({6^tz$g_ugwv?t38(~9
zA}KM_D49*OgvTxFQ;obP93gf-Mk^lyT?q!=aPTEH#2rI1S2)$u_0ZqK>f)z0Y!vLM
z@flTtpipX}BWg8eyfVDhvP?#S=5nyTb1yyZ!E}rsB2Kf>Z~`sCb`cK|)i|wQGhGZ3
z72NEi?`}?rfmdra5mMRFqxNg)bFAWxjzqAlgt-h3SYp(44Hc`QI!+IQT?jYgMsZSO
zNScJX(ncp?Jc3j(jQJJod<=J`0zFn0^IaK9$TFUg5@(SS`VQTT51Pw#zzxQ$^)jZ+
zdTA|rkfNm)0#nT>dsef=2p0Wu^CgEL+v*_)O!=uBsV}6zhz*n1Q&%(Y7Qildi=Va9
z#6ORX7gBKTdawIN`WH#<#xFO4ZGe?7cNUVwyCIPy9oL>%vd7A|QtlzE7o7YUYA||m
z*DKUhq~X^+MLH$=gnofEQ2I#0FREz?H3@CQn)=;ks~@EbD6z>ZtYqC)+zp7vRg~PM
zY$qk{zA3!y3huxgP`p8r{tS4q(ip^b$bA=Z*cwDj--YCmk|ZVLehIu0_e-D;EBdHt
z|0d|8=$*9tb?`=reLnSGM#+r1<PTe;t7-R};EyT#xRm`4c;hIWa{tjn?-=92C#-SE
zeh0D>N_NEkzR0n6zYqFmMc?fH1oSN|@BIhw@S9xec7FmHxlh=!`R%mJUY}xb@g6dh
zksjci!P`okcn{u`;zhJ~guiu_{Jr3BBaX4z{vI~X#80-V(kH;#X6+Ek<B;4*9Fkfn
zS!YjgwRWv^LDSRVPb*EkV@(m)0cSh3rXcA+@-8KLH?EWTO--fH!fb5mu9XZVKdDO5
z(oZHz-4pBI0S?=<lUGRGi~Ak0a1Ut-jat|u?~9=CQmy+k?x){Qd++1A8|A-@@-xbU
zNdALZKI2}&{nQ(LjwavWv!!HQj+aKSfsSuO$9+o2U8<fRkdNP8;gbicA3*AUQeo*{
za$-wG@1Yd*r>z36tSz)R<FakLq@Il11r4)n>dCk}$fq_{4=9i-lDc6%yVlf$8l_z3
z?TmK_<>p>z4B7X3I<^g(rA6!sNKd8S=z6^?u8-xepxpfHj5!aGo+vpD?n|KUemmoS
zNFFq$aQ_zW!#;(CTTir_lB)@PGGX7RQO|yqoJ36zb}XzPB~8YL+TM9RV-*gvFT;A@
zi*Zt>;?{l@+73u-A0j=rTBOj*?CV+3!(L@8KZN|j*R!bm5b3de>S{k~{dOG9?gsXs
zkhsUc_v#+}X37~nNg4OMDF3h;JK@3CL&^J~oh9z)6;g+l)ZVwdT*hBY&){k6^4Rb9
z;o1YKN0ihoq-H=b;yMcYqoi9|>xeT~+xJFyZT^iM=8A6Vc}il77h`}s$R1TX9sqto
z={NxTF-706WRLp~f_vZw{L<hEJf!GP`3FhIZ}JBE&0tRsTaTe-UG6Km=L~a*mb<S&
z>v5&^Vc>Oe4qGRLR|oH;;thcJS@0g=)qm7Fbt8@TGU}i9kK91Cu+GF$;HZ*0D>9#j
z%;UGo97D9EHD8tbo`~-sgI3ZetaD-mz2Qk^!*R&}J9sB>{d3UIEBZ;4`D@@8B3mJI
zQu$Mt7o1C33!n_Z#;3@^wKKCGCk3&h%lkLTEdo0Z{?lva>chZKyq$GZ{;4mVwl01#
zEwlUy^eoG7!u2GsXCT3O^ATQQ&n0EgS>TK~n{j1Ea9Po}k`DZe!iTMAR#TvH+#a|3
z;SIP4|5@O}u<E(Eho1oFBz)<4=UnZ{H+pL4-^kZ4ywNLGEx-rT;QKyXyWlV0$N;PQ
zY|{cg1v42a-ZI*&M^tEkfgD_446}}Uzbb!`<vkzLFDW~x5cRU4{XA$dlV;_y;bpYH
zwRj!-N_8zh!@;f=k5#bSWcpgw(~wXBX&}|Ls^#k%a=mc*h~29)(!O>3Tj4$w_r5OK
zwzlm1P4DpBoYg3K#imqLY`B%V{c}!r$;D>FTwJZ~6_@>*vzxmpvs}W@B6BX;9uwJc
zvkfa1+2o>fi#e==Z8jqOYj1uED?<(WsMaWJp6!&2<>vfDhqd+~cG;|uvQ(abNNW#i
z-g2YmSlW`UU3Ob`QFhJR<6L@m*8j2%rR`}yIHT2&PEy#!9ri46h{ZavZ{cApjN2Rz
z)&Sv&m8>{XDl=1DxS2(o*&d<V<TjPI=dyc(oI~Vv78hPzPaVUtz?Pub(feAsxR{OV
zD7NpuL&@1XHzlj9b}`779s9NRqo=UEIlZW<Z8Q!k7txy6YBn1#)}b1ANi@o$LhR3I
z$l29esn|YyW+S?0HEd6-H~dJ;M=pfgRkrjamg=1zK+mj^^|bpmuFJWgHyUMw8>MR{
z_G;ME&?+zq$B22X0sRI*`_%2#s>OfU3)dR%iWl}kROa?xnCWt#!iWV0&we#tss>q%
zlifbo8Nqnfr<RAe*Pu2MH0&L-u*OXU42;@DXfNDBSLB4A?MHq=={qex+XqfAUV*EY
zSq&ef684+n$Cf-L^Z{;S%ktCH96V}#=IdJf+{u=Um6Z<xE~ByK%(0G#nuQkC2C{5c
z^QgA!)xus}TV?z7TD;>p?0D_kGTg1R0i{KY;Bc!P)rJdQYbFC{ZaGfSizk~qv8#4_
z`dJpnJ{cMol~a3Sri+c}>v;Be#2z)x;?uBvI@T~<gxc;Ur%_r7da#L#cGcP=9aUi*
zT&qQ-r#XJps>F2B{RE%p?N>IkB;1{Yj(N>%B+OJXHX79F4fNirfw9_i37rfIYA_?c
zOSXT_Mla1v4D1NVW^BA~k8Q*in7I4Sx)_m)?Hza8KZKG8;vO%X4q}&#Fdmy0SL(61
z(4*AQqRa;g!?@kL!4buJ`ysZ$DFq#zL21e6Q-bLW?yGq?Ows%*fW*1v=|sFwft{sw
z#~7S5lA;?QWP~w1>~!kb(DZ09FlgA`2%oWiZJxO-0mV$B1`YN~c})&w&@Ts~l2&!K
z>Q%8Dr!8IAR;#X$LkTS!zGzy&oLF%&=e7^7?aqz*DN?-FByA&;SUk3fhe@{?UBihB
zOpB~O5_>?>Y>tEyj0|T+VWS;t>eLw9wRZ8gDli+$x!C&R;<oLFHmok{rMRxRmZ+B|
zJM}2V;V_`z4{xk;UHu!*{OtnNs;3Z|epTg2p|2<X=?<>P=#muO*!6C=5xx;McVpZ3
zbegPOF6!E-oTfs-JA1<1F0^}%HUDSBJNZ=7Ka^K@p27|Cs`hgd@;5$+VMt*%w>LST
z#D}e&jL$~0gU7C7J1us!cdc4+TJ1MKmgd`z-B{@v#yQj~0V6tt)8d*T!MY%@_DC-r
zKa_36d1(8{C2Z7lK1)oAvggf1-!qGcSY0P=lPr#t@uh3kv*)iA+lOvHz*|4xGSj>5
zOo{X06gHZ%BOmePAP}iIw{n9WKbvRx%U1hzR4P8DqM;1L<|?vu?*A6GMVu(g={4en
z<7k&pYe$c0^Th`_2*;cDYsL1Fk7xeI=Y~Zbk*b`}z;x4INMebMc1_ZX1&!<>``YEj
zF#NDPFEmceXr4lXj}(n(o<*FVR4cVc)oQ<UT8;uVdZFY`IJ%hSBRY!{BwORT3P&)R
zVq?(4!kQen#J*8feZt9Vb{5&(Y<Ma&D`K;;3q_@ATy(!qQ@d}zc(Ayyh$E$a?FCs1
zC0<9Ewd**_u#X-Qp~!_iX(`<bqF8a&D`5_Oz0q<t^`;#MGDsKOx%uM!d~sj<sXM5q
zKu0(AszV?=0JYl2y4`1)SLcyBtt>a(dV9a>5-xkzbO}znX4L^!m{ahGi`LB-+jS<w
z>Of0QzSbSEQOvTT0S6UW?(j)<?WSXvfFNilN_URgL@L2ySQoBWY@bVHo<h@9h0*Bm
zP3r8Fj6=59v`f`;)wYW5VX|3IxXAOccHB3USfD0j<j>H$r@c90Xrc-0RC#zy(uop~
zM2Uofd)g}r#z*&MQM-bHN)$=d&TdX{617z8I8-vx_(vqBMdvsirc%7}NG>kb0u?7h
z7)P84!Bvax;>jzgj>E-pc(rCJ8ZBtoE<6w&KSDkcbE7qYEJF|-T@zmF{u0yt&6n3L
zku{$DVyeH?3AHLjYpXb#XYj-3gUWw#QeN?w_iETeU@)YYM{z0{qoNL)=?XT5u~!`j
zMqwHo4?f;(Y1LOeV~KBUSoUjp{Y64}tFDCGTh2>$Ofi$khj6jOv5Ubn<dWEEV1nl3
z1rR5Z1tvmBl%#TNV^{m&m3n6$;<+RiLwLCOdK9}u;vx?9e4HA_`5jh>yV^GvqlM!}
z$=`-)X}G_mpe!d;Rx&$_sibb1JcOK$(-IOZ=vH{&8UYE>!kf7ibi;a_A#O6lmv-ch
z5d%w1>=*@E?h*xk&zMfjKJB^<*PURDn)=!MJ?<3UW1L_s!6d<h1P1_uDRnr!K}O@=
zOQ{6{zLD%M5tIp@BsfoC6D$G*1EppQn;+3~KA2pK8+^pV#LgX}{I)2q+bA8x3v$qV
zgy1N_F_svPJT>0Xa)-$rAs8hXqu5;^CtGtLqWs;IPoD|0OoD<eUVm!2cabqoa1X&F
z1bYC2`RIkZB40}=N{4y4uhkm$Vm!iL5l8)apTNfkpnHRb-z1nL*hf$xcz|G@U;rT4
zss=%gVzeBP4JG$^iakg07{Mljeu5VWo+h|LaGBsD!6kqok0WwUn_iIRox4hoL(W+A
z=rb4L`!RUxJ@+bE_pWVY;t@l8+2*KapQg6A2!4fNg@yaD3`Fq6J12O(9(yi+(8ZT;
zy6{TROdom|+n&KhJnCy3DK4?Q<0G;M5Uy!DSvT|lVB0#OSRuKI9$#zW`}h#RFyu1;
z!+1aSU(Vceqh`->zhG|JY@qC1rRvW$Ti){A8ON+#;=B2C{&E$sAiz@p`rL)+b;|P>
z=AvGjqbJNIdMSC&7xVDq0Ctw$&!Bt$0cZW*TlkWoue*@Wq{q_PTSM7Qx-Xqg=Wb<h
zk=mCTz%QR3%5><t?p%5dH2%oTW%|;*%Rxs5I{LDG;aw*CKhW5n>58a1=niFak<6`J
zb|RgDhU~2|)J@6gTFBC>0w@Ksk9V0{1xWF3OE)d*>&pH&?t3yB(omOJpM~{>94NE^
zzYNNN(o=w~xpV=tc|dT|nOm7mF62WZE86;U<bJfw0Qw{^7Slr9t<lFCrT$w(uq2nx
zqo?=_ds4V)O%8Q+==pRuoBb(zFrSC++^tMkM9Jr=VNCVjKzCMY4_lV+o={q-e+<1q
z{X;!rI|^cF4mJ+JMslJa9_sD`4vLKTNLWtprS~9N$mFxMI@FktM=0`<A&etS=WgY*
z=uMP>JZuQtByE$v496_rJ(ezP8i1z_s8SjDQXXTF{htBUp1;-Jc^Qts=6&Mgnn`D-
z732-0jy)>F2>J|0>K5MHF@l1DQv=gcoE`&j%asfx4D4NaMKc&Q4B73HY1acwA~n8V
zNrY=mW_bHYf_6ARaVm533?*5!g~jG(;#-J!b6WAkxl86VnaZ}2znx$Q!A=5=U>AYJ
z@ZG$Vkp4N|y-UET?{*PLgqK;45#F64$PwI6@Y@7?31$h31f4i8(Ocs9elp@2HJn)v
zl6HvTVS>X1GL>vFv4wH{I7LnpoFX_waF*b4f+q;h5j;sCbMFP-^$=tUWTIZ=oy-aG
zOb|{CGDSQ?u1qB|spv#y7I~3(FA=;<U=X}QAaj0+cNT$6_hsHK6I2N}amWN9vx{3J
zS|?}{yh`8_cmyp1nToFQ?lpqz1PqZ(c_c)aY{!Am{2mzs-sj!#6AS|I=e>n^+Ly{^
z3cVS5%!d&83dtWHHU<rbDTV?0MSS3VP(?m@Pd;##<2BN`WqmpFK@;83FJY20`H)`7
z;i`1RHc=mKp}jrp%2Jl0mRFWlc8Cqsj~{K|gdsB2Lw&%9218n8tMDnO%88wnrEdPn
zQ~HI*`$!)AZ7er}A7yC^dAuh*VVBTI$8Rhn<3c}K^T&tmG5owA0(^|`*4BQrma}r|
z%ZNUF(Gh*G)~ojm)~9#{!TJR&;On&kNNy5rKpzxrP%wO3Xb*!oEEv8n6l_$mF@039
zals~Ze#MrvHVd{z9~a)FU{m<!kXp71whdpd5evT@+oo?33}22}J8^ui1!EV^AHOZc
zwtsR`5`&NYWa9$Qb7#+ETL2$m9FIOh(Dp#-%>Tpp9N5NN|1F0cU|--y_~M$69*f!&
zB8%1R^XA0`?P6o`v@E4?a)dX_d5R#X^RnjS_8?3SPs1-u1g)l!2L=5|K9PChy<DVq
z1$;gbV>dqme*u3*zPG?Tm$jRZkunO3+V_h&LEmcUzUShFOA9zDlK>uMuOsmddL<#}
z%C9<vSReGOoxCM1ax2h^zaQee3q{4si*JeF<b)86E24S>U!9y*Q$yfw=1b-<2H(%%
zyO2))e^X=0UL0<jkVo!&qJw)*<67n6KlyO=8^8Il$AVmqdTqStEms4JZ8mjbX43sK
z%D7)4_ydBk63Eo^$GrO^f<GnrLxK+o{*2%+2);pZKY>hOf62SQBKR7?HwpfR;9CSA
z68tT}-x2&hfkfO6kg)r8Fnm1D9w#RWyU7rz!ay=4-1$C>7cik{W{dkCE<u0dMGF_M
zkqUAcFDzcdX<DW?$sJ^J=9CwVB0nfC7wh$6v=fQ9|1<SEJ`hmfFqw|~IZEz~vh{G?
zmdMtNHr5hem~r5J_BF3cgvq<xM-AQKYOWvm;qq-0?*<4s6-iSz>a`&MXqYh_#axy0
frUCLub+@HQGDvwdThf`Xk#y=8I{%rg6Y2j25q{BZ

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/transformer_layer.cpython-310.pyc b/megatron/core/transformer/__pycache__/transformer_layer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..d45cd1a04541e1c73b2dcaae45bf660b5adf506c
GIT binary patch
literal 12115
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
C8{)YD

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/__pycache__/utils.cpython-310.pyc b/megatron/core/transformer/__pycache__/utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..6de4f26bfd5732c0479273929c704c7163350319
GIT binary patch
literal 6533
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

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/__pycache__/__init__.cpython-310.pyc b/megatron/core/transformer/moe/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..f0df6f16167820c7cea5c005494238d08edd6563
GIT binary patch
literal 195
zcmYj~O$x#=5QS6eLWCZ~h0X;;Ty<sL^Z+3=X%k2?Ws)v>7!Tl;+<FUFPC(EH@0%aq
zFxWIZ!Ls+(mij9ASH;7Hooa>_z1UZ`hoG|l;XQ)IU_iT+!73ybVR9MfC0S^_n)*R`
z1KB##a#oaA=**-tVLV(r2;UwCBu?>l8j*q_2xve`7hRU}IIqv`DWG1wIhX%w!>Gjv
DM7c9u

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/__pycache__/experts.cpython-310.pyc b/megatron/core/transformer/moe/__pycache__/experts.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..2b738de98a4fec5847f71dad28c9c4a660e97cb4
GIT binary patch
literal 18451
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
O`G)+()roHucl|$$42@y{

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/__pycache__/fused_a2a.cpython-310.pyc b/megatron/core/transformer/moe/__pycache__/fused_a2a.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..60eaf312fe4f68dcaa35589a6a91b7a0f0617606
GIT binary patch
literal 4966
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

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/__pycache__/grouped_gemm_util.cpython-310.pyc b/megatron/core/transformer/moe/__pycache__/grouped_gemm_util.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ab3e1165759dab683132d55407ae036debe0bbdb
GIT binary patch
literal 766
zcmaKp!EV$r5I}7wy9ByLzzJ>^NJuNhT9r5<go>)R0(A>g4~V^_ZtRT>P8@8fX!pqS
z8+-u2lq)BGflC?hB1k35M4lOE#-5pHyS;q_fvB$s>NP>=d))LTgUv21e*|hd6i8r$
zX6P-dw^AhW;x<O{6L^N+p&EZef{5e`nh}wT0oX*66>|3_dY{fxflp%Q+Kz`m;6`*@
zMBNwY0`0-_v2=j^7EX=H^1+^x#RsbAv~;#@q{vHIRaAS*&$%}I%*e^{7<Z$7_#1Kw
zT(ed`EmO9VOlTjN;@0t+l{&Dd^@<%BUY-=(NEVcKB5$}03pSM{56;$)kEX2p?X$u<
z$b!>;Ze1lEtE^=GqIny%nKX;;-lf0V=YKlA9tVt*X2cD^TutE)L<3qOf9(~pSmDoD
z5a5w4AHMKjx<G^C;Xg>0_2C8=J=~v8Bd*$p9y0pINbV(dZB0)b-B4Zoz>T4R=8+1a
z@lRRAq}sDdVJkL=xt0E?>+;gfyXQNToyn8a_yp^T{&L@VDa_GPzV11{lFLoV@<UJ=
zAvn8m(H#$5B-L%btQzaWzH`=XO2lZF*v9{}SoW;4qBZh4hBSW*6d@x#!WkwPS(***
GX1@T3?ZjUI

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/__pycache__/legacy_a2a_token_dispatcher.cpython-310.pyc b/megatron/core/transformer/moe/__pycache__/legacy_a2a_token_dispatcher.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..d6bd7193ec5777cb491c586b7a7398cc35417b35
GIT binary patch
literal 7760
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
G%zpw7isjV+

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/__pycache__/moe_layer.cpython-310.pyc b/megatron/core/transformer/moe/__pycache__/moe_layer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3546ff59dd89f0f3098df0bf1a424128424d4814
GIT binary patch
literal 5250
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
GKl&ds;c*TC

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/__pycache__/moe_utils.cpython-310.pyc b/megatron/core/transformer/moe/__pycache__/moe_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ca5af66b80c42d279a6e1a4fd11c3eadfebf1d6b
GIT binary patch
literal 21512
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
S(W@+t>5+WF*jKz?uKX{XVDVW1

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/__pycache__/router.cpython-310.pyc b/megatron/core/transformer/moe/__pycache__/router.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..2ba419c677c0da18859d062141107803033cad74
GIT binary patch
literal 10668
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
Gwf_Yq_dVwT

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/__pycache__/shared_experts.cpython-310.pyc b/megatron/core/transformer/moe/__pycache__/shared_experts.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..c4f04e52c9178c23ec63fa8c6077375400c761c8
GIT binary patch
literal 7754
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

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/__pycache__/token_dispatcher.cpython-310.pyc b/megatron/core/transformer/moe/__pycache__/token_dispatcher.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3ac4e29ef67c51db178235b255aa07029e52da7c
GIT binary patch
literal 25571
zcmbt-S#TsrdR|v`^?~k2qj3!89@g*#$N|PYmb+r?a)-wZms}D%;(%HSB;9Ou6$Xvz
z1I()CaM~DC;^B439%*H5NTIMo#&{hL)3*E~-<D+g!FI^uCtndRhaVgcJ7QlPq1YEM
zmn8gse^ymjbvI_nbt5`EE3eA@GxNVQ(VLzwW$@|#@Y44Azn;nbPd+3+79K9(>wSvA
z$v8$k(=j%Tj=5nPd^X$Jj<sQRavQl$ej_hw*>+*0fIO>R>`ZM;bxIqhPI;r;sccjv
zKi8h_R5z-fnT?rFZKEb>`SxsQZey-9zcDY*h4w<{$i|V*;>Kd<=*H2`v5jMrUTh!l
zoY*)a@u~L7&Z&)4MrJDWLdGdM<qtDX`2%y~G@dHXG@hp2(;s9v&fvM~%;0%Op6|hP
z&6&mXtZN|O#`ByrkLP*U#`9S`FE~f=d_>CM>twHFmKT2n2xOMcAp6X-&jr=Srsu0h
z)9<+ccF$SP2G+|h&ku^<+4Wn!ZlfLK*896{cWv1U?z!svb@$y}SNZi$&vD!J-G*wk
z+lX9Mz5Z_SaH4?kcD<geH@eQ`vi5k{k=By03tNjzs7Ci1`dY%<>wd3}pWyzh4S(BJ
z^)1!w)IIm@zT0iO!yYR4D#jB$tX!v$bg$X)eUwJ!!^#3g(_4Mdb?VJtXS3CHgQ|XX
zTHbEMZ*Bu56^^3W*ljdh{*9mj&~*B~8_Z+qNZ;;vuX**&8}*j+t`|)8yJ7ya5zJiK
zZlEg{1)8tCd>Kiz>ll@{)l(f;J=g1QwXQZfQ^`*O4;S$DehYz{*)W{UhUpj^S;urO
zC+k>SmXmYxA6gqZH}4dj;)j_JjEw@~Q%*_ZMa0WaMdDM4PdinKm)tT|Rb^+|sYy7?
za4RqC$wC`d<ezXBB=3miS<a$!^urwTW}IWr@eeZ_HOIpGIvLEp(!03cyXJPE4*}(>
z!I_ec4>D}Yv4>fb5#*aP;vlbFzpuJ$O%o%GK8*AG9KN27V9(gg)Uk;X8hgf$iQg=K
zE&S#j1D!AjPfELd>5JW#-)gj51J}j^nb?QbxbWI?ULD07f~qGI6s~tKI2kVd(Us_-
z-Jsy_)+KUc^7hb$TwMt3%JSUymb~ZVjJgM}`=on*yVr5gV`=&4w;MgIg!5Nh{`uX$
zw|)LnyK(hOv(a|X``az$a83I+&cEVf!K+?(<>gn-cf$DjW>2Bia2=iR^zh8Ns7I^T
zRja!<f?~bi0$l3#6};UmBFI~Lqi9x)!O8LITa8LL4U~*NjPuKB`EeeBpZOpI;2Q(`
z1=qJVC~UzLcC>SC!4#{@hT>ZO*idKiBOuU$jmMw}NJ+V`;_1hn`FwU_x1w@~c1zuh
z%IMJ9M2GYYPUz7T%BuSqa7vQ>!SqUhzRvUq5KQb%RO+t1NrGpzH^giN56RiY&Ty@<
z&@*vgPE44vu+Uw*^2j(~fU*yrG%l2hy(;5{(QI6bdv<1W&!U1sUY4d8<aSkW(+kR=
zB7UoTwccs$Hc7Fg591L6_%Zw7WAlGtyl*U<jpwigBWz;p_V5#~K5w-YZ|!H)Rqv_z
ziI^cQz2x^)b9;4NDAw{*Kp4AyKg=9r23C-6+N0&yfmOnuONqv2s||8shg17{x8DJs
z!5;L^*^KLr;k}t|J2Ce0H?a0_R5swV3pj;uNR07S!JcEo91ia(jeotkDu>0-;NBRB
zTm5d6#NY1re7n^F_3yY{-*r|$HiG%Jp8w)7>7r6SwQT8Kyo`xa4>Nd#!N?|>6%f=l
z32d<aZ=;mQX)RU<_fJ|Wg0~VCg6R;wVwqry0&BC?@S0h)5PcYr7K%ED2P}}UVu8Hs
zdYEJv!^T{Nh)Fj>sJ491?y1(*7Wf@R99IFj38;>*oK!!?rwcEMT9-v-lPO8QTaY3a
zr-r=_Ihct}NrqlbiB3(N>eSLahp`Q39t-=mhyihIaD1(IWEO1h_g={D*?iZqTZ6M9
z;Os-!gdzc1&gvEL=MYzqG8mcsc|G|N2P7|k9p&`&mj@3XI{m3ChjRssXlyUDli4x6
z{7ael!4-fP0Ba<?!2MT1jx;@wCLgoTrH~+sYZ!!3{^OvT^%V85_ug?;yRoZ|<1HVX
zdaR6(4s*@}JD95KZF7{wUlp@t3?7&;&ha`Q8*9t6B+=bQ$F0|cQk^_>zs-21UVppa
zXooq4dfn+Y>veU6y*Y~@C;~}g&-gdg{Y-n1!9xs|7;u9GIawD$USm9Uo*9oZ_zHvJ
z)Je={8o|r@9`{r+V;OUnSt=Q(mHe89Wta#0TRAXiP8gMn)NG<s>O&OHkGF$hoR4*L
zu5}!87x+_fvs=aQWws3AW-E}#rrhEVxLFCy48f&RO0qUe&TN=lm2}IQacUptHp<`2
zSecCqmcm>>=H{7p`vs8|)`?&uv<D{jZP|};w*71a+<(ZhCRU1+0v;qk*#M!~Zh1B&
z5G{Y$kPW&T&p>SG^t&xc8bqc}uhVFC?cSEXe)-{xmo+5{W=Rm*J#cpsSqK)AkKodr
zR@3!lX{uuY*V-6m<ec*By@7x{*p9K6b&Okvp&4bc$2+EDUbDRUmoiS4baPKwW*-dm
z4xT0NEb_qVBQLv?!{*83w}9WG!>1`H2l(X&Uyo7N2wOdH6}FVnDF+Ks$P-B#*v+^K
z*gftr1%#aW<kUsTK24An8!&9U4bQiG-3U1kmL}&4Xres~(75leEti6v*T;&N<*&ZU
z7hFIPWZP~xnBivD{QwQ#y{35#5&ZBl({P+RQC__b`L3aYVw4cnuC{xdm=!%4Ah;ig
zR4#sj=HHEAs$Orl8=i+<INUJYiax$x4M8=ZH|C7Iv1k<WSIP;si<jBRDvWvUV0ydd
zIN;npzu{vA#FRC)0LXW9J3YsjL5F}T-vK71T(l4ThY2<u<9Oz_d6RJnidY6m5wjRm
z&-l6h{O!!I&lnlMu$M)8(aGL2Z)U%X#b9CEe2_IV-QuGeZ{<3c6aRh*UzFvd(q&CN
zv283ACx0u8_vju>VG&x6^$|;!oWgP9=Mwwkm`5`onOo-Z%zpVc`&!vEzhKE}v{Biq
z5*gew_GfNq_G`B@H!XiwdQjQ3_N#1hXKrWSnYv}YVcz88UD(U*Sz9I+aH;Vd*eTJL
z*XtFVwPz<6mbYrZ=s)Dy*uT3yVgT$}|9a2HJY01Xyw%d9%eF=&LQ7=v0~0h=&r2~H
zvFzix?{F`#+RtoZUueW3jh>6Qh}&px+q#^s+@{-l2TTi)i}V2mD|(6NwXSy2wUB$!
z-3KLMInA7Saht$8<ZyJEZ$10Ua6>LVwrpS4I*a5Gq-6Vs?U6_dhI4P&P*-T-4R759
zbGz-fRQRg+P1ptK7P-X)qcYAtrPlRR_T$gTtn!uf>zB{j&z`ft^(H3a&V2Y&_G9Ua
z52Id+zqT(DnyPo5P|>_Q)C@k*@DMoUy~qhLTeI!J^uB6sLJ|Si4rlW%;*Pf>$l6fS
z2(r>3l{py#l`STi`MY-W942}fyeXh2JiXx1AtW)yF?`vy#!FFG5^$c#5NhrjIxOjG
zeFXA)?lpblBIm2ew?inir+T4_lA90d)>8sSfPWJ!d)St&XALI3EV*I<YixrApZTK$
ze11f-01+c6qW0SQvZ;O^DZwmsaP<%yZ}zvgfa$}MS*O+c*bJ(ibdZ`*$O>|zrdvJ&
zy0G2Yb%RPYYI(BWX}Q<cNwlm^GoVZ#6uLb~_zg!@m_$w|IGL<f-*hqOP$%lmq6tii
zi>Y<B-|IuUr{N1a5tMaQ)?1ME`klaP_qtbuY;(7-X4$^5nRBE}VS9D-7^^K<QZ6`6
zsvLD2E$)D%$VADQq!n5!QJlQO=3>GSXc@~(OiOSod_~k`G%8I~gkTM+7CFK1;p;t(
zpm=1?T*#J8GYiGg!Ku%xQ>Ilk@(0DNnLR^B&$K=_tthr=nI;*)JpL-577K%wJ8)X7
zvV4*Q6R9C3%8{s1M<j&p{~!Xi4q~=%0_l@bSvr2(xCzzYUUnafzuU$_=BDB2g&2T$
z*(tIdzEdDP=B?aK=txNrcFO8mkeqDa@K!`vFcbAn)F;WBR3BvIW_~YslX(@#0x7+W
z*fe9x@vD1zJk2;c5KzX-lE$)<hTqD`4C?0hYlzRH=em@)SBO)PyH^lWm2cD_$;O-R
zRlPEzy~8c`R>YGoEx%=7-);fdg_EtxPbh+-q^zd6sgOSC)OG`?9TH%O=)z4JlPqeQ
z>{d4vm(oIV5;I}7Q?D*aU`xx<BBLkp(_QI60-bY5#|t;aHQ0b@PMK6<NI8icM@BqE
zlFW=gTF#CnUWmo(K>uGt#?~(Zvhf@3r|f=rCF-c%-*v#LIkw(o<QKrVMV%5A04cdl
zM%1-<QrNreEq|MG>Mqm=TlVV-Vi*@wYuE{}d`yF2P@_R<6Ym#=%Xg8rroMwvU1q5{
zRmV?YtgAQqJKbq`*MM4}dj{XF{yfuQlki|EalyUM<5@WjC`M>Ty~)_O7!2{{G#`l}
z)dquKLa<y+U?YnEK{bL&U8BLHkr*GNHVvcT$XEtvBB&&R9L$DK!l?_~6GE!ZUQl}d
zQ+z#wr!reItb=OSG>DM+2c+~<s|dtoRFRfWwTuOnM2UlZ)`Sk+I<T_lXXZhr!16_N
zaQ^OyEE<GRQuQSIusp54iXZhg20zE(DFi_lTS-wHFcjE@0I6><Ef&Os=}@L<x-f8s
za)qF2>dchQfGE0)uSW@=BDtBv&<^tW^4B!0pPTbTfxL8JKPz=Or>RdVeDeM-B0rNb
zo(sionl34ZS423UmQai9Iafq=DF?oPt0;y{Yojuicjm+LHCJjtK8Q+(&y*A(<j*>D
z5az2Q%+G+AUkIr9h8X4d5Ui(V`NrGe5oFgy1y(jiniph})ca@!F>%24p1QWx*4$!L
zOY=mD@-~Hi4;)|{B|~9=f&e(UkgZt)N`XAz?6<M~?Jk&j&ugd~HY}_S;D?5Ak7?Zi
z5pcL;q|fBb$4DgG4GXP2{mf&}EM2_3jK~X1>--&B9G6;K!Uk&=B1HC2Kf0`2emrV9
zwPxA&-CJ0B`qeA?ZSm`)R$OU)D1B@EF|MzmxSGQkQdq`&9&<ENUy-Gt3hF#7)EQ3@
z;z-9qvq5vu#F`3fF>;{SnH|_6nSaeBMR)M@zTp?594CJacF^ZDZ!X+qE1=>cjN;eH
zAI)IFAs;ngLd^nezWt=bmWvWjNmxR?@=is)=}+%ho#Jhy3#|#t%=ptgq~>gQc7Z&~
z3<OV#ow@xvhqcVx=Fa^7f(W`tn94M#lt^7fN_huDdHon-$JB4j^KpT|UlRy0|2XoI
zhVX<_MtD-<ryPp4mBuU4awi=bQOz8>mhVWMNrF>L$X){S!a7-tdHfV5gFqzIzu8v`
zqD&~nrp2OUdy!_#UZTUn>uCE;H2$Jicai>m>DILg*<Kp6qodvD#Jt>BTGpZbMxifZ
zDb*&gVRzLtSfOhoX{cur9h`cx`wpzgPO4vEjkJ1>RCn;;#PN0dP;G6xP$y8pqp)B#
z`%VLrPF@T8LeoVA@osdR%cm7t-k~-tnBi1VS_t=YP-a5-AfkwR9yNj-n6;}AceK>t
z?ZOD<1=Atz3?FN$$GX3pAoP@kRG%%)g?NUJ3w7PeAP-*;G%uV$PyqWOjK_BP;&<G3
za8fXcemk5VlECnSdm@G<qUECnFadPeaKeFMc~JI&e@5(HQK4c{JW5b3I5C7sT%^7Q
zyG9RcytvK`L0u<Y>$^P?U#jgR>FJvs@C61Ukr}O^rr#=_8{)O0gy0S(q_Ze}1bfYU
z36W|!4~C*By1h9{KL?BE8T^8k$mO&7>@lz&RXkZ>D?phcFAZZQ=mcv<iHt{~WDf2-
zoRq~1LE-XJCJ@R<#Hd^_-Ww1XsCsjNnV=jqpcn(T*fG_&p$ddP_%<=5wUdL4lm%v_
z3?(uS6n@07Q+VdLKrB`-`M`E~n%-h9rdKs~TgV{Ca4abLtgsAQL9Q;zTs+qx1pz14
zXZPR}f@cfr!F=CPn|tPd<~9^`etCc1Dcm-kBJm~PNNibO=$;(yE%VUAj8g{ge+RK?
z#?-(;|4=^bKq&|nUsU3Ih*hP;=Xlo<rn3(4Exf9n>MdjR-TRAzn~(a(MD9E8%-kB*
ztD<h<c6R>+pjw6!6?omrJNb`H9U}K6Rhsf!10^YoYBLMf<|)8Gzn8~bXZcpheT38L
z<6~nF-+yMWaF-t5BdyJGc1Oo>)9Tj3(E_G;uQ^@<Zx_gY-%#fugW3-17T^Nt%_3&)
zoc+GxAtzCjN>rUs&z^<Gjif|+Ip%mmCMi^U(K;<WPE2>knH|lAX)GfsIYElnX;0Da
zXrh9J4MEGZz<O!rl2(#wEvP7(Lg`g=dLcbZsN#m${Y4*2Rj4=V1EYO|!dJxHns91R
z1ooToM?wckGA0k`obB}?dV?tx<ROd@sj%2pMF@sXh`9KiB$4ifS{zUX|GEpyeyGzE
zsDQl$H<%)R3E+$i(TVX*v>r$A0!0nmhcF)!k8=r;GwwJ0&d(kE7UHrKb&g4^Go)*6
z0Vnl?;#D-9fWRH+GCBC+oM~Eo1*ndme<Xo=JnCH}1v3%K4`~1#>T-^MW7mbf_OGIV
z5Vke7iRe1=D&1bUzKIuILyv-mlzLAVWc^W*q=UII3qC6iiW&%l=`an7j+VEL)~v?6
zEl-4Qq2)iqHi74X?l3unOUw7FxA3bP3_e5v7ce-EY2tg4i8TfsiTa4aUt;hJ3`ms&
zYpdUGYwmg|iQi<-y#z$49o6s<?O&4k1}0{NbX`%mr`}_=9IEZ!Py;3mb)Hkg5YgzN
z$s+Xz+IajI7~5kYQa^>rNb0BVAvnoy=$9sXp_iHZ)wo0=FV(|SlSdKO|1H)(F}Vm8
zR3qAepfnW5UL&pkUDU7D@+N7t7XFK$Rdbd}3Jm4IXI7yiY68nBern|*^uw%Ogr0LD
zyI>Tvd27L}7NABrsE~qZtxrwRee0l>EgI%e&Eox_?NEMxUa^Wfv_rk<XQinqR>`w1
z%VK>i3wnQ0u`Fm*^9QA@1^UlCaSMo$%X(UnT^)`^#oFGK1&~ZYtSJ3Y7;kI=B<hB0
z6JZv_!MY9B0AkL<OR&IcLvNf$kxCneVf^*;I|Y<mLYg)R8~b7e2HDR=mc)Is1X++8
z3O*$v?UxwaFN1tj?Fx3|wqZnl5mv%MtLhifdNs1#!IDVJ9a#~IMe{o(<40iI%Y~LZ
zibm7U6zZvwdbD94gIzB}!D#2i2UN^PJs}HF+CRCMmmXwxPB|qo47ZVb8a>UZA2|7&
zg)Zx!-ai8}UGPC#@nr86oH7_2#?MNf0I?(L--9S}OsDX@SJ<Glh~0NJ3o?2?po;N-
z1RcfSG+xd8T4w(NxFbNk+kX&j&O?YB&NLOm-KxJNZ&}`dSZtJ!pbd-|%z^Ivv@?To
z{_pfSQA1lUYmJMLnPbFzHxs4}g904HqD4hQI`l<I(32#w1vv(l>u5@-6&!5C^WEKq
z)$`F+J4yM0%ae2;v;{8FUrg5#5`K^x`8<Y(LtCT}(uiCgPI-s4;c=<U-iM@Z=-zo4
z2%^_Mv1(s|w|4Y4m^KA7MeR_V(&@MT7Tn-cIUY(ta9vISbDTJ*tSw{Y`Ng4u({{nz
zI1b>QFpIH^qCXw0Np%%-w5wr@TIP_vV;m862TL+E$40~D@0Vp64r?=BjT6}bIXCcn
zk{L)lq`jGT#$?A<q7^{HHeDWvP!R?!IWr@0($&{SSwyVq5FEqBqJ9$?b1?Kj8QLAV
z)CAxO|C4mCbnCH@&!j?qaQb58$FkY$wIfS5TVl5G18eHn@kaQU2|=ftUU&fYea6Ti
zM5fNUq;xJG<({^6n!yyT2{=;#i)T=9aj1f(PeVytzrhyHsb6GkRL2huf@+<Q!v1JB
zf?d=U{P&ncVK}IP!qm~<>kasp6HjOZfba?)3sggu4jfUG+vo&kiqqS0Jtqev22B|k
zWoSjlKo3q#31vRs&p;RmvKzq(?Q2utYCamj7A$WaqPsRTkj<cLaGQpBVNR&x*4)o&
z#)LWg0b{?zfLuyY*n+whPLgVlN#q#RFEjWR1QDka(@$+Lagi0Aj)aidGNDxfno|kp
zL)I#psQv~U7M;LQF>oGf|CP*!LZo;U1m0MXzd2YDN+ubJQfPf33jzkhsQk1vMSDaQ
ztU)QuQd9@P;0l!j*n=F(Acgh|^Rudz|FoEwdjHotFe@x0c8yO<1*jm*!MQsq5M(TO
zwziUip#QsQ5-yO5Fdd_hlL0Za0P8EYudtkgxU0v(WPrV(s}Z%cJC=~e97v);ha#Ls
zF%l%P0Qa6ONMaEraSCxd3c(?%JL8wcRtsIj{<IK9%G)#09uz<nsYl4lJKsQTmi<xR
zabWKi(mlIB2hyGO=cR=OI2#q|eB@K&Uz9Xq5x^LbMLCYzhNAZ1`2LAKD`X6g@1ML)
zccxQ&EOQ#)Gx*+vuZ=JIfzW^qTo8RO$9onmk1!q5-tQvi`2M{j>F4(HU(JYqzzAK9
z{wOIeNA_D$I|^=#79QP9fV4yXnCK<bcGd)i`I*S|Ydned|3l!2Tlvux`b$vRyNydX
zYug~-uSLGe8uNn*`GO$%vPAbgS|k^9>>cO{ZH;NNdoK2phCcaOW^12pdx?JXa6#M!
zlwBvu5PV^}7@f9Dk;^wHQpgxk6KEtny|}(cmrn%d=y%0lqpRhTj1kI~(f&u})&`Hu
zI7f>>(ZOR>5ofiYmRPg}8Ym<qgjVe{_Co{_m7CSbRFoo`$Svp8RhD{~0p&?e*eED3
z-=`5j<C<~}1>gyEK+%YqpaIlRYeMioV?!Dxvh2r96N9!;m?5<ixmZY+kjS~1WIYy<
ztY8*mvL8KZx;fA0gzmk;*l;wY%0UT?G2N7))?O}*7|hl0v%=qFvAix4EI`4I6M~UC
zT&Ipw9ooIW0yN{jg-C6o1i=#Gr$MSQiDobzlnFE=NomY{Oo0p&ws2A${*gxIe^M!z
zK)L9+I#@k?(nF7)$Q&rFy*7l`CK<xjF8X`8AzYY~Jd2R5DjE#6gZkTy4Jq%p`DimB
z)h(0!lFt!q_|&L1eDOl&Ju^47h?@shv-G+7CggHR@Q~#X=FGXzr6qDPsSkT_0blQL
zBS_lFaqQA`b31t_%MiyeLEJus)Qm%yFfK|?A<TiITXKqHIbt_Qohjt#(x!H4M_OsD
zG>-uD4dt;M9tLJk#hHV;c0Q=pBQf!nMi;)Ts_|z4k#OzLfIF2WTYQ&^ZMVUMLB@%k
zibM?wc917u$rRI!9qK``479lnJh-$Ly~b7Hi^9f;#mUA;ZBm?UG;v6gf)3wFY?YKo
zAjOcpG<<1RG>}?Pq}eg(D|@O97Zz}y+Se1VoPGlbeQ}yf{CJX$(NdpqF1?P^!SFAK
zOQ<vsFBm$i0++#pCyqKOfc_{{(!KV!d;K<?U0s{Lne1)@nq0Tp+G;gz>Yc*TQ!y3y
zgZ=>=RR=1;PQNp*=p2@epaKOpEK_V9EIy@YwtWshyVB2QqsuO^O}r>nfTsu-2$MEv
z5-b!1z5b>?uc&1njZuk>QVw=mBoIqKhwqOq1mS6!WuBJl?+#^nw3q}d)zcy*t**&d
zj1K<@-WHrU+@Lm^#Zg+EO53eR{trI@zLG<oR(5dD=n7p;m(?mSx)G%8UT7iiy84HB
zz=7YdMT<~Cl@`43wC2K5KuvrG4e1w-44@dz)bHTM>K~)n;P_a_qcV5x=wr`?n~GC9
z(ogXV52ed+&ta#8T~z;s9USRfA>5+B7kBO0Sl7ZLP0n`oVLY1s2!xOFFsLlv$W?_}
z1@tl+TkP8wo=J#0b{`rW?bss8om6aYgN#M9|HHVS4~_M6a*ewJ^jy?!%~8jlj2!Tw
z(up@+)Z<B@e1Pwd+DN-f^ANwD7Vq!G19)=c0Pfnr7avb35{x<&eyQ<9Z5%qD-@nUv
z?%KfGWM4NqY9`hT?cDZ{xJLddgMY^0pELLu4E~V8a8*mpX4)Sh_{->>cM1`q>E&ZM
zau$8(!uTmeN;Xj_^&ww(0blRGAV|{eDRU~zKgY%qGZ@4{y>o5>)Vc`jJLMD+pK=RZ
z(Bi_MEhqkL)=n9ha3BPQ7y1htTjMjX-q5MMc*EM5))#JURKs*rE=jO(MS?D8%2f##
zu1ZMPKH;21?b(skQ_g9m&W)s=aqdCtyj<pSHmKI0cimlgH=^(bU~-`whf{cQkLRJ1
z6~DKFpR{uLP+G55%F;GpdGWHn*=T~gJ5Zpyz+}D;HSu{~Td>{VTm{ZK@1U6Hy4O}3
zEs49@F5H3ND%^u$4s1sZ#5#~n(*2G|CwxhadlX2kRvFUYE=?!szjj&kC=soqkyUsY
z(yF1J6m*sr6`p2^T8=55jE%l`Q4X4wGzvs3_G_MtbFe%Rbj?*=7rH*Q6`h_TpQBB;
zND>kGPyj=EqH-R*7FFx|rEtr;GxmuwSh`Q}Yr=^Eundq7$Wt9UXwhMBLr_idS9(~N
z(?igPgXB1M51-IIJRBVy(!)scp&=!LL1>&9f5%srxfaQBrbijK5l-=VA2}D1@Zsud
zAD@O1z{|KqqY@u-kGe-jS7sXB8QM+4d52y=GUF>X&g;jp>u|8dp($xRObJ(sZk+5>
zx>X+6l|1cbfX*l!ICgAz3yfw9*Vx=(1uj{N{L-+;6-@V14ORCMEH<%CYio_>`!21?
z0UC7)_%HUz4v(6szk)<<Z~i7?P3r%m592_)S{L{dBGjhUp%FxAP*WBg6`=`(Unb0D
zxON4az<ORn+?j-U(VucM(AeGQ<Io??jSlYyG1ms0;l>WN3bJf)i4f4pWgY`{HL(U-
z3d`Ygoof(Y^cngugk@Hj%fpfDk^V7;F&u6%EgXL2f*6$bBQb>+<h3BAW>6(4<FW&&
zb@V+4q168KY>Plu(rOx#2})+O$XNt`8WFMl6!pU4AC16fQJbU>tb@VPG$v2GeTgz5
z#lBM{<(KTc*G8ayzm7vE3LUIAs>1gaT2wRfWcpe7s#24gbKp&TEBgj#l`}~1q#|a_
zP){J1r>R&prv;dLA>@jm5N7sDM&{89T_fpludX0iE@=bAdrS~N21??A#e;JiSbxHt
zf60Il3(DbfgsoP)4gHTW-$N1NS6Rdo3yLrV64<OvKH`57pfyCGQa7u{36rYx1;hG$
zaC!uYX)<w$I6+MVzXHmq5%Fcoiz6FBB?|5ja&P2r8aHt^_NGNOFF*zdVgVjOD5q!Z
z#Xa0Op!FV8vVin}{{(Gnpvc<!SA2941alFk0f!vAk_NRznykpkT~W*z|Auw{E$bek
z+^OYaarw~vsglM=U`Dp<&j>RbM@$o((?Nwkin0_fb8P8FJxDD$ng`+qN9)UQ!TB@>
z5K7rC6LAYUSYF~Hn9jk`tS~3HXF#=2Tf4EB$D%Eu9%0CQ3l4Zi*xYgG9EJk;5!|Hz
zfwfoU(WtKz5upZVAbPg;OE4bfMD1Q^>_e;(BuVlX(no3nLTxQXnh?@jqK^sVJ2(~7
z!)f)n?zm<-s+hWF1FT2NRf;SAO|(tLM_2)R3sF9-JPKZe*8}La&!a&@vn0DK^PN^Z
z->G>Pk6D{U&%dzVIcc4psBKON{!iJj&<;)>A_5h=ocyfl0VGO}^e`%{U88Pc5s86R
z`HayLs&PqK;}XFjIo>SbX(e!jCB#EHhl3ip{^~CxA(#a}=Qez7Ae^cO2?0a&77P9@
z1j|!`S%N}16M{#B(kAb3(^qyaL<>N!2>=hpGnPR$PL(N9|C%qF76<TnqvE=v>(Rpq
z+7A|@40<p}ZGFxyNJLkfw%~e1$6$s<9IK=&FdU4sHCPJ=_l+R2No|b@^JrTmFj`Ep
z75NoQltxFUiZREe3!FqAJDo-U*be&ez(^ksk<GE!;t%8e3K}IoWiLSUjl^Yak*GdY
zWoZmXMrO=Vk87}qB`5V)Uq+}~srR<V@t_@zC2tK@CyeC|RZ{{wn!z;);h;EoN!suM
z$R}xnFg)fE_h(g={f?1+q#`2*4{|uk2}kr16iuP{LH3z|TL5QZ8H2@<euwO2s(+j=
zRuP~-kH}tTU#1?w2hkSt4$KUeExaEOuHRx<#jOn>_;PG!3YUfOt^~4qFvtp<rd~r^
z;G_NneuhgYSd2&m2v!0&=>7Tz%g!=*i-FADA0rl=Qqj5Q&>NL@ljvH-Nop<844fl4
z7EvF5c}9ijj>UVAhVKge^af9ifalHvRH(j50gsbQ_qieP;6E>3^Z516oh;nos<40y
z|BBmE2sm1Q=^#e%@foLtZsmFD1^6WMHi4I2!)01pLhf~Wje<4}g1aZqdi*hsBynq&
z*t~{3&v(%iuu<Z!K?<*3KjGLQwe$f^>N2!{#(!pv&{e;UAhp8E+Q266ucPbi4^jB%
zBEa%WlE@`8wE28eDozCK;c{OH*k$X|+S=Ok!bEeAVDd87j=ovJb%M%eEz7-tRkW+k
zLB!YU-!VAL;2R9c?P;x%EJV>7{YR#W66wzRqd!8qKOo9|5)siK9p_+S;QC1({+cj#
zeP&wbr#LtHQ!{UVVirn2Sv<8^DNfh!sbv@Qi}@4NifuIUO?^t?lSkEaQnRG5;T&FH
zw3U~ui@?Qv$g7LwLe34?fm|L)FG*Nt7++z80}6>eU9Rj_m?q`)*-2h&1YOhAtaBtR
zKj%t49zY07htJ{J$$4i1nyeW)J6XdLT?`gs#JSXV-(61|ZwGG(`@@{pCNvb9jfpqC
z5;v@&{YU$cUkn9Re+B0PM}%9gDhZvnG!?%9sEH*u<;F@R%e}}w>HQi4o(!bqBEA|#
zO(x|QxU$0A1YewEfsA5##}XbYa9s6lJZo20>{IMc3tlV_BTb(Pq}wV_ldy&SPFcKG
z@^aE8zr)LAbh<w4f-@esC>hO&#8c2ms|QPj%{W{XZk%mlli+rzccB`4+J1EKa$3-J
zyA42eDCR;mu~$}bifKjXtT>{`BUcL5LnQr1I<`xL7bm~i>EWdb3x3!pj!3QOow*{|
zfV#fOMIHi$kfuw3@+28{xi)eHO<iEgq2c`~9)npqfF*;%88PZ0)dwubEu#;JUu2BC
zNBgv2M+_&Msr&$sCDunp^}?hxRxe{2$jRnPHV;4TV<d<;(`<cSwXlB~1EWOwg`V4$
zPX_l)Ue2))okIJhnfyM-m!CsGwZu2Bh`l{_o(%7NOM({q7pRc7Ce6QGgQuQggCm6f
zD@daprLVd(2Fr)^6w6`c>bRlZPA>jR31d058k7C^@c{CU{UFl6rb{Nyd4Xc#t_<!N
z-2cVZecQr48Stq>9O4(An9DV9;fxdfwnSU-<!XSj*u!N`Kq^+_9{{Sc_%w0~b&`fs
zynGr^+`*&@;A+(*5C}MUDl@4C*4s(0gc*uTqO@~ddbdK6+yn(_V-v7=TC*nAwBo3b
z%feLqhUiFncXjL_-10j5f*WsmmxLVXiLO2xX%i$2inpsbVvk!~6s1kHjjLU_gupfo
z5p(@AbiA;}Qrib~z<5GFlm5q7Dq@?WnC^dqr_%kFW0qRLOk2V!{fDHN(q;_yFJLs+
z4Mmk#^)*RDd$<5H(UG`mk)eJ@Q@MR5w46gzc>|8X+xo;f1;WIuXg!BC*A|O>d?^Wl
zsb>;ubKEf^N4=0nGdT}k*$sj_EFm`gxX0lYS~4OJmnmwzop2o<p3xCO6plH+$UQtn
zb?@=<n+Sruo+oiP9aC5ZHO@zJhJw=2S78Jvh;$eoJc})(TSO8k@TO9wV$5Z$g4)ba
z=ir?~BxinF%ncqn1bIM09BWUMT`3Yvgh9kXyytBqAkqMVn|N28pazj3pz#vqv7ZC7
zKnhNE0AcJyj(}!{EU>kY8{opTAQqiGp&zqCeT=!L0XwAuOHU~6#`QlK`|k{fJf84#
zWbaZcuZLMk*yO*@n1~f4NS1Cwze4yeAX3cE8MSN`cUj}ut@zf$KX&O5$O(g!^o?B`
zzlsPA3tJ*^`x+kL91GR9ILC@;02q)}iQtjh2T~N+5d9LlLisHy5_IPLom}cj;zu|#
zEH!}=8F$U~ZZJkbCYk<8*RG1s)Nc|jWUOj%F|HUjbMWvTK@nL|#3G?}2eT7-`bjQa
zBz6g#ugo!5-52)b`fn)w0((p_3(pREAKhwFJt!VMl{HU}`EbpT_;9h6<@<tcW3#D9
z==HUyc^n4>{?~42+y_d!CbG$?=n8chE|t3)-G8M09OSNYMHnh7LFI1l;B>l%)-J~X
zZ$On<kg6E*FAN?UDGl5eUiH5UHfmKHkQ$FQwBkTa4|l0T?h7`*wx^E{ir7u{uE>eO
zxjVlv<y+_}?wUJQN!*hF_Kp9VK;K_O;ao125wAHh!)x}B6Ocf9vRiGwr1*7xlkL+~
s6nRSsYV?gakC_YkTJD%p!SOp>T~n@I%Dh)QlX(x}d$mV0?=2kpe}jla!vFvP

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/__pycache__/upcycling_utils.cpython-310.pyc b/megatron/core/transformer/moe/__pycache__/upcycling_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..4897be388f5a7b9311023a480f4032d9cdf8a6f8
GIT binary patch
literal 5912
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
I#pct018;Z7;s5{u

literal 0
HcmV?d00001

diff --git a/megatron/core/transformer/moe/experts.py b/megatron/core/transformer/moe/experts.py
index fc0cf3e62..2a8579911 100644
--- a/megatron/core/transformer/moe/experts.py
+++ b/megatron/core/transformer/moe/experts.py
@@ -682,11 +682,12 @@ class TEGroupedMLP(MegatronModule):
             output (torch.Tensor): The output of the local experts.
         """
         tokens_per_expert = tokens_per_expert.tolist()
-        if self.config.fp8:
-            actual_tokens_per_expert = tokens_per_expert
-            permuted_local_hidden_states, tokens_per_expert = self.fp8_padding(
-                permuted_local_hidden_states, tokens_per_expert
-            )
+        # TODO(yehua.zhang): musa groupgemm do not need to padding
+        # if self.config.fp8:
+        #     actual_tokens_per_expert = tokens_per_expert
+        #     permuted_local_hidden_states, tokens_per_expert = self.fp8_padding(
+        #         permuted_local_hidden_states, tokens_per_expert
+        #     )
 
         intermediate_parallel, bias_parallel = self.linear_fc1(
             permuted_local_hidden_states, tokens_per_expert
@@ -734,8 +735,9 @@ class TEGroupedMLP(MegatronModule):
         output, output_bias = self.linear_fc2(intermediate_parallel, tokens_per_expert)
 
         # upad and concat the output
-        if self.config.fp8:
-            output = self.fp8_unpadding(output, actual_tokens_per_expert)
+        # TODO(yehua.zhang): musa groupgemm do not need to unpadding
+        # if self.config.fp8:
+        #     output = self.fp8_unpadding(output, actual_tokens_per_expert)
 
         return output, output_bias
 
diff --git a/megatron/core/transformer/moe/moe_utils.py b/megatron/core/transformer/moe/moe_utils.py
index cf7cf2b43..87886e386 100644
--- a/megatron/core/transformer/moe/moe_utils.py
+++ b/megatron/core/transformer/moe/moe_utils.py
@@ -354,7 +354,8 @@ def sort_chunks_by_idxs(
     input: torch.Tensor, split_sizes: torch.Tensor, sorted_idxs: torch.Tensor, fused: bool = False
 ):
     """Split and sort the input tensor based on the split_sizes and sorted indices."""
-    if fused:
+    # TODO(yehua.zhang) optimize the sort chunk kernel
+    if False:#fused:
         if not HAVE_TE or fused_sort_chunks_by_index is None:
             raise ValueError(
                 "fused_sort_chunks_by_index is not available. Please install TE >= 2.1.0."
@@ -403,7 +404,8 @@ def group_limited_topk(
         Tuple[torch.Tensor, torch.Tensor]: Probs and indices tensor.
     """
     # Organize the experts into groups
-    group_scores = scores.view(num_tokens, num_groups, -1).topk(2, dim=-1)[0].sum(dim=-1)
+    # TODO(yehua.zhang) delete the max
+    group_scores = scores.view(num_tokens, num_groups, -1).max(dim=-1).values #.topk(2, dim=-1)[0].sum(dim=-1)
     group_idx = torch.topk(group_scores, k=group_topk, dim=-1, sorted=False)[1]
     group_mask = torch.zeros_like(group_scores)
     group_mask.scatter_(1, group_idx, 1)
diff --git a/megatron/core/transformer/moe/router.py b/megatron/core/transformer/moe/router.py
index 5965c16dc..75023684a 100644
--- a/megatron/core/transformer/moe/router.py
+++ b/megatron/core/transformer/moe/router.py
@@ -112,9 +112,11 @@ class TopKRouter(Router):
                 torch.zeros(self.config.num_moe_experts, dtype=torch.float32),
                 persistent=False,
             )
+            self.local_tokens_per_expert = self.local_tokens_per_expert.cuda()
             self.register_buffer(
                 'expert_bias', torch.zeros(self.config.num_moe_experts, dtype=torch.float32)
             )
+            self.expert_bias = self.expert_bias.cuda()
         else:
             self.local_tokens_per_expert = None
             self.expert_bias = None
diff --git a/megatron/core/transformer/transformer_config.py b/megatron/core/transformer/transformer_config.py
index d92d86e79..36bbba732 100644
--- a/megatron/core/transformer/transformer_config.py
+++ b/megatron/core/transformer/transformer_config.py
@@ -755,8 +755,8 @@ class TransformerConfig(ModelParallelConfig):
                     "apply_rope_fusion is not available. Please install TE >= 1.4 or Apex."
                 )
 
-            if self.multi_latent_attention:
-                raise ValueError("multi_latent_attention does not support apply_rope_fusion.")
+            # if self.multi_latent_attention:
+            #     raise ValueError("multi_latent_attention does not support apply_rope_fusion.")
 
         if self.multi_latent_attention and self.rotary_interleaved:
             raise ValueError("rotary_interleaved does not work with multi_latent_attention.")
@@ -857,12 +857,12 @@ class TransformerConfig(ModelParallelConfig):
                 fused_unpermute,
             )
 
-            if (
-                fused_permute is None
-                or fused_sort_chunks_by_index is None
-                or fused_unpermute is None
-            ):
-                raise ValueError("fused permutation is not available. Please install TE >= 2.1.0.")
+            # if (
+            #     fused_permute is None
+            #     or fused_sort_chunks_by_index is None
+            #     or fused_unpermute is None
+            # ):
+            #     raise ValueError("fused permutation is not available. Please install TE >= 2.1.0.")
 
         if self.cp_comm_type is not None:
             if isinstance(self.cp_comm_type, list):
diff --git a/megatron/core/utils.py b/megatron/core/utils.py
index f80e3e04d..e89aed190 100644
--- a/megatron/core/utils.py
+++ b/megatron/core/utils.py
@@ -62,6 +62,24 @@ def get_torch_version():
     return _torch_version
 
 
+def deprecate_inference_params(inference_context, inference_params):
+    """Print warning for deprecated `inference_params`."""
+    if inference_context is None and inference_params is not None:
+        warnings.warn(
+            "`inference_params` renamed to `inference_context`, and will be "
+            "removed in `megatron-core` 0.13."
+        )
+        return inference_params
+    return inference_context
+
+
+def is_fa_min_version(version, check_equality=True):
+    """Check if minimum version of `flash-attn` is installed."""
+    if check_equality:
+        return get_fa_version() >= PkgVersion(version)
+    return get_fa_version() > PkgVersion(version)
+
+
 def get_te_version():
     """Get TE version from __version__; if not available use pip's. Use caching."""
 
@@ -688,6 +706,26 @@ def local_multi_tensor_scale(chunk_size, noop_flag, tensor_lists, scale):
         dst.copy_(src * scale)
 
 
+class WrappedTensor:
+    """
+    A wrapper for tensors that enables caller functions to pass an indirect reference
+    to callee functions. By wrapping the tensor, the caller's direct reference is removed,
+    allowing the tensor to be garbage collected once the callee unwraps and frees it.
+    """
+
+    def __init__(self, tensor: torch.Tensor):
+        self._wrapper = [tensor]
+
+    def unwrap(self):
+        """
+        Returns the wrapped tensor while deleting the internal reference.
+        Can only be called once.
+        """
+        if len(self._wrapper) == 0:
+            raise RuntimeError(f"WrappedTensor has already been unwrapped")
+        return self._wrapper.pop(0)
+
+
 class _ValueWithRank:
     """This is an internal class, not for use outside this module
 
diff --git a/megatron/legacy/data/__pycache__/__init__.cpython-310.pyc b/megatron/legacy/data/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..79916ecb4ca1b94a9817e656198d3ba39920f097
GIT binary patch
literal 186
zcmd1j<>g`kf{eLt8TLT>F^Gc<7=auIATDMB5-AM944RC7D;bJF!U*D5tbRs*ZmNDt
zW^svrMq++ZVxE3_W{G}5X>o?WTTWtnaB^Z!s(wjEW>HFfL1Ix!rM_=!dSXdYex9z6
xuYN9+t)ByABv<OEB$g!V$H!;pWtPOp>lIYq;;_lhPbtkwwF6mO%mgG@7yy2;FVz45

literal 0
HcmV?d00001

diff --git a/megatron/legacy/data/__pycache__/data_samplers.cpython-310.pyc b/megatron/legacy/data/__pycache__/data_samplers.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..81424effe29ca6ebf0f67e16902aeb451ae3d8d4
GIT binary patch
literal 5383
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

literal 0
HcmV?d00001

diff --git a/megatron/legacy/fused_kernels/__pycache__/__init__.cpython-310.pyc b/megatron/legacy/fused_kernels/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..2e435d53f7fc032bfdaeaac1624d833dcb01b191
GIT binary patch
literal 1866
zcmZ`(%}*RR6!*t`?XnO^X(=?SR*G6>qrf1wQi_yBjc8C>1*l5;g(_LIWAE<3?99ma
zLRjsdQVDYCUr<F_ddt7$Yfl_=EEoDbO9-HLMt**_pY8X4{=Jt^PF4|oo!4ufw*f+b
z+rj0J!r*IY>N^k|ah#&<agVogIVRf#dXmzvv+ZESsX#j}cOD?_a_@Jv?Qx$6(EGf?
ztI!7=Z=uG-37m&E8rV$6MZv@iEi#qlnL%du`Q{I+Puc2^-#liIt@iBOt>-be_UE4m
zy>-ksbp)b~UJ;En-XSmXZ*+)<WJom~z=-2rSKd7$BZre?j8UmktHC;jb>~0U-E!R>
zdD=h5JHe=OjE2s@;oc|c71q@w{1WybqC<R0TC@x=7`hxmSe1>F3GnAMSZs?d&bjC>
zL^AF?jPq{M(}I1qe9z84R9#R{0C058VCB8R%Cd2ry(Hzajq}}Sb-V8aXzDHqjdt(=
z4e$}f+Qw~oiofuH%t55k&<^2rmvH9~54>|XPU+(27Y#>NV577!Uc3JO`|Iy7_irpN
z_LN|)NNLuMbVu4pXn4lSqOLH$%6l>v%G@ZuWIT}~*10?|HF!=LvAC5+ZDnT8M?HQq
z<?jjE%#~<RN#IE1q<O@RBcp5=rYs|+h0#o3+FBm=h8ic5aA>8xvjC@zAIHotzCow0
zu#<O1$P=Z*PL#uWVLQ=b(Nmpp4NSJ;C>5dZB$BftlKLQA7wt&PJX?IW9(K?5Fa;$(
z2wM<5XS+gXB2^({NtS5FmWl(jz%EFufwauJ&pIM4g!~NrRtq2;OvXPUXC5UUIVC>%
zCkVW^{X5ov=|P%<JL=KW{~y+vFt=D+Xck-WnvoQ&D|D1Hz|UsO7`;lFDo;1ppBS2C
z+IUe>h>RQG!jmRV<9u&%3K(l8sbI`_5W4`wAZn^S1zwsN7E2KUK`)-N;mKM11elrW
zOBZ*eom^g>Nivx6m5l9mavnCxIV&tf<;PY`gP4J)Zh>$p!49sT)o2x0aSd7(PtyPg
zc$SuyS5n=#JD{!F?Z1E+)1BivAbK0f4b&z>JisFYNlFG}L^-4{_vX+L3c!HQqY>ed
z#$^Hr^JwVWM4m_7>fQhk+=17kW$N}TVKd3XY%h-cWbvoxP@Hb|vczHykY{2)O){Xn
zFGVUMB~ENM7`!yj3ddAcuUW_(GD4YJ+!66E%X=Eq-ngnr6X=qRix&;w1m$x=zL=_v
z_TO1~=hhSF=d*;rkPWz_<dpo}Y9+9xD1o&+TY;u-f^Yy#?<}BGcnZJ-V2QNrSKzcR
z+v-um`4p6XpwS5Ghpl)&Lt)<nv^6=njgkEUY&vr6s;X<3gWaD1`)jD182wsWkL5mU
z(2ah5)p7`ES<hQ_-4XSYO!bSpQ1AQoRs<B}P(w(rjN9F{Ao!bGPoxAAIb}Y(iL$e9
zA%V;dEI$M{uLph`=GLI8DG&rtL%22k5rj|9q+M%N<d@LNPp!BI!c0JAiaSd^ouq1<
uHonOA5=i}$bR|^f)=O7i0BwQ?-JJJQ@yG(GET02nDO)2|KcK;#+T_2T1nS2C

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/__init__.cpython-310.pyc b/megatron/legacy/model/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..c1e6e9938e593827934ff62f1dd1a361b0922ad9
GIT binary patch
literal 525
zcmY+AzfQw25XR#+%|DV*;3+zQ#Q+mRh#@RZL9_$PKx7(|M6#2}aU}9QOuSN7CSHMw
zvzsEY<n!;lJNY}i4g$}BRlP^WJu-|>CH}4nh#T1L6NJpj5HmPRCP?vwO}Uwvnx|~W
zt;Eu7GMhVzqj|<$?j@dPiyd%3@ip5l;9(L1J8NU%eu1~KK*LE~zR@h|TAD3MPsOSh
z9Mbk<ydKfLr9#GaMj7OtyNAu5?ajp=k8>(hMyk9cIZgT497L=p^86CII!0HE!(sla
zjGz;o(h97EdhX!<S`Uuk?XEIa74HSicNYp%x8}`W&y;rL#aOnK4F3-yY?ZWNAQ(V6
zAU+In1cwga&$y^L#aY=(T##Cj3g@N7P1hDUVkBR038PpRrO48T2-)M9=0u9RI$g$?
nkBk|>w#WL}I8Do{lxcd_^n-J?bG}xe-G&hSiI4O~KANK+x`L8Y

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/bert_model.cpython-310.pyc b/megatron/legacy/model/__pycache__/bert_model.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..d64ee4156f378e93eea2b500c1c26483fe617b77
GIT binary patch
literal 6466
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

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/enums.cpython-310.pyc b/megatron/legacy/model/__pycache__/enums.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..98143502768ff0af39d4c31c4e78c9cf20fe5a13
GIT binary patch
literal 890
zcmah{y^ho{5O)5P)vk2xA&?LS?G~(G03j$in%ixTDioHLF`GdCuoF;fcnuzam*7F%
zQf+-56*EbeI|)vBwV!6bamJrNPqSJr7_R)=MgGHK>?b9+mygK{{F^-jFmOtiveyh;
z@V+we6npP{@lqEV9|B~8nemVbAwnja86OzLWl)7_=wP2Kwn>iIlkGFY+Y5C}XFkC|
zvD5*Uy5OW9xTz0b8i1dM5Tp@=*d?;br5u!gGqmbRpB`NTkAT!41BCr1wy_YktdtOT
zAw<<cUsAjj;$tt%xe}>5Yd~omftrGqR-JCdiJ#L`_3>1lQ}MazazRv~J}Ld3=`%cg
zgkNuY-c*W1VLG16M$4KXijKFv$@xVo4_BEi74PywgJ`Ah2EJ1ViAUE@FL%6}V_ssA
z4IJgGlB>F}%(fjg-I%UvmIyKPo#_`lW93eRukYjbzYRuHeH*{*x|%%I<fJAi_nSb+
zlq3W+H#RY<d?zGswTnzQ#*FdJwWsJF?LS8#dDkHVX+(9z-KkEmv5HETq+}<}hySXH
zS_x3p2ODOxH?sVvj)&NFe3l0oXv#K@O?G4`9f0%Xldsl)g*f^*${csv^V36Yvqr1!
h_yGD5HTv_?H&?dtvuVtp(^wiZEOyuKI$HZ@!EfJ<$7BEi

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/fused_bias_gelu.cpython-310.pyc b/megatron/legacy/model/__pycache__/fused_bias_gelu.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..19e9a32d08e2524e3753a1d76dbd25853b09d595
GIT binary patch
literal 1363
zcmZuxL2J}N6rPzRyJ@;x6<4bVs|OKQun`4M;tFCFX?rPN7BNgSvzx5RW}Qs5ThdcK
z_yfEOdJ*~?1b@gJL{uofc@xBg?`6AnD-OIj?@eCjeeZiO$(l`%z>40kMA9MT8#=Sg
z2InqF{s@#Hf+nPkJ4<NFx{MOZgeB}(WS4d=upLpWZ2JKbb>Y4u!j)v;3~IYpw=U}g
zw>u~325HY7z<p%BP0idO)<Lhxr3x9I9WD!Y7vvsDegjlVO1emPSjhx!0RT<jQDKz~
zY+E?Eqb!mZc@J?d0!eD?`|u*HFP;9x_|e%XpXJT_uMav06pr?P(ue8S?;kpQ%s4tz
zVPtI0hf&)y_GZj;L&t`0?Ge?4;9t^@vQ+va&b1%$O!1-LkF`H4^2lFFcz+}0iS%_8
zD-n#i(qn&3_PJKs@Y?E{pB~zN0!BFY(@e<3$I3;3xq`k-isjMR%pG|rAZv~-aM@L=
z&<l~5>8gQ&QgQSYjFOfNII=2kXlWr&z!B^y6K-~FVNafvc4@cBIcO^IHxpAa%1RsK
z;Wnpq$|;`;!6+CMqA;;SH2qs|et&w=``A%+@Y*#)`wE9j&7*37GA?o&WQ8`Y*Q>ak
zs0Dnua8z!v$-`%haF%1|UA9E8GncB<;DjK@7G}N+l3xZTNtX)JWzvFL*kk~~o(`rX
z9GnKzcpz6FuN1>j$Jy{0lXx4Jb`Nhn3#ugVDmLH4h-+ZAq`Pc`?9uf$GpBO?LI%A|
zRd`==C92lI%vhn`GEO`k6?#Gej?GM|b$AKmFJT(Y*RVXg-I|59d>C@<V?e@>;4Ohu
zk^y<bb{MppLet?h*tK?`ou%CanCc9K0MI4^6@iw+JX3kaW7|<ku$k{GF0dmA^&Fg3
zc#Wmg(ZBt1u`7uB3WVj@c8@ivOSjJ)!##~!2cq2|81hsGf$@R>=DbMIZUn*ef+vSh
z8oA~=4pXV4OsMk+;R33^lvNgvh-!hl2$JJmxr9-VF?)el=WS2nw3t)V?`t{Clw5|t
zio*X%)tahw<MKjhShsPfLr~pd96lN)<Jm!s(^2w2B*wixDd!IUJ@S(X2gqRa9%Xfp
Iw(4H<52t`GD*ylh

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/fused_layer_norm.cpython-310.pyc b/megatron/legacy/model/__pycache__/fused_layer_norm.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3e9ff234248070bcc390cfbd106c67ba849736c5
GIT binary patch
literal 2642
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

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/fused_softmax.cpython-310.pyc b/megatron/legacy/model/__pycache__/fused_softmax.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..189b06d06c0ae04bd6a7a578c0ee3ef3a533d59f
GIT binary patch
literal 6207
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
E8x~dB$p8QV

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/gpt_model.cpython-310.pyc b/megatron/legacy/model/__pycache__/gpt_model.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..eea7bd2e8ab90d483046b789268f56f8c9c4ccdf
GIT binary patch
literal 3227
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

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/language_model.cpython-310.pyc b/megatron/legacy/model/__pycache__/language_model.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..ac3ce4eccf30539d147393bf4bc9de8f63a62013
GIT binary patch
literal 13247
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

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/module.cpython-310.pyc b/megatron/legacy/model/__pycache__/module.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..8d02c5c08b3630d68590cb5e14960faefb6f6e0b
GIT binary patch
literal 6507
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
VM6$A326V#dCucY9qFp*V`(FW7i~|4w

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/rms_norm.cpython-310.pyc b/megatron/legacy/model/__pycache__/rms_norm.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..378e3e62dd4740192f3068be68159cbe947b9ade
GIT binary patch
literal 1521
zcmZWpJ8v8}5GJ|1_p;8CZ2<|82Uxh!0kReWf)qwzBnY51)**;oU6I9VId{kNK29VT
ziiArg0j~TL0-Q>BY4R8HBiN=0RHP0NIB{n7PKuOpv9m)CIrDMmo2~l&9>X#HaeulQ
zGWIJ?ZVy~zU*KzZQ7EQ(&PMbVIV<>xbM`e;feJ5}3W3e|Oq>U!K=DI1h_3Ji8xFV^
zWtowFdvw<myN?R65m#&^y1Xm8fx3^r0u@21S`eu=w8ouRY|K?hbuap(w(6;S7i`o~
z8>)}r?kg6uQ4b?-`u4X6hr`MgzrFtb=j9*2{Pb*p=mVt-AHdxD2NsTNC^JarsY&x3
za^K3Ta;zs=bPF5l^al9aPf<8_&X)X=akdZ(mIxOtLl-Su3x0_YuC!fe!Dem67r}YJ
zF*yh(NS|}Y5RW84X|7YJt5Oz~s&nY|<a&H*Cidygj202D+|i{QJe4n|AWyV%Q(29r
zF6Xt|m3j~M<WwsKrL_7C?wrM2%AIjurF0r6I>(T%lC=dnu8ef(utYe!Qo%T_b4SKc
z;K^rqy!<asa_6Y3a&&nJ%?W2}ka{eyH_GdLYFkKc<q_y|LP6E;9mf&@pt(rROWR;M
z0X>;ID^n{=07a(|&=E+ijsaC?p!RM&m^Rj8IOzJw)^jkvlO(#-E=f!a4Mw2w-EXk6
z1voTEt}@xwhgAvIw^osS+k#7-GlR&77V@#7La)w~chf=fhWl=kWO-_BlDuJmeiu)x
z0%E1Di>GO2(lVZC7td=ujra3(a+sw##CS8Kh*<74K7dK;OjSO4eh?RHJ<d_dPGckh
z<gqDiLWS6ypBidFifc*q`YryDKNM$MYbx(u-!h{MUJud<@K^ZS$0!!uAx9T{DHL*Y
z7AQe&`5O5;3*Tdxe49~A4zK9o)jJ$7urb>&0p`fJL1Z>?-ABeA8|Q<0b>hPU(z40S
zK$tDE^6$+f{I0}yv%k5+2dG-|`<S2gZ&1_i?m(t?qQ6N4`D0WTY>BX`u`UrdHPa7*
z8f+FcVEJ$mnh$ZGj~Yh%wmY3el3H^g7Y9KD%206Ms%nSL@n3jtr2I*06a}*sdYkw7
z+2%FGwG};)ZGSkpN0cg&K1t$xNwR8H)HjmkxK8u6CBWV^A5qwly26J_XRaw?gVsng
z_16T-AkUGY|K{xhS`8)7P(Fybmf&@m2n82Be2em(5aMqUh`&U5|83{dR?zIlY*3L_
iJZ~K||B=RU%X<^2DNX0|75r!T6JnO)bi@XKU;G1Jb$l-X

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/t5_model.cpython-310.pyc b/megatron/legacy/model/__pycache__/t5_model.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..c61a27bd4e7fd0ee3c9ff2a1002b5f672aa71e08
GIT binary patch
literal 5353
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
F_Fsq?YQX>i

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/transformer.cpython-310.pyc b/megatron/legacy/model/__pycache__/transformer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..54845b7a552746f86de3efd45453132e40caab01
GIT binary patch
literal 37433
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
N^ADz{oc)FT{|)1?VOIbE

literal 0
HcmV?d00001

diff --git a/megatron/legacy/model/__pycache__/utils.cpython-310.pyc b/megatron/legacy/model/__pycache__/utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..e13dada6cd87a8c177ff1c4b41cc95d0f98ada1c
GIT binary patch
literal 2792
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
Nkhj|mZHQnO{1@aBr-J|h

literal 0
HcmV?d00001

diff --git a/megatron/post_training/__pycache__/__init__.cpython-310.pyc b/megatron/post_training/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..6e66bb2bc5e1ba53db4b9e4bf186f7a3ca1a8dd1
GIT binary patch
literal 188
zcmd1j<>g`kf{eLt8TLT>F^Gc<7=auIATDMB5-AM944RC7D;bJF!U*D5ynaT0ZmNDt
zW^svrMq++ZVxE3_W{G}5X>o?WTTWtnaB^Z!s(wjEW>HFfL1Ix!rM_=!dSXdYex9z6
zuYN9+tzVE|ToPYWl$e>9nU}5~9}lEU;^XxSDsOSv<mRW8=A_zzEG}jO5-bb={1h=7

literal 0
HcmV?d00001

diff --git a/megatron/post_training/__pycache__/arguments.cpython-310.pyc b/megatron/post_training/__pycache__/arguments.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..fe3ec8ded88d88ee8c8527358f9357d000f34de8
GIT binary patch
literal 2118
zcma)7TW=gS6rSCk&2Dq)C2eT}ZR$dy-G|w&M390&6%kE})Fwnt1QIWcGd?rpW@bFG
zJqbH1Z@lIY@CZ-*CBO2-U*IBf?7d`C3Sw5{@wxc(=W~wFilwD_51;(!?PPVq^M18L
z{b{1`8NO-}2j;QH58gK(Ywml!R@gw*^s#;&d_Tumd1!g%y+m);JZpU4c-45>U@hHb
zKK|Nqlg+WtS-asmeV1Kg^K9X)HIWxlUaHBLQNB`>ucCadCNCrI_1I%Kerm9rHQcvQ
ze+%_1s9&w=-?n=84!eEkPj<Y6nl*NJ#(>}s_i8)5t6S_ncE7gbeW&@Lrg`8{A5JtL
z#-~^9Z8AnEV_b8Q)09vdml@<*kw{2VDxSyW0CFYdivzMF7^LLOLi3DQAj!kbDny}s
zBm$~S394URohpMEa*#aiHB4J`okDdz2;jRyNF6wzK#vMA-KTp84%p1^(Cm=9d3E1?
zi1i>^AQ2!uCvMrWkm7_hko}%-e239t5YaN#rV}QDhoFp~Kw4BQvkg;-X*dcp{Aek1
zGq1FeFx0Yy>cN&HMJO42k*QaZW+Y4?JSqgwb-&j%b2PMplD3ShTQhVGK^7w3_*~UT
zGr$>=wGu69t}w0{$N=(~=TL{Q)@FF<6GD)Rkfs6E8uNjhR?oIkZ4=@Q<cZLGQm``A
zn^Tuhh|mehQ;y*}*m{El;mXF6^=sshPJ)o)F@xih=DK?HbpjTIVE%KVZS)I}mNj|y
z)!36bPhL?=s}3ar2|HsDMzQgCMGn1|xf~T6Lu(s4n_02)A)eyMGObypz3A2B{Q^QB
zjW8j0(S_YeDDsHMB$6T{NRz0tuoVRiL+MiAua;+VoKe~BEf^njxM4bW9I9i}LJ|_&
ziD#BB(2=%_m@c}l59#T#>7K6B4L7p@>vrAxnCHjmJnI4ZKNPRbC>}8zsw&u{I<c{4
zTxp)BF0>P*QjVn&%~BHa6#BiE^pT}(+ric1d8H$u2AfZb1w>i(;S~A2lI=d$MyR^D
z-((?H`WW9q->7qqICcrV{MD05jSI=KkTFY2mkbM)geg^u9MbS;oFu$exE1E-!pYoC
z?pLcb?7YnIcCu2@AOXtMZ+JAXdbC?+hqe|Yvg3@z8C`QySS6(m)Cmv<p<sA5UPlBP
zr+AU*2&AfmZEZe%zD36R{{Xug1bAT3We!0S1&nH{Kv#Fa*d~*?yG;&Z;%G@=Us}eV
zI-EAsVJt;in8muzw3L>ng(YR%N<pOpY1+>57f;^C!~g#6AQ2f1Y}^J371%rmG1r5l
zRLNjFrSU$t2N>vtOEyFRJsRvx+FS5^XE1F&gF+~cjgImhxecbARKFORYnG8q1vYU@
zSJ|>sKjN_1^jpn_{mt3;55F^!{_@*znElgwan)G5G+v2#fBJL(j#9U~dAGK%E7y?T
eZm;3KE>gAO4%$rjQ#@0d!ejgIuk7FcV(V|B-HlTK

literal 0
HcmV?d00001

diff --git a/megatron/post_training/algos/__pycache__/__init__.cpython-310.pyc b/megatron/post_training/algos/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..cf9ccd54ef43908d824c9f16d3ecc1f51201f88f
GIT binary patch
literal 194
zcmYj~F%H5o3`JAa0U`Au4B!hOVCqC!dVt6xQ4%SMqr@G07!JUdSh)ogse}Yy^80>X
zOkKATHTK@yQ|;Fx|7oh6>y)-aiBW8u>qF$_{KH#=rJzB%!eEgyMlg;cO~pd*(Tq3r
z8rZt5WWvld4B8-Pio44I;k!ek!jdz(=%NAih6+eojiubD`MEv>Qj^!m<$YOIwBiFo
C-ZNzY

literal 0
HcmV?d00001

diff --git a/megatron/post_training/algos/__pycache__/distillation.cpython-310.pyc b/megatron/post_training/algos/__pycache__/distillation.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..cad5dc292f5cd3665cba5266a546bf210385eb06
GIT binary patch
literal 13575
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
KtrqW_h5rFt-XAmo

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/__init__.cpython-310.pyc b/megatron/training/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..5b5f6769a7b741e0bd3ab1be39d1291e202a51cd
GIT binary patch
literal 771
zcmY+CJ8s-C5Qg<w?P_-=?aN49rrjc84iE&XT-j;du_3q?Ara<7ASoN0y97v^E2&N8
zE2Q!a5yK7z{rLFLj5rw4*7YiZ)&IQe&smcE!OhzRUh)lI{|lr|+EgVpX|pz0sm^GY
zBF}(xnnx~xXLJ^M4qVV8@&b5H=aEa`1zkj50++OmyaHa*W#qM5=`~$Pu2iLKTI+^3
zdP6tStJPNT=uYqHULWWIy!19XHc!xH^8G0VJ*HFHiNLt)Jn$ab%g%7cdTv@J9Jn>Q
z!QKlae?;S5G=%Zioh)}Pdvr3y$QC1yP<eXw8uY9YOxdoBSqF4@s~qEFuuk|<3pi&L
zKP$Cx*vmm086;P5Cexzh!C7<6r*d#2I4;e!#B^<2p{5V95?%HH6)g+G2WCdiJlBH~
z9tx|$NfVgk=AM0?D(RWxkc9hb^CpJw@nR~VvAcd+cgmh%8V}rgm&3%|45dJsqbyKL
zlqCvYlxg+ax?7`B#*U@wT!l$BN`rx73{rWwL1T-u1Noh}_sA%JDe0{iq?JC9o?B>_
zbTW`(^gX#!yt}>QN|4Y?_zeSh;Y@D+4eR6e4S5+Hd1-(!hRredX*f^i7Z~5D#8<ou
R{t~3js;o-?e=gF?>>0Qj*nI#1

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/activations.cpython-310.pyc b/megatron/training/__pycache__/activations.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..5cfaafafefe213f7b16234757a6fc354e5c458c0
GIT binary patch
literal 862
zcmaJ<&59F25bo}oOeQ}oZVc#QUmy!+4jvUFh{1!K%X$h(Xr?<ev(9v9yL)sOauD?3
zO9;CcVZoOXZ+#N=l9Pf5K`&N!)^#CbLH+a;Q}xwXCAYTP2qb?q&c9-WKD)<dX~5$i
zs6GP25W^*!u05^@K^RrRG{o);DH~NZjWFU73phGxve4Oi$Qmqq6~4sNcq7wfvCp(N
zGA-8jnKr}wXwX?fcQhGb+d3%BY+h@wEIzW4;-*$21>_gvVu$)ZsP2I==mZ;b5-iav
zX84pqJu+Dl$P7Z;FjA$t4Hojb#bX;PUe;$=1&}>MssrxllO&fFPgtQ%l2fUuNV38t
zi(2Q&xTM*BN=u%YyijbmpvoL4dpx5?NpbVhUQ(UMiBYr=g~$?`n&KHXg%o<YIJRAV
zSX0H>%(af8;dckEN7NR$|4+8`voX9xeVDC}{A5}DZfDAF{~8U5ilBsT>LROT!Iayy
zA8Bp6F4;b;i}dL%gWj&6y5h`LFdLm6G|%ZS1nZuRIBu7S1%22*3mp!p*F7F*0a0U;
z!4DuGN9Vz}QTF2fhg%O`uSVGq{IL4;<?RL7&`^>86KQKswedi=p_q0g?Goh{Jm{<k
zz2<j06k<591&}NSEiDnkw*S7B8^dn@*~&1LiVxwYl&fc>$6RQsJoTOhU;h$k?jV#W
dF1}MqR+s#)yElJlG4A0mA;AqyLeO9b{{|0-zzhHY

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/arguments.cpython-310.pyc b/megatron/training/__pycache__/arguments.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..a1bb25753fcb7bfa1c47e9b1682cf6d16f5443d2
GIT binary patch
literal 93521
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
bt@bRx9<4o4J5Zad?W?_1d#(1heV_k72n!bf

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/async_utils.cpython-310.pyc b/megatron/training/__pycache__/async_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..225914857f9085217fb35132d46204ad1f58dbaa
GIT binary patch
literal 2177
zcmaJ?&u`l{6qaP!mQ_26)1pPU9eC)W20D4S0ogDtNa0hPVNG^1FbIrD+iE1zBdHn=
zyvvenue%LMj{BE%-D&^AF57#Q>^NCA0;Wldd_TVT@uTeZLI>LHx6$lH;5dKaWV`t=
z`4)b91s!w74s)58xnmdp8=03k#*N$``!25gSu<~qTXx*c+IcVzT!*{Y9Uk7e<43%4
z>Ci4~vG$cS?y-RT6OVORc;%0G*gos>U6}XS&Q)`~$9C;(kM-eepLr+F;PFKsp3YKD
za><H}lev-~QpPo*M5kh!aU%sug*H?qoX80|)Ju^Z(Ja&77rfwPF-wyf$*G`Iu0u29
zgyIg8%y@D>m#HvB(+`{^cq9t{goK^rfmiO{GgNl%!aM#`!L=E<WiaI?rfRBT+?^{h
z6e}vu<1Z34vE3RlIf9?wfzDVgKf2Uq4&>K3K85q)oGYDb!-W}m%7bm?er)56ZCo)p
zE%@(_f?`$OUq23KGUr1Er-m~s!S!&On&G_Av*9SC(-Szzhh~;47SE|N%i&u-rAA5d
z`J1=HydDpYqNxBNhn2U&q=3SFS$+nqCcX`;j%Fd%Iag0G8H{qrS4gC?SDjWBIEf2u
z>xScd09?B(=f*|C007>FIDuN&;@(!rmZUZpg&~1<2v8r`5zg*7BrgxKrt8`qkpD7-
zC!x5i4MCMpb?vv#t#&tX)g$<P3$^Ot?#K6bV}zf=hYE+5>cMza24|T}&H>K^;aNA#
zAFq@p!D|>8=hFGvTY2wY9UuxTNA-<&>FB;`Fz?cJ9pk@mt{m22{zuPsR<0t(zi!<)
z6>1i_CjAA#9i@V1=>^`1#H2uEi_9HPKLFo4O!D$f%Ip=9bCXIiG&msXgq*5^zaon?
z%gBPJh7<y5LEwU{ebi9tO*s%)syJa%@Q8c|_^U;#!N_D2o)p<~t1z_*SfK_?D^A(+
zjyX7)Y9K~LUh@epGNXx+WJEK~qs>OcRSq5u|Gz{wY?uN2Wub|^O*X%cAxr?<87M&}
zHD`dMjW(ki;sa<wXFy)yLTNH7gk7lOIKCMDAl7-}xd-G$N2D$ka0Bh;1h>@z0Wd-?
zq7f)TTgVvi^q{SfF=bd09obesNp;NgxmnhPwP~m(Y^w<UNluq%JYI*gEg)snW;JLi
z)S$An!L9UB!tRs(`Gb})h!=2N??cxLTdwbhUf}L{zSnjAztvMT-BR2XN+dA8)9^l6
z{&!(uoNM<6?*BPTym#^I5sEP~uLcjbxULewZF7!@eFhZQKm`J;i4?VDLV1+bnxOoG
zgxi|Fvr%jb2J-yCG8_FMK{;BXVo9W!!aFeCa$Xfyp?0m+;yKE_DDt?tt#u{NTi{uF
zM!8UZ=)QuVm4|N2&IjITG}tfOam-{A$7MT{(<wMEzg)|4lt{%Rtbcs_KEaMigH9Vh
zO}UOLLRg`;FNH#NDf=4}Yeld4^Xy;iQFRn)Q+6P!HxL9@We~@L<{ZLmVOU&QPFZ=k
s+E)6Apsle@=Ao?1;Opv{{sxiL$OqpG{5_yY7pT(mgT_vKue1N`A8$};hyVZp

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/checkpointing.cpython-310.pyc b/megatron/training/__pycache__/checkpointing.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..251b14d43c59a0f9a3346a7f63cb05ed70efb0ca
GIT binary patch
literal 34921
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
H?B4$mbFnw7

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/dist_signal_handler.cpython-310.pyc b/megatron/training/__pycache__/dist_signal_handler.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..4bb2de2761972d82f0f37133603b5a9820236862
GIT binary patch
literal 2813
zcmai0&2QX96rUM?tmAIBA(R3Is`4SgK(iI)vno+V+muS}9-4|nBxJcBch{+Ry&ZcC
zSveO{K{;^Xj4CC^{7ZA?)H63ggx?$Q=8FWpn&+|S&71e}dp~bJJL@xCy{AjP!ei_=
zdf0zic({U5EJ8>odB#@iJ73{aNb50M5%PqzrSq7tSh6V_(!<QY!Q_neA2aE1h!scj
zWfsgngALY+Nlq`0iNLsuQM?CHvQ@q*wwQX(%&gs+y~Wm9#g^eieGf$E8Ep?7?UcES
zd-{Y-i&CZcMr9&(GcCgCQIuxUy)4l!Jf(xQOrtCvW3|;y%JAD<Wil-ABH-HJd)j7d
z28RDg+P%D=w8?6_7v(A%w7Y599*&A$dnt>$%W;$??Xs6D84e>=uC;F`-KbRg;QX!I
z?fzumE>(o12VG+b$8`r$7WSfn%o4RQTvH94MWdinoZ>#WEqll2=6y^NPA@8kjbW1Y
zH73(!t@DaY{y?a+6^b)r>Qu=#Eh)D6x~Rl5^zdX=>{s@5_Z@cF*b$gDXIInyo(FD6
z+k-gHv>lIRG<HZ{(snn?b8W@LQQ#<YMUgN11ZDDG6hBA?QoAyFl*Wl}-Wd(bw4Yp8
zDp!G}{VYeWLS*oPZcLQb9NC~m*Mg$gK3S`coWyf+8p7uuen?AW?oZqC{;CtCPGM;&
zb|9x0*>W++x#9<iX?~PH1yeCwu`a+^+LgV**PTirUtFE3#HIs)xdW?oH*kl3gET9L
zGW)aj6Z?_fuL19sUgd7^YYh7v#_mkjc)}`CSz9(|XazJy)iCQ`<pKCkClDrD?Z|R%
zm>ei7p`WV%JUM+1q6?IN(_H6dTCyi>RbW`;#4q9@iV0h^2e%h+Gj;>p6hu4YMCHZ4
z_d<(>3z~=9T)Sm5C~~zw*OxOOJI?#VMe022f22={`5kv>{AQG8A;8>ARG5}Yf8nwz
zVX=tGbl1P)AV4gWDXNW$!zE~LvMpBoZcazD*<=zCya+vQCt1=z1O)X8R@!8WVm-wI
ze-CnsYObiz1_Ror4mRDQ&fukX0JCnQ{k;f+8TBfuQ^K^<RrzSBy{K3l#9=;E^Rz@@
z1o~*nFoJI7qjESZ!#Zt+cI)Tb&zEV70qn`WQ%s&-!%A@$f>0}VT;bv8b63n8>Ha-$
zw>X;nZK%W;2QC8c6^!B%M8d$ZVAsT2wE;bV54`F~OWNRES31(gy<zy4t#~!tuFS|2
zKuA-+bZw6cmkr~5RTEB3`J7%fr*Rd-uusJ+7J@>S**5Q>P8QfI5Xf+n-B$s$4wXrJ
zp`q0<{0NJ`lP#Z*Uq9~fg{k(D$T40Ja!Pc-DldgWy&wb;>fw(mAiz$^({ocQRY{zr
zj}kfQfpkz_{1Dh8OzS3<XIJ46+04~kT<j`*iY=xM1d8YG*w#2WHk8AAj|_<lT6_i}
z`4dVkNd&fOp{4CDdUE!71uZW&soCv{ZwZdpN7!~}>By29x*!BjER(M2+(nMg<0We5
zl7pkZcJ8aFpKNoJkGgyYxQ)pd=u4=p4<N=DkBv19lR*h02=`cEvO93idD>HG;;6uv
z)tnn;dIn5h=g0s@&*duZru#m9lM*RHPVLu4ni=P2c2E2Q?}{db%U#~$P0_M!F@EF!
zU5$y1rWeh3flk&cMx+F`M&8uBcmc3CCNThD20J!!wRRpw*(lMXymtillkd_p3~yq;
z;i=|-W53ou02KPXlXC|9Z(#!DGiClSm3$N3xGFF#f`h~i5TY-D)mgd=FF%I9`h<jO
zO~RQnIXsASMQm~l!?d^y_L&nT$LEgC;v^HDz^4u$06<}={V?q3a+J}$8HNu>QC6=Q
zA9Q2+=8e18@7z}JlOGpId`^P?IT{!C<<B@sl~(USkk6*Z9&2&W@?5Xkw9HCf8id;c
o&`hM%Q8m{SQy3<wHTPoPHLktOwZn^)=K2H<KDK<%Z_S_n2f{IYg#Z8m

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/ft_integration.cpython-310.pyc b/megatron/training/__pycache__/ft_integration.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..014e8279901cc9af923a3703c7d25bdb5976fab8
GIT binary patch
literal 9719
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
H!pHv$ezL!5

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/global_vars.cpython-310.pyc b/megatron/training/__pycache__/global_vars.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..f7cf512f7a4134bc3a068c39926e78dee683a43d
GIT binary patch
literal 6947
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
WC(To4$~5tO#5{&;%*>dnobewxxtz!V

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/initialize.cpython-310.pyc b/megatron/training/__pycache__/initialize.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..da9da2ca2d6b63bb2189cc98ab08a816798a9b56
GIT binary patch
literal 12166
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

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/log_handler.cpython-310.pyc b/megatron/training/__pycache__/log_handler.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..030510246021fc5ec92bca1ae7f4739e8c860036
GIT binary patch
literal 1042
zcmY*X&2H2%5cW?to85MSmW2bSTqD6o;*1cmZ2_?@5?d~jkd?;XBuf%+ZAYk8Iki$x
zJOUCN`!YO0uAF!UE-=n+|3>n7Y>#KY`DWx`&_^KI_nqt)LFl(V+!O~6FJS4Xpg7{V
zK#|=^flCsRl13CGPE#B?uMu~6=M3?Vpr<tIa6CnU`v?A^y?`{miA+C;L@M44rbdal
zd=po^5bAitNR?zGo@=A>gW3q5*iSdb!m!f95GcYNMTFyso}(G&gwr!Ga=0TpkldX)
z+~wUfC+eOf2Spyh@S4H6)<$0CocDc@<(;1`f%r!Hv%D}u`LZ^CA=5OkQh%mo=_is4
zd#iK1&)VO+B8`obl|PnBJoX`o&+Bqw!)U|7dDOZkc!|B$)~2hahhP|VissmmIpz2p
z1}+i6C3^vGT%ZG33Y?~+>xEE_$5>wFhOvg~BW>Sp67Y1iC}tP9=`ofRvDS=TpueBO
zOqL?FtcF=ERa}K>Zo);avv8+~(`gbHA~ad9I9tTZ9EF$lJell<<*K&Os2Gw~X$W+%
z6;Y$bk?I2WyRbA&4I1L(hqw40T|sr#vgfdyT2+a4zZ6S^?d%wq_CXo6g+8r)B`0`}
ze~=UM6RQDG0)uo&I00hl-p+nNoBOXOFURjDZ>Rg)TWt6J*2l^Av~jAq6ir_nC`NzD
zO%_mPhg(^g&E`Q7C!Y&oLvU6~Uc=-K>}#v;SQmHM{7ta6{pitk>|*lIA;-hp)h!)^
zo^6TE3N7igRaCIo89S`wV)fExjLU?vmNI4QZ=3@u3-!R7gH_KGQ54{F4QUNtmBpnj
zMLk&B1LYwHuXi5N_BL>py=%IwS#6^$ORL(j%Kp3&^14*-*^+|ib{>~;$vy0nA^i^-
CLI`~T

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/one_logger_utils.cpython-310.pyc b/megatron/training/__pycache__/one_logger_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..6a8edaeb0fc86e226450d7292b66b05b64d49f15
GIT binary patch
literal 11472
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
XPieo0u-BsfkbTBJX+L5=Utj)T&X56w

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/theoretical_memory_usage.cpython-310.pyc b/megatron/training/__pycache__/theoretical_memory_usage.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..f7bae7537de4aea156c1f1458b903b9b63f653ae
GIT binary patch
literal 3489
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

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/training.cpython-310.pyc b/megatron/training/__pycache__/training.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..2ed4fc800b2feef25fc902d0faae8e37e5d31eb8
GIT binary patch
literal 43947
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
Ee~lY2H~;_u

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/utils.cpython-310.pyc b/megatron/training/__pycache__/utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3b7aeecc623bb0213b31e9ef6b2ee582f8c17071
GIT binary patch
literal 12977
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

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/wandb_utils.cpython-310.pyc b/megatron/training/__pycache__/wandb_utils.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..d8eab74b78b750524650c65888bd2c2850ed663b
GIT binary patch
literal 2678
zcmcgu&2Jnv6u0MlH=8E3RVqpeMwF_HAj3IAh=K?`v=Jys6%lCUjJ>;)&d#iCZ`(w(
zr*Q2J38bo0B2N96=E{k`0MrY-=h?4>NJt!*l|66l=jZ45e!u4}S6ABvp5oV?!Gje-
ze#4LD2WLNnrhkD>5J7V?r2CYj?BveS-FL0*=HAfX_pR*Z!7$tpLH1=N0!e$G2u1Xx
zx8H&hDq7G2>B>k(J?Bl*3q)J2z-$|4BGG|{>sIB82*j0MTdaw7nC;lvH_#%C2I8u?
z2BWLu${y)n{~f#|uW0Rk&CQ@oYyaEvD3>6t_oYdm@<JRWPgQ25g0Z!c$_kSxUOY~6
zu1y_j{zN7sQ+1%E8LJ|tXm9$U>_Gbhn(jbnNJUPlpl=b_+ByE_5t?UQnXJcC!;IqT
zW2sm#%Oz7%r==2_nSo?EH&UC0ruB=-!er)%fe|)R<)KW?@n)krb$n(y8NuPU%rm3V
zoi0@&yj~I2g4gRG;z2o-vB<QE2fT#C#r@30qp=>uJ2~&~r979h8DvU;9c7N<hqBL&
zDvOUEJdB4^IR@vmA}jiF6SJ|&a=kS=s&6NYK+gS{o;1Oe7JMiXEE;|5I10c->a}zr
z)5oI{!;Q|TI5~Sz#x{>@MGi?t4@u8~xYAw7l&6gxb{%_Ag`u}+Z93en-n4Gb9YQA(
z2xRg^DxH<Z8t60*QFR6N*DtzUw-6NEfbwqYfy(Sb^FB1|-A^DGazZ9v<*ECER&GWo
zzM;mcoD=K;4=2v|&Lo(Gm3Qb?fp98cxX;~5R7HoL@GA0xymW*wg69q;RdniC^bBYO
z+QDI1MOE0RBE&fpq0LFFYMr+1Z2JWfk(E}!hKs92YtOcBoBs^(+!+@so`9K>9Y_Y5
z&ZS_y2Pb2T3_w<y9;d0407pdIVv1#&jWA>oZ^3${VtLu`<AMy}irNd%W(9k6=ks=(
z!E;ab^|qDpYhlkOo88q$b+;KNo|Qez03_P-#`Coo^K#kZsg5NUX4*Q6yjpAw{!X(w
zw>;zaWfoOg8iopBDi_FEI66dc$)cVcnww^K0nc!-#lZA*3qR~4wGObU{b4C&-gRov
z9F1fh4W;3N8-5%jZMNfh2Y?>grFuLBIplf9wbZX^yxZ+41fd15a?xCLZ(3*SRW3xL
zWKSwtq+l37(PZtaaZz_5gUO5-4IA6G0wzX2Gj-5ZojRPBoNl|}7c!=yn{~dkTsqY?
zbYOL6G{GFy>+{bk=fIJfha1i6i@Ci>;+tiW*eosLmsp@`jXUZM=z_NAM0A6$)9bWN
zuhNJz>iwy1qeoF*a)IUhTzSFb7(qKvU?8lzfBdnfE<HzGcj6hhg0YD&=p?B8Q}2wZ
zJMi|;$Z2p!U@QPCIxm6dm2()LM)+O1Fy>YsP}4(dJ|ZI6BOWoWqpv8zpJ_Mr7ye84
z1T?<08c%KC4SD=81a2bH8|T1DE|8OeHok<=4;$3>`wELVmH{O95`m#A{CCFUrk7K8
z7WMz1ST#|IiPv=d_!eV54xkrU`+C{=s&?FBP^~Noce^VWnAC70%ydJVmXZJ>%MBmu
zRyI;M5nG+Hh8txD=+>9dQaQpHs{m%ZVMChtL00cz$FO@ByZ4}5;tCeQ%W!Xl_)pw_
z0IT&a=z^B#IDq?zdeAz6eFpsob^h}HP+OqTy#gEt<9T+_6o>%I44_2eWmdmEyV$pY
zg!W?J>gVMF&yy!yX&aIH#y@rJwQrADyATW;s^$W9q4ZhS+0B<ugnvSmy_2I)pyG{l
Y`6>Q!(pW}1PKRQ<>Tdd*-pw0-1NzhSPXGV_

literal 0
HcmV?d00001

diff --git a/megatron/training/__pycache__/yaml_arguments.cpython-310.pyc b/megatron/training/__pycache__/yaml_arguments.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..3c91b451740e395bf3cbd6b872e9089763ac0801
GIT binary patch
literal 12813
zcmb_iZ)_aLb>DyYhsWdbuP9NH?Uf>1Vj><bDYj#oR&2|XBio`KOSTi%&SrVDB=@wp
zdz#&&%+;|DLZd-|IQ54XP1+bGgP?7S21QWhL(rl{5u^?Jr5}p)!}Md&21dUXXo{w_
z)!&=h+dEQpk`|?OyR&cJym|BHy*Ka8Of)i5(eStS?&Y=nuWQ;*=wtBD!p9T%#kQ_#
zOk2{J&Wu1`(&gJ&GUVG_GUeM^vgEt4RFLoDQW0-6D7DH<<<`*BkWTHbpxCM`Rb<%+
zhL?sVZgr_D--^a=oRL<|&~&Xex-=$R6@u~B#L`4-a%ob27lWzRfu#ej>7{91^Qzki
zS!qXKI>gFs=q+t&#v9%~%qrfY9Rsz)+ec8Ik>x`3s8?v-gWtVu_#5WZeZID$vnm^T
zOJA~Cjg6x9F>eB}F*Xj^aW=sw0s9D>VF%bWASc*Cb_kIBnQ={<J)BNn^;X@4N1^TV
z)lSO`leqpK33PGR5QWB?>xZHgCoXTf?QiR1^qSvl2i~IF^5VAJ@PIUaox5SY67iPD
zFGk^tzbdA#KL6xhP(oex5+{jxW6fFjc<e`^nDXNc((=O|G##yf^pmfhxP1z**-bne
z2C<a=(G-{PyNF-BghyA~*1GzRzG)=-w$U|q^ryAg?M*W=o7Q%rYwqYw>*(>(XEB*w
z^Y=7nylZahU(~zCc9EG9V!b<ny<=<|H!EEdP+>7W;Dzfx1Vpm2*In+r%YkR76Sg1P
z8*VGG!zi&=qE5(C<HT*DZ_bv)SR)GKgm)T=6F1zz<zg6AoVJ@J9*00z{E)dpAdDy$
zrHsBXAstcTUOOPcTA~<4F7vps!iagIu<iyOyjFSCX@6Ve(-`>AKR>?~wY+)e$I1Mf
z8(|{mSN&wZ-HF%cF9+`GHFWOHCu=@u=$t1T^S$Ywd;aQtE1UZHgkzfhaCM%><Mb7w
zy&*=4?|d{7pCO@>30Cx)ZtM5zmd+31Gc6s%=+?Y9W=#waoG0hbW`#2ki}JDroq2fI
zL=K@{89zCZuiz`eR5tZ3Jux~OKS1Seb4SCpT3urc7JS15)aYuCo)l19Y?kmWZvoOQ
zI<l;w)0pBLMtlwvZf*||j)L!i$`^ZWD}DH3Eu%rOVg9Vdt}y+O7MiL|Pp8^1H%n96
zCe@X@3S(qS%X&@Ft2Nl`K&z1*ODf*3c84))rv|K1;+lUg8DoXKJ;9635&5JM7Mqow
z0xPo8+wcwQ8*;Ju_hfmT6unngwKuf*d*G-nDN<|57phN`CioBJdy*9)tsekuNY;`0
z%x+rAR9EX-OxrRg)qer5;_#orVWm0LwYqxOn$Z;AmcfSKHhY}i{9%Im>tSq}x_0x2
zXg@6t@n_F!l7nfC*NWfIz7C>Jdq?Mo2@k*86v^dauUD!;zg0PogD~m73=R^Vcl7vp
zM(Ggs0{qXREk?{nWG!h!EgSnxlX@vOt7^{B_9@hk?yWtnZ5FzuX@_#WSAaJr@g$t)
z4w`W!oM2grjZ4T;Jf*b2M;m-kZ0T~o?!ot4sJj<^c0p@0>+?Q*zlHCq?7P^sf%)4+
zt9cBicW7+M@#aS)^%FV#`?5s1I~m6PImQE^`F&P|6dwSr$IbV_&4B^w_27R8_;jWv
zCw9sAWHvMZz%U!mNk$fUN<L?^(S8*4KlYBnXYf9)u;YKlXbxqgnag1R4%kcvtCO~a
z!#jW-&S3Kr&xnTrJCea31WeCppOI~hcn0-Hv-;Dhdye|g+MYz+Jz3q^40Z;vdox&%
z#$$lpx2F%Hqxdr7=TL8F_0X4$i)CP(%c#BvjAMNaNab8On$?5jI6(dJto|I}GtS{v
zjeX>s`ew0PgpCbtmXePXyj$9WHNRuryhUHlhZKGO$MWl8b^>xT_&1YB7|rcW^Al4V
zgTG-99MRaxBN{y8NwO8te<&>XaTG+hcr>H<Bh_9$&u2Pq#DAID4JfM`sns*iqxgC(
z8}~n<ypWCiA2a;NFye)fydu@mh<}pRET9IpdF!8{{5XBzC;+Qx{}*H{lanP;?FH1D
zaUrAe$*dM$sQCnbpS+=?b}FlVGOIm~nx|AbxBrXpn7j_S4g5Oh;8Z?GPow5Z)R1+V
zu__&-60l}-tV_UhBo@`ZfVz)T9jx#2_A^+I%H1+EW;FIO$*+U@(^=b3u{q3@$$uTK
zuYfBJ?OPeg&t~79>>Ik~Tmc@vpAE;d7Bt4+7-&J?U#0Klc~;+|uN`S~GtO1CP_}FG
z9oX)C=3!=<i{RkLsKxq7YXjPR7d$?gkM9L`hPaIX0?@NL^u<hye+%e2Io{{l$7PQ{
z2IQgS(_0!sr-!r9iS+OV_J|zqPtn&*liJgGe+ukRWK<OgB$0p1JjJBsYZ8$E${;T#
z*P7S2UuKWO=bXP`zGHFn{>A1bN+ZcD?6I8IOH>EQg5(Z*!5(MhTh!uM@+!NKL!ldL
z%|cDRS0j1+3?R@=aQj&*f!0$Q^_k|99KXe1NBytKu~_j{jOAk9zmlfHko?83qyFi<
z{xvCWi+@S>kkN}H;9TnWg1Tb!waoUc_}5W;Ij3NQt1kia3_+6D*{8aQOmr>z9J}I^
zg*)F;D>vR>)i?LTXQ-aws(<L!=ert$*k>2tLo%dsdZZU`MLb}3?5Cc6>h|WW?Z+~L
zW&XM!`xM$PZ`g?!#u2w$2s{HDfg@s76!JFd7ycJS?rv@;KGFxf?YF(a550Xl$S@Fh
zCf*y#J_zZTJ23)QyU)jY`}XE(o4JWQx2s15&nVqpl?`=H4)yNp(>a$PhGAbvT2xpG
z5OSwa#qGdPY=q%A?9lUAY$uVu?Ad`AqqydVIkgWLt#e(;J|9FQYPC9{-*6M;OY_fM
zx_Z@)kUa%%+irm3n%i!Bp&f<6hJ9-drP#aK@xn%5tbW|0N%lfYTv)pF>XR=mURiwR
zyd=YYMsj4{irWd2eiDd`hTFGqcpIDNZ?A9KAM$t0Pu6m*vzv(hO*9eux-izyruW5O
zk`VRPAX;_<d)ZAIYf6hCm)o1~QC63}(9?tcBy7iPQ3vV@A+B=IMfRlRc-EF(`_K;_
zc<#Cfjc%-YtP^<YQ(>pI48&-~4%`jonFB<2Yxx?4w67AT?p-w6pqL{gAzt<DRwqt~
zvp&&%TOoT)IvD=$)|b=Gd?K!8azf@6*R#oW+GpEHyjm^Nq04R%dypJWYZ!%d`;FUX
z5sZqG(YVuYM?C4NNt>ns)a+fFls+*xmvtr8zBPw^fHe{uX;MZ4VwG~H1e5#AodkfW
z4fBQf;OTRH3ai{@a~$#qgZ(K>Iy|Hnq0&rcvi(M+;=OLui*BRQX>|h3vF(P;hRf*@
zB;r2pOi;?b(mr=qDrYaHls0cC8*Q(i9#LJ~-jo=Uz6TA7?Rvc~isUh%AIH2m+FpZ(
z;-gNQ)!ech<GYs!r>8#@1<J-LRfds+QRX$=jdbo;#J+`HlukQ6pQDHH4rCK^(z8Ms
z?M_>A{-KOrAd^=!gfaLl8~E^~rt>*Per|=k4RRGyia`!0l5u)(-gk`N0&nlYXZNq)
zZ`8jKHIq*^;wS#kTq`c)bO97dwbx+k_HqQT15=yJ%$w8&9uJEZpBn(jQbIml-eVs8
z6jXbl65egUCb_rC8^fnn(9ThPiQzS$F)wsz#>6C5(4J060(aItm&H)CTmEX$d5^ZK
z-ZSa(1i86$LCbFN2nzwQdDPxe%6#VGT?Ur}X+5f^7r7VvjGPA+un<a1^V&0ly@pE8
zU+Mo!o5*r|dF9N*_4JX89nR4y%=#JHJo1=aM99HkjV|r#K9)^vCavi`+M7uqc{%Jm
z19*@&oB$S{w!7?Ot=o|5I!N{gHn_YXu8XqVHFCowEuX2MIa7boeK7s{i?r<*lfdki
z4w;-3E4&tO*{UTiRs9ZEc+|4n8*<OkUMD*CDQw3v-_4=4v}5~<+_US$1u2guacArH
z(`sQOi-jKzBL{w*I8gKHP{)s7=N&IyBpvPhIh%XgVBv}&_jTzfVkIqCP2~PjlH8z+
zg|*TNg7jLSBI}dfMG@nbGl_LP$X0n`m6{K<fDa7e963auewwE4mlFmNghw~*ji@7|
z5uys2+wK6_mY1wW%$8I1pq!$&e>q{7!^x{P2I3}W250C&<-V7(xY(x_)m*)p&0v47
zE<A3Zg-$$zDazEdPlRTO^gOoLg<cm!u@{i)uY2ip`K;I(=RhLAu;Jy)UdB@1C?759
zz<?OVk&7=s{iO5srB|+8yyRSc@-xoG7Zw*UUA%tfg~e+^Ka+Yd%Mf$lc#0#)g0ewX
zv!xsU1%|!PM)5D`geK%n+Em@R@kZDn{^U|e%O4n*>*@brUt*Gb@I8*pm_sGsLm-*X
zzeGU0gIEfdsU}ozY|C)OzUDz?^0R^VMm>F4Qn4GkTe&Op*iUA^O1nHn>P5eZUF%|8
zaoy%o6MEn<pQj(6o8u8qB{p`2LOCB&?`7lyPwP2wHBhK}dh)7FXs%&l$b+{<T0mvs
ztb8Y2Vw_%iweL*HN74$DS^EHIr}vMwdto8@w|crjYXq&T9Pvx93Nf55JI+i})$d6P
zF!uD)Vjj!(X!OG?7xaR}$1+Y4z`iu(I)x?Rl4KxHq_UJ?AXx1AO}TXR;vm>wKJ)Ux
zVb&EEtqo#`5-mE<SQ92fLs5{Kk1zu-6edn`L`^1Cbm$;+M{!t*&)E%D%V<SrajIN|
zJ88LzINDQ%eOsJFu!s|v!~wSBA=+n@#W*-Y%9|;MPGKm$!>NAVeoP!7--Ki{XIb$x
zkquN0L%}Rc@I;}_5r&K7d5?RkQZDF7)X_wR@=g|Ti}9X;<h_X!PJa+eaGbVfg|U{8
zb;gkqqUv~DB~pW+`}?s8Ep1MgZ1l$}Qx#DQ+;Fvnq(zC7pTN>CPTYmOcL)^ZjO|TG
z#8eKU0Nzn~gP4K7!#49o!O0T^G1+TC?hT%Y+!_{0L@C0e7)2E10xzsJH&_u>8Mnud
zj6(Pk;`DewIdGs)ih@JbVw!Zy3B)MPlsYnVq>fHg0D>b;=16^ZvRG2|;W$$BSq`7-
z9qu`p9S54cnykfQST&a6vl!V;X)NH5OaXEl<AA83w+~Wr{otfc^s#!;x)|-lRA056
zxcZ*R;#H?V<6_!D(%ZN}M|KVlQen^dg`OB)SwT2D5UGy#V;FeDupvz7F2A2-JA4BN
zeAt_ysEt2BkV=32BJXtocCh8X;k2XJmr-wSezBN<FenNi5TGyuE{b%vi?<acd>141
z#IzwH!32l{qz6vWa%52DWYMuWM3V|#QSmPwL1yu<7;8ly=3Yj!&Z^gH39Hdzt~fxa
z%gkH%8=lh-P{qMpp1-<AHOSS_Z3FBj8-XV#=vX^(2CK!G7qZ=u>R>&mBTF%HcMK_x
z_B9_fkNpUzFY#C$$m14L+Fl?h#`<6t&TtC3#r-lCaQ63@x%%@OaQP@b#;8^GB{)QE
ztX<+f;$rC18x0ScI*!;U)Jmx&t~N`=I7OQq&cNy@MoF(owAn&~*}^(04y(_7-SDs@
zeITh{%nQUs*?|kd8tsT-BA1bx9TFDdh;p{i6pK;mpPl|PGP#fM;r9{Ed-@75U0m*P
zm1`Tx;v-0$y1)VYO)3e4HRPJ59tVlih%|U4?heH_vjD|q>_OGcic!^zx?xuI@||hJ
z&?~xe$GT%!MZKz*Kd=h5J4K`Tez928tviQMPZ(9*_`v#Ls#L)dxM7yjp8gsCjaL6z
zEfYQbyF<8u-myL?7pC;GIc5<)`q8Zq472#Y@r8*(&8&eM{XieMXmMxEsG4JFi~dY{
zju{j3%P`RTPT4Gj<1*-hQ`A<#6P{KLl<8m|^iAR&)Ih5W`sxji056xyW=&G9$##R!
zszJEcow9W|Mz5|`P&oKj{TgMftdHq5jt7ckfF9PTbmG6Fj~QjX3f`-F?>DBG4XT+|
zoSPG}Tm=j@vIS}(Pa0pPFs+ZN@ylnGo<{Kl>rSnpq*E&a3%ySmBnc@6;Ly8P0JK`x
zr@%qYoRadDaBEsWBr&R))DD@4^on5_{I{SHyKX3uPSa%vc|+lAD0KBEE|K7r{@Dcg
zin??nV!mrKixucRewFSj7+svO<8<%fraTQ#aKU5?HwkcG0Jj*nEu6&TN=nyCia0$t
zw~QTJPr>Q<fuz(m*bu9{rQsaiK>IQ-umGb+`{qOF5oc}aairfPt6jsXHum^O)3FyR
z9vKML)qelX+=u+x>5Tm$Rdd(*Js2#n<MG~uc%&5@`?czSgN_k;e^jPj+-vy7<h<xE
z&JG<q=!>)17Z0La9>)f`{>ENgEH4CZYnizh-UN-9Xq2_|o&kqaUkD;xUx_cEpfG23
z=@8PR`>~De3p<S~b~?TPs1|3-{Au*UFX169to1Q}l!`^UfzJ2^s=Oj0IQu{%G+RJi
z;wOQ}ze3P5A{!?_d?QS9FBXfEc+a5tmw~uW<2i}~ITbQH3-2-gC`^J(9IoSz^&b**
zm#WcrQGToGC4Bg#Oxm_iH=Cdi_dy+?a9y(rrQtKU5|fp2AqKDo?Pe*#B{nKUMGR7}
zEnTW-K^`yBZ6?e8GMIa+;|DmJXhcZkv8>|4mK`lqW@XFWmauoXi&QCAuvH}A*d0ND
z)d<`;u0S1Z`z6<pkpX+Xg~s+*a_zHQek`+RY*rB&)#6E%&davcp5UkU+$TFNx0j>P
z4Q9{V`7JX_l-sl)f+q5gnk_FwWz6LSbN=j8d2tuPi!|iCsyFz%h)W5`fmgDTdbE>0
z!1^Ap&)e6L{v%6O``vvBg7h*;dzY|D%97`F{Awnpd|YWk?x&=sj5*vT8_pT_u(`P6
zdzd^?T61HWEm+i<R9n6UrQwg@F>5J}l}VbMFj2a3OD&K3${w8+NPIW~CaDMx@g@=9
zA}y|hm^DILJEb4R!o&XvfL&Tkc1xNo9i)u{UEzY}8FZK$*Km}nD-9+cWaJl&#dH#`
zBp)$0a3~X=HPj%;3Q;DD<G)W2y62`Iw1o3jJigxZ7`86I`67V3*xF@G4*)&U*a2Tl
zaI;LYx21nehj-OrOeo2-R2WoJ*uvF67?Ht@1r1MghMpG6IJK=(xgg6WR$SNUei`5;
z7+L9Ed9#eZSQ)FsGf5fuqu|dM=*pqNDzX)>6tdw3Eu>o<B~}IA%WQ<z-lCgiros;C
zzEg>fqAmc9VFd-O%2(M~)}HQ5jHoh7H8u|HH<QukSaZBN0r<p%Ht;oxFN~T^;og$T
zzmiOnB)SHT`Wi+&_%%DdcwHP}9%4+mUW7?`s1<b*Z2ZRjGmx~X<zShjiJD4Ldk0pt
zCO=7N!|}}ywh9^df{w6O@k~$lPMh6<4a9z+j7`r_?r}>3+$SpING}mh(?PMz9UO!v
zVtUzk<AL}(+uz}TLTZ4?&i|-POSoK}CQu-Mni$)-vWLqC`VRR-W04<64Q%EWyoA|~
zZVCOeu!w8^I{@v`KvB(xh1?|Qe5a?16MFiHG^D`|he4yFh_k<>4btG>K`)m@?G1O`
zNA83n(jJHy#+A&(QF#G!6}rjE5X1Lj({lF*8`(${lKwG-<ac&T#^d~VX#ljS@yF;v
z_REX(c#$3?VE$b^5bOJxqzNflb$-zkDlsQUX~$4js(IjlN-e)f4=FVx424C!iP7Do
za5$}LJ%?1wgaeP|;GCHM0TK8!dhE7xaqO3h@*5<03Qdk16{Boc;iC>C1f;;aDxVek
zRYVyj1hw#D2v2JU|0^`wr6uGnD0GoNYz+lC3#^^Eb^!;$j4k6gk8MJ0nr4@t7Bk<5
zlSm59Vp7;f&<0IH_=m8q2skvWYdW|T`YOUA2G?leDvAyTJfp>Pw?LEreHK6I3rmaX
z%h)ZD=ZR|fQ6@}C;&7x9sN2OoM~TG_=ieRfohILjEfU(v?`_NC%mb?<j-vfloM?DV
z=p4~k@p*ZHc-LUbBxu0WBq)QV!P4Cl<qyal<XjLANLbi=XziID{&m#-O;7P_T6%<b
zU1UntSMYw!CWcjX;jBf`joG0r{=&8_RECT~SkzopE@OdL3=69nBX33UNatw<)@iko
zIufqaSXsr*=pk9A-ADe1;6)Ubp~-942xpvp0p7#87|J>QYvP~APx>;ZA2Nza22T8(
z|GgZyTv28p5GACuQ3Kg*xhHeJ0|fpfdQfYn{sr1^ip3CZ)Fe@aeH2<3xk(T5Km3Py
z2!rFqP;PY9!?50Sb#B1_oN6lr0BMplz3bU^GKTtqUr`oJh9xF<BXtrVos%-For)5j
zVflz)X(gBUw8a53WxB-gH)wm(i=zOC0LsE4Mg+OIwH|SK(VHKpW^xA(n<d!mqH*H7
zzPhn5(<K?mD!;Ny$Yfnohy$XR3MCWp@&dAa+|jr|Y8WrzVHsuQXT5*OdXbwUS2V^b
hM?_v%Eh3AxEM&69_p3$iP3_I{3)NcrK*g-y|38e2T)hAQ

literal 0
HcmV?d00001

diff --git a/megatron/training/arguments.py b/megatron/training/arguments.py
index 06f06dae0..8d2dac15f 100644
--- a/megatron/training/arguments.py
+++ b/megatron/training/arguments.py
@@ -1083,8 +1083,10 @@ def _add_network_size_args(parser):
                        help='Maximum number of position embeddings to use. '
                        'This is the size of position embedding.')
     group.add_argument('--position-embedding-type', type=str, default='learned_absolute',
-                        choices=['learned_absolute', 'rope', 'relative', 'none'],
+                        choices=['learned_absolute', 'rope', 'relative', 'none', 'mrope'],
                         help='Position embedding type.')
+    group.add_argument('--mrope-section', nargs='+', type=int, default=None,
+                       help='Multimodal rope section is for channel dimension, empty by default.')
     group.add_argument('--relative-attention-num-buckets', type=int, default=32,
                         help='Number of buckets for relative position embeddings.')
     group.add_argument('--relative-attention-max-distance', type=int, default=128,
@@ -2012,6 +2014,8 @@ def _add_tokenizer_args(parser):
     group.add_argument('--tokenizer-type', type=str,
                        default=None,
                        choices=['BertWordPieceLowerCase',
+                                'Qwen2TokenizerFS',
+                                'Qwen2VLTokenizer',
                                 'BertWordPieceCase',
                                 'GPT2BPETokenizer',
                                 'SentencePieceTokenizer',
diff --git a/megatron/training/checkpointing.py b/megatron/training/checkpointing.py
index 749563caf..9fe2218ea 100644
--- a/megatron/training/checkpointing.py
+++ b/megatron/training/checkpointing.py
@@ -1232,6 +1232,7 @@ def load_checkpoint(model, optimizer, opt_param_scheduler, load_arg='load', stri
     set_checkpoint_version(state_dict.get('checkpoint_version', 0))
 
     # Set iteration.
+    #print(f'info+ {args.finetune} {list(state_dict.keys())}')
     if args.finetune or release:
         iteration = 0
     else:
@@ -1267,7 +1268,8 @@ def load_checkpoint(model, optimizer, opt_param_scheduler, load_arg='load', stri
     strict = False if args.retro_add_retriever else strict
     if not skip_load_to_model_and_opt:
         if len(ddp_model) == 1:
-            ddp_model[0].load_state_dict(state_dict['model'], strict=strict)
+
+            ddp_model[0].load_state_dict(state_dict['model'], strict=False)
         else:
             for i in range(len(ddp_model)):
                 mpu.set_virtual_pipeline_model_parallel_rank(i)
@@ -1283,6 +1285,7 @@ def load_checkpoint(model, optimizer, opt_param_scheduler, load_arg='load', stri
         try:
             # Load state dict.
             if not skip_load_to_model_and_opt and optimizer is not None and not optimizer.is_stub_optimizer:
+                # print(state_dict.keys())
                 optimizer.load_state_dict(state_dict['optimizer'])
 
             # Load distributed optimizer's custom parameter state.
@@ -1380,7 +1383,6 @@ def load_checkpoint(model, optimizer, opt_param_scheduler, load_arg='load', stri
         # Notify FT that a checkpoint was loaded.
         is_local_chkpt = (ckpt_type == CheckpointType.LOCAL)
         ft_integration.on_checkpoint_loaded(is_local_chkpt=is_local_chkpt)
-
     return iteration, num_floating_point_operations_so_far
 
 
diff --git a/megatron/training/tokenizer/__pycache__/__init__.cpython-310.pyc b/megatron/training/tokenizer/__pycache__/__init__.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..cd694bf7148b289d85c8f62cce15e52a2a009a6b
GIT binary patch
literal 242
zcmYjLu?@m75VR8tK#Is3Dc~1Ch$<DKNk?NDY}po$9XU=Bc3}WkN=wBGRM-ebob-2p
zSNxyNvLy<T_fpEB&uIRU1hWs*<$)MtSfd7?Fh(q?QIWoIhzmTf&b`u%czfkW-MBjz
z$+(!Di&q}V&4PUC%|P0Q15=#`Nv)#>g!0h#orF?TQD3O$;H7emwAA?lDlVvZ)~pW|
jG`}6Zqsk~FV0s0Fgv1lFX@_yXZ7l0G-^G?)ERm-l&uv13

literal 0
HcmV?d00001

diff --git a/megatron/training/tokenizer/__pycache__/bert_tokenization.cpython-310.pyc b/megatron/training/tokenizer/__pycache__/bert_tokenization.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..e9f43eac1ebddc085eff0ff23cdb525a3a8ce884
GIT binary patch
literal 10897
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

literal 0
HcmV?d00001

diff --git a/megatron/training/tokenizer/__pycache__/gpt2_tokenization.cpython-310.pyc b/megatron/training/tokenizer/__pycache__/gpt2_tokenization.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..8342abd9c1e907b018e3e93ea13586762c214b00
GIT binary patch
literal 11537
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
GIr2YK7gy8(

literal 0
HcmV?d00001

diff --git a/megatron/training/tokenizer/__pycache__/multimodal_tokenizer.cpython-310.pyc b/megatron/training/tokenizer/__pycache__/multimodal_tokenizer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..2aeffb7b4e3642ae80acc0926d7ecff2eacba076
GIT binary patch
literal 12186
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
L77cS=Uz-1KQFXGL

literal 0
HcmV?d00001

diff --git a/megatron/training/tokenizer/__pycache__/tokenizer.cpython-310.pyc b/megatron/training/tokenizer/__pycache__/tokenizer.cpython-310.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..0bca5c338b4786596398cfe97358cebfe9e76c29
GIT binary patch
literal 28021
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
MYS=d3Ki>a;0mBU`e*gdg

literal 0
HcmV?d00001

diff --git a/megatron/training/tokenizer/tokenizer.py b/megatron/training/tokenizer/tokenizer.py
index 620a0cbbb..934595d57 100644
--- a/megatron/training/tokenizer/tokenizer.py
+++ b/megatron/training/tokenizer/tokenizer.py
@@ -65,6 +65,14 @@ def build_tokenizer(args, **kwargs):
     elif args.tokenizer_type == 'NullTokenizer':
         assert args.vocab_size is not None
         tokenizer = _NullTokenizer(args.vocab_size)
+    elif args.tokenizer_type == "Qwen2TokenizerFS":
+        assert args.tokenizer_model is not None
+        tokenizer = _Qwen2TokenizerFS(args.tokenizer_model, args)
+    elif args.tokenizer_type == 'Qwen2VLTokenizer':
+        assert args.tokenizer_model is not None
+        tokenizer = _Qwen2VLTokenizer(args.tokenizer_model, args.extra_vocab_size)
+        args.padded_vocab_size = tokenizer.vocab_size # no padding
+
     elif args.tokenizer_type == "MultimodalTokenizer":
         try:
             import transformers
@@ -129,7 +137,7 @@ class _HuggingFaceTokenizer(MegatronTokenizer):
             )
 
         # TODO(bnorick): download tokenizer once to lustre and use force offline to make sure all tasks read it from there
-        self._tokenizer = transformers.AutoTokenizer.from_pretrained(
+        self._tokenizer = transformers.AutoTokenizer.from_pretrained(trust_remote_code=True,
             pretrained_model_name_or_path=pretrained_model_name_or_path, **kwargs
         )
         self._vocab = self._tokenizer.get_vocab()
@@ -835,3 +843,160 @@ class _NullTokenizer(MegatronTokenizer):
     @property
     def additional_special_tokens_ids(self):
         return None
+
+
+class _HFTokenizerFS(MegatronTokenizer):
+    """Huggingface tokenizer."""
+
+    def __init__(self, tokenizer_path):
+        name = 'HFTokenizer'
+        super().__init__(name)
+        
+        from transformers import AutoTokenizer
+        self.tokenizer = AutoTokenizer.from_pretrained(tokenizer_path, trust_remote_code=True)
+
+        self.eod_id = self.tokenizer.eos_token_id
+        self.cls_id = self.tokenizer.bos_token_id
+        self.pad_id = self.tokenizer.pad_token_id
+
+        self._inv_vocab = None
+
+    @property
+    def vocab_size(self):
+        return self.tokenizer.vocab_size
+
+    @property
+    def vocab(self):
+        return self.tokenizer.get_vocab()
+
+    @property
+    def inv_vocab(self):
+        vocab = self.vocab()
+        if self._inv_vocab is None:
+            self._inv_vocab = {v: k for k, v in vocab.items()}
+        return self._inv_vocab
+
+    def tokenize(self, text):
+        return self.tokenizer.encode(text)
+
+    def detokenize(self, token_ids):
+        return self.tokenizer.decode(token_ids)
+
+    @property
+    def eod(self):
+        return self.eod_id
+
+    @property
+    def cls(self):
+        return self.cls_id
+
+    @property
+    def pad(self):
+        return self.pad_id
+
+
+
+class _Qwen2VLTokenizer(MegatronTokenizer):
+    def __init__(self, tokenizer_path, extra_vocab_size):
+        super().__init__(tokenizer_path)
+        from transformers import AutoTokenizer
+        self.tokenizer = AutoTokenizer.from_pretrained(
+            tokenizer_path,
+            padding_side="right",
+            use_fast=False,
+            trust_remote_code=True
+        )
+        self.extra_vocab_size = extra_vocab_size
+        self.special_tokens_map = {k:v for k, v in zip(self.tokenizer.all_special_tokens, self.tokenizer.all_special_ids)}
+        self.image_token = '<|image_pad|>'
+        self.video_token = '<|video_pad|>'
+        self.vision_start_token = '<|vision_start|>'
+        self.vision_end_token = '<|vision_end|>'
+
+        from transformers import AutoProcessor
+        proc = AutoProcessor.from_pretrained(
+            tokenizer_path,
+            use_fast=False,
+            trust_remote_code=True
+        )
+        # NOTE: In Qwen2-VL, template in chat_template.json is same within tokenizer_config.json and both can be used.
+        # However, in Qwen 2.5-VL, the two templates are different and only the one in chat_template.json is OK.
+        self.chat_template = proc.chat_template
+
+    def __call__(self, text, return_tensors=None,
+                    padding=None, max_length=None, truncation=None, add_special_tokens=None):
+
+        return self.tokenizer(text, return_tensors=return_tensors, padding=padding,
+                max_length=max_length, truncation=truncation, add_special_tokens=add_special_tokens)
+
+    def apply_chat_template(self, conversations, tokenize:bool=True, **kwargs):
+        return self.tokenizer.apply_chat_template(conversations, tokenize=tokenize, chat_template=self.chat_template, **kwargs)
+
+    @property
+    def vocab_size(self):
+        return len(self.tokenizer.encoder) + self.extra_vocab_size
+
+    @property
+    def vocab(self):
+        return self.tokenizer.encoder
+
+    @property
+    def inv_vocab(self):
+        return self.tokenizer.decoder
+
+    def tokenize(self, text):
+        return self.tokenizer.encode(text)
+
+    def detokenize(self, token_ids):
+        return self.tokenizer.decode(token_ids)
+
+    @property
+    def eod(self):
+        return self.tokenizer.eos_token_id
+
+    @property
+    def eos_token(self):
+        return self.tokenizer.eos_token
+
+    @property
+    def pad_token_id(self):
+        return self.tokenizer.pad_token_id
+
+    @property
+    def eos_token_id(self):
+        return self.tokenizer.eos_token_id
+
+    @property
+    def image_token_id(self):
+        return self.special_tokens_map[self.image_token]
+
+    @property
+    def video_token_id(self):
+        return self.special_tokens_map[self.video_token]
+
+    @property
+    def vision_start_token_id(self):
+        return self.special_tokens_map[self.vision_start_token]
+
+    @property
+    def vision_end_token_id(self):
+        return self.special_tokens_map[self.vision_end_token]
+
+    def encode(self, x):
+        return self.tokenizer.encode(x)
+
+
+class _Qwen2TokenizerFS(_HFTokenizerFS):
+    """Adapted Qwen tokenizer."""
+
+    def __init__(self, tokenizer_path, args):
+        super().__init__(tokenizer_path)
+        self.eod_id = self.tokenizer.encode('<|extra_204|>')[0]
+        self.cls_id = self.tokenizer.encode('<|extra_203|>')[0]
+        self.pad_id = self.tokenizer.encode('<|endoftext|>')[0]
+        assert args.vocab_size is not None
+        self._vocab_size = args.vocab_size
+
+    @property
+    def vocab_size(self):
+        return self._vocab_size
diff --git a/megatron/training/training.py b/megatron/training/training.py
index 7cf6fcbd0..768dcd2c2 100644
--- a/megatron/training/training.py
+++ b/megatron/training/training.py
@@ -52,6 +52,7 @@ from megatron.core.rerun_state_machine import (
     RerunDataIterator,
     RerunMode,
 )
+from megatron.core.fp8_utils import get_fp8_scale_and_amax
 from megatron.training.initialize import initialize_megatron
 from megatron.training.initialize import write_args_to_tensorboard
 from megatron.training.initialize import set_jit_fusion_options
@@ -582,9 +583,9 @@ def get_model(model_provider_func, model_type=ModelType.encoder_or_decoder, wrap
     # GPU allocation.
     # For FSDP2, we don't allocate GPU memory here. We allocate GPU memory
     # in the fully_shard function of FSDP2 instead.
-    if not (args.use_torch_fsdp2 and args.use_cpu_initialization) and not args.init_model_with_meta_device:
-        for model_module in model:
-            model_module.cuda(torch.cuda.current_device())
+    # if not (args.use_torch_fsdp2 and args.use_cpu_initialization) and not args.init_model_with_meta_device:
+    #     for model_module in model:
+    #         model_module.cuda(torch.cuda.current_device())
 
     # Fp16 conversion.
     if args.fp16 or args.bf16:
@@ -595,15 +596,19 @@ def get_model(model_provider_func, model_type=ModelType.encoder_or_decoder, wrap
     # param) to its amax_history. The following logic will correct the amax_history back.
     for model_module in model:
         for param in model_module.parameters():
-            if is_float8tensor(param) and param._fp8_meta is not None:
-                fp8_meta = param._fp8_meta['scaling_fwd']
-                fp8_meta_index = param._fp8_meta_index
-                if hasattr(param, 'get_high_precision_init_val'):
-                    fp8_meta.amax_history[0][fp8_meta_index].copy_(
-                        param.get_high_precision_init_val().abs().max()
-                    )
-                else:
-                    fp8_meta.amax_history[0][fp8_meta_index] = 0
+            if is_float8tensor(param): #and param._fp8_meta is not None:
+                # TODO(yehua.zhang): move the fp8_meta_index
+                scale, amax = get_fp8_scale_and_amax(param)
+                # amax = 0
+                amax[0].zero_()
+                # fp8_meta = param._fp8_meta['scaling_fwd']
+                # fp8_meta_index = param._fp8_meta_index
+                # if hasattr(param, 'get_high_precision_init_val'):
+                #     fp8_meta.amax_history[0][fp8_meta_index].copy_(
+                #         param.get_high_precision_init_val().abs().max()
+                #     )
+                # else:
+                #     fp8_meta.amax_history[0][fp8_meta_index] = 0
 
     if wrap_with_ddp:
         if args.use_torch_fsdp2:
