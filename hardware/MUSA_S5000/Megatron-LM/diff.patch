diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
deleted file mode 100644
index 3b2e4e15..00000000
--- a/.gitlab-ci.yml
+++ /dev/null
@@ -1,141 +0,0 @@
-workflow:
-  rules:
-    - if: $CI_PROJECT_NAMESPACE != "ADLR"
-      when: never
-    - if: $CI_COMMIT_BRANCH =~ /ci-/ && $CI_PIPELINE_SOURCE != "schedule"
-      when: never
-    - if: $CI_PIPELINE_SOURCE == "schedule"
-      auto_cancel:
-        on_new_commit: none
-    - if: $CI_PIPELINE_SOURCE == "web"
-    - if: $CI_COMMIT_REF_PROTECTED == "true"
-      variables:
-        FUNCTIONAL_TEST: 'no'
-    - if: $CI_MERGE_REQUEST_LABELS =~ /Run tests/ && $CI_MERGE_REQUEST_TARGET_BRANCH_SHA != ""
-      variables:
-        UNIT_TEST_REPEAT: 1
-        UNIT_TEST_TIMEOUT: 15
-        FUNCTIONAL_TEST: 'yes'
-        FUNCTIONAL_TEST_SCOPE: mr
-        FUNCTIONAL_TEST_REPEAT: 5
-        FUNCTIONAL_TEST_TIME_LIMIT: 2700
-        FUNCTIONAL_TEST_CLUSTER_A100: ''
-        FUNCTIONAL_TEST_CLUSTER_H100: ''
-        PUBLISH: 'no'
-    - if: $CI_MERGE_REQUEST_LABELS =~ /Run nightly/ && $CI_MERGE_REQUEST_TARGET_BRANCH_SHA != ""
-      variables:
-        UNIT_TEST_REPEAT: 1
-        UNIT_TEST_TIMEOUT: 15
-        FUNCTIONAL_TEST: 'yes'
-        FUNCTIONAL_TEST_SCOPE: nightly
-        FUNCTIONAL_TEST_REPEAT: 5
-        FUNCTIONAL_TEST_TIME_LIMIT: 2700
-        FUNCTIONAL_TEST_CLUSTER_A100: ''
-        FUNCTIONAL_TEST_CLUSTER_H100: ''
-        PUBLISH: 'no'
-    - if: $CI_MERGE_REQUEST_LABELS =~ /Run weekly/ && $CI_MERGE_REQUEST_TARGET_BRANCH_SHA != ""
-      variables:
-        UNIT_TEST_REPEAT: 1
-        UNIT_TEST_TIMEOUT: 15
-        FUNCTIONAL_TEST: 'yes'
-        FUNCTIONAL_TEST_SCOPE: weekly
-        FUNCTIONAL_TEST_REPEAT: 1
-        FUNCTIONAL_TEST_TIME_LIMIT: 9000
-        FUNCTIONAL_TEST_CLUSTER_A100: ''
-        FUNCTIONAL_TEST_CLUSTER_H100: ''
-        PUBLISH: 'no'
-    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_SHA != ""
-      variables:
-        FUNCTIONAL_TEST: 'no'
-        PUBLISH: 'no'
-    - when: never
-  auto_cancel:
-    on_new_commit: interruptible
-    # on_job_failure: all
-
-stages:
-  - test
-  - functional_tests
-  - publish
-
-default:
-  interruptible: true
-  retry:
-    max: 2
-    when: runner_system_failure
-
-variables:
-  UNIT_TEST:
-    value: 'yes'
-    options:
-      - 'yes'
-      - 'no'
-    description: To run the funtional test suite
-  UNIT_TEST_REPEAT:
-    value: '1'
-    description: 'Number of repetitions'
-  UNIT_TEST_TIMEOUT:
-    value: '30'
-    description: Timeout (minutes) for Unit tests (all repeats)
-  FUNCTIONAL_TEST:
-    value: 'yes'
-    options:
-      - 'yes'
-      - 'no'
-    description: To run the funtional test suite
-  FUNCTIONAL_TEST_SCOPE:
-    value: 'mr'
-    options:
-      - 'mr'
-      - 'nightly'
-      - 'weekly'
-      - 'pre-release'
-      - 'release'
-    description: 'Testsuite to run (only for FUNCTIONAL_TEST=yes)'
-  FUNCTIONAL_TEST_REPEAT:
-    value: '5'
-    description: 'Number of repetitions per test'
-  FUNCTIONAL_TEST_TIME_LIMIT:
-    value: '2700'
-    description: 'Timeout in seconds per test'
-  FUNCTIONAL_TEST_CASES:
-    value: 'all'
-    description: "Comma-separated list of test_cases to run. Use 'all' to run the full suite."
-  FUNCTIONAL_TEST_CLUSTER_A100:
-    value: 'dgxa100_dracooci'
-    options:
-      - 'dgxa100_dracooci'
-      - 'dgxa100_dracooci-ord'
-    description: 'Cluster for A100 workloads'
-  FUNCTIONAL_TEST_CLUSTER_H100:
-    value: 'dgxh100_eos'
-    options:
-      - 'dgxh100_coreweave'
-      - 'dgxh100_eos'
-    description: 'Cluster for H100 workloads'
-  FUNCTIONAL_TEST_NAME:
-    description: 'Name of functional test run (only for pre-release and release)'
-  PUBLISH:
-    value: 'no'
-    options:
-      - 'yes'
-      - 'no'
-    description: Build and publish a wheel to PyPi
-  PUBLISH_SCOPE:
-    value: 'code-freeze'
-    options:
-      - 'code-freeze'
-      - 'release'
-    description: Type of publish (freeze or final release)
-
-  # CI wide variables
-  CI_MCORE_LTS_IMAGE: ${GITLAB_ENDPOINT}:5005/adlr/megatron-lm/mcore_ci_lts
-  CI_MCORE_DEV_IMAGE: ${GITLAB_ENDPOINT}:5005/adlr/megatron-lm/mcore_ci_dev
-  CI_NEMO_IMAGE: ${GITLAB_ENDPOINT}:5005/adlr/megatron-lm/nemo_ci
-  UTILITY_IMAGE: ${GITLAB_ENDPOINT}:5005/adlr/megatron-lm/mcore_utility
-
-include:
-  - .gitlab/stages/00.pre.yml
-  - .gitlab/stages/01.test.yml
-  - .gitlab/stages/02.functional-tests.yml
-  - .gitlab/stages/03.publish.yml
diff --git a/.gitlab/labeler-config.yml b/.gitlab/labeler-config.yml
deleted file mode 100644
index 3dc4001c..00000000
--- a/.gitlab/labeler-config.yml
+++ /dev/null
@@ -1,33 +0,0 @@
-CI:
-- .gitlab-ci.yml
-- Dockerfile.ci.lts
-- Dockerfile.ci.dev
-- .github/**
-- .gitlab/**
-
-Datasets:
-- megatron/core/datasets/**
-
-BERT:
-- megatron/core/models/bert/**
-
-GPT:
-- megatron/core/models/gpt/**
-
-RETRO:
-- megatron/core/models/retro/**
-
-Dist-Ckpt:
-- megatron/core/dist_checkpointing
-
-Dist-Opt:
-- megatron/core/optimizer/distrib_optimizer 
-
-Inference:
-- megatron/core/inference
-
-MoE:
-- megatron/core/transformer/moe
-
-Tests:
-- tests/**
\ No newline at end of file
diff --git a/.gitlab/stages/00.pre.yml b/.gitlab/stages/00.pre.yml
deleted file mode 100644
index b5af2eeb..00000000
--- a/.gitlab/stages/00.pre.yml
+++ /dev/null
@@ -1,199 +0,0 @@
-include:
-  - template: Security/Secret-Detection.gitlab-ci.yml
-
-.pre_rules:
-  rules:
-    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: always
-    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
-    - when: never
-  stage: .pre
-
-.dind_rules:
-  image: docker:26.1.4-dind
-  variables:
-    DOCKER_HOST: unix:///var/run/docker.sock
-  before_script:
-    - docker system prune -a --filter "until=36h" -f || true
-    - echo "$NGC_API_KEY" | docker login nvcr.io -u '$oauthtoken' --password-stdin
-    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
-
-pre:mirror_to_github:
-  rules:
-    - if: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_PIPELINE_SOURCE == "push"'
-    - when: never
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  stage: .pre
-  image: python:3.10
-  variables:
-    GIT_STRATEGY: 'clone'
-  script:
-    - git checkout $CI_COMMIT_BRANCH
-    - git remote add github https://ko3n1g:$GH_TOKEN@github.com/NVIDIA/Megatron-LM.git || true
-    - git push -u github $CI_COMMIT_BRANCH
-
-pre:create_ci_branches:
-  rules:
-    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
-    - when: never
-  parallel:
-    matrix:
-      - branch: ci-unit-test-extended
-      - branch: ci-rebuild-mcore-nemo-image
-      - branch: ci-mr
-      - branch: ci-nightly
-      - branch: ci-weekly
-      - branch: ci-pre-release
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  stage: .pre
-  image: python:3.10
-  variables:
-    GIT_STRATEGY: 'clone'
-  script:
-    - git remote set-url origin "https://gitlab-ci-token:${PROJECT_ACCESS_TOKEN_MCORE}@${GITLAB_ENDPOINT}/adlr/megatron-lm.git"
-    - git switch --force-create $branch
-    - git push --force -u origin $branch
-
-pre:label_merge_request:
-  extends: [.pre_rules]
-  image: golang:1.22
-  tags:
-    - mcore-docker-node-small
-  before_script:
-    - git clone -b nv https://${GITLAB_ENDPOINT}/okoenig/gitlab-mr-labeler.git
-    - cd gitlab-mr-labeler
-    - go install .
-    - cd ..
-    - go install github.com/itchyny/gojq/cmd/gojq@latest
-    - |
-      echo LABELS=$(curl --header "PRIVATE-TOKEN: ${PROJECT_ACCESS_TOKEN_MCORE}" --url "https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}" | gojq '.labels | join(",")') > labels
-  script:
-    - gitlab-mr-labeler -f .gitlab/labeler-config.yml -t ${PROJECT_ACCESS_TOKEN_MCORE} --debug true
-  after_script:
-    - |
-      source labels
-      curl --header "PRIVATE-TOKEN: ${PROJECT_ACCESS_TOKEN_MCORE}" --url "https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}" --data-urlencode "add_labels=$LABELS" -X PUT
-
-pre:maybe_cherry_pick_commit:
-  rules:
-    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
-    - when: never
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  stage: .pre
-  image: nentangso/alpine-git-curl-jq
-  variables:
-    GIT_STRATEGY: 'clone'
-  script:
-    - set -x
-    - set +e
-    - SHA=$(git rev-list --no-merges -n 1 HEAD)
-    - MESSAGE=$(git log -n 1 --pretty=format:%s $SHA)
-    - MR_ID=$(echo $MESSAGE | awk -F'!' '{print $2}' | awk '{print $1}' )
-    - git remote set-url origin "https://gitlab-ci-token:${PROJECT_ACCESS_TOKEN_MCORE}@${GITLAB_ENDPOINT}/$CI_PROJECT_NAMESPACE/megatron-lm.git"
-    - git config --global user.email "mcore-bot@nvidia.com"
-    - git config --global user.name "Mcore Bot"
-    - |
-      MR=$(curl --header "PRIVATE-TOKEN: ${PROJECT_ACCESS_TOKEN_MCORE}" --url "https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${MR_ID}")
-
-      LABELS=$(echo -E $MR | jq '.labels | join(",")' | tr -d '"')
-      AUTHOR_ID=$(echo -E $MR | jq '.author.id' | tr -d '"')
-      AUTHOR_NAME=$(echo -E $MR | jq '.author.username' | tr -d '"')
-      TITLE=$(echo -E $MR | jq '.title' | tr -d '"')
-      MILESTONE_ID=$(echo -E $MR | jq '.milestone.id' | tr -d '"')
-      TARGET_BRANCHES=$(echo "$LABELS" | grep -o 'core_[^,]*')
-
-      if [[ $TARGET_BRANCHES == "" ]]; then
-        echo Nothing to cherry pick
-        exit 0
-      fi
-
-      echo $TARGET_BRANCHES | while read -r RELEASE_BRANCH ; do
-        TARGET_BRANCH_EXISTS_OK=$([[ "$(git ls-remote --heads origin refs/heads/$RELEASE_BRANCH)" != "" ]] && echo true || echo false)
-
-        if [[ "$TARGET_BRANCH_EXISTS_OK" == "false" ]]; then
-          echo Release branch does not yet exist, will not  cherry-pick
-          continue
-        fi
-        
-        (
-          git fetch origin $RELEASE_BRANCH:$RELEASE_BRANCH
-          git switch --force-create cherry-pick-$MR_ID-$RELEASE_BRANCH $RELEASE_BRANCH
-          git cherry-pick $SHA
-          git push -u origin --force cherry-pick-$MR_ID-$RELEASE_BRANCH
-          git checkout ${CI_DEFAULT_BRANCH:-main}
-        )
-
-        CHERRYPICK_SUCCESSFUL=$?
-
-        if [[ $CHERRYPICK_SUCCESSFUL -eq 0 ]]; then
-          curl \
-            --header "PRIVATE-TOKEN: $PAT" \
-            --url https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests \
-            -d "source_branch=cherry-pick-$MR_ID-$RELEASE_BRANCH" \
-            -d "target_branch=$RELEASE_BRANCH" \
-            -d "title=Cherry pick \`$TITLE ($MR_ID)\` into \`$RELEASE_BRANCH\`" \
-            -d "labels=cherry-pick" \
-            -d "reviewer_ids=$AUTHOR_ID" \
-            -d "milestone_id=$MILESTONE_ID" \
-            -d "description=[🤖]: Hi @$AUTHOR_NAME 👋,<br><br>we've cherry picked \`$TITLE ($MR_ID)\` into \`$RELEASE_BRANCH\` for you! 🚀<br><br>Please review and approve this cherry pick by your convenience\!"
-
-        else
-          URL=https://${GITLAB_ENDPOINT}/ADLR/megatron-lm/-/merge_requests/$MR_ID
-
-          MESSAGE='{
-            "blocks": [
-              {
-                "type": "section",
-                "text": {
-                  "type": "mrkdwn",
-                  "text": "beep boop 🤖: Cherry-pick of <'$URL'|!'$MR_ID'> failed\ncc '$SLACK_ADMIN'"
-                }
-              }
-            ]
-          }'
-
-          curl -X POST -H "Content-type: application/json" --data "$MESSAGE" ${MCORE_NOTIFICATION_HOOK}
-
-        fi
-
-      done
-  interruptible: false
-
-pre:check_milestone:
-  extends: [.pre_rules]
-  image: badouralix/curl-jq
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  script:
-    - env
-    - |
-      MILESTONE=$(curl --header "PRIVATE-TOKEN: ${PROJECT_ACCESS_TOKEN_MCORE}" --url "https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}" | jq '.milestone')
-    - |
-      if [[ "$MILESTONE" == "null" ]]; then
-        echo Please assign a Milestone to this MR!
-        exit 1
-      fi
diff --git a/.gitlab/stages/01.test.yml b/.gitlab/stages/01.test.yml
deleted file mode 100644
index 50d38fd7..00000000
--- a/.gitlab/stages/01.test.yml
+++ /dev/null
@@ -1,611 +0,0 @@
-.test_rules:
-  rules:
-    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: on_success
-    - when: on_success
-  stage: test
-
-include:
-  - template: Security/Secret-Detection.gitlab-ci.yml
-
-test:build_image:
-  extends: [.test_rules, .dind_rules]
-  tags:
-    - arch/amd64
-    - origin/jet-fleet
-    - env/prod
-    - ${TAG}
-  services:
-    - name: docker:24.0.5-dind
-      variables:
-        HEALTHCHECK_TCP_PORT: '2376'
-  timeout: 45m
-  parallel:
-    matrix:
-      - IMAGE: CI_MCORE_LTS_IMAGE
-        FILE: Dockerfile.ci.lts
-        BASE_IMAGE: nvcr.io/nvidia/pytorch:24.01-py3
-      - IMAGE: CI_MCORE_DEV_IMAGE
-        FILE: Dockerfile.ci.dev
-        BASE_IMAGE: nvcr.io/nvidia/pytorch:24.10-py3
-      - IMAGE: CI_NEMO_IMAGE
-        FILE: Dockerfile.ci.dev
-        BASE_IMAGE: nvcr.io/nvidian/nemo:nightly
-      - IMAGE: UTILITY_IMAGE
-        FILE: Dockerfile.linting
-        BASE_IMAGE: python:3.10
-  variables:
-    DOCKER_HOST: tcp://docker:2376
-    DOCKER_TLS_CERTDIR: '/certs'
-    DOCKER_TLS_VERIFY: 1
-    DOCKER_CERT_PATH: '$DOCKER_TLS_CERTDIR/client'
-    TAG: purpose/builder-large
-    STAGE: jet
-    MCORE_BACKWARDS_REF: core_r0.11.0
-  script:
-    - apk add bash
-    - |
-      bash -c '
-        set -x
-        env
-        eval "IMAGE=\$$IMAGE"
-        
-        docker context create tls-environment
-        docker buildx create --name container --driver=docker-container --use tls-environment
-
-        ADDITIONAL_PARAMS=()
-
-        if [[ "$CI_COMMIT_BRANCH" == "ci-rebuild-mcore-nemo-image" || "$CI_COMMIT_BRANCH" == "main" ]]; then
-          ADDITIONAL_PARAMS+=("--pull")
-          ADDITIONAL_PARAMS+=("--cache-to type=registry,ref=${IMAGE}-buildcache:main")
-        fi
-
-        if [[ "$CI_COMMIT_BRANCH" == "ci-nightly" ]]; then
-          ADDITIONAL_PARAMS+=("-t ${IMAGE}:nightly")
-        fi
-
-        echo $(git rev-parse HEAD)
-
-        DOCKER_BUILDKIT=1 docker build \
-          --secret id=JET_INDEX_URLS \
-          --secret id=LOGGER_INDEX_URL \
-          --target $STAGE \
-          -f $FILE \
-          -t ${IMAGE}:${CI_PIPELINE_ID} \
-          --builder=container \
-          --build-arg CACHEBUST=$(cat /proc/sys/kernel/random/uuid) \
-          --build-arg MCORE_REPO=${CI_REPOSITORY_URL} \
-          --build-arg MCORE_REF=$CI_COMMIT_SHA \
-          --build-arg MCORE_BACKWARDS_REF=$MCORE_BACKWARDS_REF \
-          --cache-to type=registry,ref=${IMAGE}-buildcache:${CI_PIPELINE_ID} \
-          --cache-to type=registry,ref=${IMAGE}-buildcache:${CI_MERGE_REQUEST_IID:-noop} \
-          --cache-from type=registry,ref=${IMAGE}-buildcache:main \
-          --cache-from type=registry,ref=${IMAGE}-buildcache:${CI_PIPELINE_ID} \
-          --cache-from type=registry,ref=${IMAGE}-buildcache:${CI_MERGE_REQUEST_IID:-noop} \
-          --build-arg FROM_IMAGE_NAME=$BASE_IMAGE \
-          --push \
-          ${ADDITIONAL_PARAMS[@]} .
-        '
-  retry:
-    max: 2
-
-test:unit_tests_configure:
-  extends: [.test_rules]
-  needs:
-    - test:build_image
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  before_script:
-    - git rm -r tests/test_utils/local_recipes || true
-    - git submodule add --force https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_ENDPOINT}/ADLR/megatron-lm-convergence-tests.git tests/test_utils/local_recipes
-    - ls tests/test_utils/local_recipes
-  script:
-    - set -x
-    - |
-      A100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_A100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_A100 || echo $DEFAULT_A100_CLUSTER)
-      H100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_H100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_H100 || echo $DEFAULT_H100_CLUSTER)
-    - |
-      ARGS=(
-        "--scope unit-tests"
-        "--n-repeat ${UNIT_TEST_REPEAT}"
-        "--time-limit $(( UNIT_TEST_TIMEOUT * 60 ))"
-        "--test-cases all"
-        "--a100-cluster dgxa100_dracooci-ord"
-        "--h100-cluster dgxh100_coreweave"
-        "--h100-partition batch_short,batch"
-        "--container-image ${UTILITY_IMAGE}"
-        "--container-tag ${CI_PIPELINE_ID}"
-        "--dependent-job test:unit_tests_configure"
-        "--slurm-account ${CI_SLURM_ACCOUNT}"
-      )
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment "lts" \
-        --tag "legacy" \
-        --output-path "unit-test-job-lts-legacy.yaml"
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment "lts" \
-        --tag "latest" \
-        --output-path "unit-test-job-lts-latest.yaml"
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment "dev" \
-        --tag "legacy" \
-        --output-path "unit-test-job-dev-legacy.yaml"
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment "dev" \
-        --tag "latest" \
-        --output-path "unit-test-job-dev-latest.yaml"
-  rules:
-    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: on_success
-    - if: $UNIT_TEST == 'yes' && $UNIT_TEST_REPEAT != '0'
-      when: on_success
-  artifacts:
-    paths:
-      - unit-test-job-dev-legacy.yaml
-      - unit-test-job-dev-latest.yaml
-      - unit-test-job-lts-legacy.yaml
-      - unit-test-job-lts-latest.yaml
-      - tests/test_utils/local_recipes
-
-.unit_tests_run:
-  needs:
-    - test:formatting
-    - test:copyright
-    - job: test:secret_detection
-      optional: true
-    - test:unit_tests_configure
-  extends: [.test_rules]
-  trigger:
-    include:
-      - artifact: unit-test-job-$ENVIRONMENT-$TAG.yaml
-        job: test:unit_tests_configure
-    strategy: depend
-  variables:
-    RO_API_TOKEN: $PAT
-    CONTAINER_TAG: $CI_PIPELINE_ID
-    CI_MCORE_LTS_IMAGE: $CI_MCORE_LTS_IMAGE
-    GITLAB_ENDPOINT: $GITLAB_ENDPOINT
-    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
-  inherit:
-    variables: true
-  rules:
-    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: on_success
-    - if: $UNIT_TEST == 'yes' && $UNIT_TEST_REPEAT != '0'
-      when: on_success
-
-test:unit_tests_pyt(DEV)_mcore(legacy):
-  extends: [.unit_tests_run]
-  variables:
-    ENVIRONMENT: dev
-    TAG: legacy
-
-test:unit_tests_pyt(LTS)_mcore(legacy):
-  extends: [.unit_tests_run]
-  variables:
-    ENVIRONMENT: lts
-    TAG: legacy
-
-test:unit_tests_pyt(DEV)_mcore(latest):
-  extends: [.unit_tests_run]
-  variables:
-    ENVIRONMENT: dev
-    TAG: latest
-
-test:unit_tests_pyt(LTS)_mcore(latest):
-  extends: [.unit_tests_run]
-  variables:
-    ENVIRONMENT: lts
-    TAG: latest
-
-test:notify_unit_tests:
-  extends: [.test_rules]
-  image: badouralix/curl-jq
-  needs:
-    - test:unit_tests_pyt(DEV)_mcore(latest)
-    - test:unit_tests_pyt(LTS)_mcore(latest)
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  script:
-    - apk add bash
-    - apk add --update coreutils
-    - env
-    - export WEBHOOK_URL=${MCORE_NOTIFICATION_HOOK}
-    - export RO_API_TOKEN=${PROJECT_ACCESS_TOKEN_MCORE}
-    - export GITLAB_ENDPOINT
-    - export CONTEXT="unit-tests-extended"
-    - export DATE=$(date +"%Y-%m-%d")
-    - bash tests/test_utils/shell_scripts/notify.sh ${CI_PIPELINE_ID} "test:unit_tests_pyt"
-  artifacts:
-    when: always
-    paths:
-      - scripts
-  rules:
-    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "ci-unit-test-extended"
-      when: always
-    - when: never
-
-test:docs_build:
-  extends: [.test_rules]
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  needs: [test:build_image]
-  script:
-    - cd ..
-    - rm -rf documentation && git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_ENDPOINT}/nemo-megatron-core-tme/documentation.git
-    - mv megatron-lm/ documentation/
-    - cd documentation/
-    - ./repo docs
-
-test:formatting:
-  extends: [.test_rules]
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  needs: [test:build_image]
-  variables:
-    GIT_STRATEGY: 'clone'
-  script:
-    - |
-      if [[ "$CI_PIPELINE_SOURCE" != "merge_request_event" ]]; then
-        exit 0
-      fi
-    - set +e
-    - git fetch origin main:main
-    - |
-      if [[ "$CI_MERGE_REQUEST_PROJECT_PATH" == "$CI_MERGE_REQUEST_SOURCE_PROJECT_PATH" ]]; then 
-        bash tools/autoformat.sh
-        set -e
-        git fetch origin $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
-        git checkout $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
-        git config --global user.email "mcore-bot@nvidia.com"
-        git config --global user.name "Mcore Bot"
-        git remote set-url origin "https://gitlab-ci-token:${PAT}@${GITLAB_ENDPOINT}/$CI_PROJECT_NAMESPACE/megatron-lm.git"
-        git add -A .
-        git commit -m "chore: Format files" || true
-        git push -u origin $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
-      fi
-    - env
-    - BASE_REF="$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" CHECK_ONLY=true SKIP_DOCS=$([[ "$CI_MERGE_REQUEST_LABELS" == *"Skip docs"* ]] && echo "true" || echo "false") bash tools/autoformat.sh
-
-test:copyright:
-  extends: [.test_rules]
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  needs: [test:build_image]
-  script:
-    - git fetch origin main
-    - bash tools/copyright.sh
-
-# Override from template
-secret_detection:
-  rules:
-    - when: never
-
-# Inherit and modify template
-test:secret_detection:
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  extends: ['.secret-analyzer']
-  variables:
-    GIT_DEPTH: 0
-    SECRET_DETECTION_LOG_OPTIONS: ${CI_MERGE_REQUEST_DIFF_BASE_SHA}..${CI_COMMIT_SHA}
-  allow_failure: true
-  rules:
-    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
-    - when: never
-  script:
-    - apk add jq
-    - /analyzer run
-    - |
-      if [[ $(cat gl-secret-detection-report.json | jq '.vulnerabilities | length > 0') == true ]]; then
-        echo "Atleast one vulnerability has been found"
-        cat gl-secret-detection-report.json | jq '.'
-        exit 1
-      fi
-
-test:pypi_build_wheel:
-  extends: [.test_rules]
-  image:
-    name: quay.io/pypa/manylinux_2_28_x86_64
-    entrypoint: ['']
-  services:
-    - name: docker:24.0.5-dind
-      variables:
-        HEALTHCHECK_TCP_PORT: '2376'
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/builder-small
-    - team/megatron
-  variables:
-    PUBLISH_DRYRUN: 'yes'
-    PY_ENV: pytorch_24.10
-  script:
-    - echo $PUBLISH_DRYRUN
-    - >
-      if [ "$PUBLISH_DRYRUN" = "yes" ]; then
-        PRE_RELEASE=$(sed -n "s/.*PRE_RELEASE = '\(.*\)'/\1/p" megatron/core/package_info.py)
-        sed -i "/^PRE_RELEASE/c\PRE_RELEASE = '${PRE_RELEASE}.dev$((RANDOM % 900000 + 100000))'" megatron/core/package_info.py 
-      fi
-
-
-    - /opt/python/cp310-cp310/bin/python -m build
-    - /opt/python/cp311-cp311/bin/python -m build
-    - auditwheel repair dist/*.whl
-    - rm -rf dist/*.whl
-
-    - pushd megatron/core
-    - EXPECTED_RELEASE_NUMBER=$(/opt/python/cp311-cp311/bin/python -c "import package_info; print(package_info.__version__)")
-    - popd
-    - echo "EXPECTED_RELEASE_NUMBER=$EXPECTED_RELEASE_NUMBER" | tee -a build.env
-  artifacts:
-    paths:
-      - megatron/core/package_info.py
-      - wheelhouse/
-      - dist/
-    reports:
-      dotenv: build.env
-
-test:pypi_test_wheel:
-  extends: [.test_rules]
-  image: 
-    name: python:3.11
-    entrypoint: ['']
-  needs: [test:pypi_build_wheel]
-  services:
-    - name: docker:24.0.5-dind
-      variables:
-        HEALTHCHECK_TCP_PORT: '2376'
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/builder-small
-    - team/megatron
-  variables:
-    PUBLISH_DRYRUN: 'yes'
-  script:
-    - rm -rf megatron
-    - pip install --no-cache-dir wheelhouse/*cp311*.whl
-
-    - RELEASE_NUMBER=$(python -c "from megatron import core; print(core.__version__)")
-    - >
-      echo "$EXPECTED_RELEASE_NUMBER" == "$RELEASE_NUMBER"
-
-
-    - test "$EXPECTED_RELEASE_NUMBER" == "$RELEASE_NUMBER"
-    - echo "RELEASE_NUMBER=$EXPECTED_RELEASE_NUMBER" | tee -a build.env
-  artifacts:
-    reports:
-      dotenv: build.env
-    paths:
-      - wheelhouse/
-      - dist/
-
-test:pypi_push_wheel:
-  extends: [.test_rules]
-  image: python:3.11
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  needs: [test:pypi_test_wheel]
-  variables:
-    PUBLISH_DRYRUN: 'yes'
-  timeout: 3m
-  script:
-    - >
-      if [ "$PUBLISH_DRYRUN" = "yes" ]; then
-        REPOSITORY=testpypi
-        export TWINE_USERNAME=$TWINE_TEST_USERNAME
-        export TWINE_PASSWORT=$TWINE_TEST_PASSWORD
-      else
-        REPOSITORY=pypi
-        export TWINE_USERNAME=$TWINE_PROD_USERNAME
-        export TWINE_PASSWORT=$TWINE_PROD_PASSWORD
-      fi
-
-    - ls -al dist/
-    - ls -al wheelhouse/
-    - pip install twine
-    - twine upload --verbose -u $TWINE_USERNAME -p $TWINE_PASSWORT --repository $REPOSITORY wheelhouse/* dist/*
-  
-  rules:
-    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: on_success
-    - when: on_success
-      allow_failure: true
-
-test:gh_release:
-  extends: [.test_rules]
-  needs: [test:pypi_test_wheel]
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  image: badouralix/curl-jq
-  variables:
-    PUBLISH_DRYRUN: 'yes'
-  script:
-    - NAME="NVIDIA Megatron Core $RELEASE_NUMBER"
-    - IS_PRERELEASE=$([[ "$RELEASE_NUMBER" == *rc* ]] && echo "true" || echo "false")
-    - >
-      if [[ "$IS_PRERELEASE" == "true" ]]; then
-        DATE=$(date +"%Y-%m-%d")
-        CHANGELOG="Prerelease: $NAME ($DATE)"
-      else
-        CHANGELOG=$(awk '/^## '"$NAME"'/{flag=1; next} /^## /{flag=0} flag' CHANGELOG.md)
-        CHANGELOG=$(echo "$CHANGELOG" | sed '/./!d')
-      fi
-    - >
-      PAYLOAD=$(jq -nc \
-                  --arg TAG_NAME "v${RELEASE_NUMBER}" \
-                  --arg CI_COMMIT_SHA "$CI_COMMIT_SHA" \
-                  --arg NAME "$NAME" \
-                  --arg BODY "$CHANGELOG" \
-                  --argjson PRERELEASE "$IS_PRERELEASE" \
-                  '{
-                      "tag_name": $TAG_NAME,
-                      "target_commitish": $CI_COMMIT_SHA,
-                      "name": $NAME,
-                      "body": $BODY,
-                      "draft": false,
-                      "prerelease": $PRERELEASE,
-                      "generate_release_notes": false
-                  }'
-              )
-      echo -E "$PAYLOAD" > payload.txt
-    - cat payload.txt
-    - >
-      CMD=$(echo -E 'curl -L \
-        -X POST \
-        -H "Accept: application/vnd.github+json" \
-        -H "Authorization: Bearer '"$GH_TOKEN"'" \
-        -H "X-GitHub-Api-Version: 2022-11-28" \
-        https://api.github.com/repos/NVIDIA/Megatron-LM/releases \
-        -d @payload.txt
-      ')
-
-    - >
-      if [[ "$PUBLISH_DRYRUN" == "yes" ]]; then
-        echo -E "$CMD"
-      else
-        eval "$CMD"
-      fi
-
-
-test:notify_release:
-  needs: [test:pypi_test_wheel, test:pypi_push_wheel, test:gh_release]
-  extends: [.test_rules]
-  image: badouralix/curl-jq
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  variables:
-    PUBLISH_DRYRUN: 'yes'
-  script:
-    - URL="https://github.com/NVIDIA/Megatron-LM/releases/tag/core_r$RELEASE_NUMBER"
-    - >
-      MESSAGE='{
-          "blocks": [
-            {
-              "type": "section",
-              "text": {
-                "type": "mrkdwn",
-                    "text": "Releasebot 🤖: Megatron-Core released <'$URL'|core_r'"$RELEASE_NUMBER"'> 🚀"
-              }
-            }
-          ]
-        }'
-
-
-    - echo "$MESSAGE"
-    - >
-      CMD=$(echo curl \
-        -X POST \
-        -H "Content-type: application/json" \
-        --data "$MESSAGE" ${MCORE_NOTIFICATION_HOOK_MAIN}
-      )
-      
-      if [[ "$PUBLISH_DRYRUN" == "yes" ]]; then
-        echo "$CMD"
-      else
-        eval "$CMD"
-      fi
-
-test:generate_coverage_report:
-  extends: [.test_rules]
-  needs:
-    - test:unit_tests_pyt(DEV)_mcore(latest)
-    - test:unit_tests_pyt(LTS)_mcore(latest)
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  script:
-    - env
-    - export RO_API_TOKEN=${PROJECT_ACCESS_TOKEN_MCORE}
-    - export GITLAB_ENDPOINT
-    - python tests/test_utils/python_scripts/download_coverage_results.py --pipeline-id ${CI_PIPELINE_ID}
-    - coverage combine --keep $(ls coverage_results/*/coverage_report)
-    - coverage report
-    - coverage xml
-  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
-  artifacts:
-    reports:
-      coverage_report:
-        coverage_format: cobertura
-        path: coverage.xml
-  rules:
-    - if: $UNIT_TEST == 'yes' && $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true"
-      allow_failure: true
-      when: on_success
-    - if: $UNIT_TEST == 'yes' && $UNIT_TEST_REPEAT != '0'
-      when: on_success
\ No newline at end of file
diff --git a/.gitlab/stages/02.functional-tests.yml b/.gitlab/stages/02.functional-tests.yml
deleted file mode 100644
index ac13ee02..00000000
--- a/.gitlab/stages/02.functional-tests.yml
+++ /dev/null
@@ -1,188 +0,0 @@
-.functional_tests_rules:
-  stage: functional_tests
-  rules:
-    - if: $FUNCTIONAL_TEST == "yes" && ($CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED != "true")
-      allow_failure: true
-    - if: $FUNCTIONAL_TEST == "yes"
-    - when: never
-
-default:
-  id_tokens:
-    VAULT_JWT_TOKEN:
-      aud: https://stg.vault.nvidia.com
-
-include:
-  - project: dl/jet/gitlab-templates
-    ref: main
-    file: downstreams.yml
-
-functional:configure:
-  needs:
-    - test:build_image
-    - job: test:unit_tests_pyt(DEV)_mcore(latest)
-      optional: true
-    - job: test:unit_tests_pyt(LTS)_mcore(latest)
-      optional: true
-  extends: [.functional_tests_rules]
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  before_script:
-    - git rm -r tests/test_utils/local_recipes || true
-    - git submodule add --force https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_ENDPOINT}/ADLR/megatron-lm-convergence-tests.git tests/test_utils/local_recipes
-    - ls tests/test_utils/local_recipes
-  script:
-    - set -x
-    - |
-      A100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_A100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_A100 || echo $DEFAULT_A100_CLUSTER)
-      H100_CLUSTER=$([[ "$FUNCTIONAL_TEST_CLUSTER_H100" != "" ]] && echo $FUNCTIONAL_TEST_CLUSTER_H100 || echo $DEFAULT_H100_CLUSTER)
-    - |
-      RECORD_CHECKPOINTS=$([[ "$CI_MERGE_REQUEST_LABELS" == *"Record checkpoints"* ]] && echo "true" || echo "false")
-    - |
-      if [[ "$FUNCTIONAL_TEST_SCOPE" == "release" || "$FUNCTIONAL_TEST_SCOPE" == "pre-release" ]]; then
-        FUNCTIONAL_TEST_NAME=$(eval echo $FUNCTIONAL_TEST_NAME)
-        RELEASE_ARGS=(
-          "--run-name"
-          $FUNCTIONAL_TEST_NAME
-          "--wandb-experiment"
-          $(echo $FUNCTIONAL_TEST_NAME | tr '/' '-')
-        )
-      else
-        RELEASE_ARGS=()
-      fi
-    - |
-      ARGS=(
-        "--scope $FUNCTIONAL_TEST_SCOPE"
-        "--n-repeat $FUNCTIONAL_TEST_REPEAT"
-        "--time-limit $FUNCTIONAL_TEST_TIME_LIMIT"
-        "--test-cases $FUNCTIONAL_TEST_CASES"
-        "--a100-cluster $A100_CLUSTER"
-        "--h100-cluster $H100_CLUSTER"
-        "--container-image ${UTILITY_IMAGE}"
-        "--container-tag ${CI_PIPELINE_ID}"
-        "--dependent-job functional:configure"
-        "--record-checkpoints ${RECORD_CHECKPOINTS}"
-        "--slurm-account ${CI_SLURM_ACCOUNT}"
-      )
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment dev \
-        --output-path "functional-test-job-dev.yaml" \
-        ${RELEASE_ARGS[@]}
-    - |
-      export PYTHONPATH=$(pwd)
-      python tests/test_utils/python_scripts/generate_jet_trigger_job.py \
-        ${ARGS[@]} \
-        --environment lts \
-        --output-path "functional-test-job-lts.yaml" \
-        ${RELEASE_ARGS[@]}
-  artifacts:
-    paths:
-      - functional-test-job-lts.yaml
-      - functional-test-job-dev.yaml
-      - tests/test_utils/local_recipes
-
-.run:
-  stage: functional_tests
-  needs: [functional:configure]
-  extends: [.functional_tests_rules]
-  trigger:
-    include:
-      - artifact: functional-test-job-$ENVIRONMENT.yaml
-        job: functional:configure
-    strategy: depend
-  variables:
-    RO_API_TOKEN: $PAT
-    CONTAINER_TAG: $CI_PIPELINE_ID
-    CI_MCORE_LTS_IMAGE: $CI_MCORE_LTS_IMAGE
-    GITLAB_ENDPOINT: $GITLAB_ENDPOINT
-    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
-  inherit:
-    variables: true
-
-functional:run_lts:
-  extends: [.run]
-  variables:
-    ENVIRONMENT: lts
-
-functional:run_dev:
-  extends: [.run]
-  variables:
-    ENVIRONMENT: dev
-
-functional:run_nemo:
-  extends: [.functional_tests_rules]
-  trigger:
-    project: 'dl/joc/nemo-ci'
-    branch: main-mirror
-    strategy: depend
-  inherit:
-    variables: true
-  variables:
-    MCORE_COMMIT: $CI_COMMIT_SHA
-    TEST_LLM_MODULE: 'True'
-    TEST_ALIGNER_MODULE: 'False'
-    TEST_DATA_CURATOR_MODULE: 'False'
-    TESTS_TO_RUN_ON_THIS_COMMIT: nightly
-  rules:
-    - if: $FUNCTIONAL_TEST == "yes"
-      when: manual
-      allow_failure: true
-    - when: never
-
-functional:notify:
-  extends: [.functional_tests_rules]
-  image: badouralix/curl-jq
-  needs:
-    - functional:run_lts
-    - functional:run_dev
-  tags:
-    - mcore-docker-node-small
-  variables:
-    WEBHOOK_URL: ${MCORE_NOTIFICATION_HOOK}
-    RO_API_TOKEN: ${PROJECT_ACCESS_TOKEN_MCORE}
-    CONTEXT: $FUNCTIONAL_TEST_SCOPE
-  script:
-    - apk add bash
-    - apk add --update coreutils
-    - env
-    - export WEBHOOK_URL=${MCORE_NOTIFICATION_HOOK}
-    - export RO_API_TOKEN=${PROJECT_ACCESS_TOKEN_MCORE}
-    - export GITLAB_ENDPOINT
-    - export CONTEXT=$FUNCTIONAL_TEST_SCOPE
-    - export DATE=$(date +"%Y-%m-%d")
-    - bash tests/test_utils/shell_scripts/notify.sh ${CI_PIPELINE_ID} "functional:run_"
-  artifacts:
-    when: always
-    paths:
-      - scripts
-  rules:
-    - if: $CI_PIPELINE_SOURCE == "schedule" && $FUNCTIONAL_TEST == "yes"
-      when: always
-    - when: never
-
-functional:download_golden_values:
-  extends: [.functional_tests_rules]
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags:
-    - mcore-docker-node-small
-  script:
-    - env
-    - export RO_API_TOKEN=${PROJECT_ACCESS_TOKEN_MCORE}
-    - export GITLAB_ENDPOINT
-    - python tests/test_utils/python_scripts/download_golden_values.py --pipeline-id ${CI_PIPELINE_ID}
-  artifacts:
-    paths:
-      - tests/
-  rules:
-    - if: $FUNCTIONAL_TEST == "yes"
-      when: manual
-      allow_failure: true
-    - when: never
diff --git a/.gitlab/stages/03.publish.yml b/.gitlab/stages/03.publish.yml
deleted file mode 100644
index 48ea9bfb..00000000
--- a/.gitlab/stages/03.publish.yml
+++ /dev/null
@@ -1,126 +0,0 @@
-.publish_common_freeze:
-  stage: publish
-  rules:
-    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $PUBLISH == "yes" && $PUBLISH_SCOPE == "code-freeze"
-      when: manual
-    - when: never
-
-.publish_common_release:
-  stage: publish
-  rules:
-    - if: $CI_COMMIT_BRANCH =~ /^core_r/ && $PUBLISH == "yes" && $PUBLISH_SCOPE == "release"
-      when: manual
-    - if: $PUBLISH == "yes" && $PUBLISH_SCOPE == "release"
-      when: manual
-      variables:
-        PUBLISH_DRYRUN: 'yes'
-    - when: never
-
-publish:release_branch:
-  extends: [.publish_common_freeze]
-  image: ${CI_MCORE_LTS_IMAGE}:${CI_PIPELINE_ID}
-  needs: [test:build_image]
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  variables:
-    GIT_STRATEGY: 'none'
-  script:
-    - git fetch origin $CI_DEFAULT_BRANCH
-    - git config --global user.email "mcore-bot@nvidia.com"
-    - git config --global user.name "Mcore Bot"
-    - git remote set-url origin "https://gitlab-ci-token:${PAT}@${GITLAB_ENDPOINT}/$CI_PROJECT_NAMESPACE/megatron-lm.git"
-    - sed -i "/^PRE_RELEASE/c\PRE_RELEASE = ''" megatron/core/package_info.py
-    - VERSION=$(python -c "from megatron import core; print(core.__version__)")
-    - RELEASE_BRANCH=core_r$VERSION
-    - git switch --force-create $RELEASE_BRANCH origin/$CI_DEFAULT_BRANCH
-    - |
-      MESSAGE='{
-        "blocks": [
-          {
-            "type": "section",
-            "text": {
-              "type": "mrkdwn",
-              "text": "Releasebot 🤖: Megatron Core has been frozen 🎉 to branch `'"$RELEASE_BRANCH"'`"
-            }
-          }
-        ]
-      }'
-    - >
-      curl -X POST -H "Content-type: application/json" --data "$MESSAGE" ${MCORE_NOTIFICATION_HOOK_MAIN}
-
-
-    - git switch --force-create bot/chore/bump-version
-    - git add megatron/core/package_info.py
-    - >
-      git commit -m "chore: adjust version version"
-
-
-    - git push -u origin bot/chore/bump-version
-    - >
-      curl \
-        --header "PRIVATE-TOKEN: $PAT" \
-        --url https://${GITLAB_ENDPOINT}/api/v4/projects/${CI_PROJECT_ID}/merge_requests \
-        -d "source_branch=bot/chore/bump-version" \
-        -d "target_branch=$RELEASE_BRANCH" \
-        -d "title=chore: Fix version of \`$RELEASE_BRANCH\`" \
-        -d "description=[🤖]: Hi @okoenig 👋,<br><br>we've adjusted the version number of \`$RELEASE_BRANCH\` for you! 🚀<br><br>Please review and approve this cherry pick by your convenience\!"
-
-publish:pypi_build_wheel:
-  extends: [test:pypi_build_wheel, .publish_common_release]
-  dependencies: []
-  variables:
-    PUBLISH_DRYRUN: 'no'
-
-publish:pypi_test_wheel:
-  extends: [test:pypi_test_wheel, .publish_common_release]
-  needs: [publish:pypi_build_wheel]
-  variables:
-    PUBLISH_DRYRUN: 'no'
-
-publish:pypi_push_wheel:
-  extends: [test:pypi_push_wheel, .publish_common_release]
-  needs: [publish:pypi_test_wheel]
-  dependencies: [publish:pypi_test_wheel]
-  variables:
-    PUBLISH_DRYRUN: 'no'
-
-publish:gh_release:
-  extends: [test:gh_release, .publish_common_release]
-  dependencies: [publish:pypi_test_wheel]
-  needs: [publish:pypi_test_wheel]
-  variables:
-    PUBLISH_DRYRUN: 'no'
-
-publish:notify_release:
-  needs: [publish:pypi_push_wheel, publish:gh_release]
-  extends: [test:notify_release, .publish_common_release]
-  variables:
-    PUBLISH_DRYRUN: 'no'
-
-publish:docs:
-  extends: [.publish_common_release]
-  image: ${UTILITY_IMAGE}:${CI_PIPELINE_ID}
-  tags: 
-    - arch/amd64
-    - env/prod
-    - origin/jet-fleet
-    - owner/jet-core
-    - purpose/utility
-    - team/megatron
-  script:
-    - cd ..
-    - rm -rf documentation && git clone https://gitlab-ci-token:${PROJECT_ACCESS_TOKEN_MCORE}@${GITLAB_ENDPOINT}/nemo-megatron-core-tme/documentation.git
-    - cd documentation/megatron-lm
-      git fetch origin '+refs/merge-requests/*:refs/remotes/merge-requests/*'
-    - git fetch origin $CI_COMMIT_SHA
-    - git checkout $CI_COMMIT_SHA
-    - cd ..
-    - git add megatron-lm
-    - >
-      git commit -m 'feat: Bump mcore'
-    - git push
diff --git a/megatron-lm-musa-patch/README.md b/megatron-lm-musa-patch/README.md
new file mode 100644
index 00000000..ef43b635
--- /dev/null
+++ b/megatron-lm-musa-patch/README.md
@@ -0,0 +1,101 @@
+# Megatron-LM-MUSA-Patch
+
+
+## Installation
+You can create a directory named `megatron_dev,` and use the command below to clone the `Megatron-LM`, `megatron-lm-musa-patch`, `apex`, `TransformerEngine`, `flash-attention` to the `megatron_dev`.  
+In the kuae release image, `apex`, `TransformerEngine`, `flash-attention` is already installed, you can skip the installation of three repos above.
+
+```bash
+# Megatron-LM
+git clone https://sh-code.mthreads.com/ai/Megatron-LM.git
+pushd Megatron-LM
+git checkout -b core_r0.9.0 core_r0.9.0
+popd
+
+# megatron-lm-musa-patch
+git clone https://sh-code.mthreads.com/ai/megatron-lm-musa-patch.git
+pushd megatron-lm-musa-patch
+git fetch origin dev
+git checkout -b dev origin/dev
+popd
+
+# apex (optional)
+git clone https://sh-code.mthreads.com/ai/apex
+pushd apex
+git fetch origin feature/kuae_1.2
+git checkout -b feature/kuae_1.2 origin/feature/kuae_1.2
+pip install -v --disable-pip-version-check --no-cache-dir --no-build-isolation --config-settings "--build-option=--cpp_ext" --config-settings "--build-option=--cuda_ext" ./
+popd
+
+# TransformerEngine (optional)
+git clone https://sh-code.mthreads.com/ai/TransformerEngine.git
+pushd TransformerEngine
+git fetch origin lj_fp8
+git checkout -b lj_fp8 origin/lj_fp8
+bash install.sh
+popd
+
+# flash-attention (optional)
+git clone https://sh-code.mthreads.com/ai/flash-attention.git
+pushd flash-attention
+git fetch origin musa_dev
+git checkout -b musa_dev origin/musa_dev
+FLASH_ATTENTION_SKIP_CUDA_BUILD=TRUE python setup.py develop
+popd
+
+```
+
+## Getting started
+### Llama3 
+
+```bash
+cd megatron-lm-musa-patch/examples/llama3
+bash dist_run_pretrain_megatron_llama3_musa.sh
+```
+
+### Mixtral
+
+```bash
+cd megatron-lm-musa-patch/examples/mixtral
+bash dist_run_pretrain_megatron_llama3_musa.sh
+```
+
+### Llava
+
+```bash
+cd megatron-lm-musa-patch/examples/llava
+
+```
+
+### DeepSeekV3
+
+```bash
+cd megatron-lm-musa-patch/examples/deepseekv3
+
+```
+In deepseek-v2/v3, the ffn-size in first several dense layer is not the same as moe-ffn-size. So it's need to modify some codes in Megatron to support this situation while not use GroupGEMM.
+#### Modify some codes in Megatron
+
+Megatron-LM/megatron/core/transformer/mlp.py
+
+add in line63:  
+```
+if is_expert:
+    ffn_hidden_size = self.config.moe_ffn_hidden_size
+```
+change in line83:
+```
+            self.config.ffn_hidden_size,
+-->         self.config.ffn_hidden_size if not is_expert else self.config.moe_ffn_hidden_size,
+```
+
+
+Megatron-LM/megatron/core/transformer/moe/experts.py
+
+comment line757-760
+```
+        # assert (
+        #     self.config.moe_ffn_hidden_size == self.config.ffn_hidden_size
+        # ), "Please use GroupedMLP or TEGroupedMLP when moe_ffn_hidden_size is \
+        #         different from ffn_hidden_size"
+```
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/cuda_patch/__init__.py b/megatron-lm-musa-patch/cuda_patch/__init__.py
new file mode 100644
index 00000000..73d3e580
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/__init__.py
@@ -0,0 +1,29 @@
+import sys
+import torch
+import torch.utils
+import torch.utils.data
+
+from . import transformer_config
+from . import training
+from . import moe_utils
+from . import multi_latent_attention
+from . import router
+from . import arguments
+from . import theoretical_memory_usage
+
+from . import fused_layer_norm
+
+
+from . import training
+def py_patch():
+    if sys.version_info >= (3.9, 0):
+        return
+    import math
+    def lcm(a, b):
+        return abs(a * b) // math.gcd(a, b)
+    math.lcm = lcm
+    return
+
+# Apply patch
+py_patch()
+
diff --git a/megatron-lm-musa-patch/cuda_patch/arguments.py b/megatron-lm-musa-patch/cuda_patch/arguments.py
new file mode 100644
index 00000000..67094384
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/arguments.py
@@ -0,0 +1,140 @@
+import dataclasses
+import torch
+import torch.nn.functional as F
+
+import megatron.training.arguments
+from megatron.training.activations import squared_relu
+from .transformer_config import TransformerConfig, MLATransformerConfig
+moe_freq_type = megatron.training.arguments.moe_freq_type
+
+def _add_moe_args(parser):
+    group = parser.add_argument_group(title="moe")
+    # General arguments
+    group.add_argument('--expert-model-parallel-size', type=int, default=1,
+                       help='Degree of expert model parallelism.')
+    group.add_argument('--expert-tensor-parallel-size', type=int, default=None,
+                       help='Degree of expert model parallelism. Default is None, which will be set to the value of --tensor-model-paralle-size.')
+    group.add_argument('--num-experts', type=int, default=None,
+                       help='Number of Experts in MoE (None means no MoE)')
+    group.add_argument('--moe-layer-freq', type=moe_freq_type, default=1,
+                       help='Frequency between MoE layers and Dense layers. Accepts either: '
+                            '- An integer N: Represents a 1:N ratio, meaning one expert layer for every N-1 dense layers '
+                            '- A string containing a Python list expression that defines a custom pattern, e.g.: '
+                            '"([1]*3+[0]*1)*3" evaluates to [1,1,1,0,1,1,1,0,1,1,1,0] '
+                            'where 1 indicates an expert layer and 0 indicates a dense layer. '
+                            'Examples: "([0]+[1]*23)": 1 dense layer followed by 23 experts layers, '
+                            '"([1]*3+[0]*2)*2": Three expert layers followed by two dense layers, repeated twice.')
+    group.add_argument('--moe-ffn-hidden-size', type=int, default=None,
+                       help='The hidden size of each expert\'s feed-forward network (ffn). '
+                       'If not specified, defaults to the ffn_hidden_size.')
+    group.add_argument('--moe-shared-expert-intermediate-size', type=int, default=None,
+                       help='Shared expert total ffn hidden size. '
+                       'It should be equal to "num_shared_experts * ffn_size_of_each_shared_expert" if there are multiple shared experts. '
+                       'None means no shared expert.')
+    group.add_argument('--moe-shared-expert-overlap', action='store_true',
+                       help='Enable overlapping between shared expert computations and dispatcher communications. '
+                       'Without this, the shared epxerts execute after the routed experts. '
+                       'Only effective when moe-shared-expert-intermediate-size is set.')
+    group.add_argument('--moe-grouped-gemm', action='store_true',
+                       help='When there are multiple experts per rank, launch multiple local GEMM kernels in multiple streams to improve the utilization and performance with GroupedLinear in TransformerEngine.')
+    # Router arguments
+    group.add_argument('--moe-router-load-balancing-type', type=str,
+                       choices=['aux_loss', 'seq_aux_loss', 'sinkhorn', 'none'],
+                       default='aux_loss',
+                       help='Determines the load balancing strategy for the router. "aux_loss" corresponds to the load balancing loss used in GShard and SwitchTransformer; "seq_aux_loss" corresponds to the load balancing loss used in DeepSeekV2, which computes the loss for each individual sample; "sinkhorn" corresponds to the balancing algorithm used in S-BASE, and "none" implies no load balancing. The default is "aux_loss".')
+    group.add_argument('--moe-router-topk', type=int, default=2,
+                       help='Number of experts to route to for each token. The default is 2.')
+    group.add_argument('--moe-router-pre-softmax', action='store_true',
+                       help='Enable pre-softmax routing for MoE, which means softmax is before the top-k selection. By default, softmax is done after top-k.')
+    group.add_argument('--moe-router-topk-limited-devices', type=int, default=None, 
+                       help='Number of expert parallel ranks to consider for each token during routing. Perform top-k routing on a subset of expert parallel ranks by first selecting N ranks for each token, then conducting top-k selection among experts on these devices. Default is None, which means no limited devices.')
+    group.add_argument('--moe-router-topk-scaling-factor', type=float, default=None,
+                       help='Scaling factor for routing score in top-k selection, only works when --moe-router-pre-softmax enabled. Defaults to None, which means no scaling.')
+    group.add_argument('--moe-use-legacy-grouped-gemm', action='store_true',
+                       help='Use legacy GroupedMLP rather than TEGroupedMLP. Note: The legacy one will be deprecated soon.')
+    group.add_argument('--moe-aux-loss-coeff', type=float, default=0.0,
+                       help='Scaling coefficient for the aux loss: a starting value of 1e-2 is recommended.')
+    group.add_argument('--moe-device-level-aux-loss-coeff', type=float, default=0.0,
+                       help='Scaling coefficient for the device-level aux loss')
+    group.add_argument('--moe-comm-aux-loss-coeff', type=float, default=0.0,
+                       help='Scaling coefficient for the communication aux loss')
+    group.add_argument('--moe-z-loss-coeff', type=float, default=None,
+                       help='Scaling coefficient for the z-loss: a starting value of 1e-3 is recommended.')
+    group.add_argument('--moe-input-jitter-eps', type=float, default=None,
+                       help='Add noise to the input tensor by applying jitter with a specified epsilon value.')
+    group.add_argument('--moe-token-dispatcher-type', type=str,
+                       choices=['allgather', 'alltoall', 'alltoall_seq'],
+                       default='allgather',
+                       help="The type of token dispatcher to use. The default is 'allgather'. Options are 'allgather', 'alltoall' and 'alltoall_seq'. We recommend using 'alltoall' when applying expert parallelism. For more information, please refer to the documentation in core/moe/README.")
+    group.add_argument('--moe-per-layer-logging', action='store_true',
+                       help='Enable per-layer logging for MoE, currently supports auxiliary loss and z loss.')
+    # Token dropping arguments
+    group.add_argument('--moe-expert-capacity-factor', type=float, default=None,
+                       help='The capacity factor for each expert, None means no token will be dropped.')
+    group.add_argument('--moe-device-level-capacity', action='store_true',
+                       help='Whether to consider the expert capacity of a group together')
+    group.add_argument('--moe-pad-expert-input-to-capacity', action='store_true',
+                       help='Pads the input for each expert to match the expert capacity length, effective only after the --moe-expert-capacity-factor is set.')
+    group.add_argument('--moe-token-drop-policy', type=str, default='probs', choices=['probs', 'position'],
+                       help='The policy to drop tokens. Can be either "probs" or "position". If "probs", the tokens with the lowest probabilities will be dropped. If "position", tokens at the end of each batch will be dropped.')
+    group.add_argument('--moe-layer-recompute', action='store_true',
+                       help='Enable checkpointing for moe_layer, should be used when memory is not sufficient.')
+    group.add_argument('--moe-extended-tp', action='store_true',
+                       help='Deprecated. Use --expert-tensor-parallel-size instead.')
+    group.add_argument('--moe-use-upcycling', action='store_true',
+                       help='Load a checkpoint of a dense model, convert it into an MoE model, and save the converted model to the path specified by --save. '
+                       'Upcycling is implemented on the top of distributed checkpointing, so it supports parallel modes different from the dense model.')
+
+    return parser
+
+
+def core_transformer_config_from_args(args, config_class=None):
+
+    # Config class.
+    config_class = config_class or TransformerConfig
+
+    if args.multi_latent_attention:
+        config_class = MLATransformerConfig
+
+    # Translate args to core transformer configuration
+    kw_args = {}
+    for f in dataclasses.fields(config_class):
+        if hasattr(args, f.name):
+            kw_args[f.name] = getattr(args, f.name)
+    kw_args['persist_layer_norm'] = not args.no_persist_layer_norm
+    kw_args['layernorm_zero_centered_gamma'] = args.apply_layernorm_1p
+    kw_args['layernorm_epsilon'] = args.norm_epsilon
+    kw_args['deallocate_pipeline_outputs'] = True
+    kw_args['pipeline_dtype'] = args.params_dtype
+    kw_args['batch_p2p_comm'] = not args.overlap_p2p_comm
+    kw_args['num_moe_experts'] = args.num_experts
+    kw_args['rotary_interleaved'] = args.rotary_interleaved
+    kw_args['first_pipeline_num_layers']= args.decoder_first_pipeline_num_layers
+    kw_args['last_pipeline_num_layers']= args.decoder_last_pipeline_num_layers
+    if args.swiglu:
+        kw_args['activation_func'] = F.silu
+        kw_args['gated_linear_unit'] = True
+        kw_args['bias_activation_fusion'] = args.bias_swiglu_fusion
+    else:
+        kw_args['bias_activation_fusion'] = args.bias_gelu_fusion
+    if args.squared_relu:
+        assert not args.swiglu
+        kw_args['activation_func'] = squared_relu
+    if args.init_method_xavier_uniform:
+        kw_args['init_method'] = torch.nn.init.xavier_uniform_
+        kw_args['scaled_init_method'] = torch.nn.init.xavier_uniform_
+    if args.group_query_attention:
+        kw_args['num_query_groups'] = args.num_query_groups
+    else:
+        kw_args['num_query_groups'] = None
+    kw_args['config_logger_dir'] = args.config_logger_dir
+
+    if len(args.cp_comm_type) == 1:
+        kw_args['cp_comm_type'] = args.cp_comm_type[0]
+
+    # Return config.
+    return config_class(**kw_args)
+
+
+megatron.training.arguments._add_moe_args = _add_moe_args
+megatron.training.arguments.core_transformer_config_from_args = core_transformer_config_from_args
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/cuda_patch/fused_layer_norm.py b/megatron-lm-musa-patch/cuda_patch/fused_layer_norm.py
new file mode 100644
index 00000000..15a51844
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/fused_layer_norm.py
@@ -0,0 +1,106 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+import numbers
+
+import torch
+from torch import Tensor
+from torch.nn import init
+from torch.nn.parameter import Parameter
+
+from megatron.core.transformer import TransformerConfig
+
+
+
+class FusedLayerNorm(torch.nn.Module):
+
+    """Layer Norm, fused into a single CUDA kernel.
+
+    Args:
+      hidden_size (int): Transformer hidden dimension.
+
+      eps (float): Epsilon added to denominator, for numerical stability.
+
+      persist_layer_norm (bool): Use persistent fused layer norm kernel.
+      This kernel supports only a set of hidden sizes. Please
+      check persist_ln_hidden_sizes if your hidden size is supported.
+
+      zero_centered_gamma (bool): Adjust LayerNorm weights such that they are
+      centered around zero. This improves numerical stability.
+
+      config (TransformerConfig): Transformer config. Include to match custom
+      layer norm interfaces.
+
+      normalization (str): Normalization type, used for Transformer Engine.
+      Must equal 'LayerNorm' here.
+    """
+
+    def __init__(
+        self,
+        config: TransformerConfig,
+        hidden_size: int,
+        eps: float = 1e-5,
+        persist_layer_norm: bool = True,
+        zero_centered_gamma: bool = False,
+        normalization: str = "LayerNorm",  # included to match TE interface
+    ):
+        super().__init__()
+        print("use FusedLayerNorm")
+
+        self.config = config
+
+        self.zero_centered_gamma = self.config.layernorm_zero_centered_gamma
+
+        if self.config.normalization == "LayerNorm":
+            self.norm_impl = torch.layer_norm
+        elif self.config.normalization == "RMSNorm":
+            def naive_rms_norm(hidden_states, hidden_size, weight, eps):        
+                variance = hidden_states.to(torch.float32).pow(2).mean(-1, keepdim=True)
+                hidden_states = hidden_states * torch.rsqrt(variance + eps)
+                # convert into half-precision if necessary
+                if self.weight.dtype in [torch.float16, torch.bfloat16]:
+                    hidden_states = hidden_states.to(self.weight.dtype)
+                hidden_states = weight * hidden_states
+                return hidden_states 
+            self.norm_impl = naive_rms_norm
+        else:
+            raise ValueError(f'({self.config.normalization}) is not supported in FusedLayerNorm')
+
+        if isinstance(hidden_size, numbers.Integral):
+            hidden_size = (hidden_size,)
+        # self.hidden_size = torch.Size(hidden_size)
+        self.hidden_size = hidden_size
+        self.eps = eps
+        self.weight = Parameter(torch.Tensor(*hidden_size))
+        self.bias = Parameter(torch.Tensor(*hidden_size)) if self.config.normalization == "LayerNorm" else None
+        self.reset_parameters()
+        self.sequence_parallel = self.config.sequence_parallel
+
+
+        # set sequence parallelism flag on weight and bias parameters
+        setattr(self.weight, 'sequence_parallel', self.sequence_parallel)
+        if self.config.normalization == "LayerNorm":
+            setattr(self.bias, 'sequence_parallel', self.sequence_parallel)
+
+    def reset_parameters(self):
+
+        if self.zero_centered_gamma:
+            init.zeros_(self.weight)
+            if self.config.normalization == "LayerNorm":
+                init.zeros_(self.bias)
+        else:
+            init.ones_(self.weight)
+            if self.config.normalization == "LayerNorm":
+                init.zeros_(self.bias)
+
+    def forward(self, input: Tensor) -> Tensor:
+
+        weight = self.weight + 1 if self.zero_centered_gamma else self.weight
+        if self.config.normalization == "LayerNorm":
+            output = self.norm_impl(input, self.hidden_size, weight, self.bias, self.eps)
+        else:
+            output = self.norm_impl(input, self.hidden_size, weight, self.eps)
+
+        return output
+
+import megatron.core.fusions.fused_layer_norm
+megatron.core.fusions.fused_layer_norm.FusedLayerNorm = FusedLayerNorm
diff --git a/megatron-lm-musa-patch/cuda_patch/moe_utils.py b/megatron-lm-musa-patch/cuda_patch/moe_utils.py
new file mode 100644
index 00000000..97fbf35b
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/moe_utils.py
@@ -0,0 +1,299 @@
+
+import math
+from typing import Optional
+
+import torch
+
+from megatron.core import parallel_state
+import megatron.core.transformer.moe.moe_utils
+get_capacity = megatron.core.transformer.moe.moe_utils.get_capacity
+device_limited_topk = megatron.core.transformer.moe.moe_utils.device_limited_topk
+
+
+def node_limited_topk(
+    scores: torch.Tensor,
+    topk: int,
+    num_tokens: int,
+    num_experts: int,
+    moe_router_topk_limited_devices: int,
+    num_node_group: int=None,
+):
+    """Perform top-k routing on a subset of expert parallel ranks.
+
+    Selects N ranks for each token, then conducts top-k selection among experts on these node.
+    See DeepSeek-V3 technical report for details.
+
+    Args:
+        scores (torch.Tensor): Softmax scores from the router.
+        topk (int): The number of experts to select for each token.
+        num_tokens (int): The number of tokens.
+        num_experts (int): The number of experts.
+        moe_router_topk_limited_devices (int): Number of expert parallel ranks to consider for
+            each token during routing. None means no device limitation.
+
+    Returns:
+        Tuple[torch.Tensor, torch.Tensor]: Probs and indices tensor.
+    """
+
+    # Organize the experts into groups
+    if num_node_group is None:
+        ep_size = (
+            parallel_state.get_expert_model_parallel_world_size()
+        )  # num_node_group equals to expert parallel size/8
+        assert ep_size % 8 == 0, f"ep_size should be multiple of 8, but get {ep_size}"
+        num_node_group = ep_size // 8
+    node_k = topk // moe_router_topk_limited_devices #each token select node according to the sum of the highest K/M affinity scores
+    group_scores = (
+                scores.view(num_tokens, num_node_group, -1).topk(node_k, dim=-1)[0].sum(dim = -1)
+            )  # [n, n_group]
+    group_idx = torch.topk(
+                group_scores, k=moe_router_topk_limited_devices, dim=-1, sorted=False
+            )[
+                1
+            ]  # [n, moe_router_topk_limited_devices]
+    group_mask = torch.zeros_like(group_scores)  # [n, n_group]
+    group_mask.scatter_(1, group_idx, 1)  # [n, n_group]
+    score_mask = (
+        group_mask.unsqueeze(-1)
+        .expand(num_tokens, num_node_group, num_experts // num_node_group)
+        .reshape(num_tokens, -1)
+    )  # [n, e]
+    masked_scores = scores.masked_fill(~score_mask.bool(), 0.0)  # [n, e]
+    _, top_indices = torch.topk(masked_scores, k=topk, dim=-1)
+    return top_indices
+
+
+def sequence_load_balancing_loss_func(
+    probs: torch.Tensor,
+    routing_map: torch.Tensor,
+    tokens_per_expert: torch.Tensor,
+    batch_size: int,
+    seq_length: int,
+    topk: int,
+    moe_aux_loss_coeff: float,
+    moe_device_level_aux_loss_coeff: float=None,
+    moe_comm_aux_loss_coeff: float=None,
+    moe_router_topk_limited_devices: float=None,
+    moe_complementary_seq_aux_loss: bool=False,
+    sequence_partition_group=None,
+):
+    """
+    Calculate the auxiliary loss in sequence-level by computing the loss for each individual sample.
+    Refer to the DeepSeek-V2 huggingface repo
+    (https://huggingface.co/deepseek-ai/DeepSeek-V2) for details.
+    """
+    num_sub_sequence = 1
+
+    # If the sequence is partitioned by certain parallelism strategies like Sequence Parallelism
+    # or Context Parallelism, compute the gradient of the auxiliary loss with respect to the full
+    # sequence.
+    if sequence_partition_group is not None:
+        # We can keep `aggregated_probs_per_expert` local since we don't need the gradient for
+        # `tokens_per_expert`, saving one allreduce operation for `aggregated_probs_per_expert`.
+        num_sub_sequence = torch.distributed.get_world_size(sequence_partition_group)
+        torch.distributed.all_reduce(tokens_per_expert, group=sequence_partition_group)
+
+    assert num_sub_sequence == 1, "Do not support sequence aux loss in sequence partition case"
+
+    num_experts = probs.shape[1]
+
+    probs_for_aux_loss = probs.view(seq_length, batch_size, -1)
+    cost_coeff = routing_map.view(seq_length, batch_size, -1).sum(dim=0).float()
+    cost_coeff.div_(seq_length * topk / num_experts)
+    if moe_complementary_seq_aux_loss:
+        assert (
+            (moe_device_level_aux_loss_coeff is None) and 
+            (moe_comm_aux_loss_coeff is None)
+            ), "moe_complementary_seq_aux_loss only used in deepseekV3, which means no other aux loss used"
+        probs_for_aux_loss = probs.view(seq_length, batch_size, -1)
+        sum_value = probs_for_aux_loss.sum(dim=-1, keepdim=True)
+        probs_for_aux_loss = probs_for_aux_loss / (sum_value + 1e-20)
+    seq_aux_loss = (cost_coeff * probs_for_aux_loss.mean(dim=0)).sum(dim=1).mean()
+    seq_aux_loss *= moe_aux_loss_coeff
+
+    if moe_device_level_aux_loss_coeff is not None:
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        device_aux_loss = (cost_coeff.view(batch_size, num_group, -1).mean(dim=2) * 
+                           probs_for_aux_loss.mean(dim=0).view(batch_size, num_group, -1).sum(dim=2)).sum(dim=1).mean()
+        device_aux_loss *= moe_device_level_aux_loss_coeff
+        seq_aux_loss += device_aux_loss
+    if moe_comm_aux_loss_coeff is not None:
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        cost_coeff = routing_map.view(seq_length, batch_size, num_group, -1).any(dim=3).sum(dim=0).float()
+        cost_coeff.div_(seq_length *  moe_router_topk_limited_devices/ num_group)
+        comm_aux_loss = (cost_coeff * 
+                           probs_for_aux_loss.mean(dim=0).view(batch_size, num_group, -1).sum(dim=2)).sum(dim=1).mean()
+        comm_aux_loss *= moe_comm_aux_loss_coeff
+        seq_aux_loss += comm_aux_loss
+        
+    return seq_aux_loss
+
+def topk_softmax_with_capacity(
+    logits: torch.Tensor,
+    topk: int,
+    capacity_factor: Optional[float] = None,
+    pad_to_capacity: bool = False,
+    drop_policy: str = "probs",
+    use_pre_softmax: bool = False,
+    moe_router_topk_limited_devices: int = None,
+    moe_router_topk_scaling_factor: float = None,
+    device_level_capacity: Optional[bool] = False,
+    use_sigmoid: bool = False,
+    norm_topk_prob: bool = False,
+    num_node_group: int = None,
+    e_score_correction_bias: torch.Tensor = None,
+    deterministic_mode: bool = False,
+):
+    """Apply capacity and padding to the top-k selection.
+    Args:
+        logits (torch.Tensor): Logits tensor.
+        topk (int): The number of experts to select for each token.
+        capacity_factor (int): The capacity factor of each expert. Will drop tokens if the number
+                               of tokens exceeds the capacity.
+        pad_to_capacity (bool): Whether to need padding in token drop mode.
+        drop_policy (str): The policy to drop tokens. Can be either "prob" or "position".
+                           If "prob", the tokens with the lowest probabilities will be dropped.
+                           If "position", tokens at the end of each batch will be dropped.
+        use_pre_softmax (bool): Whether to apply softmax before top-k selection.
+        moe_router_topk_limited_devices (int): Number of expert parallel ranks to consider for
+            each token during routing. None means no device limitation.
+        moe_router_topk_scaling_factor (float): Scaling factor for routing score in top-k
+            selection, only works when use_pre_softmax enabled.
+        deterministic_mode (bool): Deprecated.
+    Returns:
+        Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
+            - routing_probs (torch.Tensor): A tensor of shape [num_tokens, num_experts] containing
+              the routing probabilities for each token to each expert.
+            - routing_map (torch.Tensor): A mask tensor of shape [num_tokens, num_experts]
+              indicating which experts were selected for each token. True values represent
+              the selected experts.
+            - tokens_per_expert (torch.Tensor): A tensor of shape [num_experts] containing
+              the number of local tokens assigned to each expert before dropping and padding.
+    """
+    assert logits.dim() == 2, f"Expected 2D logits [num_tokens, num_experts], got {logits.dim()}."
+    num_tokens = logits.shape[0]
+    num_experts = logits.shape[1]
+    if use_pre_softmax:
+        # Pre softmax
+        if use_sigmoid:
+            scores = torch.sigmoid(logits).type_as(logits)
+        else:
+            scores = torch.softmax(logits, dim=-1, dtype=torch.float32).type_as(logits)
+
+        if e_score_correction_bias is not None:
+            scores_gate = scores + e_score_correction_bias.unsqueeze(0)  #correction only used in router not in multiplied ffn output
+        else:
+            scores_gate = scores
+
+        if moe_router_topk_limited_devices:
+            if num_node_group:
+                top_indices = node_limited_topk(
+                    scores_gate, topk, num_tokens, num_experts, moe_router_topk_limited_devices, num_node_group
+                )
+                probs = scores.gather(1, top_indices)
+            else:
+                probs, top_indices = device_limited_topk(
+                    scores, topk, num_tokens, num_experts, moe_router_topk_limited_devices
+                )
+        else:
+            probs, top_indices = torch.topk(scores, k=topk, dim=1)
+
+        # Normalize the probs.
+        if norm_topk_prob:
+            assert use_sigmoid, f"norm_topk_prob only work with use_sigmoid=True, but get {use_sigmoid}"
+            denominator = probs.sum(dim=-1, keepdim=True) + 1e-20
+            probs = probs / denominator
+        if moe_router_topk_scaling_factor:
+            probs = probs * moe_router_topk_scaling_factor
+    else:
+        # Post softmax
+        if topk == 1:
+            # Requires applying softmax before selecting the top-k when k is 1,
+            # since softmax on a [num_tokens, 1] would yield a zero gradient.
+            raise ValueError("Please use --moe-router-pre-softmax when topk is 1.")
+        assert (
+            moe_router_topk_scaling_factor is None
+        ), "moe_router_topk_scaling_factor is not supported with post-softmax"
+        if moe_router_topk_limited_devices:
+            if num_node_group:
+                scores, top_indices = node_limited_topk(
+                    logits, topk, num_tokens, num_experts, moe_router_topk_limited_devices, num_node_group
+                )
+            else:
+                scores, top_indices = device_limited_topk(
+                    logits, topk, num_tokens, num_experts, moe_router_topk_limited_devices
+                )
+        else:
+            scores, top_indices = torch.topk(logits, k=topk, dim=1)
+        probs = torch.softmax(scores, dim=-1, dtype=torch.float32).type_as(logits)
+
+    # TODO Try using element-wise operations instead of scatter?
+    topk_masked_gates = torch.zeros_like(logits).scatter(1, top_indices, probs)
+    topk_map = torch.zeros_like(logits).int().scatter(1, top_indices, 1).bool()
+    tokens_per_expert = topk_map.sum(dim=0)
+
+    if capacity_factor is None:
+        # TopK without capacity
+        return topk_masked_gates, topk_map, tokens_per_expert
+    elif device_level_capacity:
+        assert drop_policy=='probs', f"only support 'probs' for device_level capacity, but get {drop_policy}"
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        device_expert_capacity = get_capacity(
+            num_tokens=num_tokens * topk, num_experts=num_experts, capacity_factor=capacity_factor
+        )*num_experts//num_group
+        # Maskout exceeded tokens
+        if drop_policy == "probs":
+            topk_masked_group_gates = topk_masked_gates.view(num_tokens, num_group, -1)
+            topk_masked_group_gates = topk_masked_group_gates.permute(0,2,1).reshape(-1, num_group)
+            _, capacity_indices = torch.topk(
+                topk_masked_group_gates, k=device_expert_capacity, dim=0, sorted=False
+            )
+            capacity_mask = torch.zeros([num_tokens*num_experts//num_group, num_group], device=logits.device).scatter(0, capacity_indices, 1).bool()
+            capacity_mask = capacity_mask.view(num_tokens, num_experts//num_group, num_group).permute(0,2,1).reshape(num_tokens, -1)
+        else:
+            raise ValueError(f"Invalid drop_policy: {drop_policy}")
+
+        if pad_to_capacity:
+            final_map = capacity_mask
+            final_probs = topk_masked_gates * final_map
+        else:
+            # Get exceed mask and maskout exceeded probs and indices
+            final_map = torch.logical_and(topk_map, capacity_mask)
+            final_probs = topk_masked_gates * final_map
+        return final_probs, final_map, tokens_per_expert
+    else:
+        # TopK with capacity
+        expert_capacity = get_capacity(
+            num_tokens=num_tokens * topk, num_experts=num_experts, capacity_factor=capacity_factor
+        )
+
+        # Maskout exceeded tokens
+        if drop_policy == "probs":
+            _, capacity_indices = torch.topk(
+                topk_masked_gates, k=expert_capacity, dim=0, sorted=False
+            )
+            capacity_mask = torch.zeros_like(logits).scatter(0, capacity_indices, 1).bool()
+        elif drop_policy == "position":
+            _, capacity_indices = torch.topk(topk_map.int(), k=expert_capacity, dim=0, sorted=False)
+            capacity_mask = torch.zeros_like(logits).scatter(0, capacity_indices, 1).bool()
+        else:
+            raise ValueError(f"Invalid drop_policy: {drop_policy}")
+
+        if pad_to_capacity:
+            final_map = capacity_mask
+            final_probs = topk_masked_gates * final_map
+        else:
+            # Get exceed mask and maskout exceeded probs and indices
+            final_map = torch.logical_and(topk_map, capacity_mask)
+            final_probs = topk_masked_gates * final_map
+        return final_probs, final_map, tokens_per_expert
+
+
+megatron.core.transformer.moe.moe_utils.sequence_load_balancing_loss_func = sequence_load_balancing_loss_func
+megatron.core.transformer.moe.moe_utils.topk_softmax_with_capacity = topk_softmax_with_capacity
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/cuda_patch/multi_latent_attention.py b/megatron-lm-musa-patch/cuda_patch/multi_latent_attention.py
new file mode 100644
index 00000000..098b284c
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/multi_latent_attention.py
@@ -0,0 +1,379 @@
+import math
+from dataclasses import dataclass
+from typing import Union
+
+import torch
+
+from megatron.core import parallel_state
+from megatron.core.models.common.embeddings import (
+    YarnRotaryEmbedding,
+    _yarn_get_mscale,
+    apply_rotary_pos_emb,
+)
+from megatron.core.transformer.attention import Attention
+from megatron.core.transformer.enums import AttnMaskType
+from megatron.core.transformer.spec_utils import ModuleSpec, build_module
+from megatron.core.transformer.transformer_config import MLATransformerConfig
+
+from megatron.core.transformer.multi_latent_attention import MLASelfAttentionSubmodules
+
+class MultiLatentAttention(Attention):
+    """Multi-Latent Attention layer abstract class.
+
+    This layer only contains common modules required for the "self attn" and
+    "cross attn" specializations.
+    """
+
+    def __init__(
+        self,
+        config: MLATransformerConfig,
+        submodules: Union[MLASelfAttentionSubmodules],
+        layer_number: int,
+        attn_mask_type: AttnMaskType,
+        attention_type: str,
+        cp_comm_type: str = None,
+    ) -> None:
+        world_size = parallel_state.get_tensor_model_parallel_world_size()
+        assert (
+            world_size == 1
+        ), "MLA is not supported with Tensor Parallelism yet, \
+        use Expert Parallelism and Pipeline Parallelism for better performance."
+
+        super().__init__(
+            config=config,
+            submodules=submodules,
+            layer_number=layer_number,
+            attention_type=attention_type,
+            attn_mask_type=attn_mask_type,
+        )
+
+        self.query_projection_size = self.config.v_head_dim * self.config.num_attention_heads
+
+        self.q_head_dim = self.config.qk_head_dim + self.config.qk_pos_emb_head_dim
+
+        mscale = _yarn_get_mscale(self.config.rotary_scaling_factor, self.config.mscale)
+        self.softmax_scale = mscale * mscale / math.sqrt(self.q_head_dim)
+
+        self.rotary_pos_emb = YarnRotaryEmbedding(
+            self.config.qk_pos_emb_head_dim,
+            rotary_base=self.config.rotary_base,
+            scaling_factor=self.config.rotary_scaling_factor,
+            original_max_position_embeddings=self.config.max_position_embeddings,
+            beta_fast=self.config.beta_fast,
+            beta_slow=self.config.beta_slow,
+            mscale=self.config.mscale,
+            mscale_all_dim=self.config.mscale_all_dim,
+        )
+
+        self.core_attention = build_module(
+            submodules.core_attention,
+            config=self.config,
+            layer_number=self.layer_number,
+            attn_mask_type=self.attn_mask_type,
+            attention_type=self.attention_type,
+            softmax_scale=self.softmax_scale,
+            k_channels=self.q_head_dim,
+            v_channels=self.config.v_head_dim,
+            cp_comm_type=cp_comm_type,
+        )
+
+        # Output.
+        self.linear_proj = build_module(
+            submodules.linear_proj,
+            self.query_projection_size,
+            self.config.hidden_size,
+            config=self.config,
+            init_method=self.config.output_layer_init_method,
+            bias=self.config.add_bias_linear,
+            input_is_parallel=True,
+            skip_bias_add=True,
+            is_expert=False,
+            tp_comm_buffer_name='proj',
+        )
+
+    def forward(
+        self,
+        hidden_states,
+        attention_mask,
+        key_value_states=None,
+        inference_params=None,
+        rotary_pos_emb=None,
+        rotary_pos_cos=None,
+        rotary_pos_sin=None,
+        attention_bias=None,
+        packed_seq_params=None,
+        position_ids=None,
+        sequence_len_offset=None,
+    ):
+        """Forward pass for multi-latent attention"""
+        assert rotary_pos_emb is None, "Rotary position embeddings should not be passed into MLA."
+        assert attention_bias is None, "Attention bias should not be passed into MLA."
+        assert (
+            rotary_pos_cos is None and rotary_pos_sin is None
+        ), "MLA does not support Flash Decoding"
+
+        # hidden_states: [sq, b, h]
+
+        # =====================
+        # Query, Key, and Value
+        # =====================
+        # Get the query, key and value tensors based on the type of attention -
+        # self or cross attn.
+        # query: [96, 1, 16, 128], key:[96, 1, 16, 128], value:[96, 1, 16, 128]
+        query, key, value = self.get_query_key_value_tensors(
+            hidden_states,
+            key_value_states,
+            position_ids,
+            packed_seq_params,
+            inference_params=inference_params,
+        )
+
+        # ===================================================
+        # Adjust key, value for inference
+        # ===================================================
+        # rotary_pos_emb = None
+        query, key, value, _, attn_mask_type = self._adjust_key_value_for_inference(
+            inference_params, query, key, value, rotary_pos_emb=None
+        )
+
+        # ==================================
+        # core attention computation
+        # ==================================
+        # Need corresponding TE change
+        if self.checkpoint_core_attention and self.training:
+            core_attn_out = self._checkpointed_attention_forward(
+                query, key, value, attention_mask, packed_seq_params=packed_seq_params
+            )
+        else:
+            core_attn_out = self.core_attention(
+                query,
+                key,
+                value,
+                attention_mask,
+                packed_seq_params=packed_seq_params,
+                attn_mask_type=attn_mask_type,
+            )
+
+        if packed_seq_params is not None:
+            # reshape to same output shape as unpacked case
+            # (t, np, hn) -> (t, b=1, h=np*hn)
+            # t is the pack size = sum (sq_i)
+            # note that batch is a dummy dimension in the packed case
+            core_attn_out = core_attn_out.reshape(core_attn_out.size(0), 1, -1)
+
+        # =================
+        # Output. [sq, b, h]
+        # =================
+        output, bias = self.linear_proj(core_attn_out)
+
+        return output, bias
+
+
+class MLASelfAttention(MultiLatentAttention):
+    """MLA Self-attention layer class
+
+    Self-attention layer takes input with size [s, b, h]
+    and returns output of the same size.
+    """
+
+    def __init__(
+        self,
+        config: MLATransformerConfig,
+        submodules: MLASelfAttentionSubmodules,
+        layer_number: int,
+        attn_mask_type=AttnMaskType.padding,
+        cp_comm_type: str = None,
+    ):
+        super().__init__(
+            config=config,
+            submodules=submodules,
+            layer_number=layer_number,
+            attn_mask_type=attn_mask_type,
+            attention_type="self",
+        )
+
+        if self.config.q_lora_rank is None:
+            # Not projectiing query
+            self.linear_q_proj = build_module(
+                submodules.linear_q_proj,
+                self.config.hidden_size,
+                self.config.num_attention_heads * self.q_head_dim,
+                config=self.config,
+                init_method=self.config.init_method,
+                gather_output=False,
+                bias=False,
+                skip_bias_add=False,
+                is_expert=False,
+            )
+
+        else:
+
+            self.linear_q_down_proj = build_module(
+                submodules.linear_q_down_proj,
+                self.config.hidden_size,
+                self.config.q_lora_rank,
+                config=self.config,
+                init_method=self.config.init_method,
+                gather_output=False,
+                bias=False,
+                skip_bias_add=False,
+                is_expert=False,
+            )
+
+            self.linear_q_up_proj = build_module(
+                submodules.linear_q_up_proj,
+                self.config.q_lora_rank,
+                self.config.num_attention_heads * self.q_head_dim,
+                config=self.config,
+                init_method=self.config.init_method,
+                gather_output=False,
+                bias=False,
+                skip_bias_add=False,
+                is_expert=False,
+            )
+
+        self.linear_kv_down_proj = build_module(
+            submodules.linear_kv_down_proj,
+            self.config.hidden_size,
+            self.config.kv_lora_rank + self.config.qk_pos_emb_head_dim,
+            config=self.config,
+            init_method=self.config.init_method,
+            gather_output=False,
+            bias=False,
+            skip_bias_add=False,
+            is_expert=False,
+        )
+
+        self.linear_kv_up_proj = build_module(
+            submodules.linear_kv_up_proj,
+            self.config.kv_lora_rank,
+            self.config.num_attention_heads * (self.config.qk_head_dim + self.config.v_head_dim),
+            config=self.config,
+            init_method=self.config.init_method,
+            gather_output=False,
+            bias=False,
+            skip_bias_add=False,
+            is_expert=False,
+        )
+
+        if self.config.q_lora_rank is not None:
+            self.q_layernorm = build_module(
+                submodules.q_layernorm,
+                hidden_size=self.config.q_lora_rank,
+                config=self.config,
+                eps=self.config.layernorm_epsilon,
+            )
+
+        self.kv_layernorm = build_module(
+            submodules.kv_layernorm,
+            hidden_size=self.config.kv_lora_rank,
+            config=self.config,
+            eps=self.config.layernorm_epsilon,
+        )
+
+    def get_query_key_value_tensors(
+        self,
+        hidden_states,
+        key_value_states=None,
+        position_ids=None,
+        packed_seq_params=None,
+        inference_params=None,
+    ):
+        """
+        Derives `query`, `key` and `value` tensors from `hidden_states`.
+        """
+        # s = sequence length, b = batch size, h = hidden size, n = num attention heads
+        # Attention heads [s, b, n*h]
+        assert (
+            hidden_states.ndim == 3
+        ), f"hidden_states should be 3D, [s, b, n*h], got {hidden_states.ndim}D"
+        q_len, bsz, _ = hidden_states.size()
+
+        if self.config.q_lora_rank is not None:
+            q_compressed, _ = self.linear_q_down_proj(hidden_states)
+            q_compressed = self.q_layernorm(q_compressed)
+            q, _ = self.linear_q_up_proj(q_compressed)
+        else:
+            # hidden_states:[s, b, 2048], q: [s, b, n * 192]
+            q, _ = self.linear_q_proj(hidden_states)
+
+        # q: [s, b, n, 192]
+        q = q.view(q_len, bsz, self.num_attention_heads_per_partition, self.q_head_dim)
+
+        # q: [s, b, n, 128], q_pos_emb: [s, b, n, 64]
+        q_no_pe, q_pos_emb = torch.split(
+            q, [self.config.qk_head_dim, self.config.qk_pos_emb_head_dim], dim=-1
+        )
+
+        # kv_combined: [s, b, 576]
+        kv_combined, _ = self.linear_kv_down_proj(hidden_states)
+
+        # kv_compressed:[s, b, 512], k_pos_emb: [s, b, 64]
+        kv_compressed, k_pos_emb = torch.split(
+            kv_combined, [self.config.kv_lora_rank, self.config.qk_pos_emb_head_dim], dim=-1
+        )
+
+        # kv: [s, b, 2048]
+        kv, _ = self.linear_kv_up_proj(self.kv_layernorm(kv_compressed))
+
+        # kv: [s, b, n, 256]
+        kv = kv.view(
+            q_len,
+            bsz,
+            self.num_attention_heads_per_partition,
+            self.config.qk_head_dim + self.config.v_head_dim,
+        )
+
+        # k_no_pe: [s, b, n, 128], value: [s, b, n, 128]
+        k_no_pe, value = torch.split(kv, [self.config.qk_head_dim, self.config.v_head_dim], dim=-1)
+
+        # rotary_pos_emb:[s, b, 1, 64]
+        rotary_pos_emb = self.rotary_pos_emb(max_seq_len=self.config.max_position_embeddings)
+
+        if len(rotary_pos_emb) == 2:
+            mscale = rotary_pos_emb[1]
+            rotary_pos_emb = rotary_pos_emb[0]
+
+        if inference_params is not None:
+            # add offset to the sequence start for inference
+            sequence_start = inference_params.sequence_len_offset
+            sequence_end = sequence_start + q_len
+            rotary_pos_emb = rotary_pos_emb[sequence_start:sequence_end]
+
+        # [s, b, 64] -> [s, b, 1, 64]
+        k_pos_emb = torch.unsqueeze(k_pos_emb, 2)
+
+        if packed_seq_params is not None:
+            cu_seqlens_q = packed_seq_params.cu_seqlens_q
+            cu_seqlens_kv = packed_seq_params.cu_seqlens_kv
+        else:
+            cu_seqlens_q = cu_seqlens_kv = None
+
+        # q_pos_emb: [s, b, n, 64], k_pos_emb:[s, b, 1, 64]
+        q_pos_emb = apply_rotary_pos_emb(
+            q_pos_emb, rotary_pos_emb, config=self.config, cu_seqlens=cu_seqlens_q, mscale=mscale
+        )
+        k_pos_emb = apply_rotary_pos_emb(
+            k_pos_emb, rotary_pos_emb, config=self.config, cu_seqlens=cu_seqlens_kv, mscale=mscale
+        )
+
+        # query: [s, b, n, 192]
+        query = torch.cat([q_no_pe, q_pos_emb], dim=-1)
+
+        # key: [s, b, n, 192]
+        k_pos_emb = k_pos_emb.expand(-1, -1, self.config.num_attention_heads, -1)
+        key = torch.cat([k_no_pe, k_pos_emb], dim=-1)
+
+        query = query.contiguous()
+        key = key.contiguous()
+        value = value.contiguous()
+
+        return query, key, value
+
+
+import sys
+for k in sys.modules:
+    if k.startswith('megatron'):
+        for target in ['MLASelfAttention']:
+            if getattr(sys.modules[k], target, None):
+                setattr(sys.modules[k], target, MLASelfAttention)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/cuda_patch/profiling.py b/megatron-lm-musa-patch/cuda_patch/profiling.py
new file mode 100644
index 00000000..17f2abe6
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/profiling.py
@@ -0,0 +1,141 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+# All rights reserved.
+#
+# This source code is licensed under the BSD-style license found in the
+# LICENSE file in the root directory of this source tree.
+
+import contextlib
+import os
+import pickle
+import time
+from datetime import datetime
+
+import torch
+
+# the number of warmup steps before the active step in each profiling cycle
+profile_freq = 4
+# how much memory allocation/free ops to record in memory snapshots
+MEMORY_SNAPSHOT_MAX_ENTRIES = 100000
+
+
+@contextlib.contextmanager
+def maybe_enable_profiling(args, global_step):
+    # get user defined profiler settings
+    enable_profiling = int(os.getenv("ENABLE_PROFILER", 0))
+     # fetch profiler related env
+    wait_steps = int(os.getenv("PROFILER_WAIT_STEPS", 0))
+    warmup_steps = int(os.getenv("PROFILER_WARMUP_STEPS", 3))
+    active_steps = int(os.getenv("PROFILER_ACTIVE_STEPS", 1))
+    repeat_num = int(os.getenv("PROFILER_REPEAT_NUM", 0))
+    profile_freq = int(os.getenv("PROFILER_FREQ", 1))
+    current_time = datetime.now().strftime("%Y.%m.%d-%H:%M:%S")
+    save_dir = os.getenv("PROFILER_SAVE_DIR", f"./profiler_result/{current_time}")
+    worker_name = os.getenv(
+        "PROFILER_WORKER_NAME", "rank" + str(torch.distributed.get_rank())
+    )
+    record_shapes = int(os.getenv("PROFILER_RECORD_SHAPES", 1))
+    profile_memory = int(os.getenv("PROFILER_PROFILE_MEMORY", 0))
+    with_stack = int(os.getenv("PROFILER_WITH_STACK", 1))
+    with_modules = int(os.getenv("PROFILER_WITH_MODULES", 1))
+    kineto_log_level = int(os.getenv("KINETO_LOG_LEVEL", 0))
+
+    if enable_profiling:
+        profile_freq = profile_freq
+
+        rank = torch.distributed.get_rank()
+
+        def trace_handler(prof):
+            curr_trace_dir_name = "iteration_" + str(prof.step_num)
+            curr_trace_dir = os.path.join(save_dir, curr_trace_dir_name)
+            if not os.path.exists(curr_trace_dir):
+                os.makedirs(curr_trace_dir, exist_ok=True)
+
+            print(f"Dumping profiler traces at step {prof.step_num}")
+            begin = time.monotonic()
+            prof.export_chrome_trace(f"{curr_trace_dir}/rank{rank}_trace.pt.trace.json")
+            print(
+                f"Finished dumping profiler traces in {time.monotonic() - begin:.2f} seconds"
+            )
+
+        print(f"Profiling active. Traces will be saved at {save_dir}")
+
+        if not os.path.exists(save_dir):
+            os.makedirs(save_dir, exist_ok=True)
+
+        # warmup, active = WARMUP, 1
+        wait = profile_freq - (active_steps + warmup_steps)
+        assert (
+            wait >= 0
+        ), "profile_freq must be greater than or equal to warmup + active"
+        with torch.profiler.profile(
+            activities=[
+                torch.profiler.ProfilerActivity.CPU,
+                #torch.profiler.ProfilerActivity.MUSA,
+                torch.profiler.ProfilerActivity.CUDA,
+            ],
+            schedule=torch.profiler.schedule(wait=wait, warmup=warmup_steps, active=active_steps),
+            on_trace_ready=trace_handler,
+            record_shapes=record_shapes,
+            profile_memory=profile_memory,
+            with_stack=with_stack,
+            with_modules=with_modules,
+            start_step=global_step+1,
+        ) as torch_profiler:
+            yield torch_profiler
+    else:
+        torch_profiler = contextlib.nullcontext()
+        yield None
+
+
+@contextlib.contextmanager
+def maybe_enable_memory_snapshot(args, global_step: int = 0):
+    pass
+    # enable_snapshot = config.profiling.enable_memory_snapshot
+    # if enable_snapshot:
+    #     snapshot_folder = config.profiling.save_memory_snapshot_folder
+    #     snapshot_dir = os.path.join(config.job.dump_folder, snapshot_folder)
+    #     if not os.path.exists(snapshot_dir):
+    #         os.makedirs(snapshot_dir, exist_ok=True)
+    #     rank = torch.distributed.get_rank()
+
+    #     class MemoryProfiler:
+    #         def __init__(self, step_num: int, freq: int):
+    #             torch.musa.memory._record_memory_history(
+    #                 max_entries=MEMORY_SNAPSHOT_MAX_ENTRIES
+    #             )
+    #             # when resume training, we start from the last step
+    #             self.step_num = step_num
+    #             self.freq = freq
+
+    #         def step(self, exit_ctx: bool = False):
+    #             self.step_num += 1
+    #             if not exit_ctx and self.step_num % self.freq != 0:
+    #                 return
+    #             if not exit_ctx:
+    #                 curr_step = self.step_num
+    #                 dir_name = f"iteration_{curr_step}"
+    #             else:
+    #                 # dump as iteration_0_exit if OOM at iter 1
+    #                 curr_step = self.step_num - 1
+    #                 dir_name = f"iteration_{curr_step}_exit"
+    #             curr_snapshot_dir = os.path.join(snapshot_dir, dir_name)
+    #             if not os.path.exists(curr_snapshot_dir):
+    #                 os.makedirs(curr_snapshot_dir, exist_ok=True)
+    #             logger.info(f"Dumping memory snapshot at step {curr_step}")
+    #             begin = time.monotonic()
+    #             with open(
+    #                 f"{curr_snapshot_dir}/rank{rank}_memory_snapshot.pickle", "wb"
+    #             ) as output:
+    #                 pickle.dump(torch.musa.memory._snapshot(), output)
+    #             logger.info(
+    #                 f"Finished dumping memory snapshot in {time.monotonic() - begin:.2f} seconds"
+    #             )
+
+    #     logger.info(f"Memory profiler active. Snapshot will be saved at {snapshot_dir}")
+    #     profiler = MemoryProfiler(global_step, config.profiling.profile_freq)
+    #     try:
+    #         yield profiler
+    #     except torch.OutOfMemoryError as e:
+    #         profiler.step(exit_ctx=True)
+    # else:
+    #     yield None
diff --git a/megatron-lm-musa-patch/cuda_patch/profiling.py. and b/megatron-lm-musa-patch/cuda_patch/profiling.py. and
new file mode 100644
index 00000000..8d9eb5c7
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/profiling.py. and	
@@ -0,0 +1,140 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+# All rights reserved.
+#
+# This source code is licensed under the BSD-style license found in the
+# LICENSE file in the root directory of this source tree.
+
+import contextlib
+import os
+import pickle
+import time
+from datetime import datetime
+
+import torch
+
+# the number of warmup steps before the active step in each profiling cycle
+profile_freq = 4
+# how much memory allocation/free ops to record in memory snapshots
+MEMORY_SNAPSHOT_MAX_ENTRIES = 100000
+
+
+@contextlib.contextmanager
+def maybe_enable_profiling(args, global_step):
+    # get user defined profiler settings
+    enable_profiling = int(os.getenv("ENABLE_PROFILER", 1))
+     # fetch profiler related env
+    wait_steps = int(os.getenv("PROFILER_WAIT_STEPS", 0))
+    warmup_steps = int(os.getenv("PROFILER_WARMUP_STEPS", 3))
+    active_steps = int(os.getenv("PROFILER_ACTIVE_STEPS", 1))
+    repeat_num = int(os.getenv("PROFILER_REPEAT_NUM", 0))
+    profile_freq = int(os.getenv("PROFILER_FREQ", 0))
+    current_time = datetime.now().strftime("%Y.%m.%d-%H:%M:%S")
+    save_dir = os.getenv("PROFILER_SAVE_DIR", f"./profiler_result/{current_time}")
+    worker_name = os.getenv(
+        "PROFILER_WORKER_NAME", "rank" + str(torch.distributed.get_rank())
+    )
+    record_shapes = int(os.getenv("PROFILER_RECORD_SHAPES", 1))
+    profile_memory = int(os.getenv("PROFILER_PROFILE_MEMORY", 0))
+    with_stack = int(os.getenv("PROFILER_WITH_STACK", 1))
+    with_modules = int(os.getenv("PROFILER_WITH_MODULES", 1))
+    kineto_log_level = int(os.getenv("KINETO_LOG_LEVEL", 0))
+
+    if enable_profiling:
+        profile_freq = profile_freq
+
+        rank = torch.distributed.get_rank()
+
+        def trace_handler(prof):
+            curr_trace_dir_name = "iteration_" + str(prof.step_num)
+            curr_trace_dir = os.path.join(save_dir, curr_trace_dir_name)
+            if not os.path.exists(curr_trace_dir):
+                os.makedirs(curr_trace_dir, exist_ok=True)
+
+            print(f"Dumping profiler traces at step {prof.step_num}")
+            begin = time.monotonic()
+            prof.export_chrome_trace(f"{curr_trace_dir}/rank{rank}_trace.json")
+            print(
+                f"Finished dumping profiler traces in {time.monotonic() - begin:.2f} seconds"
+            )
+
+        print(f"Profiling active. Traces will be saved at {save_dir}")
+
+        if not os.path.exists(save_dir):
+            os.makedirs(save_dir, exist_ok=True)
+
+        # warmup, active = WARMUP, 1
+        wait = profile_freq - (active_steps + warmup_steps)
+        assert (
+            wait >= 0
+        ), "profile_freq must be greater than or equal to warmup + active"
+        with torch.profiler.profile(
+            activities=[
+                torch.profiler.ProfilerActivity.CPU,
+                torch.profiler.ProfilerActivity.CUDA,
+            ],
+            schedule=torch.profiler.schedule(wait=wait, warmup=warmup_steps, active=active_steps),
+            on_trace_ready=trace_handler,
+            record_shapes=record_shapes,
+            profile_memory=profile_memory,
+            with_stack=with_stack,
+            with_modules=with_modules,
+        ) as torch_profiler:
+            torch_profiler.step_num = global_step
+            yield torch_profiler
+    else:
+        torch_profiler = contextlib.nullcontext()
+        yield None
+
+
+@contextlib.contextmanager
+def maybe_enable_memory_snapshot(args, global_step: int = 0):
+    pass
+    # enable_snapshot = config.profiling.enable_memory_snapshot
+    # if enable_snapshot:
+    #     snapshot_folder = config.profiling.save_memory_snapshot_folder
+    #     snapshot_dir = os.path.join(config.job.dump_folder, snapshot_folder)
+    #     if not os.path.exists(snapshot_dir):
+    #         os.makedirs(snapshot_dir, exist_ok=True)
+    #     rank = torch.distributed.get_rank()
+
+    #     class MemoryProfiler:
+    #         def __init__(self, step_num: int, freq: int):
+    #             torch.musa.memory._record_memory_history(
+    #                 max_entries=MEMORY_SNAPSHOT_MAX_ENTRIES
+    #             )
+    #             # when resume training, we start from the last step
+    #             self.step_num = step_num
+    #             self.freq = freq
+
+    #         def step(self, exit_ctx: bool = False):
+    #             self.step_num += 1
+    #             if not exit_ctx and self.step_num % self.freq != 0:
+    #                 return
+    #             if not exit_ctx:
+    #                 curr_step = self.step_num
+    #                 dir_name = f"iteration_{curr_step}"
+    #             else:
+    #                 # dump as iteration_0_exit if OOM at iter 1
+    #                 curr_step = self.step_num - 1
+    #                 dir_name = f"iteration_{curr_step}_exit"
+    #             curr_snapshot_dir = os.path.join(snapshot_dir, dir_name)
+    #             if not os.path.exists(curr_snapshot_dir):
+    #                 os.makedirs(curr_snapshot_dir, exist_ok=True)
+    #             logger.info(f"Dumping memory snapshot at step {curr_step}")
+    #             begin = time.monotonic()
+    #             with open(
+    #                 f"{curr_snapshot_dir}/rank{rank}_memory_snapshot.pickle", "wb"
+    #             ) as output:
+    #                 pickle.dump(torch.musa.memory._snapshot(), output)
+    #             logger.info(
+    #                 f"Finished dumping memory snapshot in {time.monotonic() - begin:.2f} seconds"
+    #             )
+
+    #     logger.info(f"Memory profiler active. Snapshot will be saved at {snapshot_dir}")
+    #     profiler = MemoryProfiler(global_step, config.profiling.profile_freq)
+    #     try:
+    #         yield profiler
+    #     except torch.OutOfMemoryError as e:
+    #         profiler.step(exit_ctx=True)
+    # else:
+    #     yield None
diff --git a/megatron-lm-musa-patch/cuda_patch/router.py b/megatron-lm-musa-patch/cuda_patch/router.py
new file mode 100644
index 00000000..733a4f55
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/router.py
@@ -0,0 +1,98 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+from abc import ABC, abstractmethod
+from functools import partial
+from typing import Callable
+import torch
+
+from megatron.core import parallel_state
+from megatron.core.transformer.moe.moe_utils import (
+    MoEAuxLossAutoScaler,
+    save_to_aux_losses_tracker,
+)
+from megatron.core.transformer.moe.router import TopKRouter
+
+from .moe_utils import (
+    sequence_load_balancing_loss_func,
+    topk_softmax_with_capacity,
+)
+
+
+def init(self, config):
+    """Initialize the zero token dropping router.
+
+    Args:
+        config (TransformerConfig): The configuration for the transformer model.
+    """
+    super(TopKRouter, self).__init__(config=config)
+    self.topk = self.config.moe_router_topk
+    self.routing_type = self.config.moe_router_load_balancing_type
+    self.input_jitter = None
+    self.e_score_correction_bias = None
+    self.moe_noaux_gamma = self.config.moe_noaux_gamma
+    if self.moe_noaux_gamma:
+        self.tokens_per_expert = torch.nn.Parameter(
+             torch.empty((self.config.num_moe_experts)), requires_grad=False
+        )
+        self.e_score_correction_bias = torch.nn.Parameter(
+             torch.empty((self.config.num_moe_experts)), requires_grad=False
+        )
+        if config.perform_initialization:
+            # initialize bias to zero.
+            with torch.no_grad():
+                self.e_score_correction_bias.zero_()
+                self.tokens_per_expert.zero_()
+
+def seq_aux_loss_load_balancing(self, logits: torch.Tensor, bsz: int, seq_length: int):
+    """Apply loss-based load balancing to the logits tensor."""
+
+    probs, routing_map, tokens_per_expert = topk_softmax_with_capacity(
+        logits,
+        self.topk,
+        capacity_factor=self.config.moe_expert_capacity_factor,
+        pad_to_capacity=self.config.moe_pad_expert_input_to_capacity,
+        drop_policy=self.config.moe_token_drop_policy,
+        use_pre_softmax=self.config.moe_router_pre_softmax,
+        moe_router_topk_limited_devices=self.config.moe_router_topk_limited_devices,
+        moe_router_topk_scaling_factor=self.config.moe_router_topk_scaling_factor,
+        use_sigmoid=self.config.moe_router_use_sigmoid,
+        norm_topk_prob=self.config.moe_router_norm_topk_prob,
+        deterministic_mode=self.config.deterministic_mode,
+        device_level_capacity=self.config.moe_device_level_capacity,
+        num_node_group=self.config.moe_router_num_node_group,
+        e_score_correction_bias=self.e_score_correction_bias,
+    )
+
+    if self.training:
+        if self.config.moe_router_use_sigmoid == "sigmoid":
+            scores = torch.sigmoid(logits)
+        else: 
+            scores = torch.softmax(logits, dim=-1, dtype=torch.float32)
+        aux_loss_func = partial(
+            sequence_load_balancing_loss_func,
+            probs=scores,
+            routing_map=routing_map,
+            tokens_per_expert=tokens_per_expert,
+            batch_size=bsz,
+            seq_length=seq_length,
+            topk=self.topk,
+            moe_router_topk_limited_devices=self.config.moe_router_topk_limited_devices,
+            moe_device_level_aux_loss_coeff=self.config.moe_device_level_aux_loss_coeff,
+            moe_comm_aux_loss_coeff=self.config.moe_comm_aux_loss_coeff,
+            moe_complementary_seq_aux_loss=self.config.moe_complementary_seq_aux_loss,
+        )
+        probs = self.apply_load_balancing_loss(
+            activation=probs, load_balancing_loss_func=aux_loss_func
+        )
+
+        if self.moe_noaux_gamma and torch.is_grad_enabled():
+            with torch.no_grad():
+                mean_token = logits.shape[0] * self.topk / logits.shape[1]
+                self.tokens_per_expert += (tokens_per_expert /mean_token).to(self.tokens_per_expert.device)
+    return probs, routing_map
+
+
+import megatron.core.transformer.moe.router
+megatron.core.transformer.moe.router.TopKRouter.seq_aux_loss_load_balancing = seq_aux_loss_load_balancing
+megatron.core.transformer.moe.router.TopKRouter.__init__ = init
+
diff --git a/megatron-lm-musa-patch/cuda_patch/theoretical_memory_usage.py b/megatron-lm-musa-patch/cuda_patch/theoretical_memory_usage.py
new file mode 100644
index 00000000..5f783d5f
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/theoretical_memory_usage.py
@@ -0,0 +1,220 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+"""Computes theoretical memory footprint for model training."""
+
+
+import math
+
+NUM_BYTES_IN_MEGABYTE = 1024 * 1024
+
+def compute_weight_and_optimizer_memory(args, verbose=False):
+    # Attention projection size.
+    attn_dim = args.kv_channels
+    kv_projection_size = attn_dim * args.num_attention_heads
+    query_projection_size = attn_dim * args.num_attention_heads
+    ## MLA
+    if args.kv_lora_rank:
+        kv_projection_size = attn_dim * args.num_attention_heads + args.kv_lora_rank
+    if args.q_lora_rank:
+        query_projection_size = attn_dim * args.num_attention_heads + args.q_lora_rank
+
+    output_projection_size = attn_dim * args.num_attention_heads
+    ## Group Query Attention.
+    if args.group_query_attention:
+        kv_projection_size = args.num_query_groups / args.num_attention_heads * kv_projection_size
+    else:
+        attn_size = 1
+    attn_size = query_projection_size + 2 * kv_projection_size + output_projection_size
+    attn_multiplier = attn_size / 2 / args.hidden_size
+
+    # swiglu
+    gated_linear_multiplier = 3 / 2 if args.swiglu else 1
+
+    # MoE or Dense
+    num_experts = 0 if args.num_experts is None else args.num_experts
+    shared_expert_ffn_hidden_size = 0 if args.moe_shared_expert_intermediate_size else args.moe_shared_expert_intermediate_size
+    num_shared_expert = args.moe_shared_expert_intermediate_size // args.moe_ffn_hidden_size
+    num_moe_layer = 0 if args.moe_layer_freq is None else len(args.moe_layer_freq)
+    num_dense_layer = args.num_layers - num_moe_layer
+    mlp_multiplier_dense = num_dense_layer * args.ffn_hidden_size
+    mlp_multiplier_moe =  num_moe_layer * num_experts * args.moe_ffn_hidden_size 
+    mlp_multiplier_shared_expert = num_moe_layer * num_shared_expert * shared_expert_ffn_hidden_size
+    mlp_multiplier = (mlp_multiplier_dense + mlp_multiplier_moe + mlp_multiplier_shared_expert) /args.num_layers/args.hidden_size
+
+    num_parameters_in_transformer_layers = (
+        2
+        * args.num_layers
+        * args.hidden_size
+        * args.hidden_size
+        * (
+            # Attention.
+            attn_multiplier
+            # MLP.
+            # + ((args.ffn_hidden_size / args.hidden_size) * num_experts * gated_linear_multiplier)
+            + mlp_multiplier * gated_linear_multiplier
+            # Router
+            +  num_experts / args.hidden_size * 2
+            # Transformer layernorms.
+            + (2 / args.hidden_size)
+            # Final layernorm.
+            + (1 / (args.num_layers * args.hidden_size))
+        )
+    )
+
+    embedding_size = args.hidden_size * args.padded_vocab_size
+    if args.untie_embeddings_and_output_weights:
+        num_parameters_in_embedding_layers = 2 * embedding_size
+    else:
+        num_parameters_in_embedding_layers = embedding_size
+
+    # TODO; add MTP block and projection
+    num_parameters_in_mtp = 0
+
+    num_total_parameters = num_parameters_in_transformer_layers + num_parameters_in_embedding_layers + num_parameters_in_mtp
+    if verbose:
+        print(
+            f"Number of parameters in transformer layers in billions: "
+            f"{num_parameters_in_transformer_layers / 10**9: .2f}"
+        )
+        print(
+            f"Number of parameters in embedding layers in billions: "
+            f"{num_parameters_in_embedding_layers / 10**9:.2f}"
+        )
+        print(f"Total number of parameters in billions: {num_total_parameters / 10**9:.2f}")
+
+    # Most loaded model shard has (1/pp_size transformer layers + 1 embedding layer) / tp_size.
+    num_parameters_on_most_loaded_model_shard = (
+        (num_parameters_in_transformer_layers / args.pipeline_model_parallel_size) + embedding_size
+    ) / args.tensor_model_parallel_size
+    if args.untie_embeddings_and_output_weights and args.pipeline_model_parallel_size == 1:
+        num_parameters_on_most_loaded_model_shard += (
+            embedding_size / args.tensor_model_parallel_size
+        )
+    if verbose:
+        print(
+            f"Number of parameters in most loaded shard in billions: "
+            f"{num_parameters_on_most_loaded_model_shard / 10**9:.4f}"
+        )
+
+    if args.pipeline_model_parallel_size > 1:
+        # Other shards just have (1/pp_size transformer layers) / tp_size.
+        num_parameters_on_other_model_shards = num_parameters_in_transformer_layers / (
+            args.pipeline_model_parallel_size * args.tensor_model_parallel_size
+        )
+        if verbose:
+            print(
+                f"Number of parameters in other shards in billions: "
+                f"{num_parameters_on_other_model_shards / 10**9:.4f}"
+            )
+
+    num_bytes_per_parameter = (
+        18 if not args.use_distributed_optimizer else 6 + (12 / args.data_parallel_size)
+    )
+    weight_and_optimizer_memory = (
+        num_parameters_on_most_loaded_model_shard * num_bytes_per_parameter
+    )
+
+    return weight_and_optimizer_memory
+
+
+def compute_activation_memory(args, num_microbatches, verbose=False):
+    # Using formula in Table 2 of https://arxiv.org/pdf/2205.05198.pdf.
+    # We are trying to compute the maximum activation footprint, so all calculations in this
+    # function are for the first pipeline stage.
+
+    # TODO: This function needs to take into account query_projection_size potentially being
+    # different from hidden_size.
+
+    # Memory footprint from transformer layer (self-attention and MLP).
+    activation_memory = (args.seq_length * args.micro_batch_size * args.hidden_size) * (
+        18 + (4 * (args.ffn_hidden_size / args.hidden_size))
+    )
+    if verbose:
+        print(
+            f"Activation memory footprint per transformer layer: "
+            f"{activation_memory / NUM_BYTES_IN_MEGABYTE / args.tensor_model_parallel_size:.1f} MB"
+        )
+    activation_memory *= args.num_layers
+
+    # Now add activation memory required for input embeddings, last LayerNorm and output layer.
+
+    # Input to embedding (pp_size microbatches in flight).
+    activation_memory += (
+        8 * args.seq_length * args.micro_batch_size * args.pipeline_model_parallel_size
+    )
+    # Dropout in embedding layer (pp_size microbatches in flight).
+    activation_memory += (
+        args.seq_length
+        * args.micro_batch_size
+        * args.hidden_size
+        * args.pipeline_model_parallel_size
+    )
+
+    # Multiply by interleaved PP memory factor.
+    if args.virtual_pipeline_model_parallel_size is not None:
+        interleaved_schedule_memory_penalty = 1 + (
+            (args.pipeline_model_parallel_size - 1)
+            / (args.pipeline_model_parallel_size * args.virtual_pipeline_model_parallel_size)
+        )
+        in_flight_microbatches = math.ceil(
+            interleaved_schedule_memory_penalty * args.pipeline_model_parallel_size
+        )
+        if verbose:
+            print(
+                f"Memory penalty from interleaved schedule: {interleaved_schedule_memory_penalty:.2f}"
+            )
+            print(f"Number of in-flight microbatches: {in_flight_microbatches}")
+        activation_memory *= interleaved_schedule_memory_penalty
+
+    # If using non-interleaved schedule, number of microbatches in pipeline can be less than pp_size,
+    # so discount accordingly.
+    if args.virtual_pipeline_model_parallel_size is None and args.pipeline_model_parallel_size > 1:
+        if num_microbatches is not None:
+            activation_memory *= min(1, num_microbatches / args.pipeline_model_parallel_size)
+            in_flight_microbatches = min(num_microbatches, args.pipeline_model_parallel_size)
+        else:
+            in_flight_microbatches = args.pipeline_model_parallel_size
+        if verbose:
+            print(f"Number of in-flight microbatches: {in_flight_microbatches}")
+
+    if args.pipeline_model_parallel_size == 1:
+        # Inputs to output layer and CE loss.
+        activation_memory += (
+            args.seq_length
+            * args.micro_batch_size
+            * args.hidden_size
+            * 4
+            * (1 + (args.padded_vocab_size / args.hidden_size))
+        )
+
+    # Activation memory is partitioned by TP size due to tensor and sequence model parallelism.
+    return activation_memory / args.tensor_model_parallel_size
+
+
+def report_theoretical_memory(args, num_microbatches=None, verbose=False):
+    weight_and_optimizer_memory = (
+        compute_weight_and_optimizer_memory(args, verbose=verbose) / NUM_BYTES_IN_MEGABYTE
+    )
+
+    # Formulae here assume sequence parallelism and selective activation recomputation.
+    if not args.sequence_parallel or args.recompute_granularity != 'selective':
+        print(
+            f"Theoretical memory footprints: weight and optimizer={weight_and_optimizer_memory:.2f} MB"
+        )
+        return
+
+    activation_memory = (
+        compute_activation_memory(args, num_microbatches=num_microbatches, verbose=verbose)
+        / NUM_BYTES_IN_MEGABYTE
+    )
+    total_memory = weight_and_optimizer_memory + activation_memory
+
+    print(
+        f"Theoretical memory footprints: weight and optimizer={weight_and_optimizer_memory:.2f} MB, "
+        f"activation={activation_memory:.2f} MB, total={total_memory:.2f} MB\n"
+    )
+
+import megatron.training.theoretical_memory_usage
+megatron.training.theoretical_memory_usage.compute_weight_and_optimizer_memory = compute_weight_and_optimizer_memory
+megatron.training.theoretical_memory_usage.report_theoretical_memory = report_theoretical_memory
+megatron.training.theoretical_memory_usage.compute_activation_memory = compute_activation_memory
diff --git a/megatron-lm-musa-patch/cuda_patch/training.py b/megatron-lm-musa-patch/cuda_patch/training.py
new file mode 100644
index 00000000..40469292
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/training.py
@@ -0,0 +1,813 @@
+from datetime import datetime
+
+import gc
+import os
+import sys
+import time
+import torch
+from megatron.core import mpu
+from megatron.core.transformer.moe.moe_utils import track_moe_metrics
+from megatron.core.transformer.moe.router import TopKRouter
+from megatron.training.global_vars import (
+    get_args,
+    get_timers,
+    get_tensorboard_writer,
+    get_wandb_writer,
+    get_one_logger
+)
+    # get_num_microbatches
+from megatron.core.num_microbatches_calculator import get_num_microbatches
+from megatron.training.utils import (
+    report_memory, 
+    print_rank_last
+)
+from megatron.core.utils import (
+    check_param_hashes_across_dp_replicas
+)
+from megatron.training.theoretical_memory_usage import report_theoretical_memory
+from megatron.training import one_logger_utils
+from megatron.training.initialize import write_args_to_tensorboard
+from megatron.core.distributed import finalize_model_grads
+from megatron.core.distributed import DistributedDataParallel as DDP
+from megatron.training.training import (
+    print_datetime, 
+    save_checkpoint_and_time,
+    train_step,
+    evaluate_and_print_results,
+    _TRAIN_START_TIME
+)
+from megatron.training.async_utils import maybe_finalize_async_save
+from megatron.core.num_microbatches_calculator import (
+    get_current_global_batch_size,
+    get_current_running_global_batch_size,
+    get_num_microbatches,
+    update_num_microbatches
+)
+from megatron.training.utils import (
+    calc_params_l2_norm,
+    check_adlr_autoresume_termination,
+    print_rank_0,
+    print_rank_last,
+    report_memory
+)
+from megatron.training import ft_integration
+from megatron.training.global_vars import (
+    get_args,
+    get_signal_handler,
+    get_timers,
+    get_tensorboard_writer,
+    get_wandb_writer,
+    get_one_logger
+)
+from .profiling import (
+    maybe_enable_profiling,
+    maybe_enable_memory_snapshot
+)
+from megatron.training.training import (
+    enable_forward_pre_hook,
+    disable_forward_pre_hook,
+    post_training_step_callbacks,
+    checkpoint_and_decide_exit
+)
+
+
+def throughput_calculator(args, elapsed_time_per_iter, consumed_tokens_per_iter): 
+    # training_time = elapsed_time
+    system_throughput = float(consumed_tokens_per_iter) / elapsed_time_per_iter
+    world_size = args.world_size
+    chip_throughput = system_throughput / world_size
+    # For 70B
+    # all_param_num = getattr(args, "all_param_num", None)
+    # assert all_param_num is not None, "please set all_param_num"
+    # MFU = chip_throughput * 6 * all_param_num * (1 + args.seq_length / (6 * args.hidden_size) ) / 98e12
+    # # tflops_throughput = chip_throughput / float(config.flops_16bit) * 1e12
+    # # logger.info("Throughput(token per chip per second): " + str(chip_throughput))
+    # # logger.info("MFU: " + str(MFU))
+    # # logger.info("Throughput(token per TFLOPS): " + str(tflops_throughput))
+    h = args.hidden_size
+    s = args.seq_length
+    N = 12 * args.num_layers * h **2
+    D = 1
+
+    attn_matmul = 2 * N * D
+    attn_sdp = N * D * (s / h)
+    mlp_matmul = 4 * N * D
+    # moe
+    if args.num_experts is None:
+        factor = 1
+    else:
+        factor = args.moe_router_topk
+    activated_dense_flops = attn_matmul + attn_sdp + mlp_matmul * factor
+    if args.num_experts is not None:
+        act_params = N + args.num_layers *(args.num_experts - 1) * 8 * h**2
+        if torch.distributed.get_rank() == 0:
+            print(f"N: {N} Act param: {act_params} Act flops: {activated_dense_flops}")
+    tflops =  chip_throughput *  activated_dense_flops
+    mfu = tflops / 98e12
+
+    return chip_throughput, mfu
+
+def num_floating_point_operations(args, batch_size):
+    # Attention projection size.
+    query_projection_size = args.kv_channels * args.num_attention_heads
+    query_projection_to_hidden_size_ratio = query_projection_size / args.hidden_size
+    # Group Query Attention.
+    if not args.group_query_attention:
+        args.num_query_groups = args.num_attention_heads
+    # MoE.
+    num_experts_routed_to = 1 if args.num_experts is None else args.moe_router_topk
+    gated_linear_multiplier = 3 / 2 if args.swiglu else 1
+    shared_expert_ffn_hidden_size = (
+        0
+        if args.moe_shared_expert_intermediate_size is None
+        else args.moe_shared_expert_intermediate_size
+    )
+    if not args.multi_latent_attention:
+        return (
+            12
+            * batch_size
+            * args.seq_length
+            * args.num_layers
+            * args.hidden_size
+            * args.hidden_size
+            * (
+                # Attention.
+                (
+                    (
+                        1
+                        + (args.num_query_groups / args.num_attention_heads)
+                        + (args.seq_length / args.hidden_size)
+                    ) * query_projection_to_hidden_size_ratio
+                )
+                # MLP.
+                + (
+                    (args.moe_ffn_hidden_size / args.hidden_size)
+                    * num_experts_routed_to
+                    * gated_linear_multiplier
+                )
+                # Shared Experts.
+                + ((shared_expert_ffn_hidden_size / args.hidden_size) * gated_linear_multiplier)
+                # Logit.
+                + (args.padded_vocab_size / (2 * args.num_layers * args.hidden_size))
+            )
+        )
+    else:
+        if args.q_lora_rank is None:
+            mla_flops_q = args.hidden_size * args.num_attention_heads * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+        else:
+            mla_flops_q = args.hidden_size * args.q_lora_rank +\
+                  args.q_lora_rank * args.num_attention_heads * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+        return (
+            6
+            * batch_size
+            * args.seq_length
+            * args.num_layers
+            * (
+                # MLA Attention.
+                (
+                    (
+                        mla_flops_q
+                        + args.hidden_size * (args.kv_lora_rank + args.qk_pos_emb_head_dim)
+                        + args.num_attention_heads * args.kv_lora_rank * (args.qk_head_dim + args.v_head_dim)
+                        + args.num_attention_heads * args.seq_length * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+                        + args.num_attention_heads * args.seq_length * args.v_head_dim
+                        + args.num_attention_heads * args.v_head_dim * args.hidden_size
+                    ) 
+                )
+                # Router
+                + args.hidden_size * args.num_experts
+                # MLP.
+                + (
+                    2 * args.hidden_size *  args.moe_ffn_hidden_size * num_experts_routed_to
+                    * gated_linear_multiplier
+                )
+                # Shared Experts.
+                + (2 * args.hidden_size * shared_expert_ffn_hidden_size * gated_linear_multiplier)
+                # Logit.
+                + (args.padded_vocab_size * args.hidden_size / args.num_layers)
+            )
+        )
+
+
+def update_e_score_correction_bias(model, micro_batch_num, ):
+    """ 
+    Decrease the bias term by gamma if its corresponding expert is overloaded, 
+    and increase it by gamma if its corresponding expert is underloaded.
+    """
+    for layer in model.modules():
+        if isinstance(layer, TopKRouter):
+            if layer.moe_noaux_gamma:
+                # allreduce tokens_per_expert
+                layer.tokens_per_expert /= micro_batch_num
+                torch.distributed.all_reduce(layer.tokens_per_expert, op=torch.distributed.ReduceOp.SUM)
+                layer.tokens_per_expert /= torch.distributed.get_world_size()
+                with torch.no_grad():
+                    update_value = torch.where(
+                        layer.tokens_per_expert > 1,
+                        -layer.moe_noaux_gamma, 
+                        layer.moe_noaux_gamma
+                    )
+                    layer.e_score_correction_bias += update_value
+                    layer.tokens_per_expert.zero_()  
+
+def training_log(loss_dict, total_loss_dict, learning_rate, decoupled_learning_rate, iteration,
+                 loss_scale, report_memory_flag, skipped_iter,
+                 grad_norm, params_norm, num_zeros_in_grad):
+    """Log training information such as losses, timing, ...."""
+    args = get_args()
+    timers = get_timers()
+    writer = get_tensorboard_writer()
+    wandb_writer = get_wandb_writer()
+    one_logger = get_one_logger()
+
+    # Advanced, skipped, and Nan iterations.
+    advanced_iters_key = 'advanced iterations'
+    skipped_iters_key = 'skipped iterations'
+    nan_iters_key = 'nan iterations'
+    # Advanced iterations.
+    if not skipped_iter:
+        total_loss_dict[advanced_iters_key] = total_loss_dict.get(
+            advanced_iters_key, 0) + 1
+    else:
+        if advanced_iters_key not in total_loss_dict:
+            total_loss_dict[advanced_iters_key] = 0
+    # Skipped iterations.
+    total_loss_dict[skipped_iters_key] = total_loss_dict.get(
+        skipped_iters_key, 0) + skipped_iter
+    # Update losses and set nan iterations
+    got_nan = False
+    for key in loss_dict:
+        if not skipped_iter:
+            total_loss_dict[key] = total_loss_dict.get(
+                key, torch.tensor([0.0], dtype=torch.float, device='cuda')) + loss_dict[key]
+        else:
+            value = loss_dict[key].float().sum().item()
+            is_nan = value == float('inf') or \
+                     value == -float('inf') or \
+                     value != value
+            got_nan = got_nan or is_nan
+    total_loss_dict[nan_iters_key] = total_loss_dict.get(
+        nan_iters_key, 0) + int(got_nan)
+
+    # Logging.
+    timers_to_log = [
+        'forward-backward',
+        'forward-compute',
+        'backward-compute',
+        'batch-generator',
+        'forward-recv',
+        'forward-send',
+        'backward-recv',
+        'backward-send',
+        'forward-send-forward-recv',
+        'forward-send-backward-recv',
+        'backward-send-forward-recv',
+        'backward-send-backward-recv',
+        'forward-backward-send-forward-backward-recv',
+        'layernorm-grads-all-reduce',
+        'embedding-grads-all-reduce',
+        'all-grads-sync',
+        'params-all-gather',
+        'optimizer-copy-to-main-grad',
+        'optimizer-unscale-and-check-inf',
+        'optimizer-clip-main-grad',
+        'optimizer-count-zeros',
+        'optimizer-inner-step',
+        'optimizer-copy-main-to-model-params',
+        'optimizer']
+
+    # Calculate batch size.
+    batch_size = args.micro_batch_size * args.data_parallel_size * \
+        get_num_microbatches()
+
+    # Track app tag & app tag ID
+    one_logger_utils.track_app_tag(batch_size, args.world_size, args.seq_length)
+
+    total_iterations = total_loss_dict[advanced_iters_key] + \
+                       total_loss_dict[skipped_iters_key]
+
+    # Tensorboard values.
+    # Timer requires all the ranks to call.
+    if args.log_timers_to_tensorboard and \
+       (iteration % args.tensorboard_log_interval == 0):
+        timers.write(timers_to_log, writer, iteration,
+                     normalizer=total_iterations)
+    if writer and (iteration % args.tensorboard_log_interval == 0):
+        if wandb_writer:
+            wandb_writer.log({'samples vs steps': args.consumed_train_samples},
+                             iteration)
+        writer.add_scalar('learning-rate', learning_rate, iteration)
+        if args.decoupled_lr is not None:
+            writer.add_scalar('decoupled-learning-rate', decoupled_learning_rate, iteration)
+        writer.add_scalar('learning-rate vs samples', learning_rate,
+                          args.consumed_train_samples)
+        if wandb_writer:
+            wandb_writer.log({'learning-rate': learning_rate}, iteration)
+        if args.skipped_train_samples > 0:
+            writer.add_scalar('skipped-train-samples', args.skipped_train_samples, iteration)
+            if wandb_writer:
+                wandb_writer.log({'skipped-train-samples': args.skipped_train_samples}, iteration)
+        writer.add_scalar('batch-size', batch_size, iteration)
+        writer.add_scalar('batch-size vs samples', batch_size,
+                          args.consumed_train_samples)
+        if wandb_writer:
+            wandb_writer.log({'batch-size': batch_size}, iteration)
+        for key in loss_dict:
+            writer.add_scalar(key , loss_dict[key], iteration)
+            writer.add_scalar(key + ' vs samples', loss_dict[key],
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({key: loss_dict[key]}, iteration)
+        if args.log_loss_scale_to_tensorboard:
+            writer.add_scalar('loss-scale', loss_scale, iteration)
+            writer.add_scalar('loss-scale vs samples', loss_scale,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'loss-scale': loss_scale}, iteration)
+        if args.log_world_size_to_tensorboard:
+            writer.add_scalar('world-size', args.world_size, iteration)
+            writer.add_scalar('world-size vs samples', args.world_size,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'world-size': args.world_size}, iteration)
+        if grad_norm is not None:
+            writer.add_scalar('grad-norm', grad_norm, iteration)
+            writer.add_scalar('grad-norm vs samples', grad_norm,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'grad-norm': grad_norm}, iteration)
+        if num_zeros_in_grad is not None:
+            writer.add_scalar('num-zeros', num_zeros_in_grad, iteration)
+            writer.add_scalar('num-zeros vs samples', num_zeros_in_grad,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'num-zeros': num_zeros_in_grad}, iteration)
+        if params_norm is not None:
+            writer.add_scalar('params-norm', params_norm, iteration)
+            writer.add_scalar('params-norm vs samples', params_norm,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'params-norm': params_norm}, iteration)
+        if args.log_memory_to_tensorboard:
+            mem_stats = torch.cuda.memory_stats()
+            writer.add_scalar(
+                "mem-reserved-bytes",
+                mem_stats["reserved_bytes.all.current"],
+                iteration,
+            )
+            writer.add_scalar(
+                "mem-allocated-bytes",
+                mem_stats["allocated_bytes.all.current"],
+                iteration,
+            )
+            writer.add_scalar(
+                "mem-allocated-count",
+                mem_stats["allocation.all.current"],
+                iteration,
+            )
+    if args.num_experts is not None:
+        moe_loss_scale = 1 / get_num_microbatches()
+        track_moe_metrics(moe_loss_scale, iteration, writer, wandb_writer, total_loss_dict, args.moe_per_layer_logging)
+
+    if iteration % args.log_interval == 0:
+        elapsed_time = timers('interval-time').elapsed(barrier=True)
+        elapsed_time_per_iteration = elapsed_time / total_iterations
+
+        throughput = num_floating_point_operations(args, batch_size) / (
+            elapsed_time_per_iteration * 10**12 * args.world_size)
+
+        one_logger_utils.track_e2e_metrics(args.log_throughput, throughput)
+
+        if args.log_timers_to_tensorboard:
+            if writer:
+                writer.add_scalar('iteration-time',
+                                  elapsed_time_per_iteration, iteration)
+            if wandb_writer:
+                wandb_writer.log({'iteration-time': elapsed_time_per_iteration},
+                                 iteration)
+        log_string = f" [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]"
+        log_string += ' iteration {:8d}/{:8d} |'.format(
+            iteration, args.train_iters)
+        # chip_throughput, mfu = throughput_calculator(args, elapsed_time_per_iteration, batch_size * args.seq_length)
+        # log_string += ' chip_throughput: {:.2f} /s |'.format(chip_throughput)
+        # log_string += ' mfu: {:.4f} |'.format(mfu)
+        log_string += ' consumed samples: {:12d} |'.format(
+            args.consumed_train_samples)
+        if args.skipped_train_samples > 0:
+            log_string += ' skipped samples: {:12d} |'.format(
+                args.skipped_train_samples)
+        log_string += ' elapsed time per iteration (ms): {:.1f} |'.format(
+            elapsed_time_per_iteration * 1000.0)
+        if args.log_throughput:
+            log_string += f' throughput per GPU (TFLOP/s/GPU): {throughput:.1f} |'
+            if args.log_timers_to_tensorboard:
+                if writer:
+                    writer.add_scalar('throughput', throughput, iteration)
+                if wandb_writer:
+                    wandb_writer.log({'throughput': throughput}, iteration)
+        assert learning_rate is not None
+        # Decoupled_learning_rate should be not None only on first and last pipeline stage.
+        log_string += ' learning rate: {:.6E} |'.format(learning_rate)
+        if args.decoupled_lr is not None and (mpu.is_pipeline_first_stage(ignore_virtual=True) or
+                                              mpu.is_pipeline_last_stage(ignore_virtual=True)):
+            assert decoupled_learning_rate is not None
+            log_string += ' decoupled learning rate: {:.6E} |'.format(decoupled_learning_rate)
+        else:
+            assert decoupled_learning_rate is None
+        log_string += ' global batch size: {:5d} |'.format(batch_size)
+        for key in total_loss_dict:
+            if key not in [advanced_iters_key, skipped_iters_key,
+                           nan_iters_key]:
+                avg = total_loss_dict[key].item() / \
+                      float(max(1, total_loss_dict[advanced_iters_key]))
+                if avg > 0.0:
+                    log_string += ' {}: {:.6E} |'.format(key, avg)
+                total_loss_dict[key] = torch.tensor([0.0], dtype=torch.float, device='cuda')
+        log_string += ' loss scale: {:.1f} |'.format(loss_scale)
+        if grad_norm is not None:
+            log_string += ' grad norm: {:.3f} |'.format(grad_norm)
+        if num_zeros_in_grad is not None:
+            log_string += ' num zeros: {:.1f} |'.format(num_zeros_in_grad)
+        if params_norm is not None:
+            log_string += ' params norm: {:.3f} |'.format(params_norm)
+        log_string += ' number of skipped iterations: {:3d} |'.format(
+            total_loss_dict[skipped_iters_key])
+        log_string += ' number of nan iterations: {:3d} |'.format(
+            total_loss_dict[nan_iters_key])
+        total_loss_dict[advanced_iters_key] = 0
+        total_loss_dict[skipped_iters_key] = 0
+        total_loss_dict[nan_iters_key] = 0
+        print_rank_last(log_string)
+        if report_memory_flag and learning_rate > 0.:
+            # Report memory after optimizer state has been initialized.
+            if torch.distributed.get_rank() == 0:
+                num_microbatches = get_num_microbatches()
+                report_theoretical_memory(args, num_microbatches=num_microbatches, verbose=True)
+            report_memory('(after {} iterations)'.format(iteration))
+            report_memory_flag = False
+        timers.log(timers_to_log, normalizer=args.log_interval)
+
+    return report_memory_flag
+
+def train(forward_step_func, model, optimizer, opt_param_scheduler,
+          train_data_iterator, valid_data_iterator,
+          process_non_loss_data_func, config, checkpointing_context, non_loss_data_func):
+    """Train the model function."""
+    args = get_args()
+    timers = get_timers()
+    one_logger = get_one_logger()
+
+    # Write args to tensorboard
+    write_args_to_tensorboard()
+
+    # Turn on training mode which enables dropout.
+    for model_module in model:
+        model_module.train()
+
+    # Tracking loss.
+    total_loss_dict = {}
+
+    # Iterations.
+    iteration = args.iteration
+
+    # Track E2E metrics at the start of training
+    one_logger_utils.on_train_start(iteration=iteration, consumed_train_samples=args.consumed_train_samples,
+                                    train_samples=args.train_samples, seq_length=args.seq_length,
+                                    train_iters=args.train_iters, save=args.save, async_save=args.async_save,
+                                    log_throughput=args.log_throughput,
+                                    num_floating_point_operations_so_far=args.num_floating_point_operations_so_far)
+
+    num_floating_point_operations_so_far = args.num_floating_point_operations_so_far
+
+    # Setup some training config params
+    config.grad_scale_func = optimizer.scale_loss
+    config.timers = timers
+    if isinstance(model[0], DDP) and args.overlap_grad_reduce:
+        assert config.no_sync_func is None, \
+            ('When overlap_grad_reduce is True, config.no_sync_func must be None; '
+             'a custom no_sync_func is not supported when overlapping grad-reduce')
+        config.no_sync_func = [model_chunk.no_sync for model_chunk in model]
+        if len(model) == 1:
+            config.no_sync_func = config.no_sync_func[0]
+        if args.align_grad_reduce:
+            config.grad_sync_func = [model_chunk.start_grad_sync for model_chunk in model]
+            if len(model) == 1:
+                config.grad_sync_func = config.grad_sync_func[0]
+    if args.overlap_param_gather and args.align_param_gather:
+        config.param_sync_func = [model_chunk.start_param_sync for model_chunk in model]
+        if len(model) == 1:
+            config.param_sync_func = config.param_sync_func[0]
+    config.finalize_model_grads_func = finalize_model_grads
+
+    timers('interval-time', log_level=0).start(barrier=True)
+    print_datetime('before the start of training step')
+    report_memory_flag = True
+    # exit = False
+    pre_hook_enabled = False 
+    should_exit = False
+    exit_code = 0
+    
+    if args.manual_gc:
+        # Disable the default garbage collector and perform the collection manually.
+        # This is to align the timing of garbage collection across ranks.
+        assert args.manual_gc_interval >= 0, \
+            'Manual garbage collection interval should be laerger than or equal to 0.'
+        gc.disable()
+        gc.collect()
+
+    # Singleton Initialization
+    if args.log_straggler:
+        global stimer
+        world = torch.distributed.get_world_size()
+        rank = torch.distributed.get_rank()
+        mmcnt = args.straggler_minmax_count
+        stimer.configure(world, rank,
+                mmcnt = mmcnt,
+                enabled = not args.disable_straggler_on_startup,
+                port = args.straggler_ctrlr_port)
+    # total_flops = 0.0
+    num_floating_point_operations_since_last_log_event = 0.0
+
+    num_microbatches = get_num_microbatches()
+    eval_duration = 0.0
+    eval_iterations = 0
+
+    def get_e2e_base_metrics():
+        """Get base metrics values for one-logger to calculate E2E tracking metrics.
+        """
+        return {
+            'iteration': iteration,
+            'train_duration': timers('interval-time').active_time(),
+            'eval_duration': eval_duration,
+            'eval_iterations': eval_iterations,
+            'total_flops': num_floating_point_operations_since_last_log_event,
+            'num_floating_point_operations_so_far': num_floating_point_operations_so_far,
+            'consumed_train_samples': args.consumed_train_samples,
+            'world_size': args.world_size,
+            'seq_length': args.seq_length
+        }
+    # Cache into one-logger for callback
+    if one_logger:
+        with one_logger.get_context_manager():
+            one_logger.store_set('get_e2e_base_metrics', get_e2e_base_metrics)
+
+    prof = None
+    if args.profile and torch.distributed.get_rank() in args.profile_ranks and args.use_pytorch_profiler:
+        prof = torch.profiler.profile(
+        schedule=torch.profiler.schedule(
+            wait=max(args.profile_step_start-1, 0),
+            warmup=1 if args.profile_step_start > 0 else 0,
+            active=args.profile_step_end-args.profile_step_start,
+            repeat=1),
+        on_trace_ready=torch.profiler.tensorboard_trace_handler(args.tensorboard_dir),
+        record_shapes=True,
+        with_stack=True)
+        prof.start()
+
+    start_iteration = iteration
+    # Disable forward pre-hook to start training to ensure that errors in checkpoint loading
+    # or random initialization don't propagate to all ranks in first all-gather (which is a
+    # no-op if things work correctly).
+    if args.use_distributed_optimizer and args.overlap_param_gather:
+        disable_forward_pre_hook(model, param_sync=False)
+        # Also remove param_sync_func temporarily so that sync calls made in
+        # `forward_backward_func` are no-ops.
+        param_sync_func = config.param_sync_func
+        config.param_sync_func = None
+        pre_hook_enabled = False
+    # Also, check weight hash across DP replicas to be very pedantic.
+    if args.check_weight_hash_across_dp_replicas_interval is not None:
+        assert check_param_hashes_across_dp_replicas(model, cross_check=True), \
+            "Parameter hashes not matching across DP replicas"
+        torch.distributed.barrier()
+        print_rank_0(f">>> Weight hashes match after {iteration} iterations...")
+        
+    with maybe_enable_profiling(
+        args, global_step=iteration
+    ) as torch_profiler:
+        while iteration < args.train_iters:
+            if args.profile and torch.distributed.get_rank() in args.profile_ranks:
+                if args.use_pytorch_profiler:
+                    prof.step()
+                elif iteration == args.profile_step_start:
+                    torch.cuda.cudart().cudaProfilerStart()
+                    torch.autograd.profiler.emit_nvtx(record_shapes=True).__enter__()
+
+            maybe_finalize_async_save(blocking=False)
+
+            # Update number of microbatches first without consistency check to decide if a
+            # checkpoint should be saved. If the number of microbatches is different
+            # from the previous iteration, save a checkpoint. Then run consistency check
+            # to make sure training configuration is still valid.
+            update_num_microbatches(args.consumed_train_samples, consistency_check=False, verbose=True)
+            if get_num_microbatches() != num_microbatches and iteration != 0:
+                assert get_num_microbatches() > num_microbatches, \
+                    "number of microbatches should be increasing due to batch size rampup ... %d -> %d." % (num_microbatches, get_num_microbatches())
+                if args.save is not None:
+                    save_checkpoint_and_time(iteration, model, optimizer,
+                                            opt_param_scheduler,
+                                            num_floating_point_operations_so_far,
+                                            checkpointing_context, train_data_iterator=train_data_iterator)
+            num_microbatches = get_num_microbatches()
+            update_num_microbatches(args.consumed_train_samples, consistency_check=True, verbose=True)
+
+            args.curr_iteration = iteration
+            loss_dict, skipped_iter, should_checkpoint, should_exit, exit_code, grad_norm, num_zeros_in_grad = \
+                train_step(forward_step_func,
+                        train_data_iterator,
+                        model,
+                        optimizer,
+                        opt_param_scheduler,
+                        config)
+            if config.moe_noaux_gamma:
+                update_e_score_correction_bias(model[0], num_microbatches)
+
+            if should_checkpoint:
+                save_checkpoint_and_time(iteration, model, optimizer,
+                                        opt_param_scheduler,
+                                        num_floating_point_operations_so_far,
+                                        checkpointing_context, train_data_iterator=train_data_iterator)
+            if should_exit:
+                break
+
+            # Enable forward pre-hooks after first set of forward and backward passes.
+            # When running in fp16, skip all NaN iterations until steady-state loss scaling value
+            # is reached.
+            if iteration == start_iteration:
+                if skipped_iter:
+                    # Only enable forward pre-hook after a training step has successfully run. Relevant
+                    # for fp16 codepath where first XX iterations are skipped until steady-state loss
+                    # scale value is reached.
+                    start_iteration = iteration + 1
+                else:
+                    # Enable forward pre-hook after training step has successfully run. All subsequent
+                    # forward passes will use the forward pre-hook / `param_sync_func` in
+                    # `forward_backward_func`.
+                    if args.use_distributed_optimizer and args.overlap_param_gather:
+                        enable_forward_pre_hook(model)
+                        config.param_sync_func = param_sync_func
+                        pre_hook_enabled = True
+                    
+            if torch_profiler:
+                torch_profiler.step()
+            iteration += 1
+            batch_size = mpu.get_data_parallel_world_size() * \
+                        args.micro_batch_size * \
+                        get_num_microbatches()
+            args.consumed_train_samples += batch_size
+            num_skipped_samples_in_batch = (get_current_global_batch_size() -
+                                            get_current_running_global_batch_size())
+            if args.decrease_batch_size_if_needed:
+                assert num_skipped_samples_in_batch >= 0
+            else:
+                assert num_skipped_samples_in_batch == 0
+            args.skipped_train_samples += num_skipped_samples_in_batch
+            num_floating_point_operations_in_batch = num_floating_point_operations(args, batch_size)
+            num_floating_point_operations_so_far += num_floating_point_operations_in_batch
+            num_floating_point_operations_since_last_log_event += num_floating_point_operations_in_batch
+
+            # # Send heartbeat to FT package and update timeouts.
+            # if args.enable_ft_package:
+            #     ft_client = ft_integration.get_rank_monitor_client(
+            #         ft_integration.StateMachineActions.TRAIN_HEARTBEAT)
+            #     if ft_client is not None:
+            #         ft_client.send_heartbeat()
+            #         # TODO we are always calculating timeouts in the current implementation
+            #         # if we want to rely on manually setup then we need to add additional argument
+            #         # to training and pass it here
+            #         if ft_integration.can_update_timeouts():
+            #             ft_integration.get_rank_monitor_client(
+            #                 ft_integration.StateMachineActions.UPDATE_TIMEOUT).calculate_and_set_timeouts()
+            #             print_rank_0(f'Updated FT timeouts. New values: \
+            #                 {ft_integration.get_rank_monitor_client().timeouts}')
+
+            # # Bring CPU and GPU back in sync if on right iteration.
+            # if (
+            #     args.train_sync_interval
+            #     and iteration % args.train_sync_interval == 0
+            # ):
+            #     torch.cuda.synchronize()
+
+            # Logging.
+            if not optimizer.is_stub_optimizer:
+                loss_scale = optimizer.get_loss_scale().item()
+            else:
+                loss_scale = 1.0
+            params_norm = None
+            if args.log_params_norm:
+                params_norm = calc_params_l2_norm(model)
+
+            learning_rate = None
+            decoupled_learning_rate = None
+            for param_group in optimizer.param_groups:
+                if param_group['is_decoupled_lr']:
+                    decoupled_learning_rate = param_group['lr']
+                else:
+                    learning_rate = param_group['lr']
+            report_memory_flag = training_log(loss_dict, total_loss_dict,
+                                            learning_rate,
+                                            decoupled_learning_rate,
+                                            iteration, loss_scale,
+                                            report_memory_flag, skipped_iter,
+                                            grad_norm, params_norm, num_zeros_in_grad)
+
+            # # StragglerDetector
+            # if iteration % args.log_interval == 0 and args.log_straggler:
+            #     stimer.report(total_flops, args.log_interval)
+            #     total_flops = 0.0
+
+            # if args.check_weight_hash_across_dp_replicas_interval is not None and \
+            #         iteration % args.check_weight_hash_across_dp_replicas_interval == 0:
+            #     if args.use_distributed_optimizer and args.overlap_param_gather:
+            #         optimizer.disable_pre_hook()
+            #     assert check_param_hashes_across_dp_replicas(model, cross_check=True), \
+            #         "Parameter hashes not matching across DP replicas"
+            #     torch.distributed.barrier()
+            #     print_rank_0(f">>> Weight hashes match after {iteration} iterations...")
+            #     if args.use_distributed_optimizer and args.overlap_param_gather:
+            #         optimizer.enable_pre_hook()
+
+            # # Autoresume
+            # if args.adlr_autoresume and \
+            # (iteration % args.adlr_autoresume_interval == 0):
+            #     check_adlr_autoresume_termination(iteration, model, optimizer,
+            #                                     opt_param_scheduler)
+
+            # Evaluation
+            if args.eval_interval and iteration % args.eval_interval == 0 and \
+                args.do_valid:
+                timers('interval-time').stop()
+                if args.use_distributed_optimizer and args.overlap_param_gather:
+                    disable_forward_pre_hook(model)
+                    pre_hook_enabled = False
+                if args.manual_gc and args.manual_gc_eval:
+                    # Collect all objects.
+                    gc.collect()
+                prefix = f'iteration {iteration}'
+                timers('eval-time', log_level=0).start(barrier=True)
+                evaluate_and_print_results(prefix, forward_step_func,
+                                        valid_data_iterator, model,
+                                        iteration, process_non_loss_data_func,
+                                        config, verbose=False, write_to_tensorboard=True,
+                                        non_loss_data_func=non_loss_data_func)
+                eval_duration += timers('eval-time').elapsed()
+                eval_iterations += args.eval_iters
+                timers('eval-time').stop()
+                one_logger_utils.track_e2e_metrics()
+
+                if args.manual_gc and args.manual_gc_eval:
+                    # Collect only the objects created and used in evaluation.
+                    gc.collect(generation=0)
+                if args.use_distributed_optimizer and args.overlap_param_gather:
+                    enable_forward_pre_hook(model)
+                    pre_hook_enabled = True
+                timers('interval-time', log_level=0).start(barrier=True)
+
+
+                if args.enable_ft_package and ft_integration.get_rank_monitor_client() is not None:
+                    ft_integration.get_rank_monitor_client(
+                        ft_integration.StateMachineActions.EVAL_HEARTBEAT).send_heartbeat()
+
+            # Miscellaneous post-training-step functions (e.g., FT heartbeats, GC).
+            # Some of these only happen at specific iterations.
+            post_training_step_callbacks(model, optimizer, opt_param_scheduler, iteration, prof,
+                                        num_floating_point_operations_since_last_log_event)
+
+            # Checkpoint and decide whether to exit.
+            should_exit = checkpoint_and_decide_exit(model, optimizer, opt_param_scheduler, iteration,
+                                                    num_floating_point_operations_so_far,
+                                                    checkpointing_context, train_data_iterator)
+            if should_exit:
+                break
+
+    one_logger_utils.track_e2e_metrics()
+
+    # Flush TensorBoard, WandB writers and one-logger.
+    writer = get_tensorboard_writer()
+    if writer:
+        writer.flush()
+
+    # Close out pre-hooks if using distributed optimizer and overlapped param gather.
+    if pre_hook_enabled:
+        disable_forward_pre_hook(model)
+
+    if args.enable_ft_package and ft_integration.get_rank_monitor_client() is not None:
+        ft_integration.get_rank_monitor_client().shutdown_workload_monitoring()
+
+    maybe_finalize_async_save(blocking=True)
+
+    # If any exit conditions (signal handler, duration, iterations) have been reached, exit.
+    if should_exit:
+        wandb_writer = get_wandb_writer()
+        if wandb_writer:
+            wandb_writer.finish()
+        sys.exit(exit_code)
+
+    return iteration, num_floating_point_operations_so_far
+
+import megatron.training
+megatron.training.training.training_log = training_log
+
+enable_profiler = int(os.getenv("ENABLE_PROFILER", 0))
+# if enable_profiler:
+megatron.training.training.train = train
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/cuda_patch/transformer_config.py b/megatron-lm-musa-patch/cuda_patch/transformer_config.py
new file mode 100644
index 00000000..15c418dd
--- /dev/null
+++ b/megatron-lm-musa-patch/cuda_patch/transformer_config.py
@@ -0,0 +1,718 @@
+
+from dataclasses import dataclass
+from typing import Callable, List, Optional, Tuple, Union
+
+import torch.nn.functional as F
+
+from megatron.core.transformer.enums import AttnBackend
+
+from megatron.core.model_parallel_config import ModelParallelConfig
+from megatron.core.utils import get_te_version, init_method_normal, is_te_min_version, scaled_init_method_normal
+
+
+@dataclass
+class TransformerConfig(ModelParallelConfig):
+    """Configuration object for megatron-core transformers.
+
+    The initialization function has an argument for each parameter,
+    including those in ModelParallelConfig.
+    """
+
+    ####################
+    # model architecture
+    ####################
+    num_layers: int = 0
+    """Number of transformer layers in a transformer block."""
+
+    first_pipeline_num_layers: int = None
+    """Number of transformer layers on first pipeline stage. 
+    None implies equal layer division across PP ranks."""
+
+    last_pipeline_num_layers: int = None
+    """Number of transformer layers on last pipeline stage. 
+    None implies equal layer division across PP ranks."""
+
+    hidden_size: int = 0
+    """Transformer hidden size."""
+
+    num_attention_heads: int = 0
+    """Number of transformer attention heads."""
+
+    attention_backend: AttnBackend = AttnBackend.auto
+    """Attention backend to run. By default we let transformer engine
+    decide the best backend to run (except in the case of local).
+    If attention backend is local we use the local pytorch implementation in mcore. 
+    Users can specify exact backend by changing this config. """
+
+    softmax_scale: float = None
+    """Softmax scale for attention scaling."""
+
+    num_query_groups: int = None
+    """Number of query groups for group query attention. If None, normal attention is used."""
+
+    ffn_hidden_size: int = None
+    """Transformer Feed-Forward Network hidden size. This is set to 4*hidden_size
+    if not provided."""
+
+    kv_channels: int = None
+    """Projection weights dimension in multi-head attention. This is set to hidden_size //
+    num_attention_heads if not provided."""
+
+    hidden_dropout: float = 0.1
+    """Dropout probability for transformer hidden state."""
+
+    attention_dropout: float = 0.1
+    """Post attention dropout probability."""
+
+    fp32_residual_connection: bool = False
+    """If true, move residual connections to fp32."""
+
+    # @jcasper should we keep this option?
+    apply_residual_connection_post_layernorm: bool = False
+    """If True, uses the original BERT residule connection ordering."""
+
+    layernorm_epsilon: float = 1e-5
+    """Epsilon value for any LayerNorm operations."""
+
+    layernorm_zero_centered_gamma: bool = False
+    """If set to True, the LayerNorm is adjusted to center the gamma values around 0. This improves
+    numerical stability."""
+
+    add_bias_linear: bool = True
+    """Include a bias term in all linear layers (QKV projections, after core attention, and two in
+    MLP layer)."""
+
+    add_qkv_bias: bool = False
+    """Add a bias term only for QKV projections."""
+
+    gated_linear_unit: bool = False
+    """Use a gated linear unit for the first linear layer in the MLP."""
+
+    activation_func: Callable = F.gelu
+    """Activation function to use for the non-linearity in the MLP."""
+
+    activation_func_fp8_input_store: bool = False
+    """Store the input of MLP activation function in FP8 for backprop to save memory.
+    The stored input is casted back to the original precision before backprop compuatation."""
+
+    num_moe_experts: int = None
+    """Number of experts to use for MoE layer. When set, it replaces MLP with MoE layer. Set to None
+    for no MoE."""
+
+    rotary_interleaved: bool = False
+    """True is rotate pairs of even and odd dimensions (RoFormer style), False is rotate pairs of
+    first half and second half (LLaMa style). Default to False."""
+
+    window_size: Optional[Tuple[int, int]] = None
+    """If not None, then will use sliding window attention. The size of the window is specified by
+    the numbers inside the tuple; -1 is special value meaning "infinite window size"."""
+
+    normalization: bool = "LayerNorm"
+    """Which norm to use for normalization layers, valid options are `LayerNorm` and `RMSNorm`."""
+
+    qk_layernorm: bool = False
+    """Whether to apply LayerNorm to the query and key embeddings."""
+
+    test_mode: bool = False
+    """Whether to run real-time tests."""
+
+    calculate_per_token_loss: bool = False
+    """Whether cross entropy loss is calculated over the actual number of non-padded tokens in the
+    global batch, versus the default behavior of assuming all tokens are non-padded."""
+
+    multi_latent_attention: bool = False
+    """Whether to use multi-latent attention."""
+
+    ####################
+    # initialization
+    ####################
+    init_method: Callable = None
+    """Method to initialize weights. Note that bias is always set to zero. Should be a function that
+    takes a single Tensor and initializes it. If None, will be set to
+    megatron.core.utils.init_method_normal(init_method_std) which is torch nn init normal with
+    mean=0.0 and std=init_method_std."""
+
+    output_layer_init_method: Callable = None
+    """Method to initialize weights of the output layer of both attention and MLP blocks. If None,
+    will be set to megatron.core.utils.scaled_init_method_normal(init_method_std) which is torch nn
+    init normal with mean=0.0 and std=init_method_std / math.sqrt(2.0 * num_layers)."""
+
+    init_method_std: float = 0.02
+    """Standard deviation of the zero mean normal for the default initialization method, not used if
+    init_method and output_layer_init_method are provided."""
+
+    ####################
+    # mixed-precision
+    ####################
+    apply_query_key_layer_scaling: bool = False
+    """If true, scale Q * K^T by 1 / layer-number. This improve numeric stability when training with
+    fp16."""
+
+    attention_softmax_in_fp32: bool = True
+    """If True, run attention masking and softmax in fp32. This should be True if
+    apply_query_key_layer_scaling is True."""
+
+    ####################
+    # fusion
+    ####################
+    bias_activation_fusion: bool = False
+    """If True, fuses bias addition and the activation function when possible."""
+
+    masked_softmax_fusion: bool = False
+    """If True, uses softmax fusion."""
+
+    persist_layer_norm: bool = False
+    """If True, uses the persistent fused layer norm kernel. This kernel only supports a fixed set
+    of hidden sizes."""
+
+    memory_efficient_layer_norm: bool = False
+    """If True, and using local layers (not from TransformerEngine), tells Apex to use the memory
+    efficient fused LayerNorm kernel. Ignored if not using LayerNorm."""
+
+    bias_dropout_fusion: bool = False  # TODO: this should be bias_dropout_add_fusion?
+    """If True, uses bias dropout fusion."""
+
+    apply_rope_fusion: bool = False
+    """If True, use fused RoPE kernel."""
+
+    ####################
+    # activation recomputation
+    ####################
+    recompute_granularity: str = None
+    """Determines which type of activation recompute to use.  Megatron-core supports 'selective'
+    activation checkpointing where only the memory intensive part of attention is checkpointed.
+    These memory intensive activations are also less compute intensive which makes activation
+    checkpointing more efficient for LLMs (20B+).  See Reducing Activation Recomputation in Large
+    Transformer Models (https://arxiv.org/abs/2205.05198) for more details.  'full' will checkpoint
+    the entire transformer layer.  If None, no recompute is performed and all activations are saved.
+    If set, must be 'selective' or 'full'. 'selective' always uses all layers.
+    """
+
+    recompute_method: str = None
+    """Determines which transformer layers will be recomputed. uniform will uniformly divide the
+    total number of transformer layers in a transformer block and recompute the input activation of
+    each divided chunk at the specified granularity.  block will recompute the input activations for
+    only a set number of transformer layers per pipeline stage.  The rest of the layers in the
+    pipeline stage will not have any activations recomputed.  If None, and recompute is enabled, all
+    layers will do recomputation. If set, must be 'uniform' or 'block'."""
+
+    recompute_num_layers: int = None
+    """When recompute_method is uniform, recompute_num_layers is the number of transformer layers in
+    each uniformly divided recompute unit.  When recompute_method is block, recompute_num_layers is
+    the number of transformer layers to recompute within each pipeline stage.  Must be None for
+    'selective' activation checkpointing."""
+
+    distribute_saved_activations: bool = None
+    """If True, distribute recomputed activations across the model parallel group."""
+
+    ####################
+    # fp8 related
+    ####################
+    fp8: str = None
+    """If set, enables the use of FP8 precision through Transformer Engine. There are 2 predefined
+    choices (1) 'e4m3' uniformly uses e4m3 for all FP8 tensors, (2) 'hybrid' uses e4m3 for all FP8
+    activation and weight tensors and e5m2 for all FP8 output activation gradient tensors."""
+
+    fp8_margin: int = 0
+    """Margin for the scaling factor computation."""
+
+    fp8_interval: int = 1
+    """DEPRECATED from TransformerEngine v1.8.0. This flag is ignored.
+    Controls how often the scaling factor is recomputed.
+    """
+
+    fp8_amax_history_len: int = 1
+    """The length of the amax history window used for scaling factor computation."""
+
+    fp8_amax_compute_algo: str = "most_recent"
+    """Algorithm used for choosing the `amax` value for the scaling factor computation. There are 2
+    predefined choices: `max` chooses the largest `amax` in the history window, while `most_recent`
+    always chooses the most recently seen value.
+
+    """
+
+    fp8_wgrad: bool = True
+    """When set to False, override FP8 config options and do the wgrad computation
+    in higher precision."""
+
+    fp8_dot_product_attention: bool = False
+    """When set to True, use the FP8 implementation of Dot Product Attention."""
+
+    fp8_multi_head_attention: bool = False
+    """When set to True, use the FP8 implementation of Multi Head Attention."""
+
+    tp_only_amax_red: bool = False
+    """When set to True, reduce the FP8 AMAX only in the TP or TP-CP domain"""
+
+    ####################
+    # MoE related
+    ####################
+    moe_shared_expert_intermediate_size: int = None
+    """Shared expert total ffn hidden size.
+    It should be equal to 'num_shared_experts * ffn_size_of_each_shared_expert' if
+    there are multiple shared experts.
+    None means no shared expert."""
+
+    moe_shared_expert_overlap: bool = False
+    """Enable overlapping between shared expert computations and dispatcher communications.
+    Without this, the shared epxerts execute after the routed experts."""
+
+    moe_layer_freq: int = 1
+    """Frequency between MoE layers and Dense layers. Accepts either:
+    - An integer N: Represents a 1:N ratio, meaning one expert layer for every N-1 dense layers.
+    - A string containing a Python list expression that defines a custom pattern, e.g.:
+    "([1]*3+[0]*1)*3" evaluates to [1,1,1,0,1,1,1,0,1,1,1,0]
+    where 1 indicates an expert layer and 0 indicates a dense layer."""
+
+    moe_ffn_hidden_size: int = None
+    """MoE Feed-Forward Network hidden size"""
+
+    moe_router_load_balancing_type: str = "aux_loss"
+    """The load balancing strategy for the router. "aux_loss" corresponds to the load balancing loss 
+    used in GShard and SwitchTransformer; "seq_aux_loss" corresponds to the loss used in DeepSeekV2, 
+    which computes the loss for each individual sample; "sinkhorn" corresponds to the balancing 
+    algorithm used in S-BASE, and "none" implies no load balancing. The default is "aux_loss"."""
+
+    moe_router_topk: int = 2
+    """Number of experts to route to for each token."""
+
+    moe_router_topk_limited_devices: int = None
+    """Number of expert parallel ranks to consider for each token during routing. Perform top-k
+    routing on a subset of expert parallel ranks by first selecting N ranks for each token, then
+    conducting top-k selection among experts on these devices. None means no device limitation."""
+
+    moe_router_num_node_group: int = None
+    """Number of node groups for MoE. If None, the number of node groups is equal to the number of  
+    expert model parallel groups/8."""
+
+    moe_noaux_gamma: float = None
+    """The gamma value for the noaux loss. Default is None, which means no noaux loss. Recommended set to 1e-3."""
+
+    moe_router_pre_softmax: bool = False
+    """Enable pre-softmax routing for MoE, which means softmax is before the top-k selection. 
+    By default, softmax is done after top-k."""
+
+    moe_router_use_sigmoid: bool = False
+    """Use sigmoid instead of softmax for routing scores."""
+
+    moe_router_norm_topk_prob: bool = False
+    """Normalize the top-k probabilities to sum to 1."""
+
+    moe_complementary_seq_aux_loss: bool = False
+    """Use complementary sequence aux loss for MoE."""
+
+    moe_router_topk_scaling_factor: float = None
+    """Scaling factor for routing score in top-k selection, only works when moe_router_pre_softmax 
+    enabled. Defaults to None, which means no scaling."""
+
+    moe_grouped_gemm: bool = False
+    """When there are multiple experts per rank, compress multiple local (potentially small) gemms
+    in a single kernel launch to improve the utilization and performance by leveraging the Grouped
+    GEMM feature introduced since CUTLASS 2.8 (https://github.com/fanshiqing/grouped_gemm).
+    """
+
+    moe_use_legacy_grouped_gemm: bool = False
+    """Use legacy GroupedMLP rather than TEGroupedMLP.
+    Note: The legacy one will be deprecated soon."""
+
+    moe_aux_loss_coeff: float = 0  # 1e-2 would be a good start value for load balance loss.
+    """Scaling coefficient for the aux loss. A starting value of 1e-2 is recommended."""
+
+    moe_device_level_aux_loss_coeff: float = None 
+    """Scaling coefficient for the device_level aux loss. """
+
+    moe_comm_aux_loss_coeff: float = None  
+    """Scaling coefficient for the comm aux loss. """
+
+    moe_z_loss_coeff: float = None  # 1e-3 would be a good start value for z-loss
+    """Scaling coefficient for the z-loss. A starting value of 1e-3 is recommended."""
+
+    moe_input_jitter_eps: float = None
+    """Add noise to the input tensor by applying jitter with a specified epsilon value."""
+
+    moe_token_dropping: bool = False  # TODO: Support token dropping.
+    """This feature involves selectively dropping and padding tokens for each expert to achieve a
+    specified capacity, similar to GShard, Switch-Transformer, and DeepSpeed-MoE. Note that this is
+    currently unsupported so should remain False."""
+
+    moe_token_dispatcher_type: str = "allgather"
+    """The type of token dispatcher to use. The default is 'allgather'.
+    Options are 'allgather' and 'alltoall'."""
+
+    moe_per_layer_logging: bool = False
+    """Enable per-layer logging for MoE, currently supports auxiliary loss and z loss."""
+
+    moe_expert_capacity_factor: float = None
+    """moe_expert_capacity_factor (float): The capacity factor for each expert, None means no token
+    will be dropped. The default is None."""
+
+    moe_device_level_capacity: bool = False
+    """moe_device_level_capacity (bool): Whether to consider the expert capacity 
+    of a group together. The default is False."""
+
+    moe_pad_expert_input_to_capacity: bool = False
+    """moe_pad_expert_input_to_capacity (bool): If True, pads the input for each expert to match
+    the expert capacity length, effective only after the moe_expert_capacity_factor is set. The
+    default setting is False."""
+
+    moe_token_drop_policy: str = 'probs'
+    """The policy to drop tokens. Can be either "probs" or "position". If "probs", the tokens with
+    the lowest probabilities will be dropped. If "position", tokens at the end of each batch will
+    be dropped.
+    """
+
+    moe_layer_recompute: bool = False
+    """Memory optimization: checkpointing moe_layer to save actiavtion memory."""
+
+    ##################
+    # Context Parallel
+    ##################
+    cp_comm_type: Union[str, List[str]] = None
+    """Inter-gpu communication type for context parallelism.
+    str: all layers share same communication type.
+    List[str]: each layer has its separate communication type.
+    cp_comm_type of each layer can be "p2p" or "all_gather" or "a2a" or "a2a+p2p".
+    "p2p": Exchange KV chunks with P2P communications in ring topology. P2P is async and can be
+    overlapped with attention compute.
+    "all_gather": All-gather to get full sequence of KV before attention. The all-gather is not
+    async, and cannot be overlapped.
+    "a2a": Like DeepSpeed Ulysses, scatter attention heads across the CP group, and gather to get
+    full sequence of QKV.
+    "a2a+p2p": A hierarchical implementation of context parallelism to attention. 
+    It uses A2A communications in low-level CP groups (e.g., via NVLink),
+    and P2P communications in high-level CP groups (e.g., via IBLink).
+    """
+
+    ####################
+    # miscellaneous
+    ####################
+    clone_scatter_output_in_embedding: bool = True
+    """When set to True, clone the output of scatter_to_sequence_parallel_region in embedding layer
+    to facilitate garbage collection of input."""
+
+    disable_parameter_transpose_cache: bool = False
+    """When set to true, the parameter transposes are not cached for subsequent iterations."""
+
+    enable_cuda_graph: bool = False
+    """When set to true, TransformerLayer layers are swapped with a CUDA graphed version."""
+
+    cuda_graph_retain_backward_graph: bool = False
+    """When set to true, cudagraph backward passes will be graph captured with 'retain_grad=True'
+    This may enable cudagraphs for certain modules that are not completely cudagraph safe. For 
+    more details, see: https://pytorch.org/docs/stable/generated/torch.Tensor.backward.html."""
+
+    external_cuda_graph: bool = False
+    """When set to true, TransformerLayer layers are swapped with user provided CUDA graphs."""
+
+    config_logger_dir: str = ""
+    """When non-empty, dumps entry-point configs to config_logger_dir"""
+
+    flash_decode: bool = False
+    """ Use the optimized flash decoding kernel during inference. """
+
+    use_te_rng_tracker: bool = False
+    """ Whether to use the TE or MCore version of the RNG tracker. """
+
+    inference_rng_tracker: bool = False
+    """ Whether we should instantiate a separate RNG tracker for inference. """
+
+    def __post_init__(self):
+        """Python dataclass method that is used to modify attributes after initialization.
+        See https://docs.python.org/3/library/dataclasses.html#post-init-processing for more
+        details.
+        """
+        super().__post_init__()
+        if self.fp16 and self.bf16:
+            raise ValueError(
+                f'Only one of self.fp16: {self.fp16} and self.bf16 {self.bf16} should be True.'
+            )
+
+        if self.num_attention_heads % self.tensor_model_parallel_size != 0:
+            raise ValueError(
+                f"num_attention_heads ({self.num_attention_heads}) must be a multiple of "
+                f"tensor_model_parallel_size ({self.tensor_model_parallel_size})."
+            )
+
+        if self.ffn_hidden_size is None:
+            self.ffn_hidden_size = 4 * self.hidden_size
+
+        if self.kv_channels is None:
+            self.kv_channels = self.hidden_size // self.num_attention_heads
+
+        if self.num_query_groups is None:
+            self.num_query_groups = self.num_attention_heads
+
+        if self.num_query_groups % self.tensor_model_parallel_size != 0:
+            raise ValueError(
+                f"num_query_groups ({self.num_query_groups}) must be a multiple of "
+                f"tensor_model_parallel_size ({self.tensor_model_parallel_size})."
+            )
+
+        if self.apply_query_key_layer_scaling:
+            self.attention_softmax_in_fp32 = True
+
+        if self.expert_model_parallel_size > 1 and self.num_moe_experts is None:
+            raise ValueError('num_moe_experts must be non None to use expert-parallel.')
+
+        if self.num_moe_experts is not None and self.num_moe_experts <= 0:
+            raise ValueError('num_moe_experts must be non-negative.')
+
+        if self.moe_ffn_hidden_size is None:
+            self.moe_ffn_hidden_size = self.ffn_hidden_size
+
+        if self.moe_shared_expert_intermediate_size is not None:
+            if self.moe_shared_expert_intermediate_size <= 0:
+                raise ValueError(
+                    f'moe_shared_expert_intermediate_size must be '
+                    f'num_shared_experts * ffn_size_of_each_shared_expert, '
+                    f'but got {self.moe_shared_expert_intermediate_size}'
+                )
+            if self.moe_shared_expert_overlap and self.moe_token_dispatcher_type not in [
+                "alltoall"
+            ]:
+                raise ValueError(
+                    f'moe_shared_expert_overlap only works with alltoall token dispatcher.'
+                )
+
+        if self.moe_expert_capacity_factor is not None:
+            if self.moe_token_dispatcher_type not in ["alltoall", "alltoall_seq"]:
+                raise ValueError(
+                    'moe_expert_capacity_factor only works with alltoall token dispatcher'
+                )
+            if self.moe_expert_capacity_factor < 0:
+                self.moe_expert_capacity_factor = None
+            if self.moe_router_load_balancing_type not in ["aux_loss", "seq_aux_loss", "none"]:
+                raise ValueError(
+                    'moe_expert_capacity_factor only works with aux_loss or none load balancing'
+                )
+
+        if self.moe_pad_expert_input_to_capacity:
+            if self.moe_expert_capacity_factor is None:
+                raise ValueError(
+                    'moe_expert_capacity_factor must be set to use moe_pad_expert_input_to_capacity'
+                )
+
+        if self.cpu_offloading and (
+            self.cpu_offloading_num_layers < 0 or self.cpu_offloading_num_layers >= self.num_layers
+        ):
+            raise ValueError(
+                f'CPU offloading can be done only for layers less than {self.num_layers}'
+            )
+
+        if self.cpu_offloading and self.pipeline_model_parallel_size > 1:
+            raise ValueError(
+                'Currently there is no support for Pipeline parallelism with CPU offloading'
+            )
+
+        if self.cpu_offloading and self.recompute_granularity is not None:
+            raise ValueError(
+                'CPU offloading does not work when activation recomputation is enabled'
+            )
+
+        if self.recompute_granularity is not None:
+            if self.recompute_granularity not in ['full', 'selective']:
+                raise ValueError(
+                    f'When using recompute_granuarlity: {self.recompute_granularity} must be "full"'
+                    'or "selective".'
+                )
+
+            if self.recompute_method is not None:
+                if self.recompute_method not in ['block', 'uniform']:
+                    raise ValueError(
+                        f'recompute_method: {self.recompute_method} must be "block" or "uniform".'
+                    )
+            elif self.recompute_granularity != 'selective':
+                raise ValueError(
+                    f'Using recompute_granularity: {self.recompute_granularity} so '
+                    'recompute_method must be "block" or "uniform"'
+                )
+
+            if self.recompute_granularity != 'selective' and self.recompute_num_layers is None:
+                raise ValueError(
+                    f'When using recompute_granularity: {self.recompute_granularity} '
+                    'recompute_num_layers must be between '
+                    '1 and num_layers_per_pipeline_rank: '
+                    f'{self.num_layers // self.pipeline_model_parallel_size}'
+                )
+            elif (
+                self.recompute_granularity == 'selective' and self.recompute_num_layers is not None
+            ):
+                raise ValueError(
+                    f'When using recompute_granularity: {self.recompute_granularity} '
+                    'recompute_num_layers must be None.'
+                )
+
+            if self.distribute_saved_activations and self.sequence_parallel:
+                raise ValueError(
+                    f'distribute_saved_activations: {self.distribute_saved_activations} must be '
+                    f'false when sequence parallel is enabled: {self.sequence_parallel}'
+                )
+
+            if self.virtual_pipeline_model_parallel_size is not None:
+                if not self.num_layers % self.virtual_pipeline_model_parallel_size == 0:
+                    raise ValueError(
+                        f'num_layers: {self.num_layers} must be divisible by '
+                        f'virtual_model_parallel_size {self.virtual_pipeline_model_parallel_size}'
+                    )
+
+        if self.apply_query_key_layer_scaling:
+            self.attention_softmax_in_fp32 = True
+
+        if self.bias_activation_fusion:
+            if self.activation_func not in [F.gelu, F.silu]:
+                raise ValueError(
+                    "When bias_activation_fusion is True, activation function should be either "
+                    "gelu or swiglu"
+                )
+            if (
+                self.activation_func == F.gelu
+                and not self.gated_linear_unit
+                and not self.add_bias_linear
+            ):
+                raise ValueError(
+                    "When bias_activation_fusion is True, gated_linear_unit is False, "
+                    "and activation function is gelu, add_bias_linear must also be True."
+                )
+
+        if self.activation_func_fp8_input_store:
+            if self.activation_func != F.silu or not self.gated_linear_unit:
+                raise ValueError("Storing activation input in FP8 is supported only for SwiGLU.")
+
+        if self.apply_rope_fusion:
+            if self.rotary_interleaved:
+                raise ValueError("rotary_interleaved does not work with apply_rope_fusion.")
+
+            from megatron.core.models.common.embeddings.rope_utils import (
+                fused_apply_rotary_pos_emb,
+                fused_apply_rotary_pos_emb_thd,
+            )
+
+            if fused_apply_rotary_pos_emb is None and fused_apply_rotary_pos_emb_thd is None:
+                raise ValueError(
+                    "apply_rope_fusion is not available. Please install TE >= 1.4 or Apex."
+                )
+
+        if self.multi_latent_attention and self.rotary_interleaved:
+            raise ValueError("rotary_interleaved does not work with multi_latent_attention.")
+
+        if self.init_method is None:
+            self.init_method = init_method_normal(self.init_method_std)
+
+        if self.output_layer_init_method is None:
+            self.output_layer_init_method = scaled_init_method_normal(
+                self.init_method_std, self.num_layers
+            )
+
+        if (
+            self.moe_token_dispatcher_type == "alltoall_seq"
+            and self.tensor_model_parallel_size != self.expert_tensor_parallel_size
+        ):
+            raise ValueError(
+                "alltoall_seq dispatcher not support different TP size for MoE and Dense layer."
+            )
+
+        if self.num_moe_experts and self.fp8:
+            # TE version below 1.7.0 will raise Error when handle zeros tokens for expert
+            if not is_te_min_version("1.7.0.dev0"):
+                raise ValueError(
+                    "Only transformer-engine>=1.7.0 supports MoE FP8 training, "
+                    f"but your version is {get_te_version()}."
+                )
+
+            if self.moe_grouped_gemm and not is_te_min_version("1.11.0"):
+                raise ValueError(
+                    "Only transformer-engine>=1.11.0 supports FP8 grouped gemm, "
+                    f"but your version is {get_te_version()}."
+                )
+
+        if self.moe_router_topk_limited_devices:
+            if self.moe_router_topk_limited_devices > self.expert_model_parallel_size:
+                raise ValueError(
+                    f"moe_router_topk_limited_devices: {self.moe_router_topk_limited_devices} "
+                    f"must be smaller than expert_model_parallel_size "
+                    f"{self.expert_model_parallel_size}"
+                )
+
+        if self.flash_decode and self.fp8:
+            raise ValueError("FP8 inference is currently not support with flash decoding.")
+
+        if self.enable_cuda_graph:
+            if self.cpu_offloading:
+                raise ValueError("CUDA graphs not supported with CPU offloading.")
+            if self.recompute_granularity:
+                raise ValueError("CUDA graphs not supported with activation recomputation.")
+
+        if self.moe_token_dispatcher_type in ['allgather', 'alltoall_seq']:
+            if self.variable_seq_lengths is True:
+                raise ValueError(
+                    f"Token dispatcher type: {self.moe_token_dispatcher_type} does not support "
+                    f"variable sequence length, please use alltoall dispatcher instead."
+                )
+
+        if self.cp_comm_type is not None:
+            if isinstance(self.cp_comm_type, list):
+                assert len(self.cp_comm_type) == self.num_layers, (
+                    f"Length of cp_comm_type ({len(self.cp_comm_type)}) should equal to "
+                    f"the total number of transformer layers ({self.num_layers})!"
+                )
+            else:
+                assert isinstance(
+                    self.cp_comm_type, str
+                ), "Unsupported communication type for context parallelism!"
+
+
+@dataclass
+class MLATransformerConfig(TransformerConfig):
+    """Configuration object for megatron-core Multi-Latent Attention (MLA) transformers.
+
+    The initialization function has an argument for each parameter, including those in
+    ModelParallelConfig. Included YaRN RoPE parameters that is fused in MLA.
+    """
+
+    multi_latent_attention: bool = True
+    """Whether to use Multi-Latent Attention."""
+
+    q_lora_rank: int = 512
+    """Rank of Query tensor's low rank representation."""
+
+    kv_lora_rank: int = 512
+    """Rank of Key and Value tensors' low rank representation."""
+
+    qk_head_dim: int = 128
+    """Dimension of the head in the QK projection. q_head_dim = qk_head_dim + qk_pos_emb_head_dim"""
+
+    qk_pos_emb_head_dim: int = 64
+    """Dimension of the position embedding in the QK projection."""
+
+    v_head_dim: int = 128
+    """Dimension of the head in the V projection."""
+
+    rotary_base: float = 10000
+    """Rotary base for the rotary embeddings."""
+
+    rotary_scaling_factor: float = 40
+    """Rotary scaling factor for the rotary embeddings."""
+
+    normalization: str = "RMSNorm"
+    """Default normalization layer for MLA models is RMSNorm."""
+
+    max_position_embeddings: int = 163840
+    """Maximum position embeddings for the original model."""
+
+    beta_fast: float = 32
+    """Beta fast for YaRN RoPE."""
+
+    beta_slow: float = 1
+    """Beta slow for YaRN RoPE."""
+
+    mscale: float = 0.707
+    """Mscale for YaRN RoPE in Multi-Latent Attention."""
+
+    mscale_all_dim: float = 0.707
+    """Mscale all dimensions for YaRN RoPE in Multi-Latent Attention."""
+
+
+import megatron.core.transformer.transformer_config
+
+megatron.core.transformer.transformer_config.TransformerConfig = TransformerConfig
+megatron.core.transformer.transformer_config.MLATransformerConfig = MLATransformerConfig
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/README.md b/megatron-lm-musa-patch/examples/deepseek-v2/README.md
new file mode 100644
index 00000000..cd58a791
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/README.md
@@ -0,0 +1,10 @@
+# Deeoseek-v2
+We implement all kinds of aux loss mentioned in deepseek-v2 paper, which contains:
+- **seq-aux-loss**: used with args "--moe-router-load-balancing-type seq_aux_loss"
+- **moe-device-level-aux-loss-coeff**
+- **moe-comm-aux-loss-coeff**
+
+In **deepseekv2-lite**, we follow the setting in HuggingFace which only use pipeline parallel, and "device-level-loss", "comm-aux-loss" will not be used.
+
+### Innovation
+In addition to the original implementation, we added a device-level drop strategy to replace the expert-level drop strategy, which can avoid discarding too many tokens while maintaining balance, although this will apparently reduce the MFU.
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/fault_tolerance_function.sh b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/fault_tolerance_function.sh
new file mode 100644
index 00000000..4993690c
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/fault_tolerance_function.sh
@@ -0,0 +1,67 @@
+#!/bin/bash
+function get_envs {
+    echo "Start runing EPX with env MUAS_VISIBLE_DEVICES : ${MUSA_VISIBLE_DEVICES}"
+    echo "Start runing EPX with env EPX_SESSION : ${EPX_SESSION}"
+    echo "Start runing EPX with env EPX_CCP_ADDR : ${EPX_CCP_ADDR} on Port : ${EPX_CCP_PORT}"
+    echo "Start runing EPX with env EPX_STORE_ADDR : ${EPX_STORE_ADDR} on Port : ${EPX_STORE_PORT}"
+    echo "Start runing EPX with env EPX_LCP_ADDR : ${EPX_LCP_ADDR} on Port : $1"
+}
+
+function ft_training {
+    if [ $# -ne 1 ]; then
+        echo "Error: You need to enter training script"
+    fi
+
+    cmd="$1"
+
+    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
+    TEMP_STATE_PATH="${SCRIPT_DIR}/../.temp_state"
+
+    if [ ! -d "${TEMP_STATE_PATH}" ]; then
+        mkdir -p "${TEMP_STATE_PATH}"
+        echo "Created temporary state directory at ${TEMP_STATE_PATH}"
+    fi
+
+    if [ -z "${EPX_SESSION}" ]; then
+    echo "No EPX_SESSION found, generating a new one..."
+    export EPX_SESSION="$(uuiden)"
+    fi
+
+    if [ -z "${EPX_LCP_BIN}" ]; then
+        echo "Error: No EPX_LCP_BIN found, please set it in your environment variables."
+        exit 1
+    fi
+
+    for i in {1..1000}; do
+        if [ ! -f "${TEMP_STATE_PATH}/port_${i}" ]; then
+            touch "${TEMP_STATE_PATH}/port_${i}"
+
+            EPX_LCP_PORT=$((19000+i))
+            if lsof -Pi :${EPX_LCP_PORT} -sTCP:LISTEN -t >/dev/null ; then
+                echo "Port ${EPX_LCP_PORT} is already in use, skipping..."
+                continue
+            fi
+            export EPX_LCP_PORT
+
+            get_envs ${EPX_LCP_PORT}
+
+            ${EPX_LCP_BIN} \
+            --group-ranks "${EPX_GROUP_RANK}" \
+            --local-addr "${EPX_LCP_ADDR}" \
+            --local-port "${EPX_LCP_PORT}" \
+            --ccp-addr "http://${EPX_CCP_ADDR}:${EPX_CCP_PORT}" \
+            --session "${EPX_SESSION}" &
+
+            EPX_LCP_PID=$!
+
+            echo $cmd
+            $cmd
+
+            echo "Killing EPX_LCP with PID ${EPX_LCP_PID}..."
+            kill -9 "${EPX_LCP_PID}"
+
+            rm "${TEMP_STATE_PATH}/port_${i}"
+            break
+        fi
+    done
+}
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_cuda.sh b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_cuda.sh
new file mode 100644
index 00000000..8157b622
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_cuda.sh
@@ -0,0 +1,224 @@
+#!/bin/bash
+
+# Runs the "175B" parameter model
+
+# Please change the following envrioment variables
+# base on the cluster configuration
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="cuda"
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|tail -n 1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+# export MUSA_LAUNCH_BLOCKING=1
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 2  # 60 
+    --hidden-size 5120
+    --num-attention-heads 128
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-6 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 102400
+    --ffn-hidden-size 12288  # 12288
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.006 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --no-bias-dropout-fusion
+    --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 1
+    --distributed-backend nccl
+    --multi-latent-attention
+    --qk-layernorm
+)
+
+MLA_ARGS=(
+    --q-lora-rank 1536
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 10000
+    --ckpt-format torch
+    --no-load-optim
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+
+NUM_LAYERS=$(echo "${MODEL_ARGS[@]}" | grep -oP '(?<=--num-layers )\d+')
+NUM_LAYERS_MINUS_ONE=$((NUM_LAYERS - 1))
+MOE_LAYER_FREQ="([0]*1+[1]*${NUM_LAYERS_MINUS_ONE})*1"
+
+
+MOE_ARGS=(
+    --num-experts 160
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-topk-limited-devices 3
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-router-topk 6
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    --moe-router-topk-scaling-factor 16
+    --moe-aux-loss-coeff 3e-3
+    --moe-expert-capacity-factor 1
+    --moe-device-level-capacity
+    --moe-device-level-aux-loss-coeff 5e-2 
+    --moe-comm-aux-loss-coeff 2e-2
+    --moe-ffn-hidden-size 1536
+    --moe-shared-expert-intermediate-size 3072
+    --moe-layer-freq "$MOE_LAYER_FREQ"
+    --moe-grouped-gemm
+)
+
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+)
+    
+# --moe-z-loss-coeff 1e-3
+# --moe-expert-capacity-factor 4.0 
+# --moe-pad-expert-input-to-capacity
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+echo $cmd
+$cmd
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_cuda.sh b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_cuda.sh
new file mode 100644
index 00000000..46ec279a
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_cuda.sh
@@ -0,0 +1,220 @@
+#!/bin/bash
+
+# Runs the "175B" parameter model
+
+# Please change the following envrioment variables
+# base on the cluster configuration
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
+export OMP_NUM_THREADS=4
+export CUDA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export ACCELERATOR_BACKEND="cuda"
+# export NCCL_PROTOS=2
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export NCCL_AVOID_RECORD_STREAMS=0
+# export NCCL_DEBUG=INFO
+# export NCCL_SOCKET_IFNAME=ibs110
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|tail -n 1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+# export MUSA_LAUNCH_BLOCKING=1
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 27  # 60 
+    --hidden-size 2048
+    --num-attention-heads 16
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-6 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 102400 #102400
+    --ffn-hidden-size 10944  # 12288
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.006 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --no-bias-dropout-fusion
+    --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0
+    --distributed-backend nccl
+    --multi-latent-attention
+    # --decoder-first-pipeline-num-layers 2
+    --decoder-last-pipeline-num-layers 6
+    --qk-layernorm
+)
+
+MLA_ARGS=(
+    # --q-lora-rank None
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 10000
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --ckpt-format torch
+    --no-load-optim
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+NUM_LAYERS=$(echo "${MODEL_ARGS[@]}" | grep -oP '(?<=--num-layers )\d+')
+NUM_LAYERS_MINUS_ONE=$((NUM_LAYERS - 1))
+MOE_LAYER_FREQ="([0]*1+[1]*${NUM_LAYERS_MINUS_ONE})*1"
+
+MOE_ARGS=(
+    --num-experts 64
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-topk-limited-devices 1
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-router-topk 6
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    # --moe-router-topk-scaling-factor 1
+    --moe-aux-loss-coeff 3e-3
+    --moe-expert-capacity-factor 1
+    # --moe-device-level-capacity
+    # --moe-device-level-aux-loss-coeff 5e-2 
+    # --moe-comm-aux-loss-coeff 2e-2
+    --moe-ffn-hidden-size 1408
+    --moe-shared-expert-intermediate-size 2816
+    --moe-layer-freq "$MOE_LAYER_FREQ"
+    --moe-grouped-gemm
+)
+
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+)
+    
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+echo $cmd
+$cmd
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_musa.sh b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_musa.sh
new file mode 100644
index 00000000..0c3e94e6
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_musa.sh
@@ -0,0 +1,228 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export PROFILER_WARMUP_STEPS=3
+# export MUSA_LAUNCH_BLOCKING=1
+# export PROFILER_PROFILE_MEMORY=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_ALGOS=1
+export MCCL_BUFFSIZE=20971520
+export MCCL_MAX_NCHANNELS=14
+export MCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export MCCL_IB_GID_INDEX=3
+export MUSA_BLOCK_SCHEDULE_MODE=1
+# export MUSA_BLOCK_ARBITRATION_MODE=2
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ip a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n1 | cut -d '/' -f1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 27  # 60 
+    --hidden-size 2048
+    --num-attention-heads 16
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-6 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 102400 #102400
+    --ffn-hidden-size 10944  # 12288
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.006 
+    --use-mcore-models 
+    # --no-gradient-accumulation-fusion 
+    --no-bias-dropout-fusion
+    # --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0
+    --distributed-backend nccl
+    --multi-latent-attention
+    --qk-layernorm
+    --decoder-last-pipeline-num-layers 6
+    # --q-rms-recompute
+    --attn-recompute
+    --recompute-variance
+)
+
+MLA_ARGS=(
+    # --q-lora-rank None
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 100000
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    # --load /home/dist/huanghuang/deepseek_dev/ckpts/pp4ep1mbs1_deepseekv2-lite_nogroupgemm_ckpt_init
+    # --ckpt-format torch_dist 
+    # --auto-detect-ckpt-format
+    --ckpt-format torch
+    --no-load-optim
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+NUM_LAYERS=$(echo "${MODEL_ARGS[@]}" | grep -oP '(?<=--num-layers )\d+')
+NUM_LAYERS_MINUS_ONE=$((NUM_LAYERS - 1))
+MOE_LAYER_FREQ="([0]*1+[1]*${NUM_LAYERS_MINUS_ONE})*1"
+
+MOE_ARGS=(
+    --num-experts 64
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-score-function softmax
+    --moe-router-num-groups $EP_SIZE
+    --moe-router-group-topk 1
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-router-topk 6
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    # --moe-router-topk-scaling-factor 1
+    --moe-aux-loss-coeff 3e-3
+    --moe-expert-capacity-factor 1
+    # --moe-device-level-capacity
+    # --moe-device-level-aux-loss-coeff 5e-2 
+    # --moe-comm-aux-loss-coeff 2e-2
+    --moe-ffn-hidden-size 1408
+    --moe-shared-expert-intermediate-size 2816
+    --moe-layer-freq "$MOE_LAYER_FREQ"
+    # --moe-grouped-gemm
+)
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+)
+    
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+echo $cmd
+$cmd
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_musa.sh b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_musa.sh
new file mode 100644
index 00000000..b661062d
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_musa.sh
@@ -0,0 +1,274 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=6
+# export PROFILER_WARMUP_STEPS=3
+# export PROFILER_ACTIVE_STEPS=3
+# export PROFILER_REPEAT_NUM=1
+# export MUSA_LAUNCH_BLOCKING=1
+# export PROFILER_PROFILE_MEMORY=1
+
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES=${MUSA_VISIBLE_DEVICES:-'0,1,2,3,4,5,6,7'}
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_ALGOS=1
+export MCCL_BUFFSIZE=20971520
+export MUSA_BLOCK_SCHEDULE_MODE=1
+export MCCL_IB_GID_INDEX=3
+export MCCL_NET_SHARED_BUFFERS=0
+export MOE_NUM_EXPERTS=${MOE_NUM_EXPERTS:-160}
+export MOE_ROUTER_GROUP_TOPK=${MOE_ROUTER_GROUP_TOPK:-3}
+
+# export MUSA_EXECUTION_TIMEOUT=20000000 # Recommended for use with zero-bubble
+export ENABLE_ZERO_BUBBLE=0 # if set 1, Enable zero_bubble
+
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+# export MUSA_BLOCK_ARBITRATION_MODE=2
+export CPU_OPTIMIZER_PRECISION_AWARE_RECONFIG=${CPU_OPTIMIZER_PRECISION_AWARE_RECONFIG:-0}
+
+export USE_RECOMPUTE_VARIANCE=1
+export ENABLE_D2H_IN_PERMUTATION=0
+export NO_LOSS_REDUCE=0
+export USE_MUSA_MOE=1
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ip a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n1 | cut -d '/' -f1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=${GPUS_PER_NODE:-8}
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+
+echo "Distributed log_dir: $WORK_HOME/output_log/$RDZV_ID/$EXPNAME"
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE
+    --nnodes $NUM_NODES
+    --node_rank $NODE_RANK
+    --master_addr $MASTER_ADDR
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects ${LOG_REDIRECTS_LEVEL:-3}
+)
+
+MODEL_ARGS=(
+    --num-layers 2  # 60
+    --hidden-size 5120
+    --num-attention-heads 128
+    --seq-length 4096
+    --max-position-embeddings 4096
+    --norm-epsilon 1e-6
+    --attention-dropout 0.0
+    --hidden-dropout 0.0
+    --disable-bias-linear
+    --vocab-size 102400
+    --ffn-hidden-size 12288  # 12288 for dense, but for sequentialMLP, moe-ffn-hidden-size=1536
+    --position-embedding-type rope
+    --no-position-embedding
+    --swiglu
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+    # --cross-entropy-loss-fusion
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42
+    --micro-batch-size $MICRO_BATCH_SIZE
+    --global-batch-size $GLOBAL_BATCH_SIZE
+    --train-samples 24414062
+    --init-method-std  0.006 # 0.02 in HF config, but 0.006 in the paper
+    --use-mcore-models
+    # --no-gradient-accumulation-fusion
+    --no-bias-dropout-fusion
+    # --no-bias-swiglu-fusion
+    --use-distributed-optimizer
+    --use-flash-attn
+    --sequence-parallel
+    --recompute-granularity full
+    --recompute-method block
+    --recompute-num-layers 0
+    --distributed-backend nccl
+    --multi-latent-attention
+    --qk-layernorm
+    # --overlap-grad-reduce
+    # --overlap-param-gather
+    # --overlap-param-gather-with-optimizer-step # only supported with interleaved pipeline parallelism
+    # --attn-recompute
+    # --recompute-variance
+    # --mlp-recompute
+    # --mla-rms-recompute
+    # --mlp-rms-recompute
+    # --optimizer-cpu-offload
+    # --optimizer-offload-fraction 1
+    # --use-precision-aware-optimizer # cpu offload must be precision-aware
+    # --overlap-cpu-optimizer-d2h-h2d
+    --tp-only-amax-red
+)
+
+MLA_ARGS=(
+    --q-lora-rank 1536
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1
+    --adam-beta1 0.9
+    --adam-beta2 0.95
+    --clip-grad 1.0
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5
+    --lr-decay-style cosine
+    --lr-warmup-samples ${WARMUP_SAMPLES}
+    --min-lr 1.5e-6
+    --initial-loss-scale 65536
+    --min-loss-scale 1.0
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE
+	--pipeline-model-parallel-size $PP_SIZE
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16
+    --attention-softmax-in-fp32
+    --no-masked-softmax-fusion
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+    #--dataloader-type mtepx  #default single
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 100000
+    --eval-interval 1
+    --save $CHECKPOINT_PATH
+    --load $CHECKPOINT_PATH
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH
+)
+
+NUM_LAYERS=$(echo "${MODEL_ARGS[@]}" | grep -oP '(?<=--num-layers )\d+')
+NUM_LAYERS_MINUS_ONE=$((NUM_LAYERS - 1))
+MOE_LAYER_FREQ="([0]*1+[1]*${NUM_LAYERS_MINUS_ONE})*1"
+
+MOE_ARGS=(
+    --num-experts ${MOE_NUM_EXPERTS}
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-score-function softmax
+    --moe-router-num-groups $EP_SIZE
+    --moe-router-group-topk ${MOE_ROUTER_GROUP_TOPK}
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-router-topk 6
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    --moe-router-topk-scaling-factor 16 # pre-softmax need scaling
+    --moe-aux-loss-coeff 3e-3
+    --moe-expert-capacity-factor 1
+    --moe-device-level-capacity
+    --moe-device-level-aux-loss-coeff 5e-2
+    --moe-comm-aux-loss-coeff 2e-2
+    --moe-ffn-hidden-size 1536
+    --moe-shared-expert-intermediate-size 3072
+    --moe-layer-freq "$MOE_LAYER_FREQ"
+    --moe-grouped-gemm
+    --moe-permute-fusion
+)
+
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+    --fp8-format hybrid
+    --fp8-param-gather
+)
+
+# --moe-z-loss-coeff 1e-3
+# --moe-expert-capacity-factor 4.0
+# --moe-pad-expert-input-to-capacity
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"}
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+
+USE_EPX=${USE_EPX:-0}
+
+# run cmd directly
+if [ $USE_EPX -eq 0 ]; then
+  echo $cmd
+  $cmd
+  exit $?
+fi
+
+# run cmd with fault tolerance
+source "${PATCH_HOME}/examples/deepseek-v2/deepseek-v2-lite/fault_tolerance_function.sh"
+ft_training "$cmd"
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_musa_236B.sh b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_musa_236B.sh
new file mode 100644
index 00000000..a412e4f4
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_musa_236B.sh
@@ -0,0 +1,243 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export PROFILER_WARMUP_STEPS=3
+# export MUSA_LAUNCH_BLOCKING=1
+# export PROFILER_PROFILE_MEMORY=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_ALGOS=1
+export MCCL_BUFFSIZE=20971520
+export MUSA_BLOCK_SCHEDULE_MODE=1
+export MCCL_IB_GID_INDEX=3
+export MCCL_NET_SHARED_BUFFERS=0
+
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+# export MUSA_BLOCK_ARBITRATION_MODE=2
+export USE_MUSA_MOE=1
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ip a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n1 | cut -d '/' -f1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects ${LOG_REDIRECTS_LEVEL:-3}
+)
+
+MODEL_ARGS=(
+    --num-layers 63
+    --hidden-size 5120
+    --num-attention-heads 128
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-6 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 102400 
+    --ffn-hidden-size 12288  # 12288 for dense, but for sequentialMLP, moe-ffn-hidden-size=1536 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std  0.006 # 0.02 in HF config, but 0.006 in the paper 
+    --use-mcore-models 
+    # --no-gradient-accumulation-fusion
+    --no-bias-dropout-fusion
+    # --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0
+    --distributed-backend nccl
+    --multi-latent-attention
+    --qk-layernorm
+    --decoder-last-pipeline-num-layers 3
+    --attn-recompute
+    --recompute-variance
+    --mlp-recompute   
+    --mla-rms-recompute
+    --mlp-rms-recompute
+
+    # --optimizer-cpu-offload    #yehua
+    # --optimizer-offload-fraction 1.0 #yehua
+    # --use-precision-aware-optimizer  #yehua
+)
+
+MLA_ARGS=(
+    --q-lora-rank 1536
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 100000 
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+NUM_LAYERS=$(echo "${MODEL_ARGS[@]}" | grep -oP '(?<=--num-layers )\d+')
+NUM_LAYERS_MINUS_ONE=$((NUM_LAYERS - 1))
+MOE_LAYER_FREQ="([0]*1+[1]*${NUM_LAYERS_MINUS_ONE})*1"
+
+MOE_ARGS=(
+    --num-experts 160
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-score-function softmax
+    --moe-router-num-groups $EP_SIZE
+    --moe-router-group-topk 3
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-router-topk 6
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    --moe-router-topk-scaling-factor 16 # pre-softmax need scaling
+    --moe-aux-loss-coeff 3e-3
+    --moe-expert-capacity-factor 1
+    --moe-device-level-capacity
+    --moe-device-level-aux-loss-coeff 5e-2 
+    --moe-comm-aux-loss-coeff 2e-2
+    --moe-ffn-hidden-size 1536
+    --moe-shared-expert-intermediate-size 3072
+    --moe-layer-freq "$MOE_LAYER_FREQ"
+    --moe-grouped-gemm
+    --moe-permute-fusion
+)
+
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+    # --fp8-format hybrid
+    # --fp8-param-gather
+)
+    
+# --moe-z-loss-coeff 1e-3
+# --moe-expert-capacity-factor 4.0 
+# --moe-pad-expert-input-to-capacity
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+echo $cmd
+$cmd
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_noaux_musa.sh b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_noaux_musa.sh
new file mode 100644
index 00000000..76db08e4
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_noaux_musa.sh
@@ -0,0 +1,214 @@
+#!/bin/bash
+
+# Runs the "175B" parameter model
+
+# Please change the following envrioment variables
+# base on the cluster configuration
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+export ENABLE_PROFILER=0
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export MCCL_IB_GID_INDEX=3
+export MUSA_BLOCK_SCHEDULE_MODE=1
+export MCCL_ALGOS=1
+export MCCL_BUFFSIZE=20480000
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+# export MUSA_LAUNCH_BLOCKING=1
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 2  # 60 
+    --hidden-size 5120
+    --num-attention-heads 128
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-6 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 102400 #102400
+    --ffn-hidden-size 1536  # 12288
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std  0.006 # 0.02 in HF config, but 0.006 in the paper 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --no-bias-dropout-fusion
+    --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 1
+    --distributed-backend nccl
+    --multi-latent-attention
+    --qk-layernorm
+)
+
+MLA_ARGS=(
+    --q-lora-rank 1536
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 100000 
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+MOE_ARGS=(
+    --num-experts 160
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-topk-limited-devices 4
+    --moe-router-num-node-group 8
+    --moe-noaux-gamma 1e-3
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-complementary-seq-aux-loss
+    --moe-router-topk 6
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    --moe-router-use-sigmoid #deepseek use sigmoid
+    --moe-router-norm-topk-prob #norm topk prob with sigmoid
+    --moe-router-topk-scaling-factor 2.5 # pre-softmax need scaling
+    --moe-aux-loss-coeff 3e-3
+    --moe-ffn-hidden-size 1536
+    --moe-shared-expert-intermediate-size 3072
+    # --moe-layer-freq "([0]*1+[1]*1)*1"
+    # --moe-grouped-gemm
+)
+
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+)
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+echo $cmd
+$cmd
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/pretrain_deepseekv2.py b/megatron-lm-musa-patch/examples/deepseek-v2/pretrain_deepseekv2.py
new file mode 100644
index 00000000..0c204228
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/pretrain_deepseekv2.py
@@ -0,0 +1,306 @@
+# Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
+"""Pretrain GPT."""
+
+import os
+import torch
+from functools import partial
+from contextlib import nullcontext
+import inspect
+
+from typing import List, Optional, Tuple, Union
+# if os.getenv("ACCELERATOR_BACKEND", "musa") == "musa":
+if os.getenv("ACCELERATOR_BACKEND") == "musa":
+    import musa_patch
+else:
+    import cuda_patch
+from megatron.training import get_args
+from megatron.training import print_rank_0
+from megatron.training import get_timers
+from megatron.training import get_tokenizer
+from megatron.core import mpu
+from megatron.core.enums import ModelType
+from megatron.core.datasets.blended_megatron_dataset_builder import BlendedMegatronDatasetBuilder
+from megatron.core.datasets.utils import get_blend_from_list
+from megatron.core.datasets.gpt_dataset import GPTDatasetConfig
+from megatron.core.datasets.gpt_dataset import MockGPTDataset, GPTDataset
+from megatron.core.rerun_state_machine import get_rerun_state_machine
+import megatron.legacy.model
+from megatron.core.models.gpt import GPTModel
+from megatron.training import pretrain
+from megatron.core.utils import StragglerDetector
+from megatron.core.transformer.spec_utils import import_module
+from megatron.training.utils import (
+    get_batch_on_this_cp_rank,
+    get_batch_on_this_tp_rank,
+    get_blend_and_blend_per_split,
+)
+from megatron.training.arguments import core_transformer_config_from_args
+from megatron.training.yaml_arguments import core_transformer_config_from_yaml
+from megatron.core.models.gpt.gpt_layer_specs import (
+    get_gpt_decoder_block_spec,
+    get_gpt_layer_local_spec,
+    get_gpt_layer_with_transformer_engine_spec,
+)
+
+
+stimer = StragglerDetector()
+
+def model_provider(pre_process=True, post_process=True) -> Union[GPTModel, megatron.legacy.model.GPTModel]:
+    """Builds the model.
+
+    If you set the use_mcore_models to True, it will return the mcore GPT model and if not the legacy GPT model.
+
+    Args:
+        pre_process (bool, optional): Set to true if you need to compute embedings. Defaults to True.
+        post_process (bool, optional): Set to true if you need to want to compute output logits/loss. Defaults to True.
+
+
+    Returns:
+        Union[GPTModel, megatron.legacy.model.GPTModel]: The returned model
+    """
+    args = get_args()
+    use_te = args.transformer_impl == "transformer_engine"
+
+    if args.record_memory_history:
+        torch.cuda.memory._record_memory_history(True,
+            # keep 100,000 alloc/free events from before the snapshot
+            trace_alloc_max_entries=100000,
+
+            # record stack information for the trace events
+            trace_alloc_record_context=True)
+
+    print_rank_0('building GPT model ...')
+    # Experimental loading arguments from yaml
+    if args.yaml_cfg is not None:
+        config = core_transformer_config_from_yaml(args, "language_model")
+    else:
+        config = core_transformer_config_from_args(args)
+
+    if args.use_legacy_models:
+        model = megatron.legacy.model.GPTModel(
+            config,
+            num_tokentypes=0,
+            parallel_output=True,
+            pre_process=pre_process,
+            post_process=post_process,
+        )
+    else: # using core models
+        if args.spec is not None:
+            transformer_layer_spec = import_module(args.spec)
+        else:
+            if args.num_experts:
+                # Define the decoder block spec
+                transformer_layer_spec = get_gpt_decoder_block_spec(config, use_transformer_engine=use_te)
+            else:
+                # Define the decoder layer spec
+                if use_te:
+                    transformer_layer_spec = get_gpt_layer_with_transformer_engine_spec(
+                        args.num_experts, args.moe_grouped_gemm,
+                        args.qk_layernorm, args.multi_latent_attention, args.moe_use_legacy_grouped_gemm)
+                else:
+                    transformer_layer_spec = get_gpt_layer_local_spec(
+                        args.num_experts, args.moe_grouped_gemm,
+                        args.qk_layernorm, args.multi_latent_attention, args.moe_use_legacy_grouped_gemm)
+
+        build_model_context = nullcontext
+        build_model_context_args = {}
+        if args.fp8_param_gather:
+            try:
+                from transformer_engine.pytorch import fp8_model_init
+
+                build_model_context = fp8_model_init
+                build_model_context_args["enabled"] = True
+
+                # Check if fp8_model_init supports preserve_high_precision_init_val
+                if "preserve_high_precision_init_val" in inspect.signature(fp8_model_init).parameters:
+                    build_model_context_args["preserve_high_precision_init_val"] = True
+            except:
+                raise RuntimeError("--fp8-param-gather requires `fp8_model_init` from TransformerEngine, but not found.")
+
+        with build_model_context(**build_model_context_args):
+            model = GPTModel(
+                config=config,
+                transformer_layer_spec=transformer_layer_spec,
+                vocab_size=args.padded_vocab_size,
+                max_sequence_length=args.max_position_embeddings,
+                pre_process=pre_process,
+                post_process=post_process,
+                fp16_lm_cross_entropy=args.fp16_lm_cross_entropy,
+                parallel_output=True,
+                share_embeddings_and_output_weights=not args.untie_embeddings_and_output_weights,
+                position_embedding_type=args.position_embedding_type,
+                rotary_percent=args.rotary_percent,
+                rotary_base=args.rotary_base,
+                rope_scaling=args.use_rope_scaling
+            )
+
+    return model
+
+
+def get_batch(data_iterator):
+    """Generate a batch."""
+
+    # TODO: this is pretty hacky, find a better way
+    if (not mpu.is_pipeline_first_stage()) and (not mpu.is_pipeline_last_stage()):
+        return None, None, None, None, None
+
+    # get batches based on the TP rank you are on
+    batch = get_batch_on_this_tp_rank(data_iterator)
+
+    # slice batch along sequence dimension for context parallelism
+    batch = get_batch_on_this_cp_rank(batch)
+
+    return batch.values()
+
+
+def loss_func(loss_mask: torch.Tensor, output_tensor: torch.Tensor):
+    """Loss function.
+
+    Args:
+        loss_mask (torch.Tensor): Used to mask out some portions of the loss
+        output_tensor (torch.Tensor): The tensor with the losses
+
+    Returns:
+        the loss scalar for this micro-batch
+        the number of non-padded tokens in this microbatch
+        a dict containing reporting metrics on the loss and number of tokens across
+            the data parallel ranks
+    """
+    args = get_args()
+
+    losses = output_tensor.float()
+    loss_mask = loss_mask.view(-1).float()
+    total_tokens = loss_mask.sum()
+    loss = torch.cat([torch.sum(losses.view(-1) * loss_mask).view(1), total_tokens.view(1)])
+
+    if args.context_parallel_size > 1:
+        torch.distributed.all_reduce(loss, group=mpu.get_context_parallel_group())
+
+    # Check individual rank losses are not NaN prior to DP all-reduce.
+    rerun_state_machine = get_rerun_state_machine()
+    if args.check_for_nan_in_loss_and_grad:
+        rerun_state_machine.validate_result(
+            result=loss[0],
+            rejection_func=torch.isnan,
+            message="found NaN in local forward loss calculation",
+            tolerance=0.0,        # forward pass calculations are determinisic
+            fatal=True,
+        )
+    # Check for spiky loss
+    if args.check_for_spiky_loss:
+        rerun_state_machine.validate_result(
+            result=loss[0],
+            rejection_func=partial(rerun_state_machine.is_spiky_loss, threshold=SPIKY_LOSS_PERC),
+            message="Spiky loss",
+            tolerance=0.0,        # forward pass calculations are determinisic
+            fatal=False,
+        )
+    # Reduce loss for logging.
+    reporting_loss = loss.clone().detach()
+    if not int(os.getenv("NO_LOSS_REDUCE", 0)): #TODO:(huang.huang) will influence the loss reported Now!
+        torch.distributed.all_reduce(reporting_loss, group=mpu.get_data_parallel_group())
+
+    local_num_tokens = loss[1].clone().detach().to(torch.int)
+    return (
+        loss[0] * args.context_parallel_size,
+        local_num_tokens,
+        {'lm loss': (reporting_loss[0], reporting_loss[1])},
+    )
+
+
+def forward_step(data_iterator, model: GPTModel):
+    """Forward training step.
+
+    Args:
+        data_iterator : Input data iterator
+        model (GPTModel): The GPT Model
+    """
+    args = get_args()
+    timers = get_timers()
+
+    # Get the batch.
+    timers('batch-generator', log_level=2).start()
+    global stimer
+    with stimer(bdata=True):
+        tokens, labels, loss_mask, attention_mask, position_ids = get_batch(
+            data_iterator)
+    timers('batch-generator').stop()
+
+    with stimer:
+        output_tensor = model(tokens, position_ids, attention_mask,
+                              labels=labels)
+
+    return output_tensor, partial(loss_func, loss_mask)
+
+
+def is_dataset_built_on_rank():
+    return (
+        mpu.is_pipeline_first_stage() or mpu.is_pipeline_last_stage()
+    ) and mpu.get_tensor_model_parallel_rank() == 0
+
+
+def core_gpt_dataset_config_from_args(args):
+    tokenizer = get_tokenizer()
+
+    return GPTDatasetConfig(
+        random_seed=args.seed,
+        sequence_length=args.seq_length,
+        blend=get_blend_from_list(args.data_path),
+        blend_per_split=[
+            get_blend_from_list(args.train_data_path),
+            get_blend_from_list(args.valid_data_path),
+            get_blend_from_list(args.test_data_path)
+        ],
+        split=args.split,
+        num_dataset_builder_threads=args.num_dataset_builder_threads,
+        path_to_cache=args.data_cache_path,
+        mmap_bin_files=args.mmap_bin_files,
+        tokenizer=tokenizer,
+        reset_position_ids=args.reset_position_ids,
+        reset_attention_mask=args.reset_attention_mask,
+        eod_mask_loss=args.eod_mask_loss,
+        create_attention_mask=args.create_attention_mask_in_dataloader,
+    )
+
+
+def train_valid_test_datasets_provider(train_val_test_num_samples):
+    """Build the train test and validation datasets.
+
+    Args:
+        train_val_test_num_samples : A list containing the number of samples in train test and validation.
+    """
+    args = get_args()
+
+    config = core_gpt_dataset_config_from_args(args)
+
+    if args.mock_data:
+        dataset_type = MockGPTDataset
+    else:
+        dataset_type = GPTDataset
+
+    print_rank_0("> building train, validation, and test datasets for GPT ...")
+
+    train_ds, valid_ds, test_ds = BlendedMegatronDatasetBuilder(
+        dataset_type,
+        train_val_test_num_samples,
+        is_dataset_built_on_rank,
+        config
+    ).build()
+
+    print_rank_0("> finished creating GPT datasets ...")
+
+    return train_ds, valid_ds, test_ds
+
+
+if __name__ == "__main__":
+
+    # Temporary for transition to core datasets
+    train_valid_test_datasets_provider.is_distributed = True
+
+    pretrain(
+        train_valid_test_datasets_provider,
+        model_provider,
+        ModelType.encoder_or_decoder,
+        forward_step,
+        args_defaults={'tokenizer_type': 'GPT2BPETokenizer'},
+    )
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2.sh b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2.sh
new file mode 100755
index 00000000..ba383b16
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2.sh
@@ -0,0 +1,60 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=1
+EP_SIZE=8
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=32
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=${DATA_PATH:-"/home/dist/yehua/llama2_dataset/llama_00_text_document"}
+  HOSTFILE=./hostfile
+  LOG_FILE=$WORK_HOME/output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=${TOKENIZED_MODEL:-"/home/dist/yehua/lama2_dataset/tokenizer.model"}
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_musa.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+
+# Check if hostlist is empty
+if [ -z "$hostlist" ]; then
+  echo "Error: hostlist is empty. Please add IP addresses to the hostfile."
+  exit 1
+fi
+
+
+for host in ${hostlist[@]}; do
+  echo "Main log file: $LOG_FILE.$COUNT.$host"
+  echo "Distributed log_dir: $WORK_HOME/output_log/$RDZV_ID/$EXPNAME"
+
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+
+  echo $cmd_ssh
+
+  # eval $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_cuda.sh b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_cuda.sh
new file mode 100644
index 00000000..75a4f8b7
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_cuda.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=1
+EP_SIZE=4
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=8
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/huang.huang/datasets/deepseek/deepseekv2_dataset/deepseek_train_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/yehua/llama2_dataset/tokenizer.model
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_cuda.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_epx.sh b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_epx.sh
new file mode 100755
index 00000000..060d66e4
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_epx.sh
@@ -0,0 +1,56 @@
+#!/usr/bin/env bash
+
+SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
+DURATION_BETWEEN_TESTS=0.3
+MASTER_ADDR="10.116.36.208"
+HOST_ADDR="10.116.36.208"
+# CCP ADDR and PORT
+EPX_CCP_ADDR="$MASTER_ADDR"
+export EPX_CCP_ADDR
+EPX_CCP_PORT="9009"
+export EPX_CCP_PORT
+# STORE ADDR and PORT
+EPX_STORE_ADDR="$MASTER_ADDR"
+export EPX_STORE_ADDR
+EPX_STORE_PORT="45678"
+export EPX_STORE_PORT
+# EPX_LCP_ADDR and PORT
+export EPX_LCP_ADDR="$HOST_ADDR"
+# get epx session
+# EPX_SESSION="$(uuidgen)"
+EPX_SESSION="a0515990-ffbf-11ef-8a45-6fde377b8f7a"
+export EPX_SESSION
+# Enable EPX in Megatron-LM
+export USE_GLOO_BACKEND=0
+export USE_EPX=1
+export USE_MCCL_BACKEND=1 # epx environment
+export EPX_GROUP_RANK=8
+export GPUS_PER_NODE=8
+# MCCL_DEBUG=TRACE
+# export TORCH_CPP_LOG_LEVEL=INFO
+# export TORCH_DISTRIBUTED_DEBUG="DETAIL"
+# 10:DEBUG, 20:INFO, 30:WARNING, 40:ERROR, 50:FATAL
+export MEGATRON_LOGGING_LEVEL=30
+
+export EPX_PATH=/home/dist/epx
+EPX_STORE_PATH="${EPX_PATH}/epx-py/examples/epx_store.py"
+export PYTHONPATH=${EPX_PATH}/epx-py/python:$PYTHONPATH
+export EPX_LCP_BIN="$EPX_PATH/target/debug/epx-lcp"
+export DATA_PATH="/home/dist/llama2_dataset/llama_00_text_document"
+export TOKENIZED_MODEL="/home/dist/llama2_dataset/tokenizer.model"
+
+if [ "$MASTER_ADDR" = "$HOST_ADDR" ]; then
+    python $EPX_STORE_PATH --addr "$HOST_ADDR" &
+    STORE_PID=$!
+fi
+
+"$SCRIPT_DIR"/run_deepseekv2.sh &
+R0_PID=$!
+
+wait $R0_PID
+
+if [ "$MASTER_ADDR" = "$HOST_ADDR" ]; then
+    kill -9 $STORE_PID
+    pkill -f $EPX_STORE_PATH
+    pkill -f $EPX_STORE_PATH
+fi
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_lite_cuda.sh b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_lite_cuda.sh
new file mode 100644
index 00000000..04d35122
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_lite_cuda.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=4
+EP_SIZE=1
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=8
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/jfs/home/huang.huang/datasets/deepseek/deepseekv2_dataset/deepseek_train_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/yehua/llama2_dataset/tokenizer.model
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_lite_cuda.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_lite_cuda_n2.sh b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_lite_cuda_n2.sh
new file mode 100644
index 00000000..340a06fd
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_lite_cuda_n2.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=4
+EP_SIZE=1
+WORLD_SIZE=16
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=8
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/jfs/home/huang.huang/datasets/deepseek/deepseekv2_dataset/deepseek_train_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/yehua/llama2_dataset/tokenizer.model
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_lite_cuda.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_lite_musa.sh b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_lite_musa.sh
new file mode 100644
index 00000000..294c45c2
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2_lite_musa.sh
@@ -0,0 +1,55 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=4
+EP_SIZE=2
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=4
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/huanghuang/dataset/deepseekv2_dataset/deepseek_train_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/huanghuang/dataset/deepseekv2_dataset/llama3_tokenizer
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_lite_musa.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+for host in ${hostlist[@]}; do
+    ssh $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'" 
+    echo "$host is killed."
+done
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
+
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2noaux.sh b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2noaux.sh
new file mode 100644
index 00000000..1e7ae8f7
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/run_deepseekv2noaux.sh
@@ -0,0 +1,57 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=1
+EP_SIZE=4
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=1
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  # DATA_PATH=/home/dist/musa_tmp_share/megatron_0.9-share-hh/data/mixtral_dataset/dedup-md5-pile-pile-cc_text_document
+  # DATA_PATH=/home/dist/musa_tmp_share/dataset/deepseekv2_dataset/deepseek_train_text_document
+  DATA_PATH=/home/dist/huanghuang/dataset/deepseekv2_dataset/deepseek_train_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  # TOKENIZED_MODEL=/home/dist/musa_tmp_share/dataset/llama3_tokenizer  
+  TOKENIZED_MODEL=/home/dist/huanghuang/dataset/deepseekv2_dataset/llama3_tokenizer
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_noaux_musa.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+for host in ${hostlist[@]}; do
+    ssh $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'" 
+    echo "$host is killed."
+done
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/stop_all.sh b/megatron-lm-musa-patch/examples/deepseek-v2/stop_all.sh
new file mode 100755
index 00000000..e7274a3c
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/stop_all.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+HOSTFILE=./hostfile
+NUM_NODES=$(grep -v '^#\|^$' $HOSTFILE | wc -l)
+echo "NUM_NODES: $NUM_NODES"
+
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+    ssh -f -n $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'"  # /usr/local/bin/torchrun
+    ssh -f -n $host "pkill -f '/usr/local/bin/torchrun'"
+    echo "$host is killed."
+done
diff --git a/megatron-lm-musa-patch/examples/deepseek-v2/train_deepseekv2_single_gpu.sh b/megatron-lm-musa-patch/examples/deepseek-v2/train_deepseekv2_single_gpu.sh
new file mode 100644
index 00000000..e471b0ed
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v2/train_deepseekv2_single_gpu.sh
@@ -0,0 +1,192 @@
+#!/bin/bash
+# run without epx: bash train_deepseekv2_single_gpu.sh --dataset_dir /home/llama2_dataset --data_format fp8
+# run with epx: bash train_deepseekv2_single_gpu.sh --dataset_dir /home/llama2_dataset --data_format fp8 -u -m --cpp_port 9008
+
+# 默认参数
+DATA_FORMAT="fp8"    # default fp8
+DATASET_DIR=""       # required
+USE_EPX=0            # fault torerance
+EPX_MASTER_PROCESS=0 # fault torerance master process
+
+# print usage
+usage() {
+    echo "Usage: $0 [OPTIONS]"
+    echo "Options:"
+    echo "  --data_format      Set data format (default: fp8)."
+    echo "  --dataset_dir      Set dataset directory(required)."
+    echo "  --root_path        Set epx root path (default: /root/workspace)."
+    echo "  -d, --device_id    Set device id (default: 0)."
+    echo "  -u, --use_epx      Set use_epx (default: 0)."
+    echo "  -m, --master_proc  Set current process to be master process (default: 0)."
+    echo "  --master_addr      Set master_addr (default: host address)."
+    echo "  --ccp_port         Set ccp_port (default: 9009)."
+    echo "  --store_port       Set store_port (default: 45678)."
+    echo "  -h, --help         Show this help message and exit."
+    echo "  ============= Example: ============="
+    echo "  $0 --dataset_dir /root/workspace/llama2_dataset --data_format fp8 # run without epx"
+    echo "  $0 --dataset_dir /root/workspace/llama2_dataset --data_format fp8 \
+--use_epx --master_proc --ccp_port 9008 # run with epx"
+    echo "  $0 -h # Show this help message."
+}
+
+setup_epx_env() {
+    HOST_ADDR=$(ip addr show bond0 | grep -oP 'inet \K[\d.]+' | head -1)
+    MASTER_ADDR=${MASER_ADDR:-$HOST_ADDR} # set master addr default to host addr
+
+    echo "EPX HOST_ADDR: $HOST_ADDR"
+    echo "EPX MASTER_ADDR: $MASTER_ADDR"
+
+    export EPX_CCP_ADDR="$MASTER_ADDR"
+    export EPX_CCP_PORT=${EPX_CCP_PORT:-9009}
+    export EPX_STORE_ADDR="$MASTER_ADDR"
+    export EPX_STORE_PORT=${EPX_STORE_PORT:-45678}
+    export EPX_LCP_ADDR="$HOST_ADDR"
+    export EPX_SESSION="a0515990-ffbf-11ef-8a45-6fde377b8f7a"
+    export EPX_GROUP_RANK=1
+
+    export USE_EPX=$USE_EPX
+
+    ROOT_PATH=${ROOT_PATH:-"/root/workspace"}
+    EPX_PATH=$ROOT_PATH/epx
+    EPX_STORE_PATH="${EPX_PATH}/epx-py/examples/epx_store.py"
+
+    export PYTHONPATH=${EPX_PATH}/epx-py/python:$PYTHONPATH
+    export EPX_LCP_BIN="$EPX_PATH/target/debug/epx-lcp"
+
+    if [ "$EPX_MASTER_PROCESS" -ne 0 ]; then
+        python  $EPX_STORE_PATH --addr "$HOST_ADDR" &
+        STORE_PID=$!
+    fi
+}
+
+# parse command-line arguments
+while [[ $# -gt 0 ]]; do
+    case "$1" in
+        --data_format)
+            DATA_FORMAT="$2"
+            shift
+            ;;
+        --dataset_dir)
+            DATASET_DIR="$2"
+            shift
+            ;;
+        --root_path)
+            ROOT_PATH="$2"
+            shift
+            ;;
+        -d|--device_id)
+            MUSA_VISIBLE_DEVICES="$2"
+            shift
+            ;;
+        -u|--use_epx)
+            USE_EPX=1
+            ;;
+        -m|--master_proc)
+            EPX_MASTER_PROCESS=1
+            ;;
+        --master_addr)
+            MASTER_ADDR="$2"
+            shift
+            ;;
+        --ccp_port)
+            EPX_CCP_PORT="$2"
+            shift
+            ;;
+        --store_port)
+            EPX_STORE_PORT="$2"
+            shift
+            ;;
+        -h|--help)
+            usage
+            exit 0
+            ;;
+        *)
+            echo "Unknown option: $1"
+            exit 1
+            ;;
+    esac
+    shift
+done
+
+if [[ "$USE_EPX" -ne 0 ]]; then
+    setup_epx_env
+fi
+
+# arguments check
+if [[ -z "$DATASET_DIR" ]]; then
+    echo "Error: --dataset_dir is required"
+    exit 1
+fi
+
+# validate data format
+if [[ "$DATA_FORMAT" != "fp8" && "$DATA_FORMAT" != "bf16" ]]; then
+    echo "Error: --data_format must be 'fp8' or 'bf16'"
+    exit 1
+fi
+
+# generate unique ID
+CURRENT_TIME=$(date "+%Y%m%d_%H%M%S")
+mkdir -p "./output/$CURRENT_TIME"
+
+# training parameters
+TP_SIZE=1
+PP_SIZE=1
+EP_SIZE=1
+WORLD_SIZE=1
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=32
+(( DP_SIZE = WORLD_SIZE / (TP_SIZE * PP_SIZE) ))
+(( GLOBAL_BATCH_SIZE = MICRO_BATCH_SIZE * NUM_MICROBATCHES * DP_SIZE ))
+export GPUS_PER_NODE=1
+export MOE_NUM_EXPERTS=20
+export MOE_ROUTER_GROUP_TOPK=1
+export MUSA_VISIBLE_DEVICES=${MUSA_VISIBLE_DEVICES:-0}
+
+# generate hostfile
+ip a | grep -oP 'inet \K[\d.]+' | grep -v '^127\.' | head -1 > hostfile
+
+# set env variable
+WORK_HOME="$PWD"
+PATCH_HOME="$PWD/../.."
+EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}_${DATA_FORMAT}"
+DATA_PATH="${DATASET_DIR}/llama_00_text_document"
+HOSTFILE="./hostfile"
+LOG_FILE="./output/$CURRENT_TIME/$EXPNAME.log"
+TOKENIZED_MODEL="${DATASET_DIR}/tokenizer.model"
+SCRIPT_FILE="./deepseek-v2-lite/run_pretrain_deepseekv2_musa.sh"
+RDZV_ID="$CURRENT_TIME"
+
+# Precision-related configuration
+if [[ "$DATA_FORMAT" == "bf16" ]]; then
+    # remove FP8 parameters
+    sed -i '/--fp8-format hybrid/d; /--fp8-param-gather/d' "$SCRIPT_FILE"
+
+    # add no-gradient-accumulation-fusion parameter
+    sed -i '/no-gradient-accumulation-fusion/c\    --no-gradient-accumulation-fusion' "$SCRIPT_FILE"
+
+    echo "Enabled BF16 mode with recompute optimizations"
+fi
+
+# training cmd
+cmd="bash -c 'cd $WORK_HOME && \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID'"
+
+echo "=== Training Configuration ==="
+echo "Dataset dir: $DATASET_DIR"
+echo "Data format: $DATA_FORMAT"
+echo "Hostfile: $(cat hostfile)"
+echo "Global batch size: $GLOBAL_BATCH_SIZE"
+echo "Command:"
+echo "$cmd"
+eval "$cmd" &
+EPX_PID=$!
+
+wait $EPX_PID
+
+if [ "$USE_EPX" -ne 0 ] && [ "$EPX_MASTER_PROCESS" -ne 0 ]; then
+    kill -9 $STORE_PID
+    pkill -f $EPX_STORE_PATH
+    pkill -f $EPX_STORE_PATH
+fi
diff --git a/megatron-lm-musa-patch/examples/deepseek-v3/deepseek-v3-lite/run_pretrain_deepseekv3_musa.sh b/megatron-lm-musa-patch/examples/deepseek-v3/deepseek-v3-lite/run_pretrain_deepseekv3_musa.sh
new file mode 100644
index 00000000..797d1a11
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v3/deepseek-v3-lite/run_pretrain_deepseekv3_musa.sh
@@ -0,0 +1,221 @@
+#!/bin/bash
+
+# Runs the "175B" parameter model
+
+# Please change the following envrioment variables
+# base on the cluster configuration
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+export ENABLE_PROFILER=0
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export MCCL_IB_GID_INDEX=3
+export MUSA_BLOCK_SCHEDULE_MODE=1
+export MCCL_ALGOS=1
+export MCCL_BUFFSIZE=20480000
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+# export MUSA_LAUNCH_BLOCKING=1
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 1  # 61 
+    --hidden-size 7168
+    --num-attention-heads 128
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-6 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 129280
+    --ffn-hidden-size 2048  # 18432 for groupGEMM; 2048 for sequentialMLP
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std  0.006 # 0.02 in HF config, but 0.006 in the paper 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --no-bias-dropout-fusion
+    --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 1
+    --distributed-backend nccl
+    --multi-latent-attention
+    --qk-layernorm
+)
+
+MLA_ARGS=(
+    --q-lora-rank 1536
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 2.2e-4 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 100000 
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+MOE_ARGS=(
+    --num-experts 256
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-topk-limited-devices 4
+    --moe-router-num-node-group 8 #in fact, should be ep/8
+    --moe-noaux-gamma 1e-2 #1e-3
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-complementary-seq-aux-loss
+    --moe-router-topk 8
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    --moe-router-use-sigmoid #deepseek use sigmoid
+    --moe-router-norm-topk-prob #norm topk prob with sigmoid
+    --moe-router-topk-scaling-factor 2.5 # pre-softmax need scaling
+    --moe-aux-loss-coeff 3e-3
+    --moe-ffn-hidden-size 2048
+    --moe-shared-expert-intermediate-size 2048
+    # --moe-layer-freq "([0]*1+[1]*1)*1"
+    # --moe-grouped-gemm
+)
+
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+)
+    
+MULTI_TOKEN_PREDICTION_ARGS=(
+    --use-multi-token-prediction
+    --mtp-coeff 1e-4
+    --mtp-depth 1
+)
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]} \
+        ${MULTI_TOKEN_PREDICTION_ARGS[@]}
+    "
+echo $cmd
+$cmd
diff --git a/megatron-lm-musa-patch/examples/deepseek-v3/pretrain_deepseekv2.py b/megatron-lm-musa-patch/examples/deepseek-v3/pretrain_deepseekv2.py
new file mode 100644
index 00000000..d05eef8f
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v3/pretrain_deepseekv2.py
@@ -0,0 +1,314 @@
+# Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
+"""Pretrain GPT."""
+
+import os
+import torch
+from functools import partial
+from contextlib import nullcontext
+import inspect
+
+from typing import List, Optional, Tuple, Union
+if os.getenv("ACCELERATOR_BACKEND", "musa") == "musa":
+    import musa_patch
+else:
+    import cuda_patch
+from megatron.training import get_args
+from megatron.training import print_rank_0
+from megatron.training import get_timers
+from megatron.training import get_tokenizer
+from megatron.core import mpu
+from megatron.core.enums import ModelType
+from megatron.core.datasets.blended_megatron_dataset_builder import BlendedMegatronDatasetBuilder
+from megatron.core.datasets.utils import get_blend_from_list
+from megatron.core.datasets.gpt_dataset import GPTDatasetConfig
+from megatron.core.datasets.gpt_dataset import MockGPTDataset, GPTDataset
+from megatron.core.rerun_state_machine import get_rerun_state_machine
+import megatron.legacy.model
+from megatron.core.models.gpt import GPTModel
+from megatron.training import pretrain
+from megatron.core.utils import StragglerDetector
+from megatron.core.transformer.spec_utils import import_module
+from megatron.training.utils import (
+    get_batch_on_this_cp_rank,
+    get_batch_on_this_tp_rank,
+    get_blend_and_blend_per_split,
+)
+from megatron.training.arguments import core_transformer_config_from_args
+from megatron.training.yaml_arguments import core_transformer_config_from_yaml
+from megatron.core.models.gpt.gpt_layer_specs import (
+    get_gpt_decoder_block_spec,
+    get_gpt_layer_local_spec,
+    get_gpt_layer_with_transformer_engine_spec,
+)
+
+
+stimer = StragglerDetector()
+
+def model_provider(pre_process=True, post_process=True) -> Union[GPTModel, megatron.legacy.model.GPTModel]:
+    """Builds the model.
+
+    If you set the use_mcore_models to True, it will return the mcore GPT model and if not the legacy GPT model.
+
+    Args:
+        pre_process (bool, optional): Set to true if you need to compute embedings. Defaults to True.
+        post_process (bool, optional): Set to true if you need to want to compute output logits/loss. Defaults to True.
+
+
+    Returns:
+        Union[GPTModel, megatron.legacy.model.GPTModel]: The returned model
+    """
+    args = get_args()
+    use_te = args.transformer_impl == "transformer_engine"
+
+    if args.record_memory_history:
+        torch.cuda.memory._record_memory_history(True,
+            # keep 100,000 alloc/free events from before the snapshot
+            trace_alloc_max_entries=100000,
+
+            # record stack information for the trace events
+            trace_alloc_record_context=True)
+        
+    print_rank_0('building GPT model ...')
+    # Experimental loading arguments from yaml
+    if args.yaml_cfg is not None:
+        config = core_transformer_config_from_yaml(args, "language_model")
+    else:
+        config = core_transformer_config_from_args(args)
+
+    if args.use_legacy_models:
+        model = megatron.legacy.model.GPTModel(
+            config,
+            num_tokentypes=0,
+            parallel_output=True,
+            pre_process=pre_process,
+            post_process=post_process,
+        )
+    else: # using core models
+        if args.spec is not None:
+            transformer_layer_spec = import_module(args.spec)
+        else:
+            if args.num_experts:
+                # Define the decoder block spec
+                transformer_layer_spec = get_gpt_decoder_block_spec(config, use_transformer_engine=use_te)
+            else:
+                # Define the decoder layer spec
+                if use_te:
+                    transformer_layer_spec = get_gpt_layer_with_transformer_engine_spec(
+                        args.num_experts, args.moe_grouped_gemm,
+                        args.qk_layernorm, args.multi_latent_attention, args.moe_use_legacy_grouped_gemm)
+                else:
+                    transformer_layer_spec = get_gpt_layer_local_spec(
+                        args.num_experts, args.moe_grouped_gemm,
+                        args.qk_layernorm, args.multi_latent_attention, args.moe_use_legacy_grouped_gemm)
+
+        build_model_context = nullcontext
+        build_model_context_args = {}
+        if args.fp8_param_gather:
+            try:
+                from transformer_engine.pytorch import fp8_model_init
+
+                build_model_context = fp8_model_init
+                build_model_context_args["enabled"] = True
+
+                # Check if fp8_model_init supports preserve_high_precision_init_val
+                if "preserve_high_precision_init_val" in inspect.signature(fp8_model_init).parameters:
+                    build_model_context_args["preserve_high_precision_init_val"] = True
+            except:
+                raise RuntimeError("--fp8-param-gather requires `fp8_model_init` from TransformerEngine, but not found.")
+
+        with build_model_context(**build_model_context_args):
+            model = GPTModel(
+                config=config,
+                transformer_layer_spec=transformer_layer_spec,
+                vocab_size=args.padded_vocab_size,
+                max_sequence_length=args.max_position_embeddings,
+                pre_process=pre_process,
+                post_process=post_process,
+                fp16_lm_cross_entropy=args.fp16_lm_cross_entropy,
+                parallel_output=True,
+                share_embeddings_and_output_weights=not args.untie_embeddings_and_output_weights,
+                position_embedding_type=args.position_embedding_type,
+                rotary_percent=args.rotary_percent,
+                rotary_base=args.rotary_base,
+                rope_scaling=args.use_rope_scaling
+            )
+
+    return model
+
+
+def get_batch(data_iterator):
+    """Generate a batch."""
+
+    # TODO: this is pretty hacky, find a better way
+    if (not mpu.is_pipeline_first_stage()) and (not mpu.is_pipeline_last_stage()):
+        return None, None, None, None, None
+
+    # get batches based on the TP rank you are on
+    batch = get_batch_on_this_tp_rank(data_iterator)
+
+    # slice batch along sequence dimension for context parallelism
+    batch = get_batch_on_this_cp_rank(batch)
+
+    return batch.values()
+
+
+def loss_func(loss_mask: torch.Tensor, output_tensor: Union[torch.Tensor, tuple]):
+    """Loss function.
+
+    Args:
+        loss_mask (torch.Tensor): Used to mask out some portions of the loss
+        output_tensor (torch.Tensor): The tensor with the losses
+
+    Returns:
+        the loss scalar for this micro-batch
+        the number of non-padded tokens in this microbatch
+        a dict containing reporting metrics on the loss and number of tokens across
+            the data parallel ranks
+    """
+    args = get_args()
+    if args.use_multi_token_prediction:
+        output_tensor, mtp_losses = output_tensor
+        mtp_loss_masked = []
+        for mtp_depth, mtp_loss in enumerate(mtp_losses):
+            cur_mask = loss_mask.clone()
+            cur_mask[:, :mtp_depth + 1] = 0
+            mtp_loss_masked.append(loss_mask * mtp_loss)
+        mtp_loss_masked = torch.sum(torch.concat(mtp_loss_masked, dim=1).float())
+    losses = output_tensor.float()
+    loss_mask = loss_mask.view(-1).float()
+    total_tokens = loss_mask.sum()
+    if args.use_multi_token_prediction:
+        loss = torch.cat([torch.sum(losses.view(-1) * loss_mask).view(1) + args.mtp_coeff * mtp_loss_masked, total_tokens.view(1)])
+    else:    
+        loss = torch.cat([torch.sum(losses.view(-1) * loss_mask).view(1), total_tokens.view(1)])
+
+    if args.context_parallel_size > 1:
+        torch.distributed.all_reduce(loss, group=mpu.get_context_parallel_group())
+
+    # Check individual rank losses are not NaN prior to DP all-reduce.
+    rerun_state_machine = get_rerun_state_machine()
+    if args.check_for_nan_in_loss_and_grad:
+        rerun_state_machine.validate_result(
+            result=loss[0],
+            rejection_func=torch.isnan,
+            message="found NaN in local forward loss calculation",
+            tolerance=0.0,        # forward pass calculations are determinisic
+            fatal=True,
+        )
+    # Check for spiky loss
+    if args.check_for_spiky_loss:
+        rerun_state_machine.validate_result(
+            result=loss[0],
+            rejection_func=partial(rerun_state_machine.is_spiky_loss, threshold=SPIKY_LOSS_PERC),
+            message="Spiky loss",
+            tolerance=0.0,        # forward pass calculations are determinisic
+            fatal=False,
+        )
+    # Reduce loss for logging.
+    reporting_loss = loss.clone().detach()
+    torch.distributed.all_reduce(reporting_loss, group=mpu.get_data_parallel_group())
+
+    local_num_tokens = loss[1].clone().detach().to(torch.int)
+    return (
+        loss[0] * args.context_parallel_size,
+        local_num_tokens,
+        {'lm loss': (reporting_loss[0], reporting_loss[1])},
+    )
+
+
+def forward_step(data_iterator, model: GPTModel):
+    """Forward training step.
+
+    Args:
+        data_iterator : Input data iterator
+        model (GPTModel): The GPT Model
+    """
+    args = get_args()
+    timers = get_timers()
+
+    # Get the batch.
+    timers('batch-generator', log_level=2).start()
+    global stimer
+    with stimer(bdata=True):
+        tokens, labels, loss_mask, attention_mask, position_ids = get_batch(
+            data_iterator)
+    timers('batch-generator').stop()
+
+    with stimer:
+        output_tensor = model(tokens, position_ids, attention_mask,
+                              labels=labels)
+
+    return output_tensor, partial(loss_func, loss_mask)
+
+
+def is_dataset_built_on_rank():
+    return (
+        mpu.is_pipeline_first_stage() or mpu.is_pipeline_last_stage()
+    ) and mpu.get_tensor_model_parallel_rank() == 0
+
+
+def core_gpt_dataset_config_from_args(args):
+    tokenizer = get_tokenizer()
+
+    return GPTDatasetConfig(
+        random_seed=args.seed,
+        sequence_length=args.seq_length,
+        blend=get_blend_from_list(args.data_path),
+        blend_per_split=[
+            get_blend_from_list(args.train_data_path),
+            get_blend_from_list(args.valid_data_path),
+            get_blend_from_list(args.test_data_path)
+        ],
+        split=args.split,
+        num_dataset_builder_threads=args.num_dataset_builder_threads,
+        path_to_cache=args.data_cache_path,
+        mmap_bin_files=args.mmap_bin_files,
+        tokenizer=tokenizer,
+        reset_position_ids=args.reset_position_ids,
+        reset_attention_mask=args.reset_attention_mask,
+        eod_mask_loss=args.eod_mask_loss,
+        create_attention_mask=args.create_attention_mask_in_dataloader,
+    )
+
+
+def train_valid_test_datasets_provider(train_val_test_num_samples):
+    """Build the train test and validation datasets.
+
+    Args:
+        train_val_test_num_samples : A list containing the number of samples in train test and validation.
+    """
+    args = get_args()
+
+    config = core_gpt_dataset_config_from_args(args)
+
+    if args.mock_data:
+        dataset_type = MockGPTDataset
+    else:
+        dataset_type = GPTDataset
+
+    print_rank_0("> building train, validation, and test datasets for GPT ...")
+
+    train_ds, valid_ds, test_ds = BlendedMegatronDatasetBuilder(
+        dataset_type,
+        train_val_test_num_samples,
+        is_dataset_built_on_rank,
+        config
+    ).build()
+
+    print_rank_0("> finished creating GPT datasets ...")
+
+    return train_ds, valid_ds, test_ds
+
+
+if __name__ == "__main__":
+
+    # Temporary for transition to core datasets
+    train_valid_test_datasets_provider.is_distributed = True
+
+    pretrain(
+        train_valid_test_datasets_provider,
+        model_provider,
+        ModelType.encoder_or_decoder,
+        forward_step,
+        args_defaults={'tokenizer_type': 'GPT2BPETokenizer'},
+    )
diff --git a/megatron-lm-musa-patch/examples/deepseek-v3/run_deepseekv3.sh b/megatron-lm-musa-patch/examples/deepseek-v3/run_deepseekv3.sh
new file mode 100644
index 00000000..279d5b3d
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v3/run_deepseekv3.sh
@@ -0,0 +1,57 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=1
+EP_SIZE=4
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=16
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  # DATA_PATH=/home/dist/musa_tmp_share/megatron_0.9-share-hh/data/mixtral_dataset/dedup-md5-pile-pile-cc_text_document
+  # DATA_PATH=/home/dist/musa_tmp_share/dataset/deepseekv2_dataset/deepseek_train_text_document
+  DATA_PATH=/home/dist/huanghuang/dataset/deepseekv2_dataset/deepseek_train_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  # TOKENIZED_MODEL=/home/dist/musa_tmp_share/dataset/llama3_tokenizer  
+  TOKENIZED_MODEL=/home/dist/huanghuang/dataset/deepseekv2_dataset/llama3_tokenizer
+  SCRIPT_FILE=./deepseek-v3-lite/run_pretrain_deepseekv3_musa.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+for host in ${hostlist[@]}; do
+    ssh $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'" 
+    echo "$host is killed."
+done
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/examples/deepseek-v3/stop_all.sh b/megatron-lm-musa-patch/examples/deepseek-v3/stop_all.sh
new file mode 100755
index 00000000..e7274a3c
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/deepseek-v3/stop_all.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+HOSTFILE=./hostfile
+NUM_NODES=$(grep -v '^#\|^$' $HOSTFILE | wc -l)
+echo "NUM_NODES: $NUM_NODES"
+
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+    ssh -f -n $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'"  # /usr/local/bin/torchrun
+    ssh -f -n $host "pkill -f '/usr/local/bin/torchrun'"
+    echo "$host is killed."
+done
diff --git a/megatron-lm-musa-patch/examples/llama2/7B/run_pretrain_llama2_cuda.sh b/megatron-lm-musa-patch/examples/llama2/7B/run_pretrain_llama2_cuda.sh
new file mode 100644
index 00000000..07fe5a6f
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/7B/run_pretrain_llama2_cuda.sh
@@ -0,0 +1,181 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  MICRO_BATCH_SIZE=$8
+  GLOBAL_BATCH_SIZE=$9
+  TOKENIZED_MODEL=${10}
+set +u
+
+export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
+export OMP_NUM_THREADS=4
+export CUDA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export ACCELERATOR_BACKEND="cuda"
+# export NCCL_PROTOS=2
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export NCCL_AVOID_RECORD_STREAMS=0
+MEGATRON_PATH=${PATCH_HOME}/Megatron-LM-240521
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR/oscar_9_text_document
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+
+# export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1)
+export GPUS_PER_NODE=8
+export NODE_ADDR="127.0.0.1"
+
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+#export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+# export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks[$NODE_ADDR];}' $HOSTFILE)
+export NODE_RANK=0
+
+export MASTER_PORT=12355
+
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+)
+
+MODEL_ARGS=(
+    --num-layers 32 
+    --hidden-size 4096 
+    --num-attention-heads 32 
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --init-method-std 0.01 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.0165 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl transformer_engine
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type=SentencePieceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 10000000
+    --eval-interval 100000 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_gpt.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/examples/llama2/7B/run_pretrain_llama2_musa.sh b/megatron-lm-musa-patch/examples/llama2/7B/run_pretrain_llama2_musa.sh
new file mode 100644
index 00000000..7e0b26d2
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/7B/run_pretrain_llama2_musa.sh
@@ -0,0 +1,185 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  MICRO_BATCH_SIZE=$8
+  GLOBAL_BATCH_SIZE=${9}
+  TOKENIZED_MODEL=${10}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+# export MUSA_LAUNCH_BLOCKING=1
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+# export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks[$NODE_ADDR];}' $HOSTFILE)
+export MASTER_PORT=14388
+# export MUSA_LAUNCH_BLOCKING=1
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+)
+
+MODEL_ARGS=(
+    --num-layers 32
+    --hidden-size 4096 
+    --ffn-hidden-size 14336
+    --num-attention-heads 32 
+    --group-query-attention 
+    --num-query-groups 8
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.008
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --no-bias-dropout-fusion
+    --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl transformer_engine
+)
+    # --no-rope-fusion
+
+# --transformer-impl local transformer_engine
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type Llama2Tokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 200000 
+    --eval-interval 1000 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_gpt.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/examples/llama2/dist_run_pretrain_megatron_llama2.sh b/megatron-lm-musa-patch/examples/llama2/dist_run_pretrain_megatron_llama2.sh
new file mode 100644
index 00000000..5c093bfb
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/dist_run_pretrain_megatron_llama2.sh
@@ -0,0 +1,57 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=4
+PP_SIZE=1
+WORLD_SIZE=4
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=1
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME=/data2/yutian.rong/projects/megatron-lm-musa-patch/examples/llama2
+  PATCH_HOME=/data2/yutian.rong/projects/megatron-lm-musa-patch
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/data0/haoran.huang/oscar
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=./llama_config/tokenizer.model
+  SCRIPT_FILE=./7b/run_pretrain_llama2_cuda.sh
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+# for host in ${hostlist[@]}; do
+#     ssh $host "pkill -f '/usr/local/bin/torchrun'" 
+#     echo "$host is killed."
+# done
+
+# COUNT=0
+# hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+# for host in ${hostlist[@]}; do
+
+#   cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+#   echo $cmd_ssh
+#   ssh -f -n $host $cmd_ssh
+#   # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+#   # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+#   ((COUNT++))
+# done
+
+cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+
+echo $cmd_ssh
+eval $cmd_ssh
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/llama2/dist_run_pretrain_megatron_llama2_musa.sh b/megatron-lm-musa-patch/examples/llama2/dist_run_pretrain_megatron_llama2_musa.sh
new file mode 100644
index 00000000..fa5e30e1
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/dist_run_pretrain_megatron_llama2_musa.sh
@@ -0,0 +1,47 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=4
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=16
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/yehua/dataset/llama2_dataset/llama_00_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/yehua/dataset/llama2_dataset/tokenizer.model
+  SCRIPT_FILE=./7B/run_pretrain_llama2_musa.sh
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/examples/llama2/llama_config/config.json b/megatron-lm-musa-patch/examples/llama2/llama_config/config.json
new file mode 100644
index 00000000..0ead6ba1
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/llama_config/config.json
@@ -0,0 +1 @@
+{"architectures": ["LLaMAForCausalLM"], "bos_token_id": 0, "eos_token_id": 1, "hidden_act": "silu", "hidden_size": 768, "intermediate_size": 3072, "initializer_range": 0.02, "max_sequence_length": 1024, "model_type": "llama", "num_attention_heads": 12, "num_hidden_layers": 12, "pad_token_id": -1, "rms_norm_eps": 1e-06, "torch_dtype": "float16", "transformers_version": "4.27.0.dev0", "use_cache": true, "vocab_size": 32000}
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/llama2/llama_config/config150m.json b/megatron-lm-musa-patch/examples/llama2/llama_config/config150m.json
new file mode 100644
index 00000000..195ffc4b
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/llama_config/config150m.json
@@ -0,0 +1 @@
+{"architectures": ["LLaMAForCausalLM"], "bos_token_id": 0, "eos_token_id": 1, "hidden_act": "silu", "hidden_size": 768, "intermediate_size": 2304, "initializer_range": 0.02, "max_sequence_length": 2048, "model_type": "llama", "num_attention_heads": 12, "num_hidden_layers": 8, "pad_token_id": -1, "rms_norm_eps": 1e-06, "torch_dtype": "float16", "transformers_version": "4.27.0.dev0", "use_cache": true, "vocab_size": 64000}
diff --git a/megatron-lm-musa-patch/examples/llama2/llama_config/config1b.json b/megatron-lm-musa-patch/examples/llama2/llama_config/config1b.json
new file mode 100644
index 00000000..4f2c4cb6
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/llama_config/config1b.json
@@ -0,0 +1 @@
+{"architectures": ["LLaMAForCausalLM"], "bos_token_id": 0, "eos_token_id": 1, "hidden_act": "silu", "hidden_size": 1600, "intermediate_size": 4800, "initializer_range": 0.02, "max_sequence_length": 2048, "model_type": "llama", "num_attention_heads": 25, "num_hidden_layers": 32, "pad_token_id": -1, "rms_norm_eps": 1e-06, "torch_dtype": "float16", "transformers_version": "4.27.0.dev0", "use_cache": true, "vocab_size": 32000}
diff --git a/megatron-lm-musa-patch/examples/llama2/llama_config/config7b.json b/megatron-lm-musa-patch/examples/llama2/llama_config/config7b.json
new file mode 100644
index 00000000..2dd3641c
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/llama_config/config7b.json
@@ -0,0 +1 @@
+{"architectures": ["LLaMAForCausalLM"], "bos_token_id": 0, "eos_token_id": 1, "hidden_act": "silu", "hidden_size": 4096, "intermediate_size": 11008, "initializer_range": 0.02, "max_sequence_length": 2048, "model_type": "llama", "num_attention_heads": 32, "num_hidden_layers": 32, "pad_token_id": -1, "rms_norm_eps": 1e-06, "torch_dtype": "float16", "transformers_version": "4.27.0.dev0", "use_cache": true, "vocab_size": 32000}
diff --git a/megatron-lm-musa-patch/examples/llama2/llama_config/generation_config.json b/megatron-lm-musa-patch/examples/llama2/llama_config/generation_config.json
new file mode 100644
index 00000000..fcac46fd
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/llama_config/generation_config.json
@@ -0,0 +1 @@
+{"_from_model_config": true, "bos_token_id": 0, "eos_token_id": 1, "pad_token_id": 0, "transformers_version": "4.27.0.dev0"}
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/llama2/llama_config/special_tokens_map.json b/megatron-lm-musa-patch/examples/llama2/llama_config/special_tokens_map.json
new file mode 100644
index 00000000..9e26dfee
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/llama_config/special_tokens_map.json
@@ -0,0 +1 @@
+{}
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/llama2/llama_config/tokenizer.model b/megatron-lm-musa-patch/examples/llama2/llama_config/tokenizer.model
new file mode 100644
index 0000000000000000000000000000000000000000..22bccbcb41ec929cf0c9dbe8f41036db82e5e773
GIT binary patch
literal 499723
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
F{{wFJg8={l

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/llama_config/tokenizer_config.json b/megatron-lm-musa-patch/examples/llama2/llama_config/tokenizer_config.json
new file mode 100644
index 00000000..1aabb918
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/llama_config/tokenizer_config.json
@@ -0,0 +1 @@
+{"bos_token": "", "eos_token": "", "model_max_length": 1000000000000000019884624838656, "tokenizer_class": "LLaMATokenizer", "unk_token": ""}
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/llama2/pretrain_gpt.py b/megatron-lm-musa-patch/examples/llama2/pretrain_gpt.py
new file mode 100644
index 00000000..41bb4184
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/pretrain_gpt.py
@@ -0,0 +1,274 @@
+# Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
+"""Pretrain GPT."""
+
+import os
+import torch
+from functools import partial
+from contextlib import nullcontext
+import inspect
+
+from typing import Union
+if os.getenv("ACCELERATOR_BACKEND", "musa") == "musa":
+    import musa_patch
+else:
+    pass
+from megatron.training import get_args
+from megatron.training import print_rank_0
+from megatron.training import get_timers
+from megatron.training import get_tokenizer
+from megatron.core import mpu
+from megatron.core.enums import ModelType
+from megatron.core.datasets.blended_megatron_dataset_builder import BlendedMegatronDatasetBuilder
+from megatron.core.datasets.utils import get_blend_from_list
+from megatron.core.datasets.gpt_dataset import GPTDatasetConfig
+from megatron.core.datasets.gpt_dataset import MockGPTDataset, GPTDataset
+import megatron.legacy.model
+from megatron.core.models.gpt import GPTModel
+from megatron.training import pretrain
+from megatron.core.utils import StragglerDetector
+from megatron.core.transformer.spec_utils import import_module
+from megatron.training.utils import (
+    get_batch_on_this_cp_rank,
+    get_batch_on_this_tp_rank,
+)
+from megatron.training.arguments import core_transformer_config_from_args
+from megatron.training.yaml_arguments import core_transformer_config_from_yaml
+from megatron.core.models.gpt.gpt_layer_specs import (
+    get_gpt_layer_local_spec,
+    get_gpt_layer_with_transformer_engine_spec,
+)
+
+
+stimer = StragglerDetector()
+
+def model_provider(pre_process=True, post_process=True) -> Union[GPTModel, megatron.legacy.model.GPTModel]:
+    """Builds the model.
+
+    If you set the use_legacy_models to True, it will return the legacy GPT model and if not the mcore GPT model.
+
+    Args:
+        pre_process (bool, optional): Set to true if you need to compute embedings. Defaults to True.
+        post_process (bool, optional): Set to true if you need to want to compute output logits/loss. Defaults to True.
+
+
+    Returns:
+        Union[GPTModel, megatron.legacy.model.GPTModel]: The returned model
+    """
+    args = get_args()
+    use_te = args.transformer_impl == "transformer_engine"
+
+    print_rank_0('building GPT model ...')
+    # Experimental loading arguments from yaml
+    if args.yaml_cfg is not None:
+        config = core_transformer_config_from_yaml(args, "language_model")
+    else:
+        config = core_transformer_config_from_args(args)
+
+    if args.use_legacy_models:
+        model = megatron.legacy.model.GPTModel(
+            config,
+            num_tokentypes=0,
+            parallel_output=True,
+            pre_process=pre_process,
+            post_process=post_process,
+        )
+    else: # using core models
+        if args.spec is not None:
+            transformer_layer_spec = import_module(args.spec)
+        else:
+            if use_te:
+                transformer_layer_spec = get_gpt_layer_with_transformer_engine_spec(args.num_experts, args.moe_grouped_gemm, args.qk_layernorm, args.fp8)
+            else:
+                transformer_layer_spec = get_gpt_layer_local_spec(args.num_experts, args.moe_grouped_gemm, args.qk_layernorm)
+
+        build_model_context = nullcontext
+        build_model_context_args = {}
+        if args.fp8_param_gather:
+            try:
+                from transformer_engine.pytorch import fp8_model_init
+
+                build_model_context = fp8_model_init
+                build_model_context_args["enabled"] = True
+
+                # Check if fp8_model_init supports preserve_high_precision_init_val
+                if "preserve_high_precision_init_val" in inspect.signature(fp8_model_init).parameters:
+                    build_model_context_args["preserve_high_precision_init_val"] = True
+            except:
+                raise RuntimeError("--fp8-param-gather requires `fp8_model_init` from TransformerEngine, but not found.")
+
+        with build_model_context(**build_model_context_args):
+            model = GPTModel(
+                config=config,
+                transformer_layer_spec=transformer_layer_spec,
+                vocab_size=args.padded_vocab_size,
+                max_sequence_length=args.max_position_embeddings,
+                pre_process=pre_process,
+                post_process=post_process,
+                fp16_lm_cross_entropy=args.fp16_lm_cross_entropy,
+                parallel_output=True,
+                share_embeddings_and_output_weights=not args.untie_embeddings_and_output_weights,
+                position_embedding_type=args.position_embedding_type,
+                rotary_percent=args.rotary_percent,
+                rotary_base=args.rotary_base
+            )
+
+    return model
+
+
+def get_batch(data_iterator):
+    """Generate a batch."""
+
+    # TODO: this is pretty hacky, find a better way
+    if (not mpu.is_pipeline_first_stage()) and (not mpu.is_pipeline_last_stage()):
+        return None, None, None, None, None
+
+    # get batches based on the TP rank you are on
+    batch = get_batch_on_this_tp_rank(data_iterator)
+
+    # slice batch along sequence dimension for context parallelism
+    batch = get_batch_on_this_cp_rank(batch)
+
+    return batch.values()
+
+
+def loss_func(loss_mask: torch.Tensor, output_tensor: torch.Tensor):
+    """Loss function.
+
+    Args:
+        loss_mask (torch.Tensor): Used to mask out some portions of the loss
+        output_tensor (torch.Tensor): The tensor with the losses
+
+    Returns:
+        the loss scalar for this micro-batch
+        the number of non-padded tokens in this microbatch
+        a dict containing reporting metrics on the loss and number of tokens across
+            the data parallel ranks
+    """
+    args = get_args()
+
+    losses = output_tensor.float()
+    loss_mask = loss_mask.view(-1).float()
+    total_tokens = loss_mask.sum()
+    loss = torch.cat([torch.sum(losses.view(-1) * loss_mask).view(1), total_tokens.view(1)])
+
+    if args.context_parallel_size > 1:
+        torch.distributed.all_reduce(loss, group=mpu.get_context_parallel_group())
+
+    # Check individual rank losses are not NaN prior to DP all-reduce.
+    if args.check_for_nan_in_loss_and_grad:
+        global_rank = torch.distributed.get_rank()
+        assert not loss[0].isnan(), (
+            f'Rank {global_rank}: found NaN in local forward loss calculation. '
+            f'Device: {torch.cuda.current_device()}, node: {os.uname()[1]}'
+        )
+
+    # Reduce loss for logging.
+    reporting_loss = loss.clone().detach()
+    torch.distributed.all_reduce(reporting_loss, group=mpu.get_data_parallel_group())
+
+    local_num_tokens = loss[1].clone().detach().to(torch.int)
+    return (
+        loss[0] * args.context_parallel_size,
+        local_num_tokens,
+        {'lm loss': (reporting_loss[0], reporting_loss[1])},
+    )
+
+
+def forward_step(data_iterator, model: GPTModel):
+    """Forward training step.
+
+    Args:
+        data_iterator : Input data iterator
+        model (GPTModel): The GPT Model
+    """
+    args = get_args()
+    timers = get_timers()
+
+    # Get the batch.
+    timers('batch-generator', log_level=2).start()
+    global stimer
+    with stimer(bdata=True):
+        tokens, labels, loss_mask, attention_mask, position_ids = get_batch(
+            data_iterator)
+    timers('batch-generator').stop()
+
+    with stimer:
+        output_tensor = model(tokens, position_ids, attention_mask,
+                              labels=labels)
+
+    return output_tensor, partial(loss_func, loss_mask)
+
+
+def is_dataset_built_on_rank():
+    return (
+        mpu.is_pipeline_first_stage() or mpu.is_pipeline_last_stage()
+    ) and mpu.get_tensor_model_parallel_rank() == 0
+
+
+def core_gpt_dataset_config_from_args(args):
+    tokenizer = get_tokenizer()
+
+    return GPTDatasetConfig(
+        random_seed=args.seed,
+        sequence_length=args.seq_length,
+        blend=get_blend_from_list(args.data_path),
+        blend_per_split=[
+            get_blend_from_list(args.train_data_path),
+            get_blend_from_list(args.valid_data_path),
+            get_blend_from_list(args.test_data_path)
+        ],
+        renormalize_blend_weights=args.renormalize_blend_weights,
+        split=args.split,
+        num_dataset_builder_threads=args.num_dataset_builder_threads,
+        path_to_cache=args.data_cache_path,
+        mmap_bin_files=args.mmap_bin_files,
+        tokenizer=tokenizer,
+        reset_position_ids=args.reset_position_ids,
+        reset_attention_mask=args.reset_attention_mask,
+        eod_mask_loss=args.eod_mask_loss,
+        create_attention_mask=args.create_attention_mask_in_dataloader,
+        s3_cache_path = args.s3_cache_path
+    )
+
+
+def train_valid_test_datasets_provider(train_val_test_num_samples):
+    """Build the train test and validation datasets.
+
+    Args:
+        train_val_test_num_samples : A list containing the number of samples in train test and validation.
+    """
+    args = get_args()
+
+    config = core_gpt_dataset_config_from_args(args)
+
+    if args.mock_data:
+        dataset_type = MockGPTDataset
+    else:
+        dataset_type = GPTDataset
+
+    print_rank_0("> building train, validation, and test datasets for GPT ...")
+
+    train_ds, valid_ds, test_ds = BlendedMegatronDatasetBuilder(
+        dataset_type,
+        train_val_test_num_samples,
+        is_dataset_built_on_rank,
+        config
+    ).build()
+
+    print_rank_0("> finished creating GPT datasets ...")
+
+    return train_ds, valid_ds, test_ds
+
+
+if __name__ == "__main__":
+
+    # Temporary for transition to core datasets
+    train_valid_test_datasets_provider.is_distributed = True
+
+    pretrain(
+        train_valid_test_datasets_provider,
+        model_provider,
+        ModelType.encoder_or_decoder,
+        forward_step,
+        args_defaults={'tokenizer_type': 'GPT2BPETokenizer'},
+    )
diff --git a/megatron-lm-musa-patch/examples/llama2/stop_all.sh b/megatron-lm-musa-patch/examples/llama2/stop_all.sh
new file mode 100644
index 00000000..d64eaa4b
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/stop_all.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+HOSTFILE=./hostfile
+NUM_NODES=$(grep -v '^#\|^$' $HOSTFILE | wc -l)
+echo "NUM_NODES: $NUM_NODES"
+
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+    ssh -f -n $host "pkill -f '/opt/conda/envs/py38/bin/torchrun'"
+    ssh -f -n $host "pkill -f '/usr/local/bin/torchrun'"
+    echo "$host is killed."
+done
diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp2_mbs2_numbs1_gbs4_gpus2/events.out.tfevents.1714118550.GPU006.155578.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp2_mbs2_numbs1_gbs4_gpus2/events.out.tfevents.1714118550.GPU006.155578.0
new file mode 100644
index 0000000000000000000000000000000000000000..bdb0ac1ee762a4edc6b605f5a4c29c798e2ea392
GIT binary patch
literal 300785
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
biP*QX!}(~_vN0gm#+zEoVr;rq$h-P~$pas!

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp2_mbs2_numbs1_gbs4_gpus2/events.out.tfevents.1714377193.GPU006.185004.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp2_mbs2_numbs1_gbs4_gpus2/events.out.tfevents.1714377193.GPU006.185004.0
new file mode 100644
index 0000000000000000000000000000000000000000..99ef1e89b3939cddd7995a5a3f46d8efe19fcccd
GIT binary patch
literal 27129
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp2_mbs2_numbs1_gbs4_gpus2/events.out.tfevents.1714377310.GPU006.185971.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp2_mbs2_numbs1_gbs4_gpus2/events.out.tfevents.1714377310.GPU006.185971.0
new file mode 100644
index 0000000000000000000000000000000000000000..c12caeea70f57bb36ba30e965466727c6f8019d5
GIT binary patch
literal 27129
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715244566.lm-648d78788c-w6whs.23758.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715244566.lm-648d78788c-w6whs.23758.0
new file mode 100644
index 0000000000000000000000000000000000000000..cc9ce61fae694272737782ee2b9ef4b18acc39a2
GIT binary patch
literal 40
rcmb1OfPlsI-b$S9hxW88_uq7s;!P?_%*@ksElbTSu`>FkvV1uJ+CB|B

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715244652.lm-648d78788c-w6whs.30221.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715244652.lm-648d78788c-w6whs.30221.0
new file mode 100644
index 0000000000000000000000000000000000000000..46dbaf81cafa283b68a8633aba1985f001eebd48
GIT binary patch
literal 40
rcmb1OfPlsI-b$P+0vKm2_uq7s;!P?_%*@ksElbTSu`>F!BycwX!rBai

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715244811.lm-648d78788c-w6whs.39999.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715244811.lm-648d78788c-w6whs.39999.0
new file mode 100644
index 0000000000000000000000000000000000000000..3d1d75854c6bdc4cdb259a2f8cbf6228680786f5
GIT binary patch
literal 40
rcmb1OfPlsI-b$QJ3oaf~?!W0M#hX-=n3<>NT9%quVr6tVDE$rq-HQ!b

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245082.lm-648d78788c-w6whs.53217.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245082.lm-648d78788c-w6whs.53217.0
new file mode 100644
index 0000000000000000000000000000000000000000..db6080be59059fa4ef8d49c0d4e60ce60f218f1d
GIT binary patch
literal 40
rcmb1OfPlsI-b$Q*d7If(`foZ)@g@}|X6EU+mZj#ESQ%;CuJQ!{zsCzd

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245198.lm-648d78788c-w6whs.60546.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245198.lm-648d78788c-w6whs.60546.0
new file mode 100644
index 0000000000000000000000000000000000000000..21ca192a35c816f7ff066093fa2d7865745191bb
GIT binary patch
literal 40
rcmb1OfPlsI-b$QodOgZ2{Wl$@c$10}GxPLZ%Tn`7tc)g{^Zf<@uj32R

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245341.lm-648d78788c-w6whs.4300.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245341.lm-648d78788c-w6whs.4300.0
new file mode 100644
index 0000000000000000000000000000000000000000..443b7a5b3469815e9706ebdcfc78595fbedf22a4
GIT binary patch
literal 40
rcmb1OfPlsI-b$Q43Tf^t{Wl$@c$10}GxPLZ%Tn`7tc-TGlyL(9w6qH)

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245401.lm-648d78788c-w6whs.10032.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245401.lm-648d78788c-w6whs.10032.0
new file mode 100644
index 0000000000000000000000000000000000000000..478edd0f70247847a870a99fa8ce31fe45f6ee81
GIT binary patch
literal 40
rcmb1OfPlsI-b$QRd}(1S{Wl$@c$10}GxPLZ%Tn`7tc<RnUZe>Cy4ef-

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245636.lm-648d78788c-w6whs.20272.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245636.lm-648d78788c-w6whs.20272.0
new file mode 100644
index 0000000000000000000000000000000000000000..1fb4ca692aa909b1601d0f6907e542702f06cd39
GIT binary patch
literal 40
rcmb1OfPlsI-b$Q1u4qhD>A&eH#hX-=n3<>NT9%quVr8^=?t=9I)F}-i

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245897.lm-648d78788c-w6whs.32891.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245897.lm-648d78788c-w6whs.32891.0
new file mode 100644
index 0000000000000000000000000000000000000000..ff1b01d8848ce45720a711c5c84cd6f37e802202
GIT binary patch
literal 40
rcmb1OfPlsI-b$QV8kv_=`foZ)@g@}|X6EU+mZj#ESQ&*19N-54!>J2S

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245997.lm-648d78788c-w6whs.39868.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715245997.lm-648d78788c-w6whs.39868.0
new file mode 100644
index 0000000000000000000000000000000000000000..a1e14d598d66d166c54a01d960817b3aab1561d5
GIT binary patch
literal 40
rcmb1OfPlsI-b$QR9>K3w`foZ)@g@}|X6EU+mZj#ESQ&Xn3LXOh$j=ML

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246181.lm-648d78788c-w6whs.49836.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246181.lm-648d78788c-w6whs.49836.0
new file mode 100644
index 0000000000000000000000000000000000000000..51fdf4810c32a95ee3ae8b465cbc09856f326803
GIT binary patch
literal 40
rcmb1OfPlsI-b$Po8N(%2`)@i*@g@}|X6EU+mZj#ESQ*Xx*0BNryNnD}

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246307.lm-648d78788c-w6whs.58004.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246307.lm-648d78788c-w6whs.58004.0
new file mode 100644
index 0000000000000000000000000000000000000000..86b6c4fc9a3675e806a5167fa52d2d74631b76b5
GIT binary patch
literal 40
rcmb1OfPlsI-b$RA4R0(|`)@i*@g@}|X6EU+mZj#ESQ$xl%`gK1%Rvjv

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246417.lm-648d78788c-w6whs.1622.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246417.lm-648d78788c-w6whs.1622.0
new file mode 100644
index 0000000000000000000000000000000000000000..751936625becfa6ef05e562faeba11eda73183a5
GIT binary patch
literal 40
rcmb1OfPlsI-b$Q_Y#t%1{Wl$@c$10}GxPLZ%Tn`7tc-*wOI`y2uu2N%

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246487.lm-648d78788c-w6whs.8044.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246487.lm-648d78788c-w6whs.8044.0
new file mode 100644
index 0000000000000000000000000000000000000000..34ee3dacb4dd747eef3f59a5cb0b8b720cc54b4c
GIT binary patch
literal 40
rcmb1OfPlsI-b$Rm{~bzI?Z4?L#hX-=n3<>NT9%quVrArWKY9WH=|ByH

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246755.lm-648d78788c-w6whs.26278.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246755.lm-648d78788c-w6whs.26278.0
new file mode 100644
index 0000000000000000000000000000000000000000..b8c277ef8f72c3fe8fe99a6e37b7a57f9b1deed8
GIT binary patch
literal 40
rcmb1OfPlsI-b$R>vfo#z_TO}r;!P?_%*@ksElbTSu`-f&{gVy=#&Qez

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246977.lm-648d78788c-w6whs.37975.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715246977.lm-648d78788c-w6whs.37975.0
new file mode 100644
index 0000000000000000000000000000000000000000..0815c4fba1d6f87d9372f0d77df70443f09c48ba
GIT binary patch
literal 40
rcmb1OfPlsI-b$R8)I1-k_TO}r;!P?_%*@ksElbTSu`+V{9~BP(&bbU}

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247002.lm-648d78788c-w6whs.39253.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247002.lm-648d78788c-w6whs.39253.0
new file mode 100644
index 0000000000000000000000000000000000000000..66fa9fecabc30eb640075e301a724c66128f83da
GIT binary patch
literal 40
rcmb1OfPlsI-b$Q|&(}Ru?Z4?L#hX-=n3<>NT9%quVr7)auc8G2)AS3K

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247170.lm-648d78788c-w6whs.49443.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247170.lm-648d78788c-w6whs.49443.0
new file mode 100644
index 0000000000000000000000000000000000000000..0aa70d848cd9a5b736f625fa1ac18db6c3d85970
GIT binary patch
literal 40
rcmb1OfPlsI-b$Rir*;Ua_1|=q;!P?_%*@ksElbTSu`)V$U#bTH%gqdm

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247238.lm-648d78788c-w6whs.54554.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247238.lm-648d78788c-w6whs.54554.0
new file mode 100644
index 0000000000000000000000000000000000000000..dc19c394dce0d1700faac0f984acff5f50473225
GIT binary patch
literal 40
rcmb1OfPlsI-b$P&W%?A=`foZ)@g@}|X6EU+mZj#ESQ#xm*}4J%!zT=S

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247366.lm-648d78788c-w6whs.61705.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247366.lm-648d78788c-w6whs.61705.0
new file mode 100644
index 0000000000000000000000000000000000000000..d11f998068ed3475b80d0ee6319876a85c989996
GIT binary patch
literal 40
rcmb1OfPlsI-b$SDMjei7{Wl$@c$10}GxPLZ%Tn`7tc)DkL%st5xWWrN

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247467.lm-648d78788c-w6whs.3752.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247467.lm-648d78788c-w6whs.3752.0
new file mode 100644
index 0000000000000000000000000000000000000000..c8101b9cff098c1fed7ff086a25bbbab99f95f2e
GIT binary patch
literal 40
rcmb1OfPlsI-b$RA{QsiV`foZ)@g@}|X6EU+mZj#ESQ*X85AFj1#!U<d

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247521.lm-648d78788c-w6whs.9569.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715247521.lm-648d78788c-w6whs.9569.0
new file mode 100644
index 0000000000000000000000000000000000000000..6d9262acc0e1493cf4532b0e98956b0283537ad5
GIT binary patch
literal 40
rcmb1OfPlsI-b$Qyk#QMn{Wl$@c$10}GxPLZ%Tn`7tc;46l*|MGyHE?z

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715248040.lm-648d78788c-w6whs.35085.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715248040.lm-648d78788c-w6whs.35085.0
new file mode 100644
index 0000000000000000000000000000000000000000..6bb49491d8a755f7ce52c77c0d714755acdb6196
GIT binary patch
literal 40
rcmb1OfPlsI-b$SB*koU+_1|=q;!P?_%*@ksElbTSu`*h%$Fd3l$@mM=

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715251083.lm-648d78788c-w6whs.29279.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715251083.lm-648d78788c-w6whs.29279.0
new file mode 100644
index 0000000000000000000000000000000000000000..b0904fd42add117634e9b5097d184ddeaf3bb809
GIT binary patch
literal 40
rcmb1OfPlsI-b$Q0Jr5pf_TO}r;!P?_%*@ksElbTSu`+tfvw8&p*L)2S

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715251321.lm-648d78788c-w6whs.42436.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715251321.lm-648d78788c-w6whs.42436.0
new file mode 100644
index 0000000000000000000000000000000000000000..6f30e1f992fe6a2a11aea5ed4eb7e750fb7fdcdb
GIT binary patch
literal 40
rcmb1OfPlsI-b$Qnxjp2x`foZ)@g@}|X6EU+mZj#ESQ#x-+?@jewgU@a

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715262345.lm-648d78788c-w6whs.56453.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715262345.lm-648d78788c-w6whs.56453.0
new file mode 100644
index 0000000000000000000000000000000000000000..98dc20ac783c1c0a103d800327d36e3cd6724fbf
GIT binary patch
literal 40
rcmb1OfPlsI-b$QL+bSQK^xt%p;!P?_%*@ksElbTSu`=44_TW4K;xG;E

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715262878.lm-648d78788c-w6whs.16058.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715262878.lm-648d78788c-w6whs.16058.0
new file mode 100644
index 0000000000000000000000000000000000000000..eff4bf3593b54a12397be566ee6c4e7e560020b5
GIT binary patch
literal 40
rcmb1OfPlsI-b$PW0xQx@`)@i*@g@}|X6EU+mZj#ESQ*_rscQ=W!q^M`

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715263061.lm-648d78788c-w6whs.26357.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715263061.lm-648d78788c-w6whs.26357.0
new file mode 100644
index 0000000000000000000000000000000000000000..209dfce1d07c7a3535b0d4cefa971c171c6f7311
GIT binary patch
literal 40
rcmb1OfPlsI-b$P$I_XnQ`)@i*@g@}|X6EU+mZj#ESQ(jU?B59h!6*yP

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715263545.lm-648d78788c-w6whs.47602.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715263545.lm-648d78788c-w6whs.47602.0
new file mode 100644
index 0000000000000000000000000000000000000000..820b9fd10b491e3228a7948b41efc483a036a03c
GIT binary patch
literal 40
rcmb1OfPlsI-b$RthUI)_{Wl$@c$10}GxPLZ%Tn`7tc;HT(VGSUvr!Ar

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715263679.lm-648d78788c-w6whs.55968.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715263679.lm-648d78788c-w6whs.55968.0
new file mode 100644
index 0000000000000000000000000000000000000000..84a06819dddebdffd04f3a62e12796e36aa9f9ad
GIT binary patch
literal 40
rcmb1OfPlsI-b$P$w;t=8_1|=q;!P?_%*@ksElbTSu`-JKx$zGG*r^S_

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715263731.lm-648d78788c-w6whs.61221.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp1_dp8_mbs2_numbs1_gbs16_gpus8/events.out.tfevents.1715263731.lm-648d78788c-w6whs.61221.0
new file mode 100644
index 0000000000000000000000000000000000000000..506a4abe1e4bfba1006221d0066eda35bb2fb02a
GIT binary patch
literal 466961
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
Jk$yAh{{VYoUN`^%

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp2_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715397596.lm-648d78788c-w6whs.62641.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp1_pp2_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715397596.lm-648d78788c-w6whs.62641.0
new file mode 100644
index 0000000000000000000000000000000000000000..4ca0bbb1e717d8eae1f133a59c50a25c2d2e4d65
GIT binary patch
literal 2313711
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715398951.lm-648d78788c-w6whs.15220.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715398951.lm-648d78788c-w6whs.15220.0
new file mode 100644
index 0000000000000000000000000000000000000000..7d6034dd23958dbf75bb5b3853071aebcb876733
GIT binary patch
literal 24616
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
OD=MoL7+4*0!v6vkz@vcx

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715399587.lm-648d78788c-w6whs.44617.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715399587.lm-648d78788c-w6whs.44617.0
new file mode 100644
index 0000000000000000000000000000000000000000..2f0d06ac8058d0617f7b1ebcace0fe32c4db62cf
GIT binary patch
literal 24616
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715399759.lm-648d78788c-w6whs.57673.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715399759.lm-648d78788c-w6whs.57673.0
new file mode 100644
index 0000000000000000000000000000000000000000..f35a682db834633b3f08997bbd8ec4b24bae3096
GIT binary patch
literal 24616
zcmd5^d3Y36wkLo<7qTM|LI@IeBuOVE$SQjT0ofH$%IfawPMO}Q?#_Y&DhP^>ih?LA
z`am2Nbx<BUE}zceg2O0or~^8VilTz3fTBK-dFR}|x9gtjE+*~!=kZ5Azt7}%&pr1n
zzkANP)umDL-{xf(^>n>5=U|8DZ{0VhYb%eb8R4P{HF`Kctn`Pv`@S5-e{bKrqrY;^
zy=ZV3{JjBXid*R%PK4B;R<E0};<#QHS7V7#NHgolp53B(`=;$1x5ydW*j+lgh0;uE
zivQpDdEfUZax}C2*)6WaQ#jgiWvEi1hrJP>ZmL<LPPuMz=t7Qq`t}R&bKNkNqmERD
zD+NCN%&4tXvNoL-3G0@$S6uby<)b-nzs^6dbG4ktam$r5rAw9J^XXwVW-Qj}=3Auz
zn+&Nq-@=>w$&~LVaJ<6@tG2n83%p^<`ARpxKdd@pN<x;F43<Fu`J#JAB?o=(<&*cg
zP72Tw$}pt|s#1%`;Vg{^!0Vc?VJFph`n4S{;IK3F8qF2EnD2eCQmS;Ru2H>JS~#o+
zo#845TU#%wYx>L-4)@dEO%J%f7I0&f3zVJ#Gm?m^ixRq7Z%Ip)+9svcvnFc6m~>19
zlk@K%$FZNhzV`#Jh10pH=PMOTK58I|%vQ0<+cE{4<F>@@bVbf_BJO(v62<Km((2S`
zBxW$3>LHKr^BLiQ4Oy~+a@hw)f3Y$#m5V#lyZ0ei<qR(FSY@=*D;-yj*GFv@CRu|S
ziAuUyTDI}YIUM}Mf3^9m>v;h_S-DUdn271B8Ht03{%84}6@Jr-rE7`82hWrgo+lR2
zO)r=oJw-_=?xGS);p=uE-#>}VUD3PsX4fMEa+EScDd3PsIIf#PU8~W36xLbRHn+4~
zIgbOc&exxI^_azFou*7tN;q&#U!(@Xm)Qc*NKj)Z>({*Th)GwHG*5%Y^F62kjU4Np
zVj(=%Le1yPpmK`syo>FV)lD<_F7ExWeJ{9L&E~t9sEk+ohqP*4t%-Ow4~s^s&!{nC
zh9{`2o_e~3tp8Feij*&U=MV|Z%f$j1n7f7}W=IPfi<w?1V!M<BHJ>?k)-?D<>r}7$
zBCjtol=J3DhLVe@sveCQ!AO{bN}6!%gG$OR$o&<!_9ce0NkB3~(W22{eKI34ba&Jd
z*cL@PHLbo-<tm<jLBEx*bLMhcXDc(6@+7dS#|&RW3##4-#6B;x5^&hKwPHh;+xbiT
z?PK|J^~b}Hx>k$jhA8Dq7jWvZW~c!@m}n^C!g*KynJD{|K*TVZ8(WmnOx>rNSwOBF
zHNEc$F68UaY@X?gUcz<aR*IDlv05WwmrwGK*=9nDOiR{AN0NkcP+(y~=>+<$Q)8On
zInYseyW#Yln~A|*b}1JP4L0ASn{m}+gfY@#(xXar6mnPWaDNgl-V&%RS|lKg>Z%p+
zRW0mOBZ+u45m#$<BTyB$<p9Tp9=v3$hloFZo+N&ED`Wd0zQYPse#whV<S060{gKa!
z2|O)O(FF21xyTA~&G0#2kKrcJ=#iaUUGDi@&<bU+lAGMM3KUCojx;4jQflo!s#g`^
zD_aC0@|A)ZBqyQFY+%3oz}tdwtIi9!oXD;6bvUT(Wp(HE4w0~XlK{oA+e-$7)ZsPN
zSiC-Hv*7lr_}Bu125c`Jx1!m(=bLX3cHQVQE;X|2PTrsqRRgBoe5K<jN%Z8YKF<*s
zO9(V{vCf)L3#lGGuDQ=(O+zi=K0L9sb~HbFMt{E*a7ceGxKauy*?dXSP$_iJ4CZVg
z;@y5Z-z<uE4igWu0Y$TA0x4xRxqR6liDkML%9a@m_|#A&1Pmk*qL7mMKtOB1TH&GN
z#Cw(rK*l3OhS!X!9xd*z%E0+09x2^-imvJN3~}@00urNC_dqb>fn?%@DG7RhiA0uO
z@Om2&7Ye9+=jcM+O)V4!HtmEeoevGEYoA!>yNI9nD%ah2y7mj$(aI>LrwP|60FLWu
zk>Ny8GmW^-=Ot)=A{ew(dwu`avuAT?b;g8MuBlgWi6<$Q%0O?G?yXk+5xDtjNW#=$
zBo<@AHQo57HE4n<+cv5FEWSpoCDYcpc8WDFR3<9@eMT&98XlBCh6GXta%a>qLgQ?5
zHjc2tEIB|FKSYxhpKoa>q{piwwxlCjvL_hvR$JQn@xfPKA+V3hu;*H^PWNKT_#`vA
z_NS{CT*4J{@VT`&y9zyA+9}FprN|4c3v}VdTw{tX2D(qBH|jNxdVjQ;XAg;CcZ+2(
zhINdZ5x-#%ijppDD*kx+=iP|MwDxkLS%rY3L7>&6@B?xMl~S%dNUB&d{^7mjxhlrZ
zE85^%DNu(hLzH}i3aP>wQ}XR5fwgsn!JXyfk|KlaDloxUs%-`)`SpU5%Pl*2F#bwM
zviBtd5%=CL9tGMN3aODAxCChpCbm19`cD(a{G&ic#@xe(s(Sqax_#;3X}lP;vgH<1
zb_wcS0j%s|2iBZ%sU!b$<Mky3_tP`t+DlK8ycBncYy15db0Y{=UVMjZmY>TzUKy+O
zw##eAR9|}dakkvWuZKnxv3Ci0q7F|YSe*&jQS2r&if<ygLj#%A%y4Vd1$M+ewkz)>
zsc}3maIwZwh@}E=Gy%~V${Y@NKM9+f#)wtF%^}!@Ra|Do?xTmI@p?58hBY8b>!Ap+
z^q^j&2dU*{4r}#?9-Kw|?k<7NZccHmUaAJfG@I8+Cs$Td?jB<K-N1FNBP9NwZE$HZ
zpLR_m#vrQ(bsMHc?n(y_b`LJ8kOIW5=0BPdzO!7wBHzgkMgqxtLyhLVZ;3b$?(@k$
zLQj4Xa7a(O>UBok0nhQ6cFm2yLNb2!m3-qY<1<KK!c0~}K&v4mY*T<EwD-h{Hz#vv
z`%~>l+gzUr=nIsQN)HAdGXi0tKTt>X1$A4UMLI28hS)mxtpSg4<iUZvI=JRkbD{6c
zQ8wg2oYcdyi0O%FrVlD1Hr!~6j{A$NfF2ejFDR~0fQ^TXLwZ1qo00IKU}#V%5z_`m
zk?j@hb^PpuK`o>K-DTLt@o1?Ujk;A|bg&xo#7ePj?TNWdO4NWS282xwL=!QIu%2kw
z;x*zFyM^Ga1{%_0)!+`Xh(C_?MSmg&6<g{M&Pq9_<rlq(36BU$CY<jvv=}QUWC{Dh
z`m+v^*z<&dWigGxCaVA$fhFspp?J)~7F$S8>KWqVvYf<l`872=;Lr<|l%cH^z>FI6
zDh^avvV%Q*q~dkLAI=VQd67TlVXX8AwOADvuWe`MsDq=O*ZfAZ{j~y<WqT|bGCc&1
zu&&vx*x3-qK3rBxqQo(Q%Bnz!x(JH*h}=-yn)>gL50N-l72%stR&JtkBLqDVn~2iB
z@n&a5+s(dze?(06BLRm;)Xk^GwO~ZUHc)!qyKTyQo5i5w9+c`!mk(I@^JP3N{O!$O
zZ*|R#aw%sh7b~S&tUl~jlc53bg+4u~Mm19l2H`*8Csf7~Ufa#xS;^rE_l_r?yi2Ub
zJUJXuqmX_euq5k(DwZM}s_lZId*3GN8NP_`gIO?CsuR#A(^Jw@TuJNH<DT8P;d^pB
z`jdcVw<F{Y2Hch5R^&~D;BuENfM*qhy4_ZEgcx)$lS_^UosUiu@<vSfiR!nRpQGTH
zK33OrG(T5Xh1e)iu?o>C1XoeWAptMdgY(&)d-wcVq)^m8#-+qUQ9%mNA(v+6BqL8B
z{ws+OHwsV|A1qMlq}h_a<HoP_ROb<Oo)nl&or12$qCrUf4JOxnr|jKLP{VQgkSMC1
zLOII%{_G)tIG-QV=K3X<xDE)^LCQd-T}-z(Y@~bIV2Lsr^`+NM=QwNI+;g4lk_4A-
zf-+9&gRvoH_$u72e31|%s0}^*DUGL&C(gA;;Ir6+To?E#-reDHX}bnWu?LE-?h2{0
z_1WN)pOHG@m>MoN)(QK{uytCE0ii7sHlW<m;God{l9AhnbG>veeC#sUTVjC{rATQL
zw8dVjC*v+Erwx>x#PT<Y0Zgow3?MIPCabQQN|}-dywLrWTjd|;l=deM@Vr1}4v<34
zz{@40qL+v+&rAsu3hA!nk|Kr7Phn=y%r9I2@)d;EY!b+f)&O#?W`>}K<~OlQWT#<{
z5<j=}w{OVRq@bQlj8~Ix7H$SLWDYEqZgUIK!5V>xI_Pd8W>kV~2Nfmw&q~AHo>g8T
zM4`!IE-UL5SjcF-)W4+q1!+Izw0iY^LKGGYNF)j!;P#;YM@y}+B=o&?&ub)Q9T9LW
zWnme_G<>=miN;w_2thHc3i5ascZsF0?zfPBkM}CB1nl<|vpX=>CZiGP4F6vi@~?Wl
zH?fQl#X@Kqxj3Sdfa|3%O+k*f_CH(7TN6LN@M<nPOAi)eCbc`FemZT`{>?nlY~S@#
zk?RG4x;{r)n**U7YNym15-Cnr{kv~etN_fE474E2YgKUd>j`4WrAs73?ur6C<Z?+1
zrNlS3<aB$HKt4nuf!{GyFg(K+!X-!=%!aM}WCiI~bY04&#6DUV0cnPvt7H^#)A(kG
z$VuHM0QpHFiT?j}QnRBYz9wotYngmfpaYZ{-K@cCeX7fsorzi(3rL|>2H9}6wr<sJ
zG>Ku~3P9GR@<Y~(C&D%taAuq3N9R6FDlC^@!?(;TEKyTu)g^Fz%LVA6Ia-u!-_Z3$
z(zgXPyOu%Ff^j@3lQ$5q-{z@H$(<&4Etiy)1K~o0goUxK29yKo<>S#uqi&MLz82W5
z7-S2xnrR=Ua@Oyuj`gPr^O}DhmzpszR%U{^w~!IT`=X<gofl~NQu8T<*z6GtAhGF+
zqGJU~MRik6J7a!Y(eJluJjlNC>{*YyMlI(;k5k4dy|hF;0wgRB^Cb)x8)G4@!RXK4
z-grMb$R`Cl9%Oz>+KjLrQ^8z;(I@D1;;&mNc~*<*e<UUJ!WCR{Rzhbshn+tdFB6yR
z^n~H8m~V%^okM8udI66#x1B%gu4t%^S2sE5$zfc_?bjXp+@)O4B`sD4DeXLdJCx*S
z)OeM?U!OCYBe4tU5`o0p;H*^%T{L@(OTwdpJGkPV??_1aUf^L!DB$(>WD7I{uEgmo
z%FD|t<oS<o{c8Orz-lY`rWvPWOaMEp8DJ$&M`j9ss(9l(a$|Z=K(ca#wR^SJfa_Q-
zJs(L4P#2Zh=jYSD|70Xr>J^iYe(S1S#U(9ON|er3^$@vm*veKVkVvw0Yg|7$cRsPo
zKMOEsmHud1DU3a(O>R+9ovpH><I(p?^LoGyTvlve4@lM&lM|-ZIv+k`Du#&D&^7*j
zn|Xk2;cl@8ZlRAg4<yRNz@>3t6kk#|wc)=^`t0XRxw<#qRD83m<&As`Q<aO9;#AQ`
zw`yT*?j#2BKAUycymT~|#Gb3fI;=2;4y*=4DhyJ96+*cQhMR071kT6sS-!su8L&Je
zuyMe$Z|2fo`fzq;6VjSrSwZx_a5YyD>c4-~i0W8}wO0<$2ru<+Mvd!skm!G(fM@!5
zglDxK>>xXyGmR~k1!JFFz|T1^r}1jn+?)6|rYqBwQfqzy3zTY&VaBm|mRcSf>H!<I
zkxYs%^~R*HE+c{ARk0KXhJ4<nR->iKt~K3&^C{Q<G~q4M8K}6K?|^j%FdZeQIG{SN
zd8^Z!^^&|{uU8sDd1AnI_2h&f6~K7H{bXREpE}IkVY>^)MQkBRs$99HfVREoik}F@
z$^QeFn^7F04y?06EXt<X++q6UZA8&`2xJz4p_HoCGiS|+E9rxVgg1`tc!|_Oo87_%
zW{(kkKA0d%fP#TUraf?wK&esm{?pV=B)8QGP|R)T3N0Wx2&vF(tFm_uoDJhI_eQFS
zVSFv1+2C(d4ZjEY#^qz5CcZiER;~!<n_@sFDJ}0Hu(&APhMKmd8>;XfvzPTEv2nLp
zhs8!@k|uIgy$)Yi1farSYUA$C%Go`8$1NnCj=qiWfu&OzHv%_Lk0Vknl-l9zb}Sr2
zSj2V##v08*ZE?K{gJA3`;J9~c7foBNJ)6+<!ZlnzM$>UB(g$512(YQ?Bb@HB2P0<%
zOxw7%FY)d*VgZ&v1x**BgIzJt*t4Q%_woJ~{Yk;F@$FoGEEx8L!A|!2$s)aJE+eU0
z$_uT_-pnB-u9(2Z64wBXU~J|G%Ed6J1@m#RlHUjbyN*{iQ1yR1@9D3IOCAtQFqcHl
zK+!)Mg*LVt0xpvUY1x@~X^2?eoI7Nz!(K<GK@3S1QUG<iChjCw_qqUMR+j|B_aA5K
zpiq+8y~)YK(L5V6=00pKmyflMAhbh_hh7xbq_dG7dAxaZQf$~N@UYm>IaUqRy6igN
zP{5H}a`%L|fFq|KT;wWT#|88#S16r$yTg9eBT{#?(gl5`k{kYdOpg~wAY_@zpXyKu
zSnw>*7lE!G@U6bmv{_=)g8N9%=1#FV_H5d-z7pMtba0XlPgqqwha{2~ck)fJM3S7I
zaoCC!ENQ^_YwezV0$NW%!3GQ%?nt(S?D}y89W~|9gXAv%jR0j$3T6-4Vs5+a+5#fz
z{Pptg8Jt&x;!ZX``%rQCAQANM0yNo91V6>c4Jr;++USY2c^bk-O>H@xIK#xdWM>G$
zL@HA#J#uGf*wOCghX~$I8LzYT8i@i*^3fANwr$~q1aHXQl6)L5eUj7>Z_vayd<5?i
zf)~<FNU>Sq9lc`QbW*|3+rZ^xy`AKK!PiVpHSBLJCC8B>-l@>(t4RUxW`T$Wyw3bh
zTEK4J(oLPbE4=!V`R@{*m~#&o5P4$iZEd!&t-q_hfTX^-fMvZh@wnCr*71B6<aqpq
z&wVFwk<Y=<Gw^&E34}Kl$+vlD(nD#v)HWJ(u=);i@Sb}mL+X-jlmQuv+v2{YS5g6a
zeM9UhIi?Q<9;>tB*p>>zz8*(AhvzR+ulR*<em%)^m)^(4V>OysRRrF@;GWYlB?-xs
znjedP{enzjza=1X0=o;|`f4L)b=pLvWR_Aj<<<8~htF-4{5NgT=TEsV+Q<dGNSUPM
z#UpU(Lh6)ZJf}x0Gj*B;*#_rSrW?9fpDq5zswB=i(dj&uufm?&y)0J2=XTw!RoJiy
z)os7jGTn=c*-ReiMa8K<D`J0UEw_I4KP!o~4Y{9hirpTdIs_M;)YIEE2X+pF2j9B5
z387a*zTv=(UL}F8@(o%G-HbDI{rnTtNfvlQK(o@b4nqpe_^<}oP|O~SLtRP3v*#f$
zE_>kSHFfX{>j`#p0mw9%$C6W7bS25XX}Ve7Z(fYFC+`#s@#!{bFk_(`6a>tKf;y|D
ztmpoBN#)#in2V2<^WK_|pu!C$E511M`MYNk*IX*l83i?<9*=Jcv$+t@8}?}lF^^*c
z63wHx2WGC4A145Bzmh*F_1U{$lAlWHBQom`t4OUU@GaK`)_U9)bgYU!{7hCT#Z@JP
zTRE%!+f$uxB?0CWu@nZFb5Jqq-A2hYXr{mAfy!JGP-h<Dg0q0io^ECV_xuOb_Yq5b
zRlp_Zq>MO_q^!B(fi;~zC24QicU(wJdp(lM1jk@cd9sMrZAaYEhTuLf<95gE7<-n3
zvv|PT8|>I`v|Vr!!7cb+lD9ywfk_D*8_bs9p89_NGE)4$L*QcZdyti;O+AX4D;|kf
zvmrv5oH6X=RH~gVkZvNs<|UR9uWt4Om!0*)tTke6d=R@AS=>^ey|i;<!qDpkI=i1F
z4=`J`cz*CFNNheVKp8`~su)?^)Gru$%|JrnE<eiEzz7_)SM)kayH4-=BzEAIpY~UI
zKlqqbCf^pYSeZOmz&bxikQ|xbuYYdeavr%4k2}T%PB!0xcX(kcI%YQmM?iN+&yS>O
z_ly9<rd@j@6i{tt4{6h-rPB9CzNoxl13?;aoQsx1vbCz5kfz+YXFQ2k_X{M9R=G&7
zGJgq0irQrs5$StZ{cEIV(&0xg7*^^!u?GjxbhV9@NRH!{sO~*0z3&p!UM0ZLwDY<0
z9j4f%4HLe*|H(r?k~-x{0g83XUP(^@J7nltVi!~#XhJe<_$R)5mSGt-rYroM3grZn
z%}}DTV!^ieh!K7vAkheOS;7WZ05i?D4!YC+UtL|chfu{!PH-6+Rm3lAz(j$V+(;AD
zIg8$Pa?Ho12>PY~X0OT9fio~{>A?}xzu~X9Y-`e@1B;2|qkonpKbJ3nZ4(dXnDp^_
zNhLLg)b@|uxR!okX}bVscR+Xn0*TNWRyw=55tamw?(ohbXV?E1E-;=Q%yz@oDqTux
z3^h3dY-yn6y3bmWyWd6uh!wvs3^3DIU8Ic@UwCP9`=unzxBHa~$ih61ak5St<UV*O
zM81F}ZQ5O0F7dW;|9J6f66RM4Obqiq!1Qqr3Jdla@6wwuQY;uM#e%W@wjLx*^H%|j
zOtY5+3*Fafj6GJecV8rExwlogeci1DI`}_a3kcnlK{G$g{_9n)<IjbN$$l!JSrvdm
zdm?e5aPYa6>I~YDPL5Oo3O1j276G1lQu2jD2JAO=eX$O2G{i#<dV*2_m&%>f+wNaM
zl<}$nW*0sN%sxHi1nV3il+t)F!h?pN;xe<_4TI)`$#ETPif{*qr<7D`$?jk{S4xS+
zkM|fu?CvRnp6nx{-8B?e>J}|)J@H%8!Wj4)7aCg_=Q#-t-~9oXvC&(}{>mheX;ifQ
zZIU$}5=&s#$X!&O{pWYIoZ838FhSSTTxvE<pw~fvJlPzO-U+4qVrCO5nDcB632QeC
z@DwjfE@0cfbaeE_boJHYpGb@Hv;f2w<-kw`zv>08YBM=N3Ez~^!d}Qs8G@&jK(s_1
zn=-P(=f7TguN$dxF8Vju3afES>mbdib|<MqDkeRC=M4`KqdOoF(dhCKk$sg71|S1^
z$i{k{J;nQ5pn$;6ZB(B8Dj}oF2rG66r6Jw#r?N^xgAA~5`*N<2TqSo2Say{}*u_j`
znLr&+@AYk!3L)Uba=5UJfFr6A#!m=cX|PW*q<sU$5&7<uhgOjw_n1ItR0WY)MNGxF
zl-YFlqRT#+KyH2A8*`EI*4IY@He!sjVkk=cN?nIkoz4YM?2-+1%h;BDbKe@mGuMbU
zSU()sz#$d(bxBZqAdm&sI`;m%E6G7NZo=hf)hE2`uu%a>gIT=7*|)f4Bat{RP?^Mt
ziq`?CjYimjK>A~RXN!Jv&9M!H%6}!Wk;>;GcDxFlJWvIeLao^uG&io&IrbGzxf)pD
zWNI)Y0jR;*B9SxXjHjYyBo_ZHL+0aCP>4H-+~5cOuU+#|W8xpiS+ak4G<fC#hEQw7
ztJEoO6{mBk0wn*ScY`&5_x(WpW4}N~|L86Wivt1nXFd|ogiXPlY|C~(-~HlNLIS2V
z<07-Np8NtGRgt+4DMd_)U$k6!Xdp4N7X&mKS)mLKMW_UP!6j|hK+*@ju)lM(?Gp05
zuB15^n?0{%Mh4o2FJHg}va}Lax3h6vI5U422^*UPKAV(8e5-o#JJ<N{caF6o?TL;p
z_#Uu5F(_$yni)nj#3s)fmyt9@EvHAX1rHHcvqG%G1~b?ysY%-3x5P_@ZMu@AenKpP
zNxcY{U~TT?Q(XA2;Te~4K9q3RJqdE?0hj&I`6oDj-=TLoabH_<==%kJ>d>M46ik-Q
zf9D>)_~EM_qzE%j;d{U$OxIc%AM#)k7E9>VSd~-`YGk?Z;a%e^$u)7OfWvEIUJ?!{
z8hnn*9&0k<9X(tXC3r(xa`7ZQ_GBpSdlVV*9)5AlT2jn?RN&!#yE}Xu62I+<cX+Up
zfc+NdYzkwq8SpSMh3;odrchu3X4Yk=lrGQKOZ7p}>h@NHn^}5&Ztvm`NbFi8@G*9E
zm++yyo%Z!Gi7r$@MZvH7ywYa_X8Y#sCb7J6D=s_6@*WblnFwb%ILXy1xqkPWvQgxY
z9}~c=&4zvmGpAYrzBXWcX6vlz(KohRN5aRK0+T&mgke*5f+<`$OPqIuaa`MN&UuM~
zmv<j0DQI46t`Bw(wV=Im6Y5`BoTr{4LE}RLsYShON6`|Z>c0zURCS>RolJ{BhT+4Q
z6g+co`?~O+C}~-ZYQts5mQ@*?ISl<{mm--ZFw?_h1$_~InitrQ4$bkP?M<6R<;gU}
z)Gxj75Et4mmSQf1Usz$(n5DW%#QEmorcVQdZQtBWE{=WL@-5)Sv5<cZl=ZMuO@IcI
ztB$9dw;}$sL4c$G6iBEU`L=Yo6JN5ieDlDxqmK>c4fmUx4>{^;*^Ucdq@1U;^+(UA
zC+O%e^KxrjkqY)T0*K9;0uXeKO<?O3PqGN<YJalOUrhr0aRJ7v>j;(&d3t-_fZ60;
z=x@(AiTA>D5e~lKQwN_}k3s7hKRV?srNqg$E*t;rOs>1$hnqj++9zNul?h7E6s-6_
zq81E9=<d%+h0c~C{9Z78(+@(Rbvh@1`AR2xnA(90&U&J_LN?#_TAe%T6w$+r0*+m~
ZA)JL{_^J%d$bipUQCX$H!0M2b{})tKs0RQ5

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715400153.lm-648d78788c-w6whs.27685.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715400153.lm-648d78788c-w6whs.27685.0
new file mode 100644
index 0000000000000000000000000000000000000000..14e8dd2f6884565c3612738c5fc3b8f4db855dc4
GIT binary patch
literal 24616
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
L$|?m0R)_pwWL;&8

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715400495.lm-648d78788c-w6whs.47237.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715400495.lm-648d78788c-w6whs.47237.0
new file mode 100644
index 0000000000000000000000000000000000000000..0685b63323e2d3a6ea7945adf1ece2ff9697f4b8
GIT binary patch
literal 24616
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715400687.lm-648d78788c-w6whs.60719.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715400687.lm-648d78788c-w6whs.60719.0
new file mode 100644
index 0000000000000000000000000000000000000000..dcfa8e301985a8f6fbe795aaa65a2756500399cc
GIT binary patch
literal 27102
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715400734.lm-648d78788c-w6whs.3958.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715400734.lm-648d78788c-w6whs.3958.0
new file mode 100644
index 0000000000000000000000000000000000000000..42d73f7346a49f5927ed46c35363228459c402bd
GIT binary patch
literal 24616
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
RFe44#wW6{Lfq~T_{|li9n(hDq

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715406549.lm-648d78788c-w6whs.25569.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715406549.lm-648d78788c-w6whs.25569.0
new file mode 100644
index 0000000000000000000000000000000000000000..299166b388d22a41f585d501fc1b4b6852ad6387
GIT binary patch
literal 24616
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
LS*5_h>X82nDg{_6

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715406670.lm-648d78788c-w6whs.36779.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715406670.lm-648d78788c-w6whs.36779.0
new file mode 100644
index 0000000000000000000000000000000000000000..c586f414a1548ab0260715dbcabd204637baf152
GIT binary patch
literal 24616
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
b)I&Oivp^W1m4O*~;k#B;Rw*#BI^_QX!U-l9

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715407701.lm-648d78788c-w6whs.17123.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715407701.lm-648d78788c-w6whs.17123.0
new file mode 100644
index 0000000000000000000000000000000000000000..0d18739f5343149d31c1c8e667b559a2bc5e38ab
GIT binary patch
literal 24616
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
EUl7GW(f|Me

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715407864.lm-648d78788c-w6whs.29332.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715407864.lm-648d78788c-w6whs.29332.0
new file mode 100644
index 0000000000000000000000000000000000000000..66686ad295f189f501f04d98989af14d1cc6f838
GIT binary patch
literal 27102
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
byh7r5|N2}ijN=!eRB&UZCP@8{=FIwE)RsQV

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715408188.lm-648d78788c-w6whs.47628.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715408188.lm-648d78788c-w6whs.47628.0
new file mode 100644
index 0000000000000000000000000000000000000000..8584fd6abc9c63637f39d1bf16c4b31b565e368d
GIT binary patch
literal 24616
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715414724.lm-648d78788c-w6whs.53793.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs100_gbs800_gpus8/events.out.tfevents.1715414724.lm-648d78788c-w6whs.53793.0
new file mode 100644
index 0000000000000000000000000000000000000000..e1ade6d6c03ed5ea729e90f7422c8d222655de3d
GIT binary patch
literal 24616
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
Pz;~^vtWsdWI^_QX>&FdG

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715241308.lm-648d78788c-w6whs.22721.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715241308.lm-648d78788c-w6whs.22721.0
new file mode 100644
index 0000000000000000000000000000000000000000..8b7c76ac347c4fdd0c1185fc1e21067a6ab29bcc
GIT binary patch
literal 40
rcmb1OfPlsI-b$P=c=*B<`foZ)@g@}|X6EU+mZj#ESQ%~Sef0qVya)_H

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715243445.lm-648d78788c-w6whs.37583.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715243445.lm-648d78788c-w6whs.37583.0
new file mode 100644
index 0000000000000000000000000000000000000000..52f1188ee3b19e44efc1ac43588fd621f610f880
GIT binary patch
literal 40
rcmb1OfPlsI-b$RSL^5)f`foZ)@g@}|X6EU+mZj#ESQ%YOyu%0p!Mh9a

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715243567.lm-648d78788c-w6whs.42629.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715243567.lm-648d78788c-w6whs.42629.0
new file mode 100644
index 0000000000000000000000000000000000000000..a25816672e190a0e94f5e9bef5ab9d80ece23ebd
GIT binary patch
literal 40
rcmb1OfPlsI-b$QK>u+}}_1|=q;!P?_%*@ksElbTSu`+tT>_a{P);$f5

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715243690.lm-648d78788c-w6whs.51538.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715243690.lm-648d78788c-w6whs.51538.0
new file mode 100644
index 0000000000000000000000000000000000000000..2d6975787eb082c2c378f98e6a03f22fe0bc87be
GIT binary patch
literal 40
rcmb1OfPlsI-b$Qb1^QMg_1|=q;!P?_%*@ksElbTSu`+rllfeK0(K-wA

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715244397.lm-648d78788c-j92bv.32371.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715244397.lm-648d78788c-j92bv.32371.0
new file mode 100644
index 0000000000000000000000000000000000000000..2145de99f8f89145be1f4b707e1d8d12d8a359dd
GIT binary patch
literal 40
rcmb1OfPlsI-b$RM88Oky{Wl$@c$10}GxPLZ%Tn`7tc<ktbvFY5zQGGx

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715333903.lm-648d78788c-w6whs.16317.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715333903.lm-648d78788c-w6whs.16317.0
new file mode 100644
index 0000000000000000000000000000000000000000..1ccd0a12b9052d71a2f2c37606c43958f4ac88e9
GIT binary patch
literal 24616
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
Sl^g@BLnfvC;q2K7WB(UWC>1sU

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715334177.lm-648d78788c-w6whs.33020.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715334177.lm-648d78788c-w6whs.33020.0
new file mode 100644
index 0000000000000000000000000000000000000000..4cab6ac77e528d22ef57f5aafd8d946661b21c0d
GIT binary patch
literal 24616
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
RU|@B~xRf{Tt@vX2{{k-XjbZ=*

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715334319.lm-648d78788c-w6whs.44849.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715334319.lm-648d78788c-w6whs.44849.0
new file mode 100644
index 0000000000000000000000000000000000000000..2dbc9bf9a6e4b63d26df6b317cd603130d1d0a74
GIT binary patch
literal 24616
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
VLsnE)DKM})WJ1cREq<9h>c3_!Pg4K@

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715334392.lm-648d78788c-w6whs.54650.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715334392.lm-648d78788c-w6whs.54650.0
new file mode 100644
index 0000000000000000000000000000000000000000..9de524600c49684dbb01e5c4be181fdeec5d8eff
GIT binary patch
literal 24616
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715334791.lm-648d78788c-w6whs.11888.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715334791.lm-648d78788c-w6whs.11888.0
new file mode 100644
index 0000000000000000000000000000000000000000..05a37f8be7b7fc6b925aaa0d3d6f1895cecc7c03
GIT binary patch
literal 24616
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
Sg}^}TkfxNS+YV0x*#8B|AS+J*

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715340493.lm-648d78788c-w6whs.34546.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715340493.lm-648d78788c-w6whs.34546.0
new file mode 100644
index 0000000000000000000000000000000000000000..72ecef73bea4bfe2c14bcf6e70ff083be40656ea
GIT binary patch
literal 24616
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
WhpecqQea?pNK?vpUNH6m?EeDbyu2j<

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715340899.lm-648d78788c-w6whs.63915.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715340899.lm-648d78788c-w6whs.63915.0
new file mode 100644
index 0000000000000000000000000000000000000000..b71f2cf89fb6aa56d43df2cc8ff43665122e5284
GIT binary patch
literal 27085
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
VpwNxiL#g1xN=1-5t{J=fe*pyXT7dun

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715341165.lm-648d78788c-w6whs.24677.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715341165.lm-648d78788c-w6whs.24677.0
new file mode 100644
index 0000000000000000000000000000000000000000..6aed579b7735c38febc4fd96ed78c3d215f9a8bf
GIT binary patch
literal 24616
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
UR8}c4usWnE<?25k{s3VA7c@_n4gdfE

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715341248.lm-648d78788c-w6whs.34986.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715341248.lm-648d78788c-w6whs.34986.0
new file mode 100644
index 0000000000000000000000000000000000000000..346d1076b122409d9e06e6895254a96a29aed386
GIT binary patch
literal 163880
zcmd3vWq1@x_x2$KNCx*HA!sH@fXD=g8Qk4r879d@h%#{q5In)%7I$4-7Z&%$-QC?K
z$iJ$mtGn-}dmEnj%gcvcdtF=iIaT$mQ{FW$8SMWS4s2e^`Aa7ESA)h~HWkU?Z?l9(
zR%#e;jf}0~o$1!Fv$gqjy_&v$<~*or+Gm=sytl53u25uLggM-jWVOXqj<qJnnq%T3
zA}qF~dfA+^=5@^L;FPgmM(<`$x-2?J`oHVlz8~C>H}>>F$Xe$*&3R)rbk%fj*2sXU
zK&#FCdq%T1JL1}eH~M{IliAMKnbF$1nmV^Y>wg=~Ddg0#RaB%^%<TH$<3)|UU5`TV
zrZ`(#@R>E}d~_}$p@D(cNOMeRUn>?phhQ*MRljPYy(67ERe{1^VfJX@iv<NmnpJH|
zGU;8#S7LN!|Gn25^O@YfFa1yF4lVgi*3#9`m7q0giH#*BL!*d!t0hpzDZ7wa2QLYz
zsRJFR)#c5$wZ>bVPcpN<I&YmzSiCtP#1a{44Ochk=PMRH^V#$qEqHV9&n=ke+^`j&
zOOvjyu2irsDlXdGC(de15_5}{noG!M=0=wA7zrlh#j2g_^S0LwD?8757qeYW=cjX}
zHDI^Qd6DH;(oDU??AGfuVj^VMx3wg@Wg;wz=IE%HP_9m`5&qV|z|hEGnPo{UFi30m
zO56H#TJqVg9dK@m^Kxdpp3bN%^Rr!ZY*MtWg-Ke2Eh<`47j;rImhQ+Kzj!m(9%r{U
ze8!vUn&>LT#aPX@s8|x8+WA+n@Qe-nE`kdGlR2RkUX(eo+5$+kLyD40@v2lstnkoJ
z7gjXo^X*qQ=R)UPZTWoH(bdwq@g_qfW39Gut0mqVh-TIE>inptUsvAnNLTA-=i$t7
zD_sj+72a@+wU0TR#4_g~Ix5`4kqxp0#75cBlceUcvlx6Y*LuL3&Kyy!r7eMh3RRA_
z)k|@8`spfd`BKc9e|d*<bUVI!8tEG7%0*bhtmgQr0E<7@8<_(`<3nRY{ll$h|0HxF
zt$%MxFY-1(m$eb^z-HLC*!ezlP*Yc3S0pmZ7GVhw?aS2*TFfKFW!82r+qWVKMXIgJ
zKYa)dC8j-}ZQ4)@Q>$icbWCV?R3sXe)P$GSvx-49S)}yqsnAfKF_T<Fu|!9QC)vj%
z&bn8$s$p3#^5fX?O=i9Z+SK(J?i|p8&ua%=JDtI9*k+9h4UDsdn**Xq-xt8O5)!bn
zqQ_r#my%`s*?PRYq_>ePoUbu=RdoiP3km8-OQ<>68Xotn7B^oh(;O<hZAWQk$MlJ_
z*sOtO+i#exn*Bg(Ek2Wnw=8Vue2|&+(pA>wi%AF#mgi3rA02FQlAfun+xYe{pw#Zf
zXO9jj1xbA-nqw?M>Kz@1+m;;-9zcWL$js3O>*{Z{#hU#?BWX`Z2R*Dr)l3HN)pdm4
zqFiS_lU#2RM@CVrS?uu5mdHSJR9tLyT&y|48X6oDD;on;9nDUC*&MQeoH?S|FD{PQ
zfuw&Y9x(rsD6S&yMeAMEorfk+zl)>^6y+xuzh!bp)og7|d=tp9eD6x<9n7Sk&R191
zUTQO$Vp-ICnktnfL+kgU<I-Wi;?tGSBb~3f#gM^?Rp#%Qtvz^V1DIPaVP@&v%GF9h
z{eE7<FU`CO-EQe_d|qj{TSjV-3>^VBb4+YfxU2=|75Yaf(rJ+5MaGJ~StgeyrR(su
zd-;s<q4Nypz(?n$D;N+S8f^}?$(yePKMbO!AIDdQ5X;}4&n^wILY6>FgxTL3Yw`Mz
z)>K{0T&X;-CK~z7ans*4W{ysOMRVS0PSWP9RH`oNx})-*TL{_9)I*ZJ0$ldUXn@va
zBY|Yd+MRF1AZVF=nK`ay#smkNBcdY63?wcBO-ibdWKb;cz4DQ_A$ndhgWNnaA~e7j
zW%jqk281Zg`6cs6$t*f!@1e6B@Ksp9Yo(da!GG{YuCA-9D;^vk<xd8aU$7}D_l`M_
zqalE<Fq<@hirXv^(PS>IW>Z23JJg=BPx>_HvpT|g##HB)J^8E}b#-*5Y-ABd498k&
zdyI?=x7b2sWf3ni9TXQHE>`Tbt1}LF;7yy`HXPx+mzi#=Ypkmf5Mm7oGY3VHWuJvk
z!OY=NF)>`%`g7Bl_`u=C?MUmu_PmcA{aa0Nu4?A9-$d6)S1vF#Ce{|}PxBu`r;lbb
zwF`~srZegdPBue0l4$z~6~COhpcU^b)=-2sHY7?m<Vf1Fe|S_tm{>cDN>(z0S=U~C
z&Z*gwqS;?q6ia5*x3l$g>daTjgYA<?J5OY0Tj-kUDg}@^7paQ?I?~wK7)I(|7~C*s
zRO|iO`GFgu2XnIUxu-o?{%BiNP^i31l+=Z+iaioXw}D}C5VJ;yMK|6W>1M6b<PRAs
zFqhJ`tfVToZ907fqVOZLN~6#ftdfC3-KHe6O9n)?hWT59KVNP-e=EXll2{3oH84r{
z)4j?cVmsJapz1Ct`wM1~mc3YPG?{cpM3|%E$r8x&%hTHD|9*P{^X0$*KA&{HTta5m
z91s+Y#g~A`{$g{}_8DQ*<q9**ZMw(}Th#4hAm6afjsv@`0{ILp+LdoRN%D(!*AA$@
zx-}mU;f-5Qa^A=6Hqh16m6hk$7Gn<lx%*LXxy3Fo_knCzw<=}ZKQ25>$*^j+Kc%!T
z3wHlfx0~>DhE?r0&!+c+9gfmLe17SMOli7N5D*<ldSkN5p|bLm*v6(2dLp1V*q$M^
z?QV^Tj!iPhMG_xmh_*&VkvV#}HQpMIEl)C{N@97(>)IJ0mU9R5`KGb#5=(b3&7q`E
zlSQ3mnd(!;;8oR7RgAp8xhC9$9(XvjNqgWTcAGI|Tn)F%tV$+#-oCzGzE%7rUBtRC
zF*{(s^NpFM)3L(gQNi~8hIos5$t4r#F@;@IVR{lB!k3&*Pl{L*Lt|C!se;<xEY1bS
z{JYE~H|BFD1LJJ=-4If*5uuT?3Q#q@=uzysW_-A<Nw~V!xl1UY+q$~ix)Pk}n9$%z
zGW{X@h=Ji&**=SUr0u_OcKu@B^5aF{i#wlTmS<$tP0dJpN^4|Hl+8cNVhbcYAu_w+
z!gSofatN6oR;Dw9%1Lpgl}A>Num)RVZBdb);Srt@aWNLpXgb@gY)$0Zhlg7tEM&UN
z*{&QL?QM>Z_A&=X`<f&CW4!6EwSSD4IoLm@nmIT+E=DqGb9j38JA_2j-jZ-D6=8`9
zBf$_86%<SN7K7qq$Zjo$gL;KnyEijH^WDj8bMq4aP)iKAk?@;lr#6_h8G0V?Fh0v%
zN6eYE?*J$omb47)h{K#}&xa9d5wpvUNSs}MiTZnn^A#B~8tS1)IG<r!55@T%9I~_W
zduDrI?AHQ%obk*o?Qx3Io-!!h5)(o<u4T+r>)_VH%d=pt&lJIDl^g5nW+7J(;h~XM
zi>w8!Hw1^N?Si0(NMKgE?KWz)581e<mVdQvt=qfvHS}RmnMwPuO>}H%1UdhZWl>UY
zx~da<+S#StM*$*pqy$m1KufG8Jjy~(fPUWd&Mic4mKd_z9xmBiTJXX$p$Fe396A1Z
zobv@{wymzU&f5}`6d7Q)cMD`q7-$VQM_X)`@Nn`U<S*G3iwlsg+SM!Bd0K~O5XsG=
z_#$v88Ie)uXfpVaPQ|__Xr|kczgpX8dNy1D)$<Rt&9z{%OC3i}$gD!{(XOP{G2$Mc
zYB><rMzx~(EOTokI%^0e>twPf3W$p!OFR4K_iyz<CGK2^hX%cgxu6Z&l?F*fK$MOA
zrPVKMeySNCWA5|X$aCd(AUyi;8K*lC1tZ8pl#Cz20ay>}>^9EHlod9KW;1)->7!sz
zWgJzWk(B<l>k0G^xovzVx&A>kN>0&a1HEd&3ocqy0jhH_v&mH_o2<q}hm%47m#5b0
z*0w=l_3eLHl~15l^Sbh%WB*j+AuUYm-`P1dhA+RTu7WO4j8%SEBUz>SN~TMLt}n^n
zhPN|0*Pnx(uP{3eb@g@bv~Lg^zL~760;3|h>FKY+x1Rj#2LxBESU#ULxQfx4E}4ze
zl{;Bl$`*l=zK3kMdihCqwIZHZa)v#^J<KfKBh*XHCR*Y{N!Jz^8A>)gez{ZVee+>Z
zO}<`=lwQ@txkenH?<%@Vx?JJ1zE?8Q^{QmR!;?iDCYOK)u!fnU&8ld)&A#KRw2djL
zfdF#yDLp1%?*8#G1VE{HX#faT6=vm<Mukg={m;i;gX!ZmW|K}IT?L!JKP$gC>rDrk
z);J~bx#gxc#Bzeg7D0B<f^2k;NInfy&GD9wYd*t<z+h&VZU__;?J87*a>vpky>cbU
z=?7+!=CrtIQLz#vy`Yz0l`4`YRKc&&o-j=aP2_8UP7`P=;A?=kU5qZt-US>y3``y{
z38o3RnMpcL$Vb)<X3ci$Cr%T(KX`l{2CNQAd=9w*i*A9~LIbVlsOVU(ONbyFSs`Q;
z|BY2d;OC5`;iTsfb3spfDs$^!x-S_WMb3o(UmS&0UtxfDQL8Us7TPWf)5|GwWMLWj
zQw6EEG)H5<dl1E|nMH1J5G^WIyQ<YW-nzGQ`EI7&+fnJxW&82@oRm>FJ|pSK$-XJJ
zhCafKEckz3OL3dOTqTo9!EY?6K7H!j4;t|tmR)W&Of#!8ic4z18{(p4REA+-vOuyV
zF31@;w{=Y0La40smYBqDtZgm#M{q_likYNm6fVr9EmD1V3=Mkj-ZBa(W$cfX==Ayj
zA4(aP874uM4rbZqD3S8h{Qg#z4yj&oA5`f_W|CDYXY$vpw9<twcq|n@fUi>8cNGXC
zV_j@qq^#*ndRN&NcISgGy<ktJ$Uxp4x2F<qvvT`MB;duSkHA!0)5FwLH=vgt&rEZR
zG16I)>vv>p{1?r2_TPOORx(a0d``J7K(dUX(-dxw^$S~oxa1h#ztcDvzXvee-1d*G
zd$ri)m#5V0cl*4h=`i1V!z^?2EpB6p+;ocwjiIYV)k;=(&}mb8UzpAW4&tkY&gYBJ
ztkXRsGp%l{X?2^229+Jzitk+aZ_B*e`4Y2PUuV*lvBbqjk*QZKxlzKIrH5e=mS47h
zZ_2ui0J7a+2}oBVw~A)-3!S)*Ty`R7n>4vN6t}DTDids*A7-|>ZF8>8(bGP1p^Po5
ze;z2*D<)&@ZW&>6TXP7Xbvn7t6BO;`_p5bWe$ULkHTXKtJLSn8=he(qWu2!kkAINd
zlqAlu@s29leZP^n#4S6^4COP$9ei`gljP(~eyk<2hn;rU;5D<MOPI;*(JsM_-($BQ
zdn(wK%;^0L1|L7^jgQCAmbpU*n{ybSRc<cF%>d|Ws)AX`Tn=s#xNSXF4%SISm`QFE
zLM**GA(Sk_5|EFi61-q^Jv({z-*Aoi12fBABMwO-Jr})RCEFX2OpPUL#Tq$ke1}#U
zGMq0q*D8aeeZ0v<r=RX>VOG^!<-{HLp2C6kHD;b3SeLi&B--zkhFSURW?U7M9_Lqm
zL`|9A5{l4rgro@W;te3SDNN?jv|MOkQr*~wqh56l?!vd>1*0mDcHYm-x70P)RTj2-
ztl|zBche+>^!LBxXUnizgP`v*r1Hh!w!>%uo5Lf_<mv=zg=CY7TxXJ98&Jm(U*ppl
zxKg>A*``-2^~xK1KVQdIZbC&DPWb}$Up`Gz|K*}XqpfuJRlZ;NpXMc}HP3c>6@dC*
zz|3>?uWFv#(V?fts+_TJSulCn{_Z^Iq8S}VIu{+u7o&}?mCjqdGeEZ`&GDhOSh{5<
zxF?6`!Lq51q)DNx#Fs^zLdP(UxuP9|D}OL;j`p^nRAT|uDev#lwG*5NIE>;;z?}!s
z;mCe-gY1c00>XYepqJz~G9W;5?PO|aM~tupW|(#o9#X?(MsFpz?C1d(xgsL#f+YJ@
zUXo>W;WoR6z!c{(GtW(NSas0dRniyz&KC3O3;AY1MfV!b*9g}GlMPf$5*MtBb|v+J
zT|zz2LDymT^E5NdeSQ!aNNx?qkqRc0$e%uGkQl{A5iu?EZW!Adj^Xo4$F`EJ7U<+4
z!c0!rLgZ%!>J1}%&1V&%Vf@WZb60)s)$qR<{uH}s6~tzhv3#Dn*kqSt?78L74Y+=h
zg$*`sN!?(DJ4Lo}fxdAO^TYLxbS7z|b5v_0{gxt_?CX2W=I-j1Gv#9PY#2@pkK@b0
z4X5Oa5ef63`w>ZBC^-Pnv;MpZW)WkUF>aX_Zt0t3CYQgsrGRSLv0W@$G13F3=^4iJ
z`QxVP^d4j&IqM-EtZ?Iq-sq8cM(P#t#oTy4^xrn-fJV1Fo2Ij_gIl%#=SdZ^8$WOD
zN7#IO$jsBtw^HOPC-=3JIO+W<WF%EB85i<o-q{znwt7t9>xFJ@m8U%zch84x5|g`G
z<W3y%6cidvX4kPHzgYFf4@WygNS<XbxR9hZLk<w4qshUwIfBe(eq++|S7!e-XmyPz
zN?RR0;ZVAKA*l*U2U_-Eg?iBH_Ap~ytFs%UUwr)6xd~1(=ijrehMBuz5}!Zrz=(A1
zq>m>jP*{`djqLKUW?x~mVFj~CHyaAYgpvEX+;aX`4K~uxGe_{lb?uf9`Z&8!<}>K8
z>!mBmA9Bc1*Amuf-re<*tu~rG#u{5WigZ~v`(JZ)(qWO$@B*XASss~h=_NPJl8S8j
z6HaR8GUxQ9CNFoIgawg+leFPZUISjiKvG}|UkGj>vEP?bDT<`C#17-$`9dZzIueYM
zHV{g#bJ!1o<n^O!G{>j%6=5y^gBj({=D7CoyEZr0zc3Fn8Z%W|dd^&cg>3HpPRyQ}
zo_rB9`iL2|A0m=CrJpmH>19gU^h8p4?7}A3DpV7Kq31MdFhr1Bs9c32a`j+XUi-jH
zuy;mkuaNlt5gL@_4~c)=IkZ36Yc^eyKi=NYw?|d&ZGZ1E73}Q-dl6O}8Df9Kp6&1E
zn_=hPFoVw@ccNo2FNrmq#T+XCs!|d-k{+*3juJIt18*g>NH_2b@n4|@%bT}kr4C;b
z+V16<1@pwpGx-eCd7|(!?eCiHdG^qD82Xknv)l<8`<zzItSX;0r*BR$pDXz%pIthi
zBNv^?JfB<xBwtb3zsCEodhj+#j*If`_WK*a&tQgWukT_%9wU>XSXsX>saMzmaZVcB
z0x;#9#b=b;XQh|5%;bWvziK-tAG}CTi2H20cn`+8G0YsdM-vkgMZS2UW&YWwB!}=3
zO|Isih2hq<<7_^M^wzZtUG*hI*}{Ih1u1EklHHVm*akH^Ww8Hi<#}hla|*N8T-Q`r
zG&YJXy6DtN;ZjZsVPq=Uo{Tp1c1oL2Yk;)_(}+8X`qK4W%)A%w1G^X3`8?AP?23tA
zxGN%9w;qC<;*~0MxA6FRQDs3^iIa)$CcG$t7oVeUNLrg4*&QMa9pPi!p8{CD8{Cz4
z!3xu>$ILJ{y|Nn?w{K``!NRDUP78Qh6GnlaH~BnsThCT<HGyk<bPw)VZ5Dc;)D;do
z&oZ0bCv5>XD~Sv7qieeZGSbj-%zhUOJxRhFhZ~0$uRFo9WXoH8=IOCyF-sshSf(4@
zq=LxI1dXa!NrAmJOTy0iL1vZioR^hZB`cKQnlILHNyP0_<840A+!QpF?8nou2Y+Wl
z{IXYrn$SG9Fq5=-l=UY!t?bVckZAACe?l54KTwp!sbu&V(`a2o*z57U!{?Un^>~S<
zV?wx3J?%S`Y^kCUR_fL6=O3949n50pigqvsXvO?|(kN*fIMUC^J+?1&s73Db8Rt4w
z?qkj0Fc<nFH4R$YSZ2<CJ1R7mOp<<ku6Szyw*VOSvfkq}Nr$}>_R1uI!F|5-8+~=s
z%cbdHx4+bGak?DiKE<Io@W`zFmjnC8(l6D(?i;CHH)}k(Awe$-{_gzt#LJfpVDmfp
zK3@-X^V?G#rft?}I&#HEMTc=$2g!YzQ2FFkvUk>9vJweOs<Q>6`Wo}Worj4&Vz^6#
z^z`C4R;gX)t!)f5^!5+<5^(DiJHX$qmP-o<FM_`LC^O2<(8XPh-&m=S$>`G%CUA8h
z@)_kOaO8N!nn;FSwQu<(vjZ>b$NWWxEN%chlbe`Xx-(glnN|M)K@!NgzMh-G{X49O
zJs<HIwjaKec}D=b3mqeG2C4?XHeKcfhjxpYL3(JHH#8#HEZg>w6x!Qc^1?_^Otc4B
zD)N}mnqWzGRHbGq%(`6%z137^iS|~7>EufJ?Gs6_?ITV^0^W|C274wsp70r?J9P!Q
zPYlSRtL#dNByhYWQ{6Vb{}};IdoVLbo3<-o`6_qUBn5`~?t!Dpf5JZHM`o1nQ<kwu
z3TcO&_20BTV}##InEXaP<x9_vu$*l=T+s(qa84j;GdR&GTA+zHG{Sq#ByEI+xdEHZ
zHONh7*$KK@`5haX{a|6z;~AevZljsLr9o~Ku$vn{WmJ6>?RKH*L)Zj8%?xwjkN<2~
zVTLXF#E7f^(4Zu-ZIyES_%GzV(Q`@8OY#orv57w&V}8C=FR7CFP|30Xy=tHFv$KDg
zVQvjbzWX2pp}JWKyV%f3Nrt^+HdX+3elPe8Q+DJ=H(6T!oJ+~&Q~SkVu?9-kNZAc*
zzvavzxAx-<D!t<(DLBMJmWjtoKsR6fC7(gAo2QpIxsx<9_K`1x;KeIRp}o8fl6l+e
zb2ocHH$R@)q}_Z8()8&)D7s-!`@5eHUnG4&bxB`vX;^wYm}xq{;<HL;nq?$r$?0o!
z4EK4G{Paa)T6(s%r&QtdV0xg`bScg>7iYi!Ue!Y14C&Bh-!aqNE&ylRKPr|?;m89k
zVG6Y&AqTqv^Di3egW=HEl2|Cs84j{pt$nTJ%MA8;1`?EX;F9f5^ZliGed8uG%q{ph
z!`x#tYG&0th<16FK7)Bsr#F0_xz!D4n!k)2Yo&XNWDQO}pTt~C+8w!+D;W|8JA5q!
z?d}A#Za+t)?e162N=}QsTP3uFBaDV``ApLzjEZWRCNKSvkdaMqCGF2g5;02`9oPk<
z#x~}Hjv9sgg#G@5J7FcNHiOFqmEQ5W<}MRh6Uq6w{cu3?b<oeTsN6)JS8baOy0rz&
zxG*oWJCGG$f(}<q`cngr!4YMV_k3>Y5oLvlDEf{UIjXkVFHn+KBrK5uWMoq4JS78&
zB`%S>Wh8c=pT4>cf<4ah%n!H6De*(6`Pl9xRUz3-su2^m3>sag4}8vPqjRMexp&ye
z1;}7)glyKM9w{p`488?s6QyR|s99DzvNdE43c|cfIt{qE-hA=Q0kD*O!OU_?Nouw)
zS7k~@Rq4H&yB%*oT0Zi1z)irZ)zC=#Xi)D^?)inEUOiE@d@1JMJ?P}lGt1mmg<9rz
z#LV;y%HKKJdl^1;Kdkzie&VxCSAFgh!=W+Ul$CZxKfOzrPuQn(CLh+>575QN7XR2S
z4d$7<m=Eqeocf@bRJhk9Nu>t||Hf47OWLt$0BQKl=bzhsqH7)QssI@Vf8*Pm1!s=p
z71`y?Dwktwl`aR!-e?qeLEz^P@YP%Nn12V|g{i#j7e2>yDqob^jtwC}9vnhi3btl-
zqkpBYOMs4ZA~VW$oLn{7qJqgDoUA8OH(9wr#3wN6oX+QynslWffRcWPTK?sa`1cKS
znFkBhWM-0!4}S~!yn{4^gwWU!a|<ssy`6&<Ac+rL8(e=dX%)oB3uc+dM{!AJ>4gCK
z$32pHCMgv85?gG$n{So&g&C3cD_;xTwx0Bxb6OS3`;d|zQ!>BUzW?vR5Ehr2Y1+t2
zOHGqas5tU!%TIR=B=vy{cBeJw@$gYyt8aX^xsU3&Mn-CvymmouAWJ-9b*ndyW~M?N
zpxfBP>~l9IseN(x;(zqfx^|Ooa6D1%J6{HRJmG0?c@|qFZHDxa=Re&@Y6@FU)#v&3
zFsoU`yl@vYI4{CY+W*akOX%N^U{EjhgD(gj)GJXJ+%dQP16=Zw;eWbOhthTJttfy#
zh4~Sn^UrSlZ_o$E+;IZvx(p-jF9HkD$>~$LecSwhEQ4>?H{W0rCWZN+n=nNZ$n_zA
zx(Q3S(6O=VgfS?C7`|z_n_Pos;zwqVE)$E|&5<b@d4fvb*C^T>`o!fs*bB?ZSAoPH
z_Yu-hFHk7jd%9|$7i{KcbKvdK^>%Uc7$kkoldj=OD+!jb;?$dh%~JIeG=<^JE^P{K
zqCw@lEGX1vcB{A5lN@yigpn{4>owoOj^WUEr8E1q?<y{_Pqw#zdNE8gT?ipN3PI+;
z0LfzkL&w!^0eyKyCcaK+UtU6D+ZGq808SF>IJy2~&9gsYjsJid=8oBD9FjYymSFP6
zfb8R1^@_f~_lhHQA3YrT%yOSBlFOzXLBTFzN$<On>$tMjoVtr?Lr>I#A?Ory!L36@
z(*dzIvj0Ul=P@!Qrs;<Sk|XMbiV54HsvBjNRCQ_5w0&44lVS1{CK^{B+cvGpmKBby
z{$Ymck(Cc&PA>h^QwsYiK}UM>v4XV^eT<jPeyrqhJY4oYn`9~vw;>kBOw>aNRm~y|
zA^NTgH#O#lx~M4im4_F87T9i7NIEPWS2DZY!@m6UpWGRia0u|rldG!FvJ{2*DUp@W
zG>soOiB-k<wq$L`-mVd2bI#uA=GFNF_fc7^zIL9(Y**4%)a4F}u7(6v<Hh~Y3BzFr
zTj#`QlDlh443Se~8=0-6JxPm@EbYI3I#&le_GD&^+g+!|erNLJw$ODitP5W;b9A{`
zlA0rL_9T*r)nmxfGks`EJ(rR>Sy{(FliKlhSN3VvEzVYFzQ~Pr4Rxgiv+PksOL%Y;
zmcD?{b!Lm8F9ef!{74rl(pl8MCf)_Qz&vngqSV9hyyw-W^u8)k56yLahPh=o>CPf!
z=vQT=8HJLEtT3;Vj)B{U6m!|T(WzWucAwO2ae7ck9z3xR!#_W^q}rm!mw5OWECBqn
z@ww&h&fCq>_iBWbK-CP(KEHfks8ay!sI6p{xg9mT<$xsevMPBIM(wdM)qH;$*1iu^
zN6GAxTIQ}WMUk&u><9e6{;LS3;+@ySIl(k$mYx%ovuB!_{pDADCCz#N)V8@{#+EGy
zpKm&2tB4N7yDQo+1xtK9yuU0KR^Tbj2VH@eu=}8^<w*KcvVWBPfe}e}A=yrP*r(bg
z=zZTYtK7DoXqEmKy*@_2tBw2V(M4tBpJvo|1f0P+f5s_R2ieb%twSYdB{h-z&ZSd;
z^9nOdaeCPEOfI^Sqa2|!l!jDEGsLyZs!{0$;H<N4E<WGfr;ahvR@sv{5=%H0n!EL}
z58U(E$1HL8Jd!LC<U0B<zX|#M`V!}=e6RWN(b2BX)pPUts;Dck%k!(BBe*Tu9S`Hp
z3TB2IZ^X3)b_x<0l9$(>uN>YBW*{Z=@Oh#$5QDU1WS@8Zuit!4_dAdQc66pOS9C|m
zjlXfgKRosGB3_bz$tJ$rhuodI@pYOnYU3{FY<c<ox7M}PdHwW77kAA^@-gmz?G<2K
zh)%mbALb$>m?t_HDa>!51^&G2=OPSsIk``WEBObJ+dQ$-b8A=I;c76!OlP*~T)s4Y
z8Jk=R3*@_G#Rp9!)gzfs6nQr<6Bv%j$5#&;w%;HB4a0qxgjR&v_AO?Zn{CIF2axSE
zdf~F_FHicsdK=tfrrJ3_pJ#5d7fl8}QWa|VsU?H8k2jovy=gRm1MDxnW_IcRLLqz0
z_!*zOfUj6f`Z`w!vaMT*jW*;96#l}mI4Ss)IBWv^EI>#BKL7M*0SeMHQf>=FH9RH!
z()%XYhG&YeF<bPRVlO&gaE*y>?y$F5c=KeT5M>UMKaZ!}Ojg}LQm`f;McgAwtqSs4
zrr((t2qc?dbTXitV@dDs(LbRhnEFR<ife1CrX+=*w72DU=*O!R;&Vm&@%%Jb<cpPG
zvE)@~+25u4@~xelP~W*il`q_uOzw>33+nRga*$t5;daP8=?+<eu9q`-XEu)5S&5e%
zIM(@#v)PN6IF&D{bJMwiq(pp72|ju_^_bipYrFF5UX^c_c7Ea~ILxifsmmH3QG#Am
zEs*n*-c(_{wSotq_(ycXX3jmU39gFj3hVOniKR}c?%KThyGro7a?h8yao){z8O!I>
z<<aS=2T$(X_5v9)q|}{I*eR_7pMH4Jea)Revh+^ni|dN%3W({YuBfzAo8TXAytHle
z1}@GOs|)4HtIMr(rd#`-^z5KOu|5Ngh00%BSe{S**O&?Kox8K-PUT&7MRoaw<Wfge
zN#2I;1f=@Cb@)PmPAj*AGN}~r_eo>h0I4zWcu8(eQYqd~GF*BFq)eX$hd^rLSG{TA
zZLf<!YRVVEl^Q9k%kXdSRVDcP;7C1VItN8k`P=3S15%~Z1wR_3uIzfz3`likQit*~
zQZCWS#_hQRsspLvEP3w#AVrl$t2kZ<QeG#V?4&X&k;>9&kN2eQue$&#pOd`AMS~Po
zCtg^&4@kW{BRB+7wZ7|3(Rt7B0a8uR39i&gQJv?oT2p}3Jf_Q}NGiQ*q0>O>982$_
z6;p#c?k@wRGMyL7BO_%Qk!p<1cN1gEn<aPo4^mXw%d1d+AXR!qPCF?_B~qmK^XXr#
z$v_~LGnJQ=&>%(COQtxy1yTb?2@Zi&mrZ(8lUwVa0I7?k1y^dMsP6ie{KtV*<uQU2
zrQR=(WyW_P6~xk)&?0s6<mhxDHJwQv<uO(7;Xq@}nrE&+OdVp$OZ*2Zs&pDMZ#j_K
z+BCnNRAwboYjc(K+425+cOW&p887kBAVt-lx1XE`QW;wb4uMqKDZS~(^dV({RF~F*
zD>YJ7ms0Y{Odz$M=`t(ERPAT?F{U1{^d4HIwsm!^3#44y2<4H*RKKf{#`-mCbq7*S
zSaOg5AVrny$2au>Qo9Niv6IT8L@G-olh1`2Z^{9w`2~4N6%A5UJ>kHomOx5hL~sbC
zI=#`Gp7pMm8%WuT3a->hQQeRiDT{&BA*RcsNNUK|GW#K>KC|>yv`D?pRiP!2s!&WQ
zkBro?y@QSSq9&CGQr%ecD*r)>DvM4la}!AEue;evWmO{8BiZ6pJVP6QAeH3?FR7+M
zimFfc?P3N}oo)*bfmF~6y=kz2ohCqP?H$3D8Y!yt`!r@Dkji>jaH7=vjVW=@3rJOG
z>8ojx^6;pj2U5M6G^@P#tNYSs{Fbt%43L`1l2`i=QdDUeH*FP=dcU-+os^Rjsjin(
ze3r%y915gvEaN3c4N_FS`D4!FK+1EK;1Ea^bn!6FPjSo#q>@()uGC0TU4as9I|HeU
zOy{H+Q^9X4!~v;ne+hmx=6?OU)z1f{YBH&loK(gP{fu{;Wr+q-5iGg!KS)vKvD`PN
z0;wy5E7(anE0G%dZoJR1CU43BsS`tZNfQlHRNX$y;ekNPF;#E~q>}FHO?$07Dgmj0
zG{Kb`DXRNkxZoNfwS(!L6-oJIK6eyIy<+K`XvI{S8(ohAsWKyl^2mC>1^xOPH<`-6
z0aBe<@+SX5iYkxKUU3yjjjZowC#6#&wKms$AH8X$Ban)2z)RX_kfQ3S`VS5Qspd@u
zhd`?3F1@K=n@6cYYI!rkl^Q9k3wLkO21q$H7n~^devyWyd4QB3OW#I|RL!R=lYvwS
zlj`I#HTCpBWA#k`oCZ=eSn@XiL5eC*-3@yMr0O27YA2OViPY8d>wLzQIeG+0c^u&-
zT{K8h^~XjViU6rb{|XL)RPRu|Df^f|Zvv@B#|2kvq^R!c_wfgS)K{j<rWjKdwrp4l
zq`XfEel&W&Z<`V$fm8sKW|Nb89XZTs-CeRMkebAjcli%eRO$8hyd#hbOsj1tm0gJx
zS-bkIy3qAAkg7kDm-NygMb)ieymJInUSkA@K&r_Lz3FfN#|41YxUqsOHBwZ!e@;OU
zAa$4NvMZ8$G@?;DkSa7z@S{P>Z|La!K&mN|W|xzCGi0bSrbXE&Kq`qP@AV&~sB&eI
zQR9JBt%mjOq;e>c^0J)vsaA9NFd(IG#7janNKti;<4wJRRF<ZKLm<`VjNUZ5?wdp)
z71T^{rACVC+RgPn2Bh{dT@FQ3UvIB+22yWX`Vg(&FMdly2Ow3pxlkV2IJGc+fHC8>
zb(?`ydzL)pKS)t!oX16fAoVUoQ#+}gN~C%u-}V{QWKT^Xbvq+3iPj)R)kW&OT@R%C
zWfmL)sZQJVrsS*<xboF!6<n#2qPkZjTpj|c0Zf-uk<{`<_n!c%^(=j~7OAc)o2&s+
zcbPP&Jf?zkBpbVWwH^ti@;C`4Qs1Ga%JW_hD}hv*!>#P3aw(A-G3~X_gi|Lo1F5`6
zcuArLDXM<FakDFsT767#2&B%;(3^G)8y^QT_2pl|l^Q8d*DfhPkZOBeaH2G$xYBQa
zSs*oxrBBo%mArhAH;~%Gq`Bmz!Y21Kb}IK*RUmbrB~Sd1n4-#}-AvDbROy)=?4)ul
zks>>HzFvP?KUB_O{}=IxYa8d>fAW%)j2ft@Jj2jhl>pVuIf6$(^>vWmR4l~3O*!6I
z)gR^z&fn*XzSLMz;g{Nt!hlt$d4d-uRyV87>r;_;^zN^J8#<3<=}Dn9hN`yv&b<X#
zJD4`N99Hdb5ys{3-xh>s@r)%WuGHg-O0RZKtOm61gmkmh%A-W<<pU?*Z9|`(16uDw
zc}c1kEh^u#{ZvJu<s2b+1X_uI>rMKGCtZNn#z@hZ8Z9c^b+Gs>pjA9d@S;Skb<I^t
zK&u@~PYR_$>r{{L<ABz1rp+U#HM06xW6HGg{y=LpOHN#=)1p$(BFozWtp!zj*=glf
zqBZngZr{@rmpcKiDPFu}ycR7gKh^$fB+&9O2p)mf-ZZ^Q*Y(Ivpf%7>^rc3N3LV?%
zP6Ms0Oqf@3#A;k{L|>qlzpCg+gVtH!^yNUSG1KOi)3Qb+8xtqEod;S8EIFw^by`$<
z{d+?T&?=fM$WAMt60IT*g?-&@Nf&`uuH3w2x)v=eU)=m@4xrUFpWqQ_EsEEhhECg9
z8))s!FZxoWMTK2j#r^@bTnh+ZlwxbLac%*i)sdwqh0>sPri|O)Kr5AL^T}z2Hl1vA
zZ@;+|(AvV16IbfAsI<=go<^Yc<v^I7R(>T~<Q&7d+Ag<uK<mdrUNTRM7M1G~M_7T@
z^rM1DpmiaihiOCKv~xhq^<UAK8Z9cE=Q9%5!f8yHUop1s8}3{LT7{2`jx=ZuyqGT#
zXtiY8{Bl}9`X(D2ywB+fv<9%`r2f=tQE6iLKIMT{hr~X1S_PD7HFPcK+i(7|O+c$p
z5-(Y%MT^Sk&zv>|XeB2L9)Z@#>3Y*G58uf^>uZ0}ml`c9d{Mt+Q;4mQ0fHB$*qSyc
zX&}&A#nO{PY0%Q23a|mK$4py5POJUw7^D8yodlp&c%WD&by`$fJuRd%(E3_2!A`57
z60NJ{y?pn_9<l(f>z=%1trjgRe}1(|4A5%iC3pl{TMB!a68a9>1GHv%i@wxoQQ?M!
z3jYGF7fe`CF}4!Q9rOZP9zLQY4O+R9HXQ<5J(#wjoYt9E$;MGD>vjNIqgirNf9kZT
zwD^Ov{ejlv^kh4&LQ1rvt5x^)ZMnb(v}S$fC0n&<QMucJdG0{VH$#8s5onFQsW&;b
zs}c*e(lYXii7z!;RJi!z4!jR@hY1TQ(z^P<t1-|j<RCiIpcPUs`&OXUoM{WmX;lcA
zV0`d7eIn56$C8sWsnep;Ol9^z1zJPb54P8xixMqzs_Q#w<HR#SD|`bl*{wy3%ELl4
zZUkCiHwzwt)}kGH)26jow*#$^t)eeAT2xr<Qa@*itzAs$qDZUr-sw1lf6LO7LTS)C
z(fU+vprzj?lt{MW<ZT{e?0NNcH=xytB`2=bX;JBt`_4sx)}+W(JFUV>v}Uz$>f5D4
zuR=g;NE9zQtVN5;qgEva0<HJ4f=8e=nH)x~I8Zbn(6YsgzSL+@VZ-((ssXKIOjuZv
z){G$E<`7#ySb9<@4O+L3A07*|yb^>G$!L{$mu$=sRAVyGGPC5wl{zgdP0f=04QPFf
z8*8UkM2VJ{rLFIe_RFRNt&9o0<dhaIDxXn6zY1tA>??Q#TFv_FO;H6-T>x6`l0{!?
zw5V{`q*bqg)>0-cqDbp|qdL=o)>W3C6iS1Z_u`B>fmZhZLWyLwT5bzA=9pPC5NK6r
z$%!j<T2$(CD0g<CHPU^uomNpLT8ARL`j)7BHX3N9=y}N{Em~CG&Gbh)&?;13@CdXP
zuh*Lv<!=@Ow5%0GUuv|dFrTT_UqEXY6BbpZHDpU<7NGTxr6+~bpf#^q>GMF#y`oSe
z8LcLLh8t79_Qt)8&MY}`rA~`V9}R9D2((sTn_;I_Oo<k`<KkQAWWP5+YxZ?sa!ZRA
zmGAVKT@GmFxh;4ETGbBfO{LcFNC8?S?ufqBXi=g2;+1hg>jo1RQ>4{v%EU83E7x7o
zkp?Z>%-wN7%fz(B<g<)5x_-vlAAA-;Y}r_HQh(~SsPyx?oM(ZS!|b_sTCPg8-lT>4
zKJE9q2+(@PB#*RcQF*Nf?Y0B0CG!N2K<mZ?y(!CpmGgj>(*iy*@ufzK3P&w)$Op7~
zFrlj=t!CYJ90giqS$g6~gVv=NX)}S=E~a&r(=tsPVe}b0>^jhT&yo{Y>a?iTb7<?W
zK<iqq#dcc7m1vEa*2i~j)<ai-*1_7m<dqgJD$n;S-&CMg!z6eFT0LIsO_`Q=dIhv5
z)DwNF(W1g}GX^XNS`V49xFW5S&-X<Gt)lfsM;f%UPuxBoXtiY8;&NJJMh`Xq2<-I?
zXeG1cr2f=tQR$3DV?2S@q#P^lwA_?vxh_uf^{IIPXBjCudC4a&T2vl$<X_w;yp>1r
z2($`q(3|2ie2)ZLt@4S!)M!!R3MbbAKx-Kjx+&5cRpg%yK<g$;PYR_$%Q4L|8))Up
zFO*0&ZXIfxVsu#YbqCO@%aRjU>a?hIX6RiV&?<gpt({g0C0gXhpYN;Di*Q%h`6w?*
zanL;9O7Y#jHGKla)*r_Ok3cI2Ii~-6%NE>&-*Q6qrACViJ*Pb?47Bo`6uc<yJatWU
z$^o<*v-G4;8nkYoEQMFw`!a0_d2BU&Jlyzi+pP0})=HL~xKgJ@rS(5J;rZ6X-J9*S
zN-EJRb8Dz???Qj!`PR8Tyd+hN7L`xz*&Ju^efA3;fz}NYBKiZv7eZ{EI3W5`qeX=|
zpAN|ewDboBFG{p_246D+t!^wmDU=4S%OQ`dL2Qj;+LCfw3u+HE#yl@j4QTCT$%!j<
zT2y*9W71xTtwnJ=?6gWL(R%qH)%Qf}Z24f^N{i<u<F#l}`A7X4oMoI(5<CK})>rkW
zZ3WK-0IiPwL|<yOsIYU8LkQ4X%Y>yAd%|6XAAAN{4_JCqC=FTzBI^bKEth1WM6#Z6
zRL4YPg96WSPS}JcC$7|KQR#(Ul}7=sw1Io=v`Q<{+WvgB?~|D+lY!RQ6kal2ix!m^
znf|#X^n^`@3Lb&h-Vb`y*F!73fY#h$qAxXCR5*Y4t8PH+JrkBzq~)2~D-mdw8!kH1
zpjFf7*eRgZgK104W2^nSp~lsV^H?FaMzZ9j{?utvsX6=b>Okvtz+pSBGD@__{byfm
z_i8VI){j75GEa*Zm3OZlw;X643=up6t%>B)k}>nXx<IRVZ_$?;Eh>D~_3bI3mB@r;
z6lq;)^{_6`TE)_nLTS+IzqZL}pml?3%gAZno;u4o-MPhRpp_#`ER#AdDy=f&ZcCum
zy3`3ft+GnATBlF;EmeE+YoKK*%}bVP(W3I*C05P`T3&j=Bhb?C)0>`qMb`sbGd)CK
zYP6{EL-O0oK<gb7mQ|$HqT1egpjEz{=tzUsN?(_zK&uDSmX*`Gyrz$F+^j{}fYxZ1
zoYbE>Eh^3Uyv6~b_2tf4J1uu5T16aY_*SoTx*pK_dY6~1)uKh^{c5LO1X@cU3Lb&h
ztUvXpJ&t$s1Fh_jMPF*PsPKEsjIDrH028_^(prAt<{qFmgQX{h(x5fElc^riI?A-}
za$4JV^ffN|;D9}0I!jJmsnep;)W6ej1FgU3UbfTHE77{|G~3tn&+i7HwSOKj*{Vg0
z%Fm`Y90asBEEGHft&z9LX9lH9g#xWCi$z~*w5af?M?ebD>du6EMOrnUXR8LZ#<BFI
zP#U!It{?RnXzgZNy`0vSqVdMbVVNsKY`tO0i7RzlR9c|SEnlFuq3umOEe|DH<ZBS$
zhf$XY0Ik*Sc*$-pT2wy1)yn%o%hXBm2(+@0gO8Jy^6mm!<2#GK)M!y*!-+Tc0j&p2
z=%Glf%U{MnfL7ryq9YAj3*Ub)4zyY^t%sae!vZ13_3h&ElKnuIoYbE>Eh<eNb-E7F
znwRUoomM#|T73&H_Vx3~vJq%a&CN>=Ytf?eLt|%}fL4cmf=8hBo_xTV|G=OnKx<ik
z(U%%6DqQWo7tf9z3J6}5)?0T^*Z&H%{8)NYC=FT-*OfdBv_hG-oSfF--hGYPv;Jd-
z*qX_b6IbfAsI>9m(K&$DyYQ!WTIH2!HFRC>+bHbo7NDhz<Rz!HXi<6n@(Vu$trj-H
zBhdQ3gdEtfE13+m*2Rdv)M!!R$}PL@LTu?`1usgpRuuU71!&b}=}Dn9Xyv%Hbs^BQ
zF>QG{t-7g6#>A<;<^ipREIDzdPK!z#MDK_JTI0&Uw$rMhL@Rfh)xI6-`3D27sTFw1
zB`sQ1e!5Qgy+A9hlHd_&g$>r5W;r`H1zJt2h`!WlQQ_I#t(F3<`Ak?ru_wHmxo>Nr
zb&;hfh0>t4)7bPW(8}&5lt{KZuDmhM*nVOn?&{WJ$%!j<T2vZZJZvG*n)={_omNF9
zTIAa}-_^~Eb_7}z9`ce~TC}LVYF#6aTWL=Pk3cJUuHF>ke&Hg}dh|^6rACVihnZ8%
zK+E)8@S+r3<sIVg0Ie97o)k)hR+lgSFM!r!rmZNCtyNV+jk<ivH6ganv*g5;IxQ;g
z*#6KJpk+Sw)lSP(iPjRYO}?M|MT`YnT~70oM_RO~{P>A|S0J`>ofA9)t+(IEqf4G{
zJAhW53!*PIT2xrq(%>4<n#qKoim|oq;zD1bb&91Yh0>rk*P(tLpyhZ`D3L6-90m?C
zF3giW7ijsi<iwRaEh=3#;Zy;jHDQoLI`>{vB_&$X)wcOwf0=m?&>A_Im%P%VMdf~{
zu3rLLrG^V0f!5xC$RjaXYV-hFlSYWX)M!zmZsgn#K<gP3R#K$ZYtaV-&?=oOI?|vu
z!O!&?(CW;zmE^JY=w^)Z(216~-b!W3N&TtQqS9}>lS=`usK!oqT9uV()vUYI*VHg;
zL!i~A2`~AiMT^QWAM(Eiw7xVGJOZupll7(v86C|)t8)v{ml`c9j2zKpIMDiw2`eko
zdU>$nTcCA^r6+~bpw%U>PXy2^*itBwEVepywHdp4KI#my)tDtGuGDE!=~Zi>6=)5A
zo5N14iV`jIrLgav0gVp;t=M<GBqfu^`4*LL&R^6YXubX@cm!J8x9ClCE;TL*w0eFP
zeW}r+!kfh=J_lNxn6Qc>t%x1tvI4CqEIlcd1})2+z3qTju`fc2WVD)$OEP-iFPIN#
zHDk$%D|K2_+W6M$WT16pWj;GCFC|*1TO9BmR&3r~pmkvtFG<y+Mdce7T>A#JhO7}h
z0xg%-WOW?0aw5=5S||EaqeX=!^SeF<T9=v7OOe*{YyE}*tsLt`M;f$xr(7rnw2Vya
zCGQD?tx3lG&$qn+T76h@Qh(~SsPt2Z0{A9cp18txTHZ>uX0<=!+xqyZPe3bEJTDoq
zMT^SatNP)+j9y8CN1#<>7<m?G*mn=0wWqJ>ON|y48gGa91X_jq30{=ugtKfDX9KO4
zEIlcd1}(2iFM9#46sGl-(|Qz=Xw*-#%>r6$S#sh^ofefok9_+PV(Xr#o1K=A60M+a
z$9-=N@r?vp*DCRn=~}d?ykhW%G7wu6yabOxYX!MzwxM?3e}L8xZ_$?;Eh@}z+A{-a
zb@CCsDAD?soOu_}N@M9sp)_b^avhunXl-X&A33eJdj}e$cROtYT2EMV;!2$sm0qs*
zcP^mS@M9S}Eng*C<lO|{=6U|f47AFA;wAI6Xi<5kA0_Vqt!C+hN1)Z>gx)me+@)eb
zYvEVXml`c9EY%`YZ=m&s34IlN!Y|i1g#oR~-$X|mw7l<hjsaR0ruCK6+IhCGF>i@w
z2Y}WDmYmd|IxQ+)aMyegXnojJ-cHM)MC)ttdEZ{X2TuX5JDYjQGA&wEzV&gF??9{n
zHo+s%^1h)rwSQk?8qhkmUG$|!iwY|k+k^rw_rC=%O0m^_+1_(Nt1C-S3Z+47`p2gD
zwcTi@HOOhLzuwz8v#zZd(AvS06IbfAsI>5w1iY)eeP|UsEk7k%haxZg4mbW?258M1
z#!J>}(W3Hib+2^;TA9)Wk3j1~iry4r8Hhb$n~|a~HCj}dp4lJ2WL?IDeu}ZR!6UII
z(7MjjlR|0G+BskkK5CM4lu#nsoN#*W-p2AtJqH4<x-2<yrA~`Vzn6#_3$fL%lb@Yd
zRV7*z;;#E<Su$}X&<gC#OSWp!qVmUA+ThLV0o??TK&uh?_+V2lhsO|GWqXLe)M!y*
z(&wy65L+{tu&N@he_To>0IgdrJt>q1t+5?$7KEO#<R3zbWVABWw;6+LJq!g};Ve0E
zrA~`V|6RU%6VQ6*S<6nVni4JYii~f)wny3mts|9q$!;xLR32$woeg5Embc&$Xzi)y
zVan6?LwTSz)kpNDMvDpyPntdsXgy}aYKpWfjtQOtv|N2fM;f#)=GyZHXtiS6YVw}2
z%hWjIp_hyBS;}OVoYbE>Eh_cD>9`qaWzS#FPOG{SE&Y)DzT@Nabpl#%ndGn*Eh-<E
zx$#M$)y_rm2(-Kc^`>qQ=QseZWrg{~#FrW^DvYnR!53&{C?a@K8n^zimMsdjd|7(p
zNQ2h*>QC1Jtq`WIE~n*qvaivld|P~hVG2u5T&dHd(&L4<HwIck*Bjeu)lj1KChf8B
z+0Q%hEAeJGc*!X(T2#Jt{DQ_nYv*mjBhV_iKyPZB;ByaX6}>C^QlmwMQT<ES09t*R
zu!dr6c{K8S1hf{g^rTQ4wA@Y=eFU`5F>MVwt>xt7;g3z?*FsO2>7H07by`&V)w?Rr
z30ItHX{S|FiPp~X&wamKvnD`nO*_j=E@{!C@_L`M<6g$j3xY?W)%1?u<lp#h8qg|u
zN%W;giwcKFR-Od3!kMt9BCTaVdf*p9b69#(C=FUK?s}F4TBn${rks}3j&NfsLp~kQ
zDt%cjlR7Ob4Rqgt=UZ>jw71i$r9_LospVT?fa`vs_3A7yxur#m%HKA0vOsKgy(oAD
zTKD?uO)sm=+6S~|ToQe$(W1ihe;s!RTCbU~mLje7Z&tWKZ0RqHjx=cPJW{DA(CW&x
zwdAydcEuSRuUt7CXr-~_r2f=tQR$;c9(kcB%)Py<omOonTJ7e%_f0=m#|vm>{+pLP
z(xOG>HF{cp0IgFy1&=`MF*&f`_IA-+pp|2n=u3?j73O-`67OXMGGT2+T5Cc~dx6$e
zmYx(!gVwOc`6dIc!%SOSPHSTNP-96`sX9RGBTG(Psnep;ZF9ng0<B7^W;?AqO0--T
zfA)=8w7eV8a!unUue4}U`S`Il@hzJ2qXmyZ>(pqy>1xp$2Z7d@F`_RuT2wgttKl%j
z);%VyqeyFdg^>0@%Vn(SNP|{#_cN=3Rx_rpBd6t9ps(?*W1hP}s~<~F>Q9{(l~ySB
z8Gk({b-L9~tF98QM=QVi>gyGo3A7Ss@RCnjw5a@9iNPx%w(8CjJOZtCy~v!fWI!XJ
z)ql3=ON|y4PHXX^DbTvWgmo2Z?K!z{Bhb>#5glpJDw^RyC!ke}Y3s^qjhZyf=;GPC
zJkW|_$w~dG)1uP0#fx`<*t!}RW~XITqD3AUG^}Wxb1~35YUL#<jvD7%R9-j5tuN3D
z4iP*8t-ItYv{Pk!j00N#go?h@Xi;Iv<##uMR>9ta7o{2ehE3W21zOEmdQvD2T9uC+
z$Mse}rZviG6<!-@EYc(=-cVc3k`q_zw5YU$XJS5}RmIT9PRpc3Yu7aggYU!9AAwdO
zKVFimMT^QCSL&q)T3@OO9)Z?)@?2Bmq^Z?`R*{;bFEv_JxN+{W20$yC2~CQzwf1Vv
zexS98r6+~bp!II&i}4U!7ns&0r&VU;P~(ccj^iP=veXjGq)v-UYvesu6KGX;Ot90c
zr$npFEk{GQo89q?Abn<DGG2=ol^68gQwnI^$|`sSS~JLJSl!~2Hvp|N&Y~|hT2$C(
zTDvnqt3MOgQ>5i!-qIFmZD8q1p)_cnxYrhUbssQoJvpsCuTzZyLw(KwtwK7nOzO0#
z)UR(*{7T$(D%nn}z7nmpyIBln7P%FI*eZ9LmrU29MdkBW7#9Pr$7cnPK&u7W?h7h^
zHyCN17k#PGqQVN7mrn#*$xK*Zk=EU}r85DowJbd;lm@L0rJf&$*t)~C_2smld!-r&
z`_9=8wDMgL%cM?=N~aC`yDY@kvMGb@v>GVUB2TRv4xgOv3ADyd<t6j9Xi>S_H>c4+
ztIrI<BhdOjlf+hV$VQ;GcBbe{jTRLioM}1^w4DAFyeN%ZYw|R}`-HVwdQvD2TJhm8
z@Q0crnYMwP)+@jM#%y_(P6JwVS#sh^ofef|zqM%!(0U)AYNypuiB^XvI>Ye}n->DD
z#|gY-nHDW7|6u$43}^)<3m$>iSn@Mw%a2|A0JK*17k#PGqQbZDb2tF4ECU2DO0+r}
zvR#7Ms>#xmLTS+YT6KIR#8wp3Hk8wPer1qxv#(2iq{WgGSL(E=blMXe##WP7W9_sW
zDbd>gJi8%6x2h@7`lB^3S*t~h%FFfh!xtF-Y$tdGTD!^hid}hH`v9$*?L}W|w5V{x
z((^i?<<~**qC{)KiEJl<Rya#f3Z+4--kX?dKx;13Hj>jiwl&qbx@WE=pmmZZC$7|K
zQR#sR<0?RG?dmewPOGsJEw|S>4Hx4!eFj?2-FV4XEm~B5JiPKqh^=;i2p)mfR<g*w
zk#gt}(0bKV^rc3N3YX8_lnk`u&4L#tS|0b-x&y6qEIlcd2CZ@hBXR+)%Dn_%vh%I7
zXGR)dI1R)fb4X>$i7RzlRJzhN+zDva@ttX>)kKLFd34%v*Kutwpyg-aCA+m~QF*q3
z)87ECgVh9&Kx-<g^quEp_5v-Z8lo>XT2we~WGz>qWoE)AinEN6ud%q^n#9tRLTS)i
zS#@`5pml(0o5*9!`BZ}O(VGg5AhzDI<iwRaEh>Gwea#-A^`ZDYJFTWlw4Qv-YbY8q
zY$ee8<i<-5Ytf?el+7#gCk9)U7CZv2#6R?=2mMyz_gj0*h`!WlQDNCrC&vS=Vr2y{
zO0l&*SG!FRTWwi-QYZ~t=e~L4J@{cv+f+^~V#ILcN{6H=Kx-3APF$(eqS9_NcV`4z
zN1c|~X*E-#)jB=Dp@O%YFVM=M<0YrGXi@pl{P$--Z2g-<@CdZLO?uNm`#uhX*czTo
z^rc3N3Vkvhz;7dS=N7yu(fSegCJtytvGk-+8noKPubT?7b(m?J$!WQL9%?-FzE>>J
zDw#(tlR7ObEq^hl641(Zb)}tFb0u1vz85sO4#@EmXl1>|OD<{AqVmq&w$24wTW$y*
zfmVDqz3HzXe~tlKxo(NR)M!zm$GSi9G%}D0n=AH&9d;bRH>;<!^rTQ4v{pR+j&D{U
zW!mO)S{uv986DbZ+X}SOS#sh^ofegD&b4hY(7HBeot;(-C0gY9eS^-`u^rH=J&u>$
z(xOG>&C1opUEQXW1dl+=-Cu8-+Tc)Ypf!1l=u3?j6}G$GU>o#=Ri_GGlw#|1)TXKs
zTk~0ZQYZ~tZY6z=L2PB4Cis%gGB%G4HP(+9?gF$DSaRY@ofehOdh>h{(Aqy}i=9?W
zC0YYB7d32hDEbv>`3&JDkF;n}`Hfo*@y8)Y4;MTFt@tK-lh?K+jIGF2(U%%6Dm-DG
z`w!5{lqPslqE&Urrv*SOj-@As(xBC@et`=>>l)Lxl*iWbcPYkio(*3Dty&|+GO5#|
z(w1|l1p%$U2kf-dYNbT$zLTqA(fTj#ftF(mFL|X!i^@Ou9*8fswi_yV1X^)b^rrXI
zkJf_NIy_wTrACViXVgA~uOP>c5WFbSDw$!@2%z<lr6+~bpw;)zn$19~L#p6Q7F*ZL
zB^dJtcb*NjcCh5cl{zgd&C=Tg?`7O+z0XdowGypn+1(81&t-N2S{K{!l22N+sQl>o
z^7u{vxAuZZptWa>-c<k1fNnsmYe&(S8Z9b(dm!Ioh^-Aw*jjPiDtK_ud!)tElR|0G
zdUm)Re#z?6Nhpzw)`@Q^#!i!c@#UbVEIDzdPK!$0%p6e#Vyj$>BX(MClxUG3A~E#V
z&B_9_TwC&zl*}6ETU5U3z_<-C%UIe*@CdZ(kVC~|>z+&pT3OqPzSL+@VXf$zC4tr-
zOxQ+|R`@tuI?x)=(vw1I(2A@0Pd13Hy-eFi-V<IlBpJ)!&9Vz(>lI5*T&dHd(n#B5
zJm0dGJ!z-aR*6=De5DPwK1I3#tuF4oBvp$RmEXQyuP)GPR8H^+v>Mp-rb@x#*MQc-
z@}e&_T2$yb%{epBN@v2hinPx6`nC^fc~=k}Y0#Q&JGBF7S(&!2oL0S7!;KAIT(1JO
zCbQ(E{?utvX|Vyb+#$ByGM=~7YNtf2Z^5#LSDl*f23iFic*%GzT2vnVJ>!0$bt$vp
z5oo<DtvAixo_P(>^3E#yQlmwMSyI}T0a|HH*iMnwtt?CM_UBHPo)k)h){QrNiUF+`
zOxsRQD{*d=aZ6<PQ9#SpNi35(Eh?SzeQ_h86}9JzomP7#TDJ=84J)H-<6AU;?BylX
zwP;a!{F*9zfYy!!f=8g$PNz5J`MR?K(8_a2^rc3N3b&t#{|K}~n6SMft&GNNIU%;@
zvGk-+8nkkoT2ug9XPCCVoL0cjVaCo2Gj9M|84inOQl~|w%XH~IfmV&ax9qe!DA6K6
z$z&LD<<>=rt>yiA$viDuRG#tk(w;zT-ax@4&}wkq-PCb@#rr_((;(588Z9bx3LKmX
zXpI{zcu|@YKFSx0r;+bjdQvD2T74ELJ^@+*Lj+&4S;n#>1C7V^`EvrTV=OswrA~`V
zFSXeD4rmoLKCsj3s6=aJi3)}@re|G&R*Z?4EYqSz<&J&dW&m0a4F!)t%Tk?uG`IWc
zVW8ElvFJ;U78RZv8{QXay<ozQim|n@Ue4SQTV0xnjx=bUFZo~!(Av(l9p$mrV{l)i
z!-qP3fL4X3qAPV;RQgxe&-;N^r}t0ov^pu#%3a3OaB|Tfdx6%K54>cp7A-38e||Hb
z9Z&iqcm!H!BJ`&I9u@JfZunQxml`c9JRJJ(AfT1)o8Uz$w%S!`jCXZoSb9<@4O&wY
z{={GTyvekk<g`xy2r?G9YQ-;tntT__q)v-UZ~U9*BGB4=@U@**XC+#3`pSmI-^Wz~
zTI&w+lC4^_sQhi29LFHGjvf^}0<GL#$hVP>8>1n%O8hJOQlmwMJ?kb!0<FGG*jX{Q
zR=@g!dl_q4dQvD2THRXPMnY`eW!lbiTDiZ@G5QSsz87LE?{TqA>a?h|-_t){0<GGS
zAMLcdDA6K6PG`8<d_oY=svN~jc5Bh1@{XUzO#)h5Y=TFim3+wEG(5|!%0Mf3tmsRP
z78TZvxt0pFLYT0NBCS`2k9tB+IGd#>h0>ta%4I<-pmmyQyU1xx{dbr#LzlwMfR;m?
zSSEE^R66qS1+{_Jyo%rKw7M$MGFI|2Y_o;V16rd!dC6fdT2#Ji<y`y)-4#^?k3ehW
z3wP6oy4JQpE1S3ION|y4CPY8?0$Tn|*j15MY*0`H(3-*0lR|0Gn(5G?AJ96%v|Z)2
z&W%nn-gscZpO??zBbG^>7L|6s`}8i*s&LieEBDS*Hzit2ybOjsC+-~uTKa3e<dhaI
zD*tf!S{;b3AvXn&K<j%Uz3IZ%FY!R@#x2p88Z9bpp6%6QpjGv@;6-WNIyXNTo*hT9
z^rTQ4v^;GmmI18=OxsOPt7&M8aqFNfc<1RlOHN#=)1uOQ;aL^~t<~e4?6kTo(aL71
zYRFwW9@ks5$Mcd)TC}LVK<98Lpw(}Z;1Ou8t3kdoX%#XMXq}ua`ck7sg}p~)nF+MY
zO%c2((JDNo-Cc++GfPhjr9rFt`1CD6Ydq6-m(%*bcbsui)S!Q$C)~@D6IbfAsPy=~
zHxq!?_QpBww0bDfB0tk<*w`Qk{wC|%CcNa97A-2jT&<%GXmxBZcm!H^JCi3oduG!C
ztu-w~Uuv|daIV`5eEZY6rQk)0R_itv{I#??EIlcd1}($tJh<M9X4)QdS_Aj>Gu~<v
z6#=vsu;j#*IxQ-VnQFQTv~Il1XQ%at60Hk0YZ``?i@Oay;pz9h<dGIFD$nD%w=B?_
z_et;wv<kj+H%+Wov@Fo7|3&nrMvDsP?k+eAVrv!?{-HQ-?VMP2JH*y$mYx(!gVvnv
z-||9iWl9%HBwHQ#InviSG%gfhH}Pi4i7RzlRJ#1fRs168`_aO7T0NC$)vR0F;5BH_
zT%eWtUtaP`ix!n%cYQktXcaywcm!G_zqy;L-PnWgJSChGeW}r+!a`-Y<Lf3Tn6RfJ
zt;1XHcmOSj)1o5{T1AIk>I}4enYO1qwtDYcWn8-><RiqEl_e+jr%sDXGkT74fY>@U
z%gs*9tVC;my}E|3OWU*oS_fzIl22N+sQlm2x3d7Pa`Od`K<j2j@*e!GBltTeX$wSO
zYP6{E;flw4h^_lfXjY{4ZBhWv35zZi9cj>7xGmu;&}zxFW;v~5*ZUiLIbD4OwED5+
zr2f=tQR&gxGbuppL$9)STD_ELksmBJjPyBzzhm;u!b?)JXq<0RdG736h5@a=0tJsi
z%O!)}^r%v|WzZ8k28q7ZXi;IC@!o#}tpQBfOOcjqj8A=tt&J=_DU=4S*`F@rxb=u>
zd&y~a%Q(dNWM$_Bpyd)QmPwr!l^$;17jJ)ds8qpD%c4XptZ9A2lqF5^7oA2{<|V0G
zw5WW-kXiSD)*~OmBhZSx?QROM(F}jlDb^tRQlmwMMRF{C1hgJ8p+%9_j{>8+0j)}Y
zq9YAjh0`vXA+{2j)*`3%boU@*=ZRkz1FbDAIjKK&T2#7XM72bSt(uRk*lGDI(K_9t
zp`lH`vL&D=Z19AajMt(?<>k)%F9TX_p9>y=Rvt3^3@)3`2C=p2h3HF-78Q<4zc3nT
z<$Ni4QJND5819w=TJ>3aQYZ~t_X?lIy^I8=^_SBMbRT3~@_O-mptYDKC$7|KQEB#I
z=N3RKZH=FuR)7*Mzc!5xwa#Vx4z!Zj@{;LVw5Ysz{j>@|YvKmMBhXqk#oe^7b*0rn
z>(xflml`c9^vgGC5zuP7N${dXtK`sX!9XjSr6+~bpw)lOOT7L07t;pFX?5+NU>sYc
z<}sjklO-pv)M-)a;?{m~Kr1*?Z9A<%C0gXC+YMpcyWIy`W=CE!Pm30nCp*2a2(*H;
z3Lb%$exbXm(wf6<fK~-((U%%6DlENZO@E*@m<a<Fd%{KEXO{q4TUdHhC=FT(V>8@=
zp706N2Fhu5xKBQrd*9{{pjAvKmPwr!mFBE_Clk<me72sQmQ{&X#?H+R<HtU(3AFB>
z<0Z?qXi<5Kn4_P7){cvUN1&A{+TAogX7~u8Rr|8&ON|y4zTRCW4QNeeLaQRJlnoAt
zf!0x$o)k)h*2^s!-U6+3rnSmx9UVTxIIPx_t3a#56|qd}w5W98{dV}(Lfgqr?6iWE
zXa#j^Y1q|cV@04<cM30At3`{-)3?n{1zOLi2_At~{CIa$zU5c&i=ZYmL|<yOsIaqN
z7M#H^V8S3pTAR07`U9<VEIlcd2CWwFJJ$eOPBVoP$yUdc-}f=@I$o$C(5lXo6IbfA
zsPubPuk{dHiS=69X$33M`uC64hJ_QFWdmA~^?AuwEm~B5zCrwapw+LD;1Os!taCRV
z>s7TB#MafuqAxXCR5+w*<Dn2+K1~EKO5@hnhHZuctq_);6iS2E#6F8!0IeBJ8!V5l
zb?5pU3$;1Y31}T<$%!j<T2$(OrgA@^RpwQDJFO5UT3(j6hWm9Zrvj~#uX)LCEm~Cm
z;9fv|pcVE`@CdZ_w{|y89lIO9-`e|L^rc3N3KylE!mk#JeGt4T(efJ8IRI$2W9dnu
zG-$nWId>3f4Q1L8Ijzb2Mj0nm_c#u;HnZf!l{zgd-JW!)G|;-Tx~rX5s1mJdf$a@0
zF=z0X2rvA_OAc$%qVj=#3p@l`!`2HPfmW9|cT=<Dg>yk{-P<7gQlmwMw{mBB4zX2d
zqu@n}*8P}`#eh~UOHT@=K`ZCkofCo9Ql<@+(@NAO8Y|S>@h8x_z>*VJ>a?iz`QPdI
zu5OQaW;?CkO0>QPcQkx?{vsV>tLJ-Oa!QL9l_%!ygRe<u|15X}S}jP2Hhg$te4jAk
zi|9*@78PErHggHkI>Cg!700bQDN}L1<(Muy(xCOUL&e)bs~Xexmeb1AzK1bWoCR;F
zg|OtL{?utv>FDNtydk#MpSId*g(=apgmpIDD75Ma(Aso{mt4}KMdjBDH5m-C_3gai
z5ompMb2q&UU5!2Akc*-(HCj|y*=<1`pmmiA!xU-t`*TP|h^?HLL`NF5oS%8&uT$4y
z+AujSTc&}=%6;2jhS&;c$w~dG)1p$3uyMGn>##Y@PAgoA)}hF*hRaR1tOHt^w(yc$
zTC}KqNKrGs^Yne2;1Otj`&8C6;X+e<O|sSBqAxXCR5&I>mQp}#F%yO>(i)YJ=Md1k
z%+ixWY0xU&ZjlSbR<<2NiDYxa#ZLwsi_Ne-1zNRPa^gyz7L|IO=-LBf%Q>}=omPYr
zt%|nphF4y_mjbO%O!7#J7L_{}>5~YtwPK9m5oo>Y?rxgga^P(kw{nc*6BA!*w5agd
z-A#D=Gk^&r6lr}u(fA*rHJzm=jx=aBZ1lJb&^p4j5%So|oiNzgF?`iuK<hJ0PF$(e
zqSDALt?<rMhtLE&tw<$W6XO0b%p1H3cXgZe<|VJRXi<68`<i!w*2W0IBhdO-$KBNF
zpVEDSR<<b7ml`c9JTd+;{xU`Y6Gkf1dY-r5F`zYrr6+~bpk+?$lOJduW7<eLt>C+Z
zj29e7_yMgiEIDzdPK!#jIIn#Iv31DQ-%cw^iPpzNvteMS(!(LP{;9`HK55aS^4F&p
zZ3kMz8wwtQ*3-W3rrKF5MFOoKjYMB+w5Tv@{+Axm6LxAWcu|@YjyC^=zdAFLr6+~b
zpcU9^8qNuKFm05aR_#(<j9%l0rvR<zEIDzdPK!z-S`V2Iw6Yc-Vy6|YM5{-##Sj=h
z5`WRDt{X2&$*OU_Mdiu+FEs>Ook|HFfmVz9?xrdi%47ywJ4%bb)M!y*lM-F=tA)a4
z1TRXo=5{!69b&5$OHT@=L96Kg_$Y|2flM1Mr`6Co#h7vImOVggElW;Zsnep;vMWpC
zZv?e{oNA}lM~T+nfdPid%3gm$Y%O@gOH#FHQTeFaDV>4Vt>=PAp!Ke<yD8h+wFyA0
z=}Xa<8Z9ck-MiOwh^-||*hjG^Trq2P1)z1Er6+~bpmoJBPgS6m^OaB{*(_uGv?0c|
z^B1@QEh9@#T&dHd(i=~_CqZnT*ge)x%cew2Kg4P<+#AvxXzBLylJQ!!sC?zbw=03x
zr~`sWp!MuwS<@QlT;qUN_CumCHCj~o!(&7c&<bNhn<A|-S=|Z(t@$iHDU=4S{r#WS
z16pU9)+UdwX*ow4SHx{A1GF3ui)B)$MWvbAXEgw=%SR{MX~ihf8a+JNF#W-aB|z)+
zF<vrVix!n%PjkjEg4&!EJOZu9IowUTKgQs%d@esF`ck7sh3`8*xdgN_o))|)^@NX1
z<K_UZYAih|lm@M&1NT1ytx%?ok<&`Q8DR{_P^S>kn!%D2SL(E=G-KYP2|#P><e7F_
zu}ZYwq=gzf9@{wwXq}wGOXg|OqVn(Ab{>S-S~6Ym2(-EtA+&C_9}KaTb*AV`jTRM7
z-e(&QwEUScRx!3(RGnl6S~FRCQYZ~trnax~hS~|Hjg`~-urAq{ebb)&K<hh8PF$(e
zqSDtcj!{5sUYB`xT5(FWI*$o6EKP7647A2{<t59sXi@pW>wzDE)|noHN1zopsjTV3
zy??F%ttvf5Uuv|d@Y&b5_$BKICX7?0mDaB<{wC`VmYx(!gI4UWV@T^I)5ghZE!vT0
zycPW{3~0HT#WJbWqSAdO%N_(;;jT;UwBnU$?HnIrm=t|!3(#s`oR_TCqDAGFsIxeO
z-&9iY2()&OC~Nw2-f<V8mA|y;ON|y4)~Zw<e;Ff;3F8%M`TO;`4Y4(cr6+~bpk+vM
zc7vYqG}Fe*X&pX0)c7OApl?7cLm9D5>a?izOrGH{fY$JbEA6xrlxUTj9A((BWaVt2
zmGFp{Y}KO0$;*5n1hHj#DtH81Syq-c)lY4f8)$8PCi+sNMTMQBXVrq9F!yu8i_*9?
zw8ZLhK&vrJPYR_$%M|nq-_=cI+5|bR@1~)~8>jo>@0cuS$%!j<T2$(htMYK5^>N`k
zJFP?|S|g_QF=S}7u_MrWwuqPP)}lq_V~RA$4Ycws6FdT~@=ME_(p~#623pqTqAxXC
zRQSpBG@c#rVZubk*xJ44Z9bs&g{3Ej(xBC&|A=l7Ta{J_C6dkHU-+aNjaw>4Lu{E@
za^gyz7M12s>U0}u?G4*vr<J5c>-o$W!`b|mj{&VU;k@Lq7A-0dsXg{B&{`EGcm!Gj
zPs*CE_3N1mv@-V*eW}r+!n-q*@P+Z7|3}zeM^)9lZ5$VD>_7o&u(8l{Ok{7nyIZll
zP%H!!u}}<DRBUW)FtM>wQBhE_v0Jg<ncv>?%(~8+{m%3EeAm71{aM3<a5#sB6NFmL
z$9Po&twroSSxTZ6K16v5TBle$!SZf32p*zz%rtc-XnkbI$tYtjnzlXu6#q(GEp|-P
znkdq0v&P@#-Er?9&?@h!Cy6pGn&<u*f$z%Y?DF44&}y-<xH`5{ar~==k*<7}kroY4
ze@(gwUkT5%aH3Ev&$U|PK<g(vPnMEsB~<It9<;pN{@cjnZZ-HkU3sbAS_fKP*l{xI
z|Is4puj)Z*aJODxJ*8<)5^2S*8*gfV-V6UC=-xFwNtS8Ryz%zH=Ww^q-1u)IXk`>C
zq2~J$c@FNDQxczLq(#H=S-V^YEq@kH5^C)V^unKI>|p1~QWC8T7i(q$t^2H<WO=ui
zHVanzG>Rw)S~j=%PR3d^ZO~}vTF`Qvo1ke;7HK(cnqYeJ=+HX2TiNI7Nt#TH=7T+!
zegLh_3;&x4TDvY4SG$*-bQZLJh4EQNS~RR1`K~HxwORDv6w!AXB@XTD1b1sDJ5QF9
zXdUj@IR>;2v39bhme-0&%A+o;{(;sDcAShd)}rZc=lU_AwKeFPrZq*RH7$CQX~(@K
zZlIMItS9L*Et;R|xAiY*Wu5ikM9}(jzPQ@Y$2u6aCeP-xjI?N2yF`&=pq0eJDZ;ze
zE;#FG(8?ad2T8PE1wRc2ty-*|VyX3O@Ce1_<eqY%HG~}}&(BzkroC76z6DxVb8l%{
zfg-K+?Ndw#UmV2u%W#;dCm&>5G!JWIgMVYvCG5Y6pmlp}akbdyqPak8<sv@INQ;J3
z2gKe1t@kVp6ly)YzY{-+&}}gvB+=?L>cLIWYRB3@ORcEs!OEJhqdY)sCOb}^pRpEA
zCpPH!7PJz^r)XMJMOw{wPc`+8c{3I6*5d#@$&hK$JSuk=Tew@VCjU1Pw8|+Z)DYX(
z%|Od5kk2yGqTz`~Uv`7mEEY}`YPsaL?ge-2C_7J<l4$upD;p15?^!$5Qp<7u1m(Vi
zHU56fZ7Sc%Sc|6Pw{%(PnMwPvPT8R5Ilp#zq-h0NiMTr74KfwU>hBI*|2ncJhvXMr
zG_RuUdgrW<yqj9kJ7;=VmRpqpuQ$1hs}&<#tN^bv-P!3JhQI5lVXo3;SG(zBtR}tr
zmNV$T&`Jna)>H~#3cvrqAcqX>U)ru-uKKXjZ@0F}`QpFU%2MoHg<$2K+qboFze@Mu
zTN#Vd^z+VrT|w+rtrwbDuuv>_O0cQ2sfroIj`-+Jh)j&;o+-a#L9CO?M}nC1>f)+H
zr{O0+Y;7Gr%;<*Eu;G(99}xS_Lb93Yn+=Do;URFv%GTwRBv-6o`+tQ%tUGJTFpKZx
zcV-!{6#cn74aDZN^W+g4i_z4f%fn3|w!-GECN@ndb|Q6}DI#Pj{xCi)m)?ZQ#AsfA
ze4Y^?)+8Sv31aS}$Q?VJISRz~<mbbT#Avucb^HrrHU;<?kyym#_5VQ3hXrIUiCDLu
zH*G;|IBUscv=EyWFiGk8$_@Wwd<{EKW*Ljo)NAFTk02KI<dY^gT_`r{!F1D2@8|pA
zj?I6nHxV*1n$Pmxe*nblrt^^?_Gx=@HM2*bl^{0bB_C!aM#JCpA5I0adn_cIiNwyA
zNT>p0xnA)}60ujm8Vv)nnye+mEX1aaAE11h{`xQ6u|e!Sd4$GdG+m!@aSDie=l!9H
z%@B%trp+)twF<<yMK<Nrn<$wW&F@=h6a%q@!h9r%H7{RWt#@(ZX%Nd(gby<kqv6k5
z=Ldk;02Y$XL}D&4PU2e@u4DmOOCpx3MV^Wvc9pecn1z@(`Evx{$N>#O>@Pb{W*Ljo
z^iLD-I1nrM_^&25Qz&-l(M;2Zs6qAMj(I%Mn`oIB&8z;&`U}L4Jm(`p?C>v7)hWLx
zz9#hh3qH(9jD{or-FORPP1E@pkyw*UL+}OHQ&~XPl8EK=z3c#DF{~wz(L$`>y&xse
z&J7DeERCHfvy8=PTJ%Q4YasSuN0vYTd;h0dLa{kdW|@v3xP$)?yR%boVq{`8uXgPE
zClDLGhmQoY8TX2-4Niq_hdXw7FCS(kM#BLEZnOfi{QLMAk=U(C=TqUUVjUKcwIpIm
z_y4v6vC*t0kI_ObDI`eQZ(S7MyKp@_Pi7g5(KM=1YrJC<#@lFOvxQ={p3OF?BaYUA
zJ2o^xZ(?O)G<O)ClpDlyPUa&)tZhnhbzYf{jX|v56h6#IjE1{huapC^6)Ys1iNspk
z$L9jEi!2~(NyLhs8+HxEezTSgvk(ifF-lqV$j=S#SlK|nm9ZF2?<IQq!W}#6lV1}H
z5sJNk9%Ax|zLOoqHq_Rec$pZ@A4FX$3S#-{@R1-^J8yBd_skR7K&(w&KFmmrh8b&)
zO$4#+EF_zW#A?p$e+tANvw*B65gUE9SUV6aSdZ^yA$ClerWA}SjDJb)%g&Qo#$q(R
zWK$vv#Ag1p)x_oq#nz|KF?r6d_y)v=W-6jJ2{JL7SKXG)6U2P8=s6h)V*Sb%S6d7k
z-Uq}cWaYz*#AsO1_ERGeyT(E?MkMA}up0izBXc%BNg}o(dT4hLtHN3`%tCCXd73iO
zK1PK*=Eu&HM`$cY)5*QY9|W<_3B|OhA1V}U_bSv>#iQ6;5W9InZxUr<G;cj`g*S+q
zukeu|HY>nW?Q_d|J%|Nf<-?4`Xm~iXM_my6%0jZ4NG$%xi%_^@m9Ozh60y9qKOO+F
z0jwp%EW~{O%v5egJSzoa5$rs9gvMet^&Pt^7l^%I;HHVq6^dnlGuQN{+D?3P4eKzy
zNtTJxJhJWT86Y+-oR0*t&H0O~mjmqZeO*s2;lqr?Xt-cxlg1$CxRj3(i8XME#+OL7
zW&v4CA~xT}%M4=ESW6zGg;<i$0cG}sOxZvzhMgy~jKyfWv}IFo5Q}SDQWKje6g&KO
zo@ub@_kFly2ixgQnoNx5^^O$%3Su=n@sS`_>5iv*KjmpoxMQ<B^I=9}G;HwksT+tr
zU?JH|B$hINWJkDT`MdB*60zB5p5V(J>$8>&vk=R5X|B@l&JO%3)fjf3JVIkJn)d5i
z9lt6zEm2Mrn=cd_`hLFYW#4lJK&)~}y-Ame(LC$)tgk?9Lm562#7?jFRA((Jj-R`m
zQkD-h5~Jaxdg}^+SVb>BMkE%oQ*8)hek>qsNyN%DcgA0sE@Lfuj22=)qUI}|J3q08
zJ9dhlC$o&jXu5rVh4FC5yk2^1Vhe;~E*}?|N)^oB0mN)y>CFe37|rKgbo&Bg<KOa;
zAT~PGQ{9m}!yoQg>^nZpNQ{Q(tqSJ`u{`hj7?IfBM=tobq3u~f){=<TNf_-6UlnJu
zmOMrav564@%KLR|TY%VJcAm^K7NcpN<-VCf?9{eun%F|2*o{vMP0F(B_=2g(?Rt|T
z6Qg;nwMFrJ#r(VZNDw>s&{ORiy>%#vO^@NjjKpYov{r#lAePEPvYANi*|m4a;Eom8
z!zW3^+Km2n7{uzZmJG8HD?2YhX&-YAKht$2J5L^=u^3I4*1z=(#0o60t%-#R#b$g7
zGo7;Dl?r$41#5zGN`5~^^M=m~<cB+UdnF$UVz*;F)zMAoZU8aYNc}V!W+X<#+07@|
zf|x%G$z~$4vKNNpo4rP}fJ~BzjW`p22E^{NmJG8HO9%{63hfLS4tFg3YQB}R7)?Kz
zI(7uH3tj7JVvB@gRlhAVz5md+5{RwrrZ*unF`ADU;@KF)5_<BHAa-=2r@Eo*xNjg<
zqBkFABu2xzMe-d1v571sn~B6;TraT`?$}NikhLUYS3W1;OCTSxmJG8HyFN8o$!ooC
zGKl5w!?!XPqp9nt=5;}=nSB#YY_U-6)%V4wv4y>QfLLh<y$O?v(Y$}=zuQ3UloKBb
zVll@&)h_ws13=8qg%2|lqv6M?O^bloXcm&qL}JSGt}j4r3k%3v60t8Y9$v*e##%DW
zLhSsd@k*H$X)z#{!<BDkEJoAxHD3KdtbLJInpn6{Z1s<D(`lb`V?eBVQN4+fiP5}O
z;ia`e%(fUG31YKada4J<Z#@cP9Ub{FBQY92Us`h{i0xz{*-RvMtL^!1AeP1gvX(^5
zG-m~VuUN>5?_?nsUL{yrwyZ}}5Uaz^lUc@MG_`BAy9<bw_UfRCEfI>f{I$dsytc!9
z5G!6zZ=z&kH2+#}9KLFxN<}^r#F~!qR6T~=s0LzDmH03tF&fs{mn{IqGFV796N$}k
zQ*|GRd3p0m60r)OhEIk&)}6Ivn1$H)$CH({S3Vp9vH9#gd4$GdH2tbRItF6-dUw;r
zmI}qJ|132*9*)7+dF1V*H_<XNnislKCkXCX*M58?h&?#tsro0LyA5Ki`}1K&Vl=Gc
z;aCvF-m{QwCK9_-BI_Oya~r@XNyG*gEO`sWTCtW4vk;s8ca~E5NZmUiHiexhkI-0*
zrdF34;wy8Wuk53VEfb0z_`A&1ujt9?aL3YC=}nAGjOJIHP0ayferx$i5POl}siyTV
zgs=119L0wjiP3Q7nvH!yEQ5t)Gm+Sv9Mu<qSm||ql0>XS(240F)|s_rn1$H2Ok0$X
zAGbaPu@H8iJVIkJnyy~lp&s0^q5}tNV#|eM12RRJPOXXS1Y)@d=}oLmjOMllN-hDh
z;Y0aI5G$3lxH>Q~za!kS?ZfymBQY9U)vSU4AN$8bvYALMa>=;9Am%-sPm+ig{TzlL
z$<mj#WSE86=^{gw=N)%+0kOsGJb8r1Vl>T|_5y!O^`Pu<O)Nqv=3u?TRIp*LJRo-6
zOK;+3Vl>~iX7eo&8(4vl1hK~H9%}lJ{%Ih#sUja{Bu2wWYda2uJNAc#WHXW2xqb)d
zp;#q8Ng_6FOAx+LydP`HFblDLZo$f-O0V*RSU5XR9-*-qO@~g*HUREe{I@Zh*b1T8
zmCP$mIZo{D2x5D`>rH}8jON*z-u?_?p+EUZ5F2{dLv4{SwjzjK{l$kFiP13l$%oG%
z=Kh<H5s9g{Z16jePAnj6NyIwNuR9LDD$Zdod5jif-51PKJU8sZpWPp1=gBN%F`DMx
z`YRg5eBvi)Vk?DWQ?srz?fKn(4v0CQ)SE<^7|j#PT`T}%F{k-R5Q{nPp<eJEx(39a
zo#Dfb#Ax{2ZcQ?X)jZ3`h{SRx#LtC0Hi89YEs0p{^ZM&REQ+<{F<OY7TokH&jD7hV
z?$}j!p3E{9qv_Q4zXL%mDt4+Swn`}GojuZ2^=I`FAQlp*H_0+Fnma8Cz6N3gj`EQp
zrhN2J7ZwRB4`S<&@nJ?{G#uLU>q-#&$wIQ3NNn}zFnnX!ipTjRiCC9sHx`3fAJ&p#
z7GhV+PF7BpDU%Dt7P0f>5gLopG<5mhZ6KCDccvy5DHMB_W3|blsec6!yEad6(qv*Z
z59u-O4TuFT<Rd|Bcmq#0)O&jjh{cETVMby!Tsvf2KM*Ujh>sD8UB2CEE!?rjEFf!1
z#8wr(hHs!gk+tM8T8P!_5u%jp`8yoMqS<*e%UF!2d-}Be1Y)II&eg<L3&kRA)|igR
zeya^)xmxK>x=f7b@g?WutKV+4;UhupWGs2rKx||q5VLE?hZ%{{u<h-jsvtI;g=904
z*q0f(Z9!}U3&>g$v3?Fdad5}(u$Bz75UYA|loI2bb2f-&Y0tMZ7Ncq0t*wJWtabK9
zn%EklSd-jqO&j+1#NW1f=g^xEGBKKu@rv9DckGM}9|>Y#o_eVEZjRqkEH@u!Bu2xN
zcWYb+v7sy^n~B7{PG7_~En3S0vX(@wNlM&f5KCk&8D=3?FUVhcZxh@a#Qw7LWR|fQ
zO>>lt`T=4E(wAvsYlUKe@<f?VUfXdC?$}?}WXQy5?sw<JVi0TchK~fXV>>+5otNV#
zfY|D{`e`!ENQ{PW%K1D8u`etnn~B6?4%C|ucdXPqK1m|Bt*`Y#5bMlZGR#7(*OF;U
zo@Ke;f>;PUPqs1^qiO%@zV|__<M~KUEJ`RAlW(1=c)<&IL9AVZ-UQi5em_QYrOc5%
zAhzxj9|>ZK>pfK0)N8vz?8{|7%t(xeE(6-*>lK?^;bTN%vqr8j0AiC_K-Q9oo$xD#
zV!K#N9;1brTgD8<!J|%J5KCp}$t+_rn)a!1HaCcE*sxv`TPGCjQ((QR-aQk(YGBt!
zy$O+t(fmTI5jjCDcQhXfVsCss)YRNpe}h=>t$dh~7!8AZb+U&$c7TOsGm%)1u{Kd4
z_JRduEs0pBSND_Pj@fPFJ6VVwUmv1m8U7;z#2T>kWR|fQO|4sJ^#HLdJ)$+S^+GY*
zLK{rm&Nes*cdUF*y$O?v(fsyDFZ^DyP9HuJ#DXrmtN;AV;$I^z^W(#e#AsNi;=qO=
z_Kt;QGm+Ti9OK<U%%d-#BoXWFwr&rIb!06WW+67A&1}W<`_!%=HjAAnkI-0*rcQgD
z@l^xw>~?8l8-!vBg*Te=_PZ1cVmIyeCPF4g^D&e9E`mFzIPsAncI1q^>acSzzWQy6
zGaqIoM#EUs1AO({YZj8tL}GqtuVn`@R~J4>BDU&c&mJJwj<sZ%g;>~wY06t0->V=N
z%+8ZXXe>t4rm6K^;EqjB*{6wZ6pBqOvdQE#uy}3|>z=ANQ8F=_H!Jw=2#Cc$<Rd}M
zYlVjzy?wDKd{xZ<hz~Ooqhan+{Yt_e8^l7gnMf=t%Z!g8ww48CEs5CB<5k~)*bUZ_
zVHRS6XI3gh*QGuKG3&>CD`PR5M(hd3@9yjEjMKz63B}6UZ8j}^6W9;L%IwmcXqgzz
zTYvi60mQcL;Uht;$Tbhu+@wlD5G%fq4>J;@q2I@^D?n@t3(008vE7f?`heJO7Lc_h
zV%g87;_slJu$Bz75G$h2R8}4d>JMTC_VcZb#b`QsWBJ)|$41OLp^0r4ily0aG3DKF
zWdmX@X6sFiOpNAxuirF**pW~^62xkD@Kh6Cmch>z$Tg1-GZLfWvxU2MftVi)$z~$4
zj{P<j1+nEUAZtm)y4Kiu8t&Ld){<csVnb8Il^xg9@O#A{>^zxeEJo7}sS{^{Sa|=l
zn%EYhSa`8$Q_iY=9YAd00KJKoiP1bRCI$a;{oP<b62z`n_E7tkJG}$$SiPZqn2{I_
zmlk`p48)ePkZdLrTYN6!J&0Xm0a;5T_H$|7;vn{$wPcuun0wSzrSRnNS#Zb74&z%H
zi_tV-bfsn>R<GS9O)Od{R^Mr>>EN+4_}zWE_IeX96QlWqS<Ufh_p3Ycksy{7=ApK%
z8nPe6th(@FMq)Iq`rPFJh;?Nl*-Ru>zwHNnE!AQckhLUY`TBgt4+=TOS~AQ+?C<Sh
z<?_7_)j;e6J5OdAi_!E(q2@jymQwDzCbm^5mf^h3^zCvg{(da6yxt_p#ArU@PY--8
zRYz|=62t~Pc2`#h=EKhzSW}q~GZLd=!G<OA|6|`+NH!CRwS2muGu*M#Rrn-{*bUoJ
zx#5m=VJ#VEA@+I39Od4s?f81dIqW=ngvMetHLo6C7{s3ay{(CD6N+tj-ELaexrzsT
zRgC|qH;FPanlCKtd>sBiRxtCO|3-q?*Kh8syK`6y+_8Wx`e`!ENQ{Q9_QmypJ9d?Y
zWHXW2_61${gIK1le3C>g{7_395Ua>qGR#73U}B(htMDd!xMSVfd9szU7)`tW{pt#0
zrxH`O$G2T5*4=%FDZ|Bo6o^G#*PCRS7|lbwX2<vQ_>ja$f>@8v<XgU}4O~D>xy^?e
ziP6v@bt3*9bT|viW+Jg}%{%n~v2!dSYe~dzj7r`HV&7OxhFOT6vze)+tgrDH#60fs
zt&GKJdbF^2XArYm_*fI$Ar#B+xzn^hZ~c5A_JTEOGBKL(IoEn4+%dawJ`%)QsqSjN
zwzC(2Sl1=`X)?@6jD|DIX2#z^?_nX?OeA)y?!6x%_KXE&l0+<SVy_?&E4q~LWFfZn
z$xOv+(r^4^()#Q?nPn_S)0`j1tpTwab<#DlokFqG#dn!1`#gUJVtwoCO}b2s=DY5n
zz;|Fd+<=b+u{Pw3+hmi?VGt|Qhz~OoqoK`+kWTPbaR>{^W+Jh>|J;6o*lHG#wIpIe
zA8O&70$yb;8D=3?Vc}$D(}ni&aL0bJ^JJE>7)>iTy?z?R;&Z>##C8eA{7ddOP5(Uf
z3W%-9qc<O9Vl<C#m9Y%&*roh@B#4<>xU1J{)+h#I#R~FaMq)H9IIn9a5F5!tvYANC
zK0RnLh;3v6SxX}3Jiq@pxMR0iONLp9r9GIXv>4>$2Vz+Y@vV%-Xxcub&ngg`dFitz
zwp%Dxs&tI$l24tRAlCn~-ekzcXuhX(s56KyxW-3<SbU0``t^Fg0U&lhkq<KxqhV}%
zwnZT3e4URGi5))HtvQIbW&v4CA~reYRbCJaW-WP)7Ge%tXDBs%?2dxiZg!r`G8Uuh
zp~Wqaf>@@RKQyrzp;$_pJ*H>Na(n@?G}Z*=lKg&*=FN@|YY$>RbNEOQ8yw-T_Bt?e
z8;DH`)lZXQMq)Iql(ug@h+ShL*-Rw%Z_USZAeLt?pCl1mZxd4+#2T@d46_j1ydzM#
z-YP8v!~)oPvX!wIP3^Kr6$7zl4gP6jdxT>1z4n^Imp8$GLHBQ{Hz6`Hn&+)`1b-47
z(}a%%v00_u)vM)#@KeOBn(<*qVl*u8;M^a?I<SyzCK8+9CC(1SX0w2-B@ru7a9S@A
zJH%Qt%tCCM)dHo%&MWOe>^VD6W*LjobmiK#@*uXobk@KBdta)(LNTTMK9fsC>QT63
zOUmd?m`sf3S7zU^gF9wlo{t2vD-Ye&6+W5qZ#4ZX@L@(`G;A^COm`4F%tEr6NNnxV
zH2nS88y1kYBw}USyO#wqmx_ER3$e42!OFa<DNR7EB|A@M8H>@hVaucjAlBxejV88F
zDE7I+ep8=pRhxs@s7$%ECPF4g^B)fj;dl4lv*<Y)31YLBxT!w}bn%6+iji6QFe5P<
z-ZbxO3SysGNXCf7thTO9fjd?r8=oW*v-(r{1c-HEEg5DZwr6svl4<fV{1lxz>^ymd
z#$q%*-~H)%5Q}`3Uwiudg<_j49WZUFx*;owoqMe}Q8F=_AOAG43*0e>4}2tuMSgcv
zy%V|&2C+UL`7k3f8m6Wc#rMoPz(TT_NUXixc>FN?mn<M_NyMC|FZuyu_MiAp7GlM%
zLY1Il)A2n_8?p0bma!O3V|NYz2Vw=IifCd7gkqg4A2juP)n+z`{b5bCOpNCB0$bth
zJi2Y<BSGx#EjM-dlM1y#Y{e%1G#O?jMnh%KTD)U#Sx7b$iB+5Ba|`a6>t;SlBG&8o
zBYc0wcC01CEX0<dovVBbU5=loGo76$TN#VdbbI{=Z$a!uV@FNwpinHA>5$3hZ1ck)
zcD0G##K^>G?pNBk5Ztjb&G|?Wb4_wn3%+%<2eCsf_%I_e8s4(8jf1a>g<A44BC!=u
zhphv#CM+OpNyLJC+nC{wO<^s0j22??SEniA3B5w$|6|+Pc{0mbjHXlFi{e*BueWZR
z*dd|VadWIGCHrRlxnlNrdJ`)Xqxr8v!|Q`sa7p+7MuOPsChqFNU2WTg*o{*9X)?@6
zjD~ma?Q92P<x2B0BC+Z#ZT&&47YoQFiP-aP>+r*|!dXimqlH*%wqT{~>VNpEfs^b!
znPn_S(-{M1*uowAWK~Lge6d2Yk=5c%O?&kF33u$3wcf<b#ArVIXZDjIRy`XZ31Xpt
z+|?VG{PA@jv$FGHMq)HvKl4Fh5KChr*-Ruh>~*R$h}q`glO$rwj#+7N#~QPi46_j1
z`zb{E?Ul14+_3<5o;*ThF`8bRU_S=LqVJc}#Nvcv9yJb|HYIxF@1Pev(3=FA7|lCh
zZE*p_LLTvvAa?kNn>ugRU;NJF?qfd8NQ{PgN4ewQwp4t=$B4w-{>{1yVtrXa){=<z
zdEKE1h%I9+d5jifOD~UAhAVaP-(%<4c{0mbjHc!+y@El^Z+&G=?66SmcFiNEVpaB?
zgFDt`gWe>{#Av>A^zkGR%etA51hEdq-PAryTg-*8iq)g}Fe5P<4tBhY@9eycg=904
zSk@0i{(#sO7Lc_hVrK>~Yzt!lSWAXkh~>R7UHSJrp)uUCa$EUU#$q(R)?VokV#=WE
zn%EJcScuP2Q->>I<3P-Pu-+ug#Atq{+>b#ZmOhk^1hJgSuIjS+nH)f@&u~7>NQ{QX
ze7CfPuZl-mNH!CR+1uI_1F_F6AZtm)DhL0?cM|g)!FRF{dpdlIGNfG79U#_*ohP%5
z#b}zIrE?634L12|Vn>ByHGPkng72Tg|Btmb>rI+WjOKr$hNObnu9|!#h*fUrrkbj4
zy$fQ6eE2XUF&aLwnmGu>2C<NACK8MLk~ka0R<VGrB@qiS5A%RKc9pecn1z__y?IK<
z(l>H~*e`aT%rX|E>FF#*yMkE!i+Y;aF`?Ky<+#azQhych*qU^`NtcPyyi@F(ejwKO
zH6ICL<4(G&VQwqCfLQz+KFmmrh6zP0b^tN^w|tC9Y|yuD`0uf%EFf!1#BR>`P!Gf=
zv6ehW3$eS?W-1w<!pDHvR(77uG8Ut0@{7PjAXa%r6HV;6P;6bD6Q<w>H%%Z`V5Q!C
zkcrWJ){S1xK<ri|9|>Z&`n#$3^8A_yVpG@fVMby!{NAVfOAx!oLb91iZ0w}H1>uh6
zSj#6##0sp>KMKUEvz83A5c3~0UkO_immS0gu=C^*8jI0%eW3t+Wlo;<tu(O{Lb0~>
z;!SO<ST6vvx2(yKiP8M?#Z37?Y<nj@62zLFa8+%0<-7@Exw`15$uJ`^8t%+i`5B1y
zVIkQ}BzC$-_)HL6$^tS;BKCG^aDEUw!&)-TLM&$XEM-QXNjE_36FX048H>^McBk2A
z;f`g>+(8qI7m8(TaMDz2L#ufp_KY<_xh20Jqxsl}10q1IUp77x#2oXwtJb#aB@jEF
zT|Z5R8Hv&GQSC|bAXYR7A0raW*}cy<5Np8#GD#vf+W#v4?0zb1$z!w-o4q(l39#LV
z@0qiMohP%5#b_GXqjPBxTXdqUCU#ON7T55U$*zq(zO(cAc)baciP8L$+p_W?R_Zh#
z31X>T-PO4RJn(&jC!gWNjKpX-aZu2A5KCqu*-Ruh|Iw(oAeQ?qpCl2xp78G#+_74$
zCBrPlZmt`pY<=|T8{DyB>^ymd#$q(R)I9%V5G&TNw<dN<C^n?=Y17#7Eco|hdHU;3
zm`sf3C8B5GC+(ab#7BbI^Q>;_M5h6F;Eq)u!iO1&(J-aS8D|ii!$Pu|NbE@0xW^!N
zlm%ohiP+d*<Ew$#Yu1us7GecU&QKzz=RXf(c0>7A#$q%rVjl4s#9Rst(8Nv)#hja-
zF+C|XV>o<Ov?-`J5i&8FU+^!S0(b1JEguPD2X4Bm?em{G2x4wU`7k3f8jd-2`5}l+
zU?JH|BsTBLK77664i=ELBw}T9B|HSN`>Z9yEW|F2oTgk(sn-X@^4RgMjKyfWVCLOe
z5bJn#s3vwsD0aQsS=0AvqsoI=<!gEqB@?50^8MsBAU5>|9|>Yj0$tSt5o<buSV9sX
zW+X<#cV74LdqwwKe2hpepi>TfEmcPrkhLUY&F#$}Kx{T^$z!w-+go?KaxlQ+JCA+r
zJeg%IM$;@ePHzRVp~pvSVrPY7(_5S~O$hz)7{nf((3@zP7|jnS<?;Zr9jEz75L@H!
zrg}_mvJb?p&+=hLVl+$`x49YIvCb?cn~B6eE<c7prJBzIvX(@w-Hk)|z2XVhl3^BN
z4-W(>&!0Xh40r53J5OdAi_z4*L*fY#n-?0OiJcRQnOmJVz3V+~5QuG=t2Z$+F`73j
zdkVi-e6fI!1hIABUDc_bmUIKLCSiP-kr)m0{s^f6VjEaUHWP{6&+>W^{D15Y3&>g$
zv3)B%g5i$kSj2a-5c9E`t=uR!=Ou_$W9P{%V=<cUy%BX2#Jq<GYGUVwVlP`Km|~aY
z_X4qEBlIR#CPwp~ANqfUJ7zVSj|8!e?cCIdMGFlFv7ux5Fe5P<j%x7h4u~bNkZdLr
zt1xiYQ4ssf0<xAwY--@D6(Ck&EZ@mOEb9h;Wzhu3>mb&hohP%5#c29&L;cYpR-(=f
zO)Nnu7TNZKDdo$NYao`VuHMAU#ArUDvs*HV9j(ttf>@8auIi#j7iWT4k%oMjkr)jh
zwzRtqV#8TTHWP_CJnmHu#5S^ktR)d^Jh3`{Zc7qt$uJACxqD|S|He%%0AiUN@vV%-
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715397909.lm-648d78788c-w6whs.18989.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715397909.lm-648d78788c-w6whs.18989.0
new file mode 100644
index 0000000000000000000000000000000000000000..65ef92d1cb4807f67916730c6def165edcc65f96
GIT binary patch
literal 24616
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715397998.lm-648d78788c-w6whs.29106.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715397998.lm-648d78788c-w6whs.29106.0
new file mode 100644
index 0000000000000000000000000000000000000000..95f2c7210a10ed2677b716f8c2601b72c283d91a
GIT binary patch
literal 32808
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715398726.lm-648d78788c-w6whs.62237.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715398726.lm-648d78788c-w6whs.62237.0
new file mode 100644
index 0000000000000000000000000000000000000000..ef3262c3abb38240bb408ec5e6d47cf744657db4
GIT binary patch
literal 40
rcmb1OfPlsI-b$RA@0SSf>c8nI#hX-=n3<>NT9%quVr8@;*UlIK+Kdc-

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715398771.lm-648d78788c-w6whs.65359.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715398771.lm-648d78788c-w6whs.65359.0
new file mode 100644
index 0000000000000000000000000000000000000000..8733c0a19f892210d3500932331253288b0132a3
GIT binary patch
literal 41000
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715414791.lm-648d78788c-w6whs.63968.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp2_pp1_dp4_mbs2_numbs1_gbs8_gpus8/events.out.tfevents.1715414791.lm-648d78788c-w6whs.63968.0
new file mode 100644
index 0000000000000000000000000000000000000000..5e706d48693cc36b6927b80d22d1ad33ab16140a
GIT binary patch
literal 49192
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
Z1GLU<7knwv!iJ;&-1ZsJ3fzGV{|^zhSO@?B

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715408354.lm-648d78788c-w6whs.59520.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715408354.lm-648d78788c-w6whs.59520.0
new file mode 100644
index 0000000000000000000000000000000000000000..fb514ce346a16566c4bfcff29a26bb484fb924d0
GIT binary patch
literal 40
rcmb1OfPlsI-b$Q_{~Ia}_uq7s;!P?_%*@ksElbTSu`+sHaP24n<o*si

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715408444.lm-648d78788c-w6whs.2027.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715408444.lm-648d78788c-w6whs.2027.0
new file mode 100644
index 0000000000000000000000000000000000000000..424ecff6cfed4aecc1f20dd3fe81f4c0be2d9ad9
GIT binary patch
literal 24616
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
DC0KlI

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715408551.lm-648d78788c-w6whs.13314.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715408551.lm-648d78788c-w6whs.13314.0
new file mode 100644
index 0000000000000000000000000000000000000000..73f00e101820cb573bc52cec05ab83420a1fb83d
GIT binary patch
literal 40
rcmb1OfPlsI-b$RE7ay-Y+<((iiZ`h!F*8rkwJbHS#L7r!=7Prn@4gNS

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715408890.lm-648d78788c-w6whs.29746.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715408890.lm-648d78788c-w6whs.29746.0
new file mode 100644
index 0000000000000000000000000000000000000000..b5741e22da0ef14f3e0dd46488b0dcf5c6aece15
GIT binary patch
literal 24616
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
Rff*U_St}~56d0fm`M*{?99#eZ

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715410361.lm-648d78788c-w6whs.25075.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715410361.lm-648d78788c-w6whs.25075.0
new file mode 100644
index 0000000000000000000000000000000000000000..a61419f243d54a2606a14c0fc728de4a9efcb21e
GIT binary patch
literal 27108
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715410554.lm-648d78788c-w6whs.38391.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715410554.lm-648d78788c-w6whs.38391.0
new file mode 100644
index 0000000000000000000000000000000000000000..52bee25c31c343c55e15c1d771a6a53cfbcca757
GIT binary patch
literal 27108
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715410986.lm-648d78788c-w6whs.60723.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715410986.lm-648d78788c-w6whs.60723.0
new file mode 100644
index 0000000000000000000000000000000000000000..cda3e7b0d2de77890c7520f199777d5487e8b203
GIT binary patch
literal 27108
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
U6}s^@C>2~;sSDED$vd+D7e5B%-v9sr

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715411336.lm-648d78788c-w6whs.18568.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715411336.lm-648d78788c-w6whs.18568.0
new file mode 100644
index 0000000000000000000000000000000000000000..5e35c2b99fa421d2d360226bb1dd785b57ff82c0
GIT binary patch
literal 27968
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715411745.lm-648d78788c-w6whs.41335.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715411745.lm-648d78788c-w6whs.41335.0
new file mode 100644
index 0000000000000000000000000000000000000000..3ca9d9d8795b7ed3eafdb424305687afb31a8da8
GIT binary patch
literal 24616
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
Mz=y4<tVzf4zyC#CDgXcg

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715411872.lm-648d78788c-w6whs.52135.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715411872.lm-648d78788c-w6whs.52135.0
new file mode 100644
index 0000000000000000000000000000000000000000..ccf610cf3c4bc96f2bae17376da9333d083d4976
GIT binary patch
literal 24616
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715411980.lm-648d78788c-w6whs.62858.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715411980.lm-648d78788c-w6whs.62858.0
new file mode 100644
index 0000000000000000000000000000000000000000..d846b89a5f6b6ac6bc06a92bdfa4f3fc78cb5f46
GIT binary patch
literal 24616
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
M@L?+|YceqW7lkDrU;qFB

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715412280.lm-648d78788c-w6whs.16218.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715412280.lm-648d78788c-w6whs.16218.0
new file mode 100644
index 0000000000000000000000000000000000000000..5133974ea7476b25e14b2132c80d10b4f81eafd2
GIT binary patch
literal 27538
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715412911.lm-648d78788c-w6whs.48494.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715412911.lm-648d78788c-w6whs.48494.0
new file mode 100644
index 0000000000000000000000000000000000000000..12dc22009d2194666e3fce25f464049341d6cde2
GIT binary patch
literal 24616
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715413096.lm-648d78788c-w6whs.61064.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715413096.lm-648d78788c-w6whs.61064.0
new file mode 100644
index 0000000000000000000000000000000000000000..0adf9db677a67ebfdf0b21c3f5d733b9d586bc2e
GIT binary patch
literal 27108
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

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715413170.lm-648d78788c-w6whs.5804.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715413170.lm-648d78788c-w6whs.5804.0
new file mode 100644
index 0000000000000000000000000000000000000000..29e80c56556b6ba50d0020573c35471344f2b90f
GIT binary patch
literal 24616
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
Y^^gPMEEvIuWne}IeAtT0ng|U43#^MH*Z=?k

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715413287.lm-648d78788c-w6whs.17548.0 b/megatron-lm-musa-patch/examples/llama2/tboard/tp8_pp1_dp1_mbs2_numbs100_gbs200_gpus8/events.out.tfevents.1715413287.lm-648d78788c-w6whs.17548.0
new file mode 100644
index 0000000000000000000000000000000000000000..784d984d4d7a2d4bbebba588e9b98552a8d65e07
GIT binary patch
literal 24616
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
EFKPwYDF6Tf

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/llama2/tiny_model_test/run_pretrain_llama2_cuda.sh b/megatron-lm-musa-patch/examples/llama2/tiny_model_test/run_pretrain_llama2_cuda.sh
new file mode 100644
index 00000000..917fcc0b
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/tiny_model_test/run_pretrain_llama2_cuda.sh
@@ -0,0 +1,180 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  MICRO_BATCH_SIZE=$8
+  GLOBAL_BATCH_SIZE=$9
+  TOKENIZED_MODEL=${10}
+set +u
+
+export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
+export OMP_NUM_THREADS=4
+export CUDA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export ACCELERATOR_BACKEND="cuda"
+export NCCL_PROTOS=2
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+MEGATRON_PATH=${PATCH_HOME}/Megatron-LM-240521
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR/oscar_9_text_document
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+
+# export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1)
+export GPUS_PER_NODE=8
+export NODE_ADDR="127.0.0.1"
+
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+#export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+# export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks[$NODE_ADDR];}' $HOSTFILE)
+export NODE_RANK=0
+
+export MASTER_PORT=12355
+
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+)
+
+MODEL_ARGS=(
+    --num-layers 3 
+    --hidden-size 4096 
+    --num-attention-heads 32 
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --init-method-std 0.01 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.0165 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl local
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type=SentencePieceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 10000000
+    --eval-interval 100000 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_gpt.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/examples/llama2/tiny_model_test/run_pretrain_llama2_musa.sh b/megatron-lm-musa-patch/examples/llama2/tiny_model_test/run_pretrain_llama2_musa.sh
new file mode 100644
index 00000000..eb1804c7
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama2/tiny_model_test/run_pretrain_llama2_musa.sh
@@ -0,0 +1,179 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  MICRO_BATCH_SIZE=$8
+  GLOBAL_BATCH_SIZE=$9
+  TOKENIZED_MODEL=${10}
+set +u
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export NCCL_PROTOS=2
+export NCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+
+MEGATRON_PATH=${PATCH_HOME}/Megatron-LM-240928
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+# export MUSA_LAUNCH_BLOCKING=1
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+# export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks[$NODE_ADDR];}' $HOSTFILE)
+export MASTER_PORT=12389
+
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+)
+
+MODEL_ARGS=(
+    --num-layers 8
+    --hidden-size 768 
+    --num-attention-heads 12 
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --init-method-std 0.01 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.0165 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --no-bias-dropout-fusion
+    --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl transformer_engine
+)
+# --transformer-impl local transformer_engine
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type=SentencePieceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 200000 
+    --eval-interval 1000 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_gpt.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/examples/llama3/8B/run_pretrain_llama3_cuda.sh b/megatron-lm-musa-patch/examples/llama3/8B/run_pretrain_llama3_cuda.sh
new file mode 100644
index 00000000..07fe5a6f
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama3/8B/run_pretrain_llama3_cuda.sh
@@ -0,0 +1,181 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  MICRO_BATCH_SIZE=$8
+  GLOBAL_BATCH_SIZE=$9
+  TOKENIZED_MODEL=${10}
+set +u
+
+export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
+export OMP_NUM_THREADS=4
+export CUDA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export ACCELERATOR_BACKEND="cuda"
+# export NCCL_PROTOS=2
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export NCCL_AVOID_RECORD_STREAMS=0
+MEGATRON_PATH=${PATCH_HOME}/Megatron-LM-240521
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR/oscar_9_text_document
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+
+# export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1)
+export GPUS_PER_NODE=8
+export NODE_ADDR="127.0.0.1"
+
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+#export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+# export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks[$NODE_ADDR];}' $HOSTFILE)
+export NODE_RANK=0
+
+export MASTER_PORT=12355
+
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+)
+
+MODEL_ARGS=(
+    --num-layers 32 
+    --hidden-size 4096 
+    --num-attention-heads 32 
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --init-method-std 0.01 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.0165 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl transformer_engine
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type=SentencePieceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 10000000
+    --eval-interval 100000 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_gpt.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/examples/llama3/8B/run_pretrain_llama3_dlrover.sh b/megatron-lm-musa-patch/examples/llama3/8B/run_pretrain_llama3_dlrover.sh
new file mode 100644
index 00000000..720c054b
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama3/8B/run_pretrain_llama3_dlrover.sh
@@ -0,0 +1,218 @@
+#!/bin/bash
+
+# Please change the following envrioment variables
+# base on the cluster configuration
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export MUSA_BLOCK_SCHEDULE_MODE=1
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MUSA_PRINT_ENV=1
+export MCCL_CHECK_POINTERS=0
+# export MCCL_PEER_ACCESS_IPC_FLAG=5
+# export MCCL_PEER_ACCESS_FLAG=4
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export MCCL_IB_GID_INDEX=3
+export MCCL_ALGOS=1
+export MCCL_IB_HCA='mlx5_10:1,mlx5_11:1,mlx5_12:1,mlx5_13:1,mlx5_14:1,mlx5_15:1,mlx5_16:1,mlx5_17:1'
+
+# export LD_LIBRARY_PATH=/usr/mpi/gcc/openmpi-4.1.5rc2/lib:/home/apex/amp_C/lib:$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu/musa/
+export MCCL_DEBUG=INFO
+#export MUSA_LOG=0xffff
+export MS_DIST_MEMORY_PATH=/home/dist
+# export TORCH_CPP_LOG_LEVEL=INFO
+# export TORCH_DISTRIBUTED_DEBUG=INFO
+
+FILEDIR=$(cd $(dirname $0);pwd)
+PROJ_HOME=$FILEDIR/..
+export MUSA_ERROR_DUMP_PATH=$PROJ_HOME/../
+WORK_HOME=$PWD/..
+PATCH_HOME="$PWD"/../../..
+
+############################################################## dev install flash-atten #########################################
+pushd $PATCH_HOME/../flash-attention
+FLASH_ATTENTION_SKIP_CUDA_BUILD=TRUE python setup.py develop
+popd
+############################################################## dev install flash-atten #########################################
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+MEGATRON_PATH=/home/megatron_0.9/Megatron-LM/
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+# TP_SIZE PP_SIZE WORLD_SIZE MICRO_BATCH_SIZE NUM_MICROBATCHES
+WORLD_SIZE=$MLFLOW_WORKER_TOTAL_GPUNUM
+TP_SIZE=$MS_TP_SIZE
+PP_SIZE=$MS_PP_SIZE
+MICRO_BATCH_SIZE=$MS_MICRO_BATCH_SIZE
+NUM_MICROBATCHES=$MS_NUM_MICROBATCHES
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo 'DP SIZE is: '$DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo 'GLOBAL BATCH SIZE is: '$GLOBAL_BATCH_SIZE
+DATA_CACHE_PATH=$WORK_HOME/datasets/cache
+EXPNAME=$MLFLOW_EXPERIMENT_NAME
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_DIR=$MODEL_STUDIO_DATASET_PATH
+DATA_FILE_PREFIX=$(ls $DATA_DIR | grep ".idx" | head -n 1 | sed "s/.idx//")
+DATA_PATH=$DATA_DIR/$DATA_FILE_PREFIX
+TOKENIZED_MODEL=/home/dist/llama3/llama3_tokenizer
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export MASTER_PORT=12361
+echo "node rank: ${NODE_RANK}"
+# export MCCL_TOPO_DUMP_FILE=$PROJ_HOME/output/$EXPNAME/noderank${NODE_RANK}/nccl_topo.xml
+# export MCCL_TOPO_FILE=$MCCL_TOPO_DUMP_FILE
+
+DISTRIBUTED_ARGS=(
+    --max-restarts=3 \
+    --nproc_per_node $MLFLOW_WORKER_GPUNUM \
+    --nnodes $NODE_NUM \
+    --log_dir $WORK_HOME/output/$EXPNAME/noderank${NODE_RANK} \
+    --redirects 3
+)
+
+    # --accelerator=mthreads.com/gpu \
+    # --network-check \
+#   --redirects 3
+
+MODEL_ARGS=(
+    --num-layers 32
+    --hidden-size 4096 
+    --ffn-hidden-size 14336
+    --num-attention-heads 32 
+    --group-query-attention 
+    --num-query-groups 8
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.008
+    --use-mcore-models 
+    --no-bias-dropout-fusion
+    --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl local
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+    --decoder-last-pipeline-num-layers 14
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --data-cache-path $DATA_CACHE_PATH
+    --tokenizer-type HuggingFaceTokenizer
+    --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 200000 
+    --eval-interval 1000 
+    --save $CHECKPOINT_PATH
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+#ASYNC_CKPT_LOCAL_DIR=/checkpoint-cache #${MODEL_STUDIO_CHECKPOINT_CACHE_DIR}  # 本地盘存储目录
+ASYNC_CKPT_MEM_DIR="/dev/shm" # 内存
+
+ASYNC_CKPT_ARGS="
+   --enable_async_ckpt \
+   --mem_dir $ASYNC_CKPT_MEM_DIR
+"
+
+export ENABLE_ASYNC_CKPT=0
+
+LOGGING_ARGS="
+    --log-interval 1 \
+    --log-params-norm
+"
+# \
+#     --log-params-norm
+
+TORCHRUN=dlrover-run
+
+cmd="$TORCHRUN ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_gpt.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]} \
+        ${DATA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+"
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/examples/llama3/8B/run_pretrain_llama3_musa.sh b/megatron-lm-musa-patch/examples/llama3/8B/run_pretrain_llama3_musa.sh
new file mode 100644
index 00000000..358f9c23
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama3/8B/run_pretrain_llama3_musa.sh
@@ -0,0 +1,189 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  MICRO_BATCH_SIZE=$8
+  GLOBAL_BATCH_SIZE=${9}
+  TOKENIZED_MODEL=${10}
+  RDZV_ID=${11}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+
+export NODE_ADDR=$(ip a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n1 | cut -d '/' -f1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+# export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks[$NODE_ADDR];}' $HOSTFILE)
+export MASTER_PORT=14388
+# export MUSA_LAUNCH_BLOCKING=1
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects ${LOG_REDIRECTS_LEVEL:-3}
+)
+
+MODEL_ARGS=(
+    --num-layers 32
+    --hidden-size 4096 
+    --ffn-hidden-size 14336
+    --num-attention-heads 32 
+    --group-query-attention 
+    --num-query-groups 8
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.008
+    --use-mcore-models 
+    --no-bias-dropout-fusion
+    --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl
+)
+
+# --no-bias-swiglu-fusion
+# --no-rope-fusion
+# --no-gradient-accumulation-fusion 
+# --transformer-impl local transformer_engine
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE
+    --decoder-last-pipeline-num-layers 14
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type HuggingFaceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 200000 
+    --eval-interval 1000 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+    --fp8-format hybrid
+    --fp8-param-gather
+)
+
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_gpt.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/examples/llama3/dist_run_pretrain_megatron_llama3.sh b/megatron-lm-musa-patch/examples/llama3/dist_run_pretrain_megatron_llama3.sh
new file mode 100644
index 00000000..7e11f96d
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama3/dist_run_pretrain_megatron_llama3.sh
@@ -0,0 +1,57 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=4
+PP_SIZE=1
+WORLD_SIZE=4
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=1
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/data0/haoran.huang/oscar
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=./llama_config/tokenizer.model
+  SCRIPT_FILE=./7b/run_pretrain_llama2_cuda.sh
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+# for host in ${hostlist[@]}; do
+#     ssh $host "pkill -f '/usr/local/bin/torchrun'" 
+#     echo "$host is killed."
+# done
+
+# COUNT=0
+# hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+# for host in ${hostlist[@]}; do
+
+#   cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+#   echo $cmd_ssh
+#   ssh -f -n $host $cmd_ssh
+#   # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+#   # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+#   ((COUNT++))
+# done
+
+cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+
+echo $cmd_ssh
+eval $cmd_ssh
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/llama3/dist_run_pretrain_megatron_llama3_musa.sh b/megatron-lm-musa-patch/examples/llama3/dist_run_pretrain_megatron_llama3_musa.sh
new file mode 100644
index 00000000..67278d89
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama3/dist_run_pretrain_megatron_llama3_musa.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=2
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=128
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/data/yehua/llama3/llama3_dataset/dedup-md5-pile-pile-cc_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/data/yehua/llama3/llama3_tokenizer
+  SCRIPT_FILE=./8B/run_pretrain_llama3_musa.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  # cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  cmd_ssh=$cmd" &'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/examples/llama3/pretrain_gpt.py b/megatron-lm-musa-patch/examples/llama3/pretrain_gpt.py
new file mode 100644
index 00000000..c847cf72
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama3/pretrain_gpt.py
@@ -0,0 +1,284 @@
+# Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
+"""Pretrain GPT."""
+
+import os
+import torch
+from functools import partial
+from contextlib import nullcontext
+import inspect
+
+from typing import Union
+if os.getenv("ACCELERATOR_BACKEND", "musa") == "musa":
+    import musa_patch
+else:
+    pass
+from megatron.training import get_args
+from megatron.training import print_rank_0
+from megatron.training import get_timers
+from megatron.training import get_tokenizer
+from megatron.core import mpu
+from megatron.core.enums import ModelType
+from megatron.core.datasets.blended_megatron_dataset_builder import BlendedMegatronDatasetBuilder
+from megatron.core.datasets.utils import get_blend_from_list
+from megatron.core.datasets.gpt_dataset import GPTDatasetConfig
+from megatron.core.datasets.gpt_dataset import MockGPTDataset, GPTDataset
+import megatron.legacy.model
+from megatron.core.models.gpt import GPTModel
+from megatron.training import pretrain
+from megatron.core.utils import StragglerDetector
+from megatron.core.transformer.spec_utils import import_module
+from megatron.training.utils import (
+    get_batch_on_this_cp_rank,
+    get_batch_on_this_tp_rank,
+)
+from megatron.training.arguments import core_transformer_config_from_args
+from megatron.training.yaml_arguments import core_transformer_config_from_yaml
+from megatron.core.models.gpt.gpt_layer_specs import (
+    get_gpt_layer_local_spec,
+    get_gpt_layer_with_transformer_engine_spec,
+)
+
+
+stimer = StragglerDetector()
+
+def model_provider(pre_process=True, post_process=True) -> Union[GPTModel, megatron.legacy.model.GPTModel]:
+    """Builds the model.
+
+    If you set the use_legacy_models to True, it will return the legacy GPT model and if not the mcore GPT model.
+
+    Args:
+        pre_process (bool, optional): Set to true if you need to compute embedings. Defaults to True.
+        post_process (bool, optional): Set to true if you need to want to compute output logits/loss. Defaults to True.
+
+
+    Returns:
+        Union[GPTModel, megatron.legacy.model.GPTModel]: The returned model
+    """
+    args = get_args()
+    use_te = args.transformer_impl == "transformer_engine"
+
+    print_rank_0('building GPT model ...')
+    # Experimental loading arguments from yaml
+    if args.yaml_cfg is not None:
+        config = core_transformer_config_from_yaml(args, "language_model")
+    else:
+        config = core_transformer_config_from_args(args)
+
+    if args.use_legacy_models:
+        model = megatron.legacy.model.GPTModel(
+            config,
+            num_tokentypes=0,
+            parallel_output=True,
+            pre_process=pre_process,
+            post_process=post_process,
+        )
+    else: # using core models
+        if args.spec is not None:
+            transformer_layer_spec = import_module(args.spec)
+        else:
+            if use_te:
+                transformer_layer_spec = get_gpt_layer_with_transformer_engine_spec(
+                    args.num_experts,
+                    args.moe_grouped_gemm,
+                    args.qk_layernorm,
+                    args.multi_latent_attention,
+                    args.moe_use_legacy_grouped_gemm
+                )
+            else:
+                transformer_layer_spec = get_gpt_layer_local_spec(
+                    args.num_experts,
+                    args.moe_grouped_gemm,
+                    args.qk_layernorm
+                )
+
+        build_model_context = nullcontext
+        build_model_context_args = {}
+        if args.fp8_param_gather:
+            try:
+                from transformer_engine.pytorch import fp8_model_init
+
+                build_model_context = fp8_model_init
+                build_model_context_args["enabled"] = True
+
+                # Check if fp8_model_init supports preserve_high_precision_init_val
+                if "preserve_high_precision_init_val" in inspect.signature(fp8_model_init).parameters:
+                    build_model_context_args["preserve_high_precision_init_val"] = True
+            except:
+                raise RuntimeError("--fp8-param-gather requires `fp8_model_init` from TransformerEngine, but not found.")
+
+        with build_model_context(**build_model_context_args):
+            model = GPTModel(
+                config=config,
+                transformer_layer_spec=transformer_layer_spec,
+                vocab_size=args.padded_vocab_size,
+                max_sequence_length=args.max_position_embeddings,
+                pre_process=pre_process,
+                post_process=post_process,
+                fp16_lm_cross_entropy=args.fp16_lm_cross_entropy,
+                parallel_output=True,
+                share_embeddings_and_output_weights=not args.untie_embeddings_and_output_weights,
+                position_embedding_type=args.position_embedding_type,
+                rotary_percent=args.rotary_percent,
+                rotary_base=args.rotary_base
+            )
+
+    return model
+
+
+def get_batch(data_iterator):
+    """Generate a batch."""
+
+    # TODO: this is pretty hacky, find a better way
+    if (not mpu.is_pipeline_first_stage()) and (not mpu.is_pipeline_last_stage()):
+        return None, None, None, None, None
+
+    # get batches based on the TP rank you are on
+    batch = get_batch_on_this_tp_rank(data_iterator)
+
+    # slice batch along sequence dimension for context parallelism
+    batch = get_batch_on_this_cp_rank(batch)
+
+    return batch.values()
+
+
+def loss_func(loss_mask: torch.Tensor, output_tensor: torch.Tensor):
+    """Loss function.
+
+    Args:
+        loss_mask (torch.Tensor): Used to mask out some portions of the loss
+        output_tensor (torch.Tensor): The tensor with the losses
+
+    Returns:
+        the loss scalar for this micro-batch
+        the number of non-padded tokens in this microbatch
+        a dict containing reporting metrics on the loss and number of tokens across
+            the data parallel ranks
+    """
+    args = get_args()
+
+    losses = output_tensor.float()
+    loss_mask = loss_mask.view(-1).float()
+    total_tokens = loss_mask.sum()
+    loss = torch.cat([torch.sum(losses.view(-1) * loss_mask).view(1), total_tokens.view(1)])
+
+    if args.context_parallel_size > 1:
+        torch.distributed.all_reduce(loss, group=mpu.get_context_parallel_group())
+
+    # Check individual rank losses are not NaN prior to DP all-reduce.
+    if args.check_for_nan_in_loss_and_grad:
+        global_rank = torch.distributed.get_rank()
+        assert not loss[0].isnan(), (
+            f'Rank {global_rank}: found NaN in local forward loss calculation. '
+            f'Device: {torch.cuda.current_device()}, node: {os.uname()[1]}'
+        )
+
+    # Reduce loss for logging.
+    reporting_loss = loss.clone().detach()
+    if not int(os.getenv("NO_LOSS_REDUCE", 0)): #TODO:(huang.huang) will influence the loss reported Now!
+        torch.distributed.all_reduce(reporting_loss, group=mpu.get_data_parallel_group())
+    local_num_tokens = loss[1].clone().detach().to(torch.int)
+    return (
+        loss[0] * args.context_parallel_size,
+        local_num_tokens,
+        {'lm loss': (reporting_loss[0], reporting_loss[1])},
+    )
+
+
+def forward_step(data_iterator, model: GPTModel):
+    """Forward training step.
+
+    Args:
+        data_iterator : Input data iterator
+        model (GPTModel): The GPT Model
+    """
+    args = get_args()
+    timers = get_timers()
+
+    # Get the batch.
+    timers('batch-generator', log_level=2).start()
+    global stimer
+    with stimer(bdata=True):
+        tokens, labels, loss_mask, attention_mask, position_ids = get_batch(
+            data_iterator)
+    timers('batch-generator').stop()
+
+    with stimer:
+        output_tensor = model(tokens, position_ids, attention_mask,
+                              labels=labels)
+
+    return output_tensor, partial(loss_func, loss_mask)
+
+
+def is_dataset_built_on_rank():
+    return (
+        mpu.is_pipeline_first_stage() or mpu.is_pipeline_last_stage()
+    ) and mpu.get_tensor_model_parallel_rank() == 0
+
+
+def core_gpt_dataset_config_from_args(args):
+    tokenizer = get_tokenizer()
+
+    return GPTDatasetConfig(
+        random_seed=args.seed,
+        sequence_length=args.seq_length,
+        blend=get_blend_from_list(args.data_path),
+        blend_per_split=[
+            get_blend_from_list(args.train_data_path),
+            get_blend_from_list(args.valid_data_path),
+            get_blend_from_list(args.test_data_path)
+        ],
+        # renormalize_blend_weights=args.renormalize_blend_weights,
+        split=args.split,
+        num_dataset_builder_threads=args.num_dataset_builder_threads,
+        path_to_cache=args.data_cache_path,
+        mmap_bin_files=args.mmap_bin_files,
+        tokenizer=tokenizer,
+        reset_position_ids=args.reset_position_ids,
+        reset_attention_mask=args.reset_attention_mask,
+        eod_mask_loss=args.eod_mask_loss,
+        create_attention_mask=args.create_attention_mask_in_dataloader,
+        s3_cache_path = args.s3_cache_path
+    )
+
+
+def train_valid_test_datasets_provider(train_val_test_num_samples):
+    """Build the train test and validation datasets.
+
+    Args:
+        train_val_test_num_samples : A list containing the number of samples in train test and validation.
+    """
+    args = get_args()
+
+    config = core_gpt_dataset_config_from_args(args)
+
+    if args.mock_data:
+        dataset_type = MockGPTDataset
+    else:
+        dataset_type = GPTDataset
+
+    print_rank_0("> building train, validation, and test datasets for GPT ...")
+
+    train_ds, valid_ds, test_ds = BlendedMegatronDatasetBuilder(
+        dataset_type,
+        train_val_test_num_samples,
+        is_dataset_built_on_rank,
+        config
+    ).build()
+
+    print_rank_0("> finished creating GPT datasets ...")
+
+    return train_ds, valid_ds, test_ds
+
+
+if __name__ == "__main__":
+
+    # Temporary for transition to core datasets
+    train_valid_test_datasets_provider.is_distributed = True
+
+    pretrain(
+        train_valid_test_datasets_provider,
+        model_provider,
+        ModelType.encoder_or_decoder,
+        forward_step,
+        args_defaults={'tokenizer_type': 'GPT2BPETokenizer'},
+    )
diff --git a/megatron-lm-musa-patch/examples/llama3/stop_all.sh b/megatron-lm-musa-patch/examples/llama3/stop_all.sh
new file mode 100644
index 00000000..0b89a805
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/llama3/stop_all.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+HOSTFILE=./hostfile
+NUM_NODES=$(grep -v '^#\|^$' $HOSTFILE | wc -l)
+echo "NUM_NODES: $NUM_NODES"
+
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+    ssh -f -n $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'"
+    ssh -f -n $host "pkill -f '/usr/local/bin/torchrun'"
+    echo "$host is killed."
+done
diff --git a/megatron-lm-musa-patch/examples/mixtral/10b/run_pretrain_mixtral_cuda.sh b/megatron-lm-musa-patch/examples/mixtral/10b/run_pretrain_mixtral_cuda.sh
new file mode 100644
index 00000000..d65d74bc
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/10b/run_pretrain_mixtral_cuda.sh
@@ -0,0 +1,187 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+set +u
+
+export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
+export OMP_NUM_THREADS=4
+export CUDA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export NCCL_PROTOS=2
+export ACCELERATOR_BACKEND="cuda"
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+MEGATRON_PATH=${PATCH_HOME}/Megatron-LM-240521
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR/oscar_9_text_document
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+export MASTER_PORT=12355
+
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+)
+
+MODEL_ARGS=(
+    --num-layers 2 # 32
+    --hidden-size 2048 
+    --num-attention-heads 16 
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --init-method-std 0.01 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.0165 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl local
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type=SentencePieceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 10000000
+    --eval-interval 1000 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+MOE_ARGS=(
+    --num-experts 8
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-load-balancing-type aux_loss
+    --moe-router-topk 2
+    --moe-aux-loss-coeff 1e-2
+    --moe-z-loss-coeff 1e-3
+    --moe-expert-capacity-factor 4.0 
+)
+
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_mixtral.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmdx
+eval $cmd
diff --git a/megatron-lm-musa-patch/examples/mixtral/10b/run_pretrain_mixtral_musa.sh b/megatron-lm-musa-patch/examples/mixtral/10b/run_pretrain_mixtral_musa.sh
new file mode 100644
index 00000000..cf2b46c8
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/10b/run_pretrain_mixtral_musa.sh
@@ -0,0 +1,193 @@
+#!/bin/bash
+
+# Runs the "175B" parameter model
+
+# Please change the following envrioment variables
+# base on the cluster configuration
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+set +u
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export NCCL_PROTOS=2
+export NCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+MEGATRON_PATH=${PATCH_HOME}/Megatron-LM-240521
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+# export MUSA_LAUNCH_BLOCKING=1
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR/oscar_9_text_document
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+export MASTER_PORT=12355
+# export MUSA_LAUNCH_BLOCKING=1
+
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+)
+
+MODEL_ARGS=(
+    --num-layers 32
+    --hidden-size 2048 
+    --num-attention-heads 16 
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --init-method-std 0.01 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    # --vocab-size=256000
+    --ffn-hidden-size 5504
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.0165 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl local
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type=SentencePieceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 100000 
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+MOE_ARGS=(
+    --num-experts 8
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-load-balancing-type aux_loss
+    --moe-router-topk 2
+    --moe-aux-loss-coeff 1e-2
+    --moe-z-loss-coeff 1e-3
+    --moe-expert-capacity-factor 4.0 
+)
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_mixtral.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/mixtral/8x7b/run_pretrain_mixtral_cuda.sh b/megatron-lm-musa-patch/examples/mixtral/8x7b/run_pretrain_mixtral_cuda.sh
new file mode 100644
index 00000000..0da47c98
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/8x7b/run_pretrain_mixtral_cuda.sh
@@ -0,0 +1,195 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+
+# profile parameters
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export CUDA_LAUNCH_BLOCKING=1
+
+export OMP_NUM_THREADS=4
+export CUDA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export ACCELERATOR_BACKEND="cuda"
+export NCCL_PROTOS=2
+export NCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+export MASTER_PORT=12356
+# export CUDA_LAUNCH_BLOCKING=1
+
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 8  # 32 
+    --hidden-size 4096 
+    --num-attention-heads 32
+    --group-query-attention 
+    --num-query-groups 8  
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --init-method-std 0.01 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --ffn-hidden-size 14336  # 5504
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.0165 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl local
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type SentencePieceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 100000 
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+MOE_ARGS=(
+    --num-experts 8
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-load-balancing-type aux_loss
+    --moe-router-topk 2
+    --moe-aux-loss-coeff 1e-2
+)
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_mixtral.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/examples/mixtral/8x7b/run_pretrain_mixtral_musa.sh b/megatron-lm-musa-patch/examples/mixtral/8x7b/run_pretrain_mixtral_musa.sh
new file mode 100644
index 00000000..acaff185
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/8x7b/run_pretrain_mixtral_musa.sh
@@ -0,0 +1,200 @@
+#!/bin/bash
+
+# Runs the "175B" parameter model
+
+# Please change the following envrioment variables
+# base on the cluster configuration
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export NCCL_PROTOS=2
+export NCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ip a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n1 | cut -d '/' -f1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+export MASTER_PORT=12356
+# export MUSA_LAUNCH_BLOCKING=1
+
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 8  # 32 
+    --hidden-size 4096
+    --num-attention-heads 32
+    --group-query-attention 
+    --num-query-groups 8  
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --init-method-std 0.01 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --ffn-hidden-size 14336  # 5504
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.0165 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl local
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type SentencePieceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 100000 
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+MOE_ARGS=(
+    --num-experts 8
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-load-balancing-type aux_loss
+    --moe-router-topk 2
+    --moe-aux-loss-coeff 1e-2
+)
+# --moe-z-loss-coeff 1e-3
+# --moe-expert-capacity-factor 4.0 
+# --moe-pad-expert-input-to-capacity
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_mixtral.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/examples/mixtral/dist_run_pretrain_megatron_mixtral.sh b/megatron-lm-musa-patch/examples/mixtral/dist_run_pretrain_megatron_mixtral.sh
new file mode 100644
index 00000000..8339129d
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/dist_run_pretrain_megatron_mixtral.sh
@@ -0,0 +1,52 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=2
+PP_SIZE=1
+EP_SIZE=4
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=2
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/data01/yutian/data/data_merge/wiki_0_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/data01/chen.zhang/codes/data/baichuan-7b/baichuan2-7b_tokenizer.model
+  SCRIPT_FILE=./8x7b/run_pretrain_mixtral_cuda.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+#for host in ${hostlist[@]}; do
+#    ssh $host "pkill -f '/usr/local/bin/torchrun'" 
+#    echo "$host is killed."
+#done
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/examples/mixtral/dist_run_pretrain_megatron_mixtral_musa.sh b/megatron-lm-musa-patch/examples/mixtral/dist_run_pretrain_megatron_mixtral_musa.sh
new file mode 100644
index 00000000..429424d2
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/dist_run_pretrain_megatron_mixtral_musa.sh
@@ -0,0 +1,54 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=2
+PP_SIZE=1
+EP_SIZE=4
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=2
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/data/dataset/llama2_dataset/llama_00_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/data/dataset/llama2_dataset/tokenizer.model
+  SCRIPT_FILE=./8x7b/run_pretrain_mixtral_musa.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+# for host in ${hostlist[@]}; do
+#     ssh $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'" 
+#     echo "$host is killed."
+# done
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/examples/mixtral/hostfile b/megatron-lm-musa-patch/examples/mixtral/hostfile
new file mode 100644
index 00000000..e5ec7f64
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/hostfile
@@ -0,0 +1 @@
+172.27.1.22
diff --git a/megatron-lm-musa-patch/examples/mixtral/llama_config/config.json b/megatron-lm-musa-patch/examples/mixtral/llama_config/config.json
new file mode 100644
index 00000000..0ead6ba1
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/llama_config/config.json
@@ -0,0 +1 @@
+{"architectures": ["LLaMAForCausalLM"], "bos_token_id": 0, "eos_token_id": 1, "hidden_act": "silu", "hidden_size": 768, "intermediate_size": 3072, "initializer_range": 0.02, "max_sequence_length": 1024, "model_type": "llama", "num_attention_heads": 12, "num_hidden_layers": 12, "pad_token_id": -1, "rms_norm_eps": 1e-06, "torch_dtype": "float16", "transformers_version": "4.27.0.dev0", "use_cache": true, "vocab_size": 32000}
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/mixtral/llama_config/config150m.json b/megatron-lm-musa-patch/examples/mixtral/llama_config/config150m.json
new file mode 100644
index 00000000..195ffc4b
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/llama_config/config150m.json
@@ -0,0 +1 @@
+{"architectures": ["LLaMAForCausalLM"], "bos_token_id": 0, "eos_token_id": 1, "hidden_act": "silu", "hidden_size": 768, "intermediate_size": 2304, "initializer_range": 0.02, "max_sequence_length": 2048, "model_type": "llama", "num_attention_heads": 12, "num_hidden_layers": 8, "pad_token_id": -1, "rms_norm_eps": 1e-06, "torch_dtype": "float16", "transformers_version": "4.27.0.dev0", "use_cache": true, "vocab_size": 64000}
diff --git a/megatron-lm-musa-patch/examples/mixtral/llama_config/config1b.json b/megatron-lm-musa-patch/examples/mixtral/llama_config/config1b.json
new file mode 100644
index 00000000..4f2c4cb6
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/llama_config/config1b.json
@@ -0,0 +1 @@
+{"architectures": ["LLaMAForCausalLM"], "bos_token_id": 0, "eos_token_id": 1, "hidden_act": "silu", "hidden_size": 1600, "intermediate_size": 4800, "initializer_range": 0.02, "max_sequence_length": 2048, "model_type": "llama", "num_attention_heads": 25, "num_hidden_layers": 32, "pad_token_id": -1, "rms_norm_eps": 1e-06, "torch_dtype": "float16", "transformers_version": "4.27.0.dev0", "use_cache": true, "vocab_size": 32000}
diff --git a/megatron-lm-musa-patch/examples/mixtral/llama_config/config7b.json b/megatron-lm-musa-patch/examples/mixtral/llama_config/config7b.json
new file mode 100644
index 00000000..2dd3641c
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/llama_config/config7b.json
@@ -0,0 +1 @@
+{"architectures": ["LLaMAForCausalLM"], "bos_token_id": 0, "eos_token_id": 1, "hidden_act": "silu", "hidden_size": 4096, "intermediate_size": 11008, "initializer_range": 0.02, "max_sequence_length": 2048, "model_type": "llama", "num_attention_heads": 32, "num_hidden_layers": 32, "pad_token_id": -1, "rms_norm_eps": 1e-06, "torch_dtype": "float16", "transformers_version": "4.27.0.dev0", "use_cache": true, "vocab_size": 32000}
diff --git a/megatron-lm-musa-patch/examples/mixtral/llama_config/generation_config.json b/megatron-lm-musa-patch/examples/mixtral/llama_config/generation_config.json
new file mode 100644
index 00000000..fcac46fd
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/llama_config/generation_config.json
@@ -0,0 +1 @@
+{"_from_model_config": true, "bos_token_id": 0, "eos_token_id": 1, "pad_token_id": 0, "transformers_version": "4.27.0.dev0"}
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/mixtral/llama_config/special_tokens_map.json b/megatron-lm-musa-patch/examples/mixtral/llama_config/special_tokens_map.json
new file mode 100644
index 00000000..9e26dfee
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/llama_config/special_tokens_map.json
@@ -0,0 +1 @@
+{}
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/mixtral/llama_config/tokenizer.model b/megatron-lm-musa-patch/examples/mixtral/llama_config/tokenizer.model
new file mode 100644
index 0000000000000000000000000000000000000000..22bccbcb41ec929cf0c9dbe8f41036db82e5e773
GIT binary patch
literal 499723
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
F{{wFJg8={l

literal 0
HcmV?d00001

diff --git a/megatron-lm-musa-patch/examples/mixtral/llama_config/tokenizer_config.json b/megatron-lm-musa-patch/examples/mixtral/llama_config/tokenizer_config.json
new file mode 100644
index 00000000..1aabb918
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/llama_config/tokenizer_config.json
@@ -0,0 +1 @@
+{"bos_token": "", "eos_token": "", "model_max_length": 1000000000000000019884624838656, "tokenizer_class": "LLaMATokenizer", "unk_token": ""}
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/mixtral/pretrain_mixtral.py b/megatron-lm-musa-patch/examples/mixtral/pretrain_mixtral.py
new file mode 100644
index 00000000..39ee0f87
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/pretrain_mixtral.py
@@ -0,0 +1,304 @@
+# Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
+"""Pretrain GPT."""
+
+import os
+import torch
+from functools import partial
+from contextlib import nullcontext
+import inspect
+
+from typing import List, Optional, Tuple, Union
+if os.getenv("ACCELERATOR_BACKEND", "musa") == "musa":
+    import musa_patch
+else:
+    import cuda_patch
+from megatron.training import get_args
+from megatron.training import print_rank_0
+from megatron.training import get_timers
+from megatron.training import get_tokenizer
+from megatron.core import mpu
+from megatron.core.enums import ModelType
+from megatron.core.datasets.blended_megatron_dataset_builder import BlendedMegatronDatasetBuilder
+from megatron.core.datasets.utils import get_blend_from_list
+from megatron.core.datasets.gpt_dataset import GPTDatasetConfig
+from megatron.core.datasets.gpt_dataset import MockGPTDataset, GPTDataset
+from megatron.core.rerun_state_machine import get_rerun_state_machine
+import megatron.legacy.model
+from megatron.core.models.gpt import GPTModel
+from megatron.training import pretrain
+from megatron.core.utils import StragglerDetector
+from megatron.core.transformer.spec_utils import import_module
+from megatron.training.utils import (
+    get_batch_on_this_cp_rank,
+    get_batch_on_this_tp_rank,
+    get_blend_and_blend_per_split,
+)
+from megatron.training.arguments import core_transformer_config_from_args
+from megatron.training.yaml_arguments import core_transformer_config_from_yaml
+from megatron.core.models.gpt.gpt_layer_specs import (
+    get_gpt_decoder_block_spec,
+    get_gpt_layer_local_spec,
+    get_gpt_layer_with_transformer_engine_spec,
+)
+
+
+stimer = StragglerDetector()
+
+def model_provider(pre_process=True, post_process=True) -> Union[GPTModel, megatron.legacy.model.GPTModel]:
+    """Builds the model.
+
+    If you set the use_mcore_models to True, it will return the mcore GPT model and if not the legacy GPT model.
+
+    Args:
+        pre_process (bool, optional): Set to true if you need to compute embedings. Defaults to True.
+        post_process (bool, optional): Set to true if you need to want to compute output logits/loss. Defaults to True.
+
+
+    Returns:
+        Union[GPTModel, megatron.legacy.model.GPTModel]: The returned model
+    """
+    args = get_args()
+    use_te = args.transformer_impl == "transformer_engine"
+
+    if args.record_memory_history:
+        torch.cuda.memory._record_memory_history(True,
+            # keep 100,000 alloc/free events from before the snapshot
+            trace_alloc_max_entries=100000,
+
+            # record stack information for the trace events
+            trace_alloc_record_context=True)
+        
+    print_rank_0('building GPT model ...')
+    # Experimental loading arguments from yaml
+    if args.yaml_cfg is not None:
+        config = core_transformer_config_from_yaml(args, "language_model")
+    else:
+        config = core_transformer_config_from_args(args)
+
+    if args.use_legacy_models:
+        model = megatron.legacy.model.GPTModel(
+            config,
+            num_tokentypes=0,
+            parallel_output=True,
+            pre_process=pre_process,
+            post_process=post_process,
+        )
+    else: # using core models
+        if args.spec is not None:
+            transformer_layer_spec = import_module(args.spec)
+        else:
+            if args.num_experts:
+                # Define the decoder block spec
+                transformer_layer_spec = get_gpt_decoder_block_spec(config, use_transformer_engine=use_te)
+            else:
+                # Define the decoder layer spec
+                if use_te:
+                    transformer_layer_spec = get_gpt_layer_with_transformer_engine_spec(
+                        args.num_experts, args.moe_grouped_gemm,
+                        args.qk_layernorm, args.multi_latent_attention, args.moe_use_legacy_grouped_gemm)
+                else:
+                    transformer_layer_spec = get_gpt_layer_local_spec(
+                        args.num_experts, args.moe_grouped_gemm,
+                        args.qk_layernorm, args.multi_latent_attention, args.moe_use_legacy_grouped_gemm)
+
+        build_model_context = nullcontext
+        build_model_context_args = {}
+        if args.fp8_param_gather:
+            try:
+                from transformer_engine.pytorch import fp8_model_init
+
+                build_model_context = fp8_model_init
+                build_model_context_args["enabled"] = True
+
+                # Check if fp8_model_init supports preserve_high_precision_init_val
+                if "preserve_high_precision_init_val" in inspect.signature(fp8_model_init).parameters:
+                    build_model_context_args["preserve_high_precision_init_val"] = True
+            except:
+                raise RuntimeError("--fp8-param-gather requires `fp8_model_init` from TransformerEngine, but not found.")
+
+        with build_model_context(**build_model_context_args):
+            model = GPTModel(
+                config=config,
+                transformer_layer_spec=transformer_layer_spec,
+                vocab_size=args.padded_vocab_size,
+                max_sequence_length=args.max_position_embeddings,
+                pre_process=pre_process,
+                post_process=post_process,
+                fp16_lm_cross_entropy=args.fp16_lm_cross_entropy,
+                parallel_output=True,
+                share_embeddings_and_output_weights=not args.untie_embeddings_and_output_weights,
+                position_embedding_type=args.position_embedding_type,
+                rotary_percent=args.rotary_percent,
+                rotary_base=args.rotary_base,
+                rope_scaling=args.use_rope_scaling
+            )
+
+    return model
+
+
+def get_batch(data_iterator):
+    """Generate a batch."""
+
+    # TODO: this is pretty hacky, find a better way
+    if (not mpu.is_pipeline_first_stage()) and (not mpu.is_pipeline_last_stage()):
+        return None, None, None, None, None
+
+    # get batches based on the TP rank you are on
+    batch = get_batch_on_this_tp_rank(data_iterator)
+
+    # slice batch along sequence dimension for context parallelism
+    batch = get_batch_on_this_cp_rank(batch)
+
+    return batch.values()
+
+
+def loss_func(loss_mask: torch.Tensor, output_tensor: torch.Tensor):
+    """Loss function.
+
+    Args:
+        loss_mask (torch.Tensor): Used to mask out some portions of the loss
+        output_tensor (torch.Tensor): The tensor with the losses
+
+    Returns:
+        the loss scalar for this micro-batch
+        the number of non-padded tokens in this microbatch
+        a dict containing reporting metrics on the loss and number of tokens across
+            the data parallel ranks
+    """
+    args = get_args()
+
+    losses = output_tensor.float()
+    loss_mask = loss_mask.view(-1).float()
+    total_tokens = loss_mask.sum()
+    loss = torch.cat([torch.sum(losses.view(-1) * loss_mask).view(1), total_tokens.view(1)])
+
+    if args.context_parallel_size > 1:
+        torch.distributed.all_reduce(loss, group=mpu.get_context_parallel_group())
+
+    # Check individual rank losses are not NaN prior to DP all-reduce.
+    rerun_state_machine = get_rerun_state_machine()
+    if args.check_for_nan_in_loss_and_grad:
+        rerun_state_machine.validate_result(
+            result=loss[0],
+            rejection_func=torch.isnan,
+            message="found NaN in local forward loss calculation",
+            tolerance=0.0,        # forward pass calculations are determinisic
+            fatal=True,
+        )
+    # Check for spiky loss
+    if args.check_for_spiky_loss:
+        rerun_state_machine.validate_result(
+            result=loss[0],
+            rejection_func=partial(rerun_state_machine.is_spiky_loss, threshold=SPIKY_LOSS_PERC),
+            message="Spiky loss",
+            tolerance=0.0,        # forward pass calculations are determinisic
+            fatal=False,
+        )
+    # Reduce loss for logging.
+    reporting_loss = loss.clone().detach()
+    torch.distributed.all_reduce(reporting_loss, group=mpu.get_data_parallel_group())
+
+    local_num_tokens = loss[1].clone().detach().to(torch.int)
+    return (
+        loss[0] * args.context_parallel_size,
+        local_num_tokens,
+        {'lm loss': (reporting_loss[0], reporting_loss[1])},
+    )
+
+
+def forward_step(data_iterator, model: GPTModel):
+    """Forward training step.
+
+    Args:
+        data_iterator : Input data iterator
+        model (GPTModel): The GPT Model
+    """
+    args = get_args()
+    timers = get_timers()
+
+    # Get the batch.
+    timers('batch-generator', log_level=2).start()
+    global stimer
+    with stimer(bdata=True):
+        tokens, labels, loss_mask, attention_mask, position_ids = get_batch(
+            data_iterator)
+    timers('batch-generator').stop()
+
+    with stimer:
+        output_tensor = model(tokens, position_ids, attention_mask,
+                              labels=labels)
+
+    return output_tensor, partial(loss_func, loss_mask)
+
+
+def is_dataset_built_on_rank():
+    return (
+        mpu.is_pipeline_first_stage() or mpu.is_pipeline_last_stage()
+    ) and mpu.get_tensor_model_parallel_rank() == 0
+
+
+def core_gpt_dataset_config_from_args(args):
+    tokenizer = get_tokenizer()
+
+    return GPTDatasetConfig(
+        random_seed=args.seed,
+        sequence_length=args.seq_length,
+        blend=get_blend_from_list(args.data_path),
+        blend_per_split=[
+            get_blend_from_list(args.train_data_path),
+            get_blend_from_list(args.valid_data_path),
+            get_blend_from_list(args.test_data_path)
+        ],
+        split=args.split,
+        num_dataset_builder_threads=args.num_dataset_builder_threads,
+        path_to_cache=args.data_cache_path,
+        mmap_bin_files=args.mmap_bin_files,
+        tokenizer=tokenizer,
+        reset_position_ids=args.reset_position_ids,
+        reset_attention_mask=args.reset_attention_mask,
+        eod_mask_loss=args.eod_mask_loss,
+        create_attention_mask=args.create_attention_mask_in_dataloader,
+    )
+
+
+def train_valid_test_datasets_provider(train_val_test_num_samples):
+    """Build the train test and validation datasets.
+
+    Args:
+        train_val_test_num_samples : A list containing the number of samples in train test and validation.
+    """
+    args = get_args()
+
+    config = core_gpt_dataset_config_from_args(args)
+
+    if args.mock_data:
+        dataset_type = MockGPTDataset
+    else:
+        dataset_type = GPTDataset
+
+    print_rank_0("> building train, validation, and test datasets for GPT ...")
+
+    train_ds, valid_ds, test_ds = BlendedMegatronDatasetBuilder(
+        dataset_type,
+        train_val_test_num_samples,
+        is_dataset_built_on_rank,
+        config
+    ).build()
+
+    print_rank_0("> finished creating GPT datasets ...")
+
+    return train_ds, valid_ds, test_ds
+
+
+if __name__ == "__main__":
+
+    # Temporary for transition to core datasets
+    train_valid_test_datasets_provider.is_distributed = True
+
+    pretrain(
+        train_valid_test_datasets_provider,
+        model_provider,
+        ModelType.encoder_or_decoder,
+        forward_step,
+        args_defaults={'tokenizer_type': 'GPT2BPETokenizer'},
+    )
diff --git a/megatron-lm-musa-patch/examples/mixtral/stop_all.sh b/megatron-lm-musa-patch/examples/mixtral/stop_all.sh
new file mode 100644
index 00000000..c01b22cc
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/stop_all.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+HOSTFILE=./hostfile
+NUM_NODES=$(grep -v '^#\|^$' $HOSTFILE | wc -l)
+echo "NUM_NODES: $NUM_NODES"
+
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+    ssh $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'"  # /usr/local/bin/torchrun
+     ssh $host "pkill -f '/usr/local/bin/torchrun'"
+    echo "$host is killed."
+done
diff --git a/megatron-lm-musa-patch/examples/mixtral/tiny_model_test/run_pretrain_mixtral_cuda.sh b/megatron-lm-musa-patch/examples/mixtral/tiny_model_test/run_pretrain_mixtral_cuda.sh
new file mode 100644
index 00000000..886b961d
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/tiny_model_test/run_pretrain_mixtral_cuda.sh
@@ -0,0 +1,186 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+set +u
+
+export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
+export OMP_NUM_THREADS=4
+export CUDA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export NCCL_PROTOS=2
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+MEGATRON_PATH=${PATCH_HOME}/Megatron-LM-240521
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR/oscar_9_text_document
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+export MASTER_PORT=12355
+
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+)
+
+MODEL_ARGS=(
+    --num-layers 12 
+    --hidden-size 768 
+    --num-attention-heads 12 
+    --seq-length 512 
+    --max-position-embeddings 512 
+    --norm-epsilon 1e-5 
+    --init-method-std 0.01 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.0165 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl local
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type=SentencePieceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 2000
+    --eval-interval 1000 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+MOE_ARGS=(
+    --num-experts 8
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-load-balancing-type aux_loss
+    --moe-router-topk 2
+    --moe-aux-loss-coeff 1e-2
+    --moe-z-loss-coeff 1e-3
+    --moe-expert-capacity-factor 4.0 
+)
+
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_mixtral.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/examples/mixtral/tiny_model_test/run_pretrain_mixtral_musa.sh b/megatron-lm-musa-patch/examples/mixtral/tiny_model_test/run_pretrain_mixtral_musa.sh
new file mode 100644
index 00000000..7cf69ad9
--- /dev/null
+++ b/megatron-lm-musa-patch/examples/mixtral/tiny_model_test/run_pretrain_mixtral_musa.sh
@@ -0,0 +1,197 @@
+#!/bin/bash
+
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+set +u
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+
+export NCCL_PROTOS=2
+export NCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+
+MEGATRON_PATH=${PATCH_HOME}/Megatron-LM-240521
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+#export MUSA_LAUNCH_BLOCKING=1
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+# MCCL DEBUG
+# export NCCL_DEBUG_FILE="/home/dist/yutian/megatron-lm-musa-patch/examples/mixtral/mccl_debug/debug.%h.%p"
+# export NCCL_DEBUG="TRACE"
+
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR/oscar_9_text_document
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+export MASTER_PORT=12355
+# export MUSA_LAUNCH_BLOCKING=1
+
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+)
+
+MODEL_ARGS=(
+    --num-layers 12 
+    --hidden-size 768 
+    --num-attention-heads 12 
+    --seq-length 512 
+    --max-position-embeddings 512 
+    --norm-epsilon 1e-5 
+    --init-method-std 0.01 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 32000
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.0165 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl local
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type=SentencePieceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+# DATA_ARGS=(
+#     --data-path $DATA_PATH 
+#     --vocab-file $VOCAB_FILE 
+#     --merge-file $MERGE_FILE 
+#     --split 949,50,1
+# )
+
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 2000 
+    --eval-interval 1000 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+MOE_ARGS=(
+    --num-experts 8
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-load-balancing-type aux_loss
+    --moe-router-topk 2
+    --moe-aux-loss-coeff 0
+    --moe-z-loss-coeff 1e-3
+    --moe-expert-capacity-factor 4.0
+    #--moe-pad-expert-input-to-capacity
+)
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_mixtral.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/musa_patch/__init__.py b/megatron-lm-musa-patch/musa_patch/__init__.py
new file mode 100644
index 00000000..24221ff0
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/__init__.py
@@ -0,0 +1,228 @@
+import os
+import sys
+import torch
+import torch.utils
+import torch.utils.data
+import torch_musa
+from contextlib import nullcontext
+
+def patch_before_import_megatron():
+    # Import fused_layer_norm before transformer_engine
+    from . import fused_layer_norm
+
+    from transformer_engine.pytorch.utils import get_device_compute_capability
+    def _get_device_compute_capability():
+        return (8, 0)
+    get_device_compute_capability = _get_device_compute_capability
+    from packaging.version import Version as PkgVersion
+    from transformer_engine.pytorch.attention import _flash_attn_version
+    _flash_attn_version = PkgVersion("2.5.0")
+    # Import other necessary modules to patch
+    # from . import transformer_config
+    from . import dot_product_attention
+    from . import checkpointing
+    from . import training
+    from . import linear_with_grad_accumulation_and_async_allreduce
+    from . import rotary_pos_embedding
+    from . import p2p_communication
+    from . import fused_bias_swiglu
+    if int(os.getenv("USE_MUSA_MOE", 0)):
+        from . import moe_utils
+        from . import router
+    from . import arguments
+    if int(os.getenv("USE_RECOMPUTE_VARIANCE", 0)):
+        from . import recomupte_variance
+    if int(os.getenv("USE_EPX", 0)):
+        from . import fault_tolerance_epx
+        from . import parallel_state
+    from . import optimizer
+    if int(os.getenv("ENABLE_D2H_IN_PERMUTATION", 0)):
+        from . import token_dispatcher
+
+    from . import core_pipeline_parallel_schedules
+    # Disable some unsupprted features
+    # set_jit_fusion_options
+    def set_jit_fusion_options():
+        pass
+    import megatron.training.initialize
+    megatron.training.training.set_jit_fusion_options = set_jit_fusion_options
+    megatron.training.initialize.set_jit_fusion_options = set_jit_fusion_options
+    # Disable fused_kernels
+    import megatron.legacy.fused_kernels
+    megatron.legacy.fused_kernels.load = lambda args : None
+    # Disable _compile_dependencies
+    def _compile_dependencies():
+        pass
+    megatron.training.initialize._compile_dependencies = _compile_dependencies
+
+
+def patch_after_import_torch():
+    # 1. Patch for torch.xxx
+    torch.cuda.is_available = torch.musa.is_available
+    torch.cuda.current_device = lambda : f'musa:{torch.musa.current_device()}'
+    torch.cuda.device_count = torch.musa.device_count
+    torch.cuda.set_device = torch.musa.set_device
+    torch.cuda.DoubleTensor = torch.musa.DoubleTensor
+    torch.cuda.FloatTensor = torch.musa.FloatTensor
+    torch.cuda.LongTensor = torch.musa.LongTensor
+    torch.cuda.HalfTensor = torch.musa.HalfTensor
+    torch.cuda.BFloat16Tensor = torch.musa.BFloat16Tensor
+    torch.cuda.IntTensor = torch.musa.IntTensor
+    torch.cuda.synchronize = torch.musa.synchronize
+    torch.cuda.get_rng_state = torch.musa.get_rng_state
+    torch.cuda.set_rng_state = torch.musa.set_rng_state
+    torch.cuda.random.get_rng_state = torch.musa.get_rng_state
+    torch.cuda.synchronize = torch.musa.synchronize
+    torch.cuda.empty_cache = torch.musa.empty_cache
+    torch.Tensor.cuda = torch.Tensor.musa
+    torch.cuda.manual_seed = torch.musa.manual_seed
+    torch.cuda.Event = torch.musa.Event
+    torch.cuda.Stream = torch.musa.Stream
+    torch.cuda.stream = torch.musa.stream
+    torch.cuda.get_device_properties = torch.musa.get_device_properties
+    # add torch.musa.current_devce() to activate torch.musa.default_generators
+    d = torch.musa.current_device()
+    torch.cuda.default_generators = torch.musa.default_generators
+    # torch.cuda.amp = torch.musa.amp
+    # Memory
+    torch.cuda.memory_allocated = torch.musa.memory_allocated
+    torch.cuda.max_memory_allocated = torch.musa.max_memory_allocated
+    torch.cuda.memory_reserved = torch.musa.memory_reserved
+    torch.cuda.max_memory_reserved = torch.musa.max_memory_reserved
+    torch.cuda.memory._record_memory_history = torch.musa.memory._record_memory_history
+    torch.cuda.memory._snapshot = torch.musa.memory._snapshot
+
+    # (yehua.zhang) replace lazy_call to avoid cpu memory leak,
+    # because failure of cuda init in lazy_call will cause endless operation of emplace back.
+    torch.cuda._lazy_call = torch.musa.core._lazy_init._lazy_call
+    torch.cuda._lazy_init = torch.musa.core._lazy_init._lazy_init
+
+    # 2.Patch for torch args related to cuda/musa
+    def hook_cuda_device(device):
+        if isinstance(device, str) and device.startswith("cuda"):
+            return device.replace("cuda", "musa")
+        if isinstance(device, torch.device) and device.type == "cuda":
+            return torch.device("musa", device.index)
+        return device
+
+    def maybe_hook_cuda_args(args, kwargs):
+        new_args = []
+        for arg in args:
+            new_args.append(hook_cuda_device(arg))
+        if "device" in kwargs:
+            v = kwargs["device"]
+            kwargs['device'] = hook_cuda_device(v)
+        return tuple(new_args), kwargs
+    
+    # retain torch.full reference
+    original_full = torch.full
+    # redeine torch.zeros
+    def patched_full(*args, **kwargs):
+        args, kwargs = maybe_hook_cuda_args(args, kwargs)
+        result = original_full(*args, **kwargs)
+        return result
+    torch.full = patched_full
+
+    # retain torch.tensor reference
+    original_tensor = torch.tensor
+    # redefine torch.tensor
+    def patched_tensor(*args, **kwargs):
+        if 'device' in kwargs and kwargs['device'] == 'cuda':
+            kwargs['device'] = 'musa'
+        result = original_tensor(*args, **kwargs)
+        return result
+    torch.tensor = patched_tensor
+
+    # redefine torch.Tensor type
+    orig_type = torch.Tensor.type
+    def musa_type(*args, **kwargs):
+        result = orig_type(*args, **kwargs)
+        if isinstance(result, str):
+            result = result.replace("musa", "cuda")
+        return result
+    torch.Tensor.type = musa_type
+
+    # retain torch.zeros reference
+    original_zeros = torch.zeros
+    # redeine torch.zeros
+    def patched_zeros(*args, **kwargs):
+        if 'device' in kwargs and kwargs['device'] == 'cuda':
+            kwargs['device'] = 'musa'
+        result = original_zeros(*args, **kwargs)
+        return result
+    torch.zeros = patched_zeros
+
+    # retain torch.empty reference
+    original_empty = torch.empty
+    # redifine torch.empty
+    def patched_empty(*args, **kwargs):
+        if 'device' in kwargs and kwargs['device'] == 'cuda':
+            kwargs['device'] = 'musa'
+        result = original_empty(*args, **kwargs)
+        return result
+    torch.empty = patched_empty
+
+    # Original tensor class
+    original_is_cuda = torch.Tensor.is_cuda
+    def always_cuda(self):
+        return self.is_musa
+
+    # TODO : this patch may be override by transformer_engine patch
+    # we'd better unify this patch with transformer_engine patch.
+    torch.Tensor.is_cuda = property(always_cuda)
+
+    # 3. Patch for nccl/mccl
+    origin_init_process_group = torch.distributed.init_process_group
+    def patched_init_process_group(*args, **kwargs):
+        if 'backend' in kwargs and kwargs['backend'] == 'nccl':
+            kwargs['backend'] = 'mccl'
+        result = origin_init_process_group(*args, **kwargs)
+        return result
+    torch.distributed.init_process_group = patched_init_process_group
+
+    # 3. disable pin memory
+    # def pin_memory(data, device=None):
+    #     return data
+    # torch.utils.data._utils.pin_memory.pin_memory = pin_memory
+
+    # 4. disable nvtx
+    def _pass_pvtx(*args, **kwargs):
+        return
+    torch.cuda.nvtx.range_push = _pass_pvtx
+    torch.cuda.nvtx.range_pop = _pass_pvtx
+
+    # 5. disable dynamo
+    import os
+    os.environ["NVTE_TORCH_COMPILE"] = "0"
+    os.environ["TORCHDYNAMO_DISABLE"] = "1"
+
+    def noop(func):
+        return func
+    torch.compile = noop
+    torch.jit.script = noop
+
+    def get_device_capability_musa():
+        return [8, 3]
+    torch.cuda.get_device_capability = get_device_capability_musa
+
+def py_patch():
+    if sys.version_info >= (3.9, 0):
+        return
+    import math
+    def lcm(a, b):
+        return abs(a * b) // math.gcd(a, b)
+    math.lcm = lcm
+    return
+
+# Apply patch
+py_patch()
+
+patch_after_import_torch()
+
+if os.getenv("ENABLE_ZERO_BUBBLE", "0") == "1":
+    from .import zbb_light
+    zbb_light.patch_megatron()
+
+patch_before_import_megatron()
+
+
diff --git a/megatron-lm-musa-patch/musa_patch/arguments.py b/megatron-lm-musa-patch/musa_patch/arguments.py
new file mode 100644
index 00000000..5ffb2ad2
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/arguments.py
@@ -0,0 +1,226 @@
+import dataclasses
+import torch
+import torch.nn.functional as F
+
+import megatron.training.arguments
+from megatron.training.activations import squared_relu
+from megatron.core.transformer.transformer_config import TransformerConfig, MLATransformerConfig
+moe_freq_type = megatron.training.arguments.moe_freq_type
+
+def _add_moe_args(parser):
+    group = parser.add_argument_group(title="moe")
+    # General arguments
+    group.add_argument('--expert-model-parallel-size', type=int, default=1,
+                       help='Degree of expert model parallelism.')
+    group.add_argument('--expert-tensor-parallel-size', type=int, default=None,
+                       help='Degree of expert model parallelism. Default is None, which will be set to the value of --tensor-model-paralle-size.')
+    group.add_argument('--num-experts', type=int, default=None,
+                       help='Number of Experts in MoE (None means no MoE)')
+    group.add_argument('--moe-layer-freq', type=moe_freq_type, default=1,
+                       help='Frequency between MoE layers and Dense layers. Accepts either: '
+                            '- An integer N: Represents a 1:N ratio, meaning one expert layer for every N-1 dense layers '
+                            '- A string containing a Python list expression that defines a custom pattern, e.g.: '
+                            '"([1]*3+[0]*1)*3" evaluates to [1,1,1,0,1,1,1,0,1,1,1,0] '
+                            'where 1 indicates an expert layer and 0 indicates a dense layer. '
+                            'Examples: "([0]+[1]*23)": 1 dense layer followed by 23 experts layers, '
+                            '"([1]*3+[0]*2)*2": Three expert layers followed by two dense layers, repeated twice.')
+    group.add_argument('--moe-ffn-hidden-size', type=int, default=None,
+                       help='The hidden size of each expert\'s feed-forward network (ffn). '
+                       'If not specified, defaults to the ffn_hidden_size.')
+    group.add_argument('--moe-shared-expert-intermediate-size', type=int, default=None,
+                       help='Shared expert total ffn hidden size. '
+                       'It should be equal to "num_shared_experts * ffn_size_of_each_shared_expert" if there are multiple shared experts. '
+                       'None means no shared expert.')
+    group.add_argument('--moe-shared-expert-overlap', action='store_true',
+                       help='Enable overlapping between shared expert computations and dispatcher communications. '
+                       'Without this, the shared epxerts execute after the routed experts. '
+                       'Only effective when moe-shared-expert-intermediate-size is set.')
+    group.add_argument('--moe-grouped-gemm', action='store_true',
+                       help='When there are multiple experts per rank, launch multiple local GEMM kernels in multiple streams to improve the utilization and performance with GroupedLinear in TransformerEngine.')
+    # Router arguments
+    group.add_argument('--moe-router-load-balancing-type', type=str,
+                       choices=['aux_loss', 'seq_aux_loss', 'sinkhorn', 'none'],
+                       default='aux_loss',
+                       help='Determines the load balancing strategy for the router. "aux_loss" corresponds to the load balancing loss used in GShard and SwitchTransformer; "seq_aux_loss" corresponds to the load balancing loss used in DeepSeekV2, which computes the loss for each individual sample; "sinkhorn" corresponds to the balancing algorithm used in S-BASE, and "none" implies no load balancing. The default is "aux_loss".')
+    group.add_argument('--moe-router-score-function', type=str,
+                       choices=['softmax', 'sigmoid'],
+                       default='softmax',
+                       help='Score function for MoE TopK routing. Can be "softmax" or "sigmoid".')
+    group.add_argument('--moe-router-topk', type=int, default=2,
+                       help='Number of experts to route to for each token. The default is 2.')
+    group.add_argument('--moe-router-pre-softmax', action='store_true',
+                       help='Enable pre-softmax routing for MoE, which means softmax is before the top-k selection. By default, softmax is done after top-k.')
+    group.add_argument('--moe-router-num-groups', type=int, default=None,
+                       help='Number of groups to divide experts into for group-limited routing. When using group-limited routing: 1) Experts are divided into equal-sized groups, 2) For each token, a subset of groups are selected based on routing scores (sum of top-2 expert scores within each group), 3) From these selected groups, moe_router_topk experts are chosen.'
+                       'Two common use cases: 1) Device-limited routing: Set equal to expert parallel size (EP) to limit each token to experts on a subset of devices (See DeepSeek-V2: https://arxiv.org/pdf/2405.04434) 2) Node-limited routing: Set equal to number of nodes in EP group to limit each token to experts on a subset of nodes (See DeepSeek-V3: https://arxiv.org/pdf/2412.19437)')
+    group.add_argument('--moe-router-group-topk', type=int, default=None,
+                       help='Number of selected groups for group-limited routing.')
+    group.add_argument('--moe-router-topk-scaling-factor', type=float, default=None,
+                       help='Scaling factor for routing score in top-k selection, only works when --moe-router-pre-softmax enabled. Defaults to None, which means no scaling.')
+    group.add_argument('--moe-router-enable-expert-bias', action='store_true',
+                       help='TopK routing with dynamic expert bias in the aux-loss-free load balancing strategy. '
+                       'The routing decision is based on the sum of the routing scores and the expert bias. '
+                       'See https://arxiv.org/abs/2408.15664 for details.')
+    group.add_argument('--moe-router-bias-update-rate', type=float, default=1e-3,
+                       help='Expert bias update rate in the aux-loss-free load balancing strategy. '
+                       'The expert bias is updated based on the number of assigned tokens to each expert in a global batch, '
+                       'where the bias is increased for the experts with less assigned tokens and decreased for the experts with more assigned tokens. '
+                       'The default value 1e-3 is same as that used in DeepSeekV3.')
+    group.add_argument('--moe-use-legacy-grouped-gemm', action='store_true',
+                       help='Use legacy GroupedMLP rather than TEGroupedMLP. Note: The legacy one will be deprecated soon.')
+    group.add_argument('--moe-aux-loss-coeff', type=float, default=0.0,
+                       help='Scaling coefficient for the aux loss: a starting value of 1e-2 is recommended.')
+    group.add_argument('--moe-z-loss-coeff', type=float, default=None,
+                       help='Scaling coefficient for the z-loss: a starting value of 1e-3 is recommended.')
+    group.add_argument('--moe-input-jitter-eps', type=float, default=None,
+                       help='Add noise to the input tensor by applying jitter with a specified epsilon value.')
+    group.add_argument('--moe-token-dispatcher-type', type=str,
+                       choices=['allgather', 'alltoall', 'flex', 'alltoall_seq'],
+                       default='allgather',
+                       help="The type of token dispatcher to use. The default is 'allgather'. Options are 'allgather', 'alltoall' and 'alltoall_seq'. We recommend using 'alltoall' when applying expert parallelism. For more information, please refer to the documentation in core/moe/README.")
+    group.add_argument('--moe-enable-deepep', action='store_true',
+                       help='[Experimental] Enable DeepSeek/DeepEP for efficient token dispatching and combine in MoE models. Only works with flex token dispatcher by setting --moe-token-dispatcher-type=flex.')
+    group.add_argument('--moe-per-layer-logging', action='store_true',
+                       help='Enable per-layer logging for MoE, currently supports auxiliary loss and z loss.')
+    # Token dropping arguments
+    group.add_argument('--moe-expert-capacity-factor', type=float, default=None,
+                       help='The capacity factor for each expert, None means no token will be dropped.')
+    group.add_argument('--moe-pad-expert-input-to-capacity', action='store_true',
+                       help='Pads the input for each expert to match the expert capacity length, effective only after the --moe-expert-capacity-factor is set.')
+    group.add_argument('--moe-token-drop-policy', type=str, default='probs', choices=['probs', 'position'],
+                       help='The policy to drop tokens. Can be either "probs" or "position". If "probs", the tokens with the lowest probabilities will be dropped. If "position", tokens at the end of each batch will be dropped.')
+    group.add_argument('--moe-layer-recompute', action='store_true',
+                       help='Enable checkpointing for moe_layer, should be used when memory is not sufficient.')
+    group.add_argument('--moe-extended-tp', action='store_true',
+                       help='Deprecated. Use --expert-tensor-parallel-size instead.')
+    group.add_argument('--moe-use-upcycling', action='store_true',
+                       help='Load a checkpoint of a dense model, convert it into an MoE model, and save the converted model to the path specified by --save. '
+                       'Upcycling is implemented on the top of distributed checkpointing, so it supports parallel modes different from the dense model.')
+    group.add_argument('--moe-permute-fusion', action='store_true',
+                       help='Fuse token rearrangement ops during token dispatching.')
+    
+    # HACK(huang.huang): control dp_reduce position: tp-only-amax-red 
+    group.add_argument('--tp-only-amax-red', action='store_true',
+                        help="Whether to reduce the FP8 AMAX only in the TP or TP-CP domain") 
+    ## HACK(huang.huang)
+
+    # HACK(yehua.zhang): add dsv2 & dsv3 loss, q-rms-recompute
+    # dsv2
+    group.add_argument('--moe-device-level-aux-loss-coeff', type=float, default=None,
+                       help='Scaling coefficient for the device-level aux loss')
+    group.add_argument('--moe-comm-aux-loss-coeff', type=float, default=None,
+                       help='Scaling coefficient for the communication aux loss')
+    group.add_argument('--moe-device-level-capacity', action='store_true',
+                       help='Whether to consider the expert capacity of a group together')
+    
+    # dsv3
+    group.add_argument('--moe-complementary-seq-aux-loss', action='store_true',
+                       help='use complementary sequence-wise aux loss in MoE, should only used with seq_aux_loss')
+    group.add_argument('--moe-router-norm-topk-prob', action='store_true',
+                       help='Enable normalization for sigmoid score in MoE, should only used with moe-router-use-sigmoid')
+
+    # q-rms-recompute
+    group = parser.add_argument_group(title="mla")
+    group.add_argument('--q-rms-recompute', action='store_true',
+                       help="use q uproj rmsnorm recompute")
+    ## HACK(yehua.zhang)
+
+    # HACK(huang.huang): add attn-recompute, recompute-variance, groupMLP_recompute
+    group.add_argument('--attn-recompute', action='store_true',
+                       help="use attn recompute")
+    group.add_argument('--mla-rms-recompute', action='store_true',
+                       help="use rms recompute before mla")
+    group.add_argument('--mlp-rms-recompute', action='store_true',
+                       help="use rms recompute before mlp")
+    group.add_argument('--recompute-variance', action='store_true',
+                       help="use recompute variance")
+    group.add_argument('--mlp-recompute', action='store_true',
+                       help="use groupMLP_recompute to recompute groupgemm and shared_exp in moelayer, mlp in dense") 
+    ## HACK(huang.huang)
+    return parser
+
+
+def core_transformer_config_from_args(args, config_class=None):
+
+    # Config class.
+    config_class = config_class or TransformerConfig
+
+    if args.multi_latent_attention:
+        config_class = MLATransformerConfig
+
+    # Translate args to core transformer configuration
+    kw_args = {}
+    for f in dataclasses.fields(config_class):
+        if hasattr(args, f.name):
+            kw_args[f.name] = getattr(args, f.name)
+    kw_args['persist_layer_norm'] = not args.no_persist_layer_norm
+    kw_args['layernorm_zero_centered_gamma'] = args.apply_layernorm_1p
+    kw_args['layernorm_epsilon'] = args.norm_epsilon
+    kw_args['deallocate_pipeline_outputs'] = True
+    kw_args['pipeline_dtype'] = args.params_dtype
+    kw_args['batch_p2p_comm'] = not args.overlap_p2p_comm
+    kw_args['num_moe_experts'] = args.num_experts
+    kw_args['rotary_interleaved'] = args.rotary_interleaved
+    kw_args['num_layers_in_first_pipeline_stage']= args.decoder_first_pipeline_num_layers
+    kw_args['num_layers_in_last_pipeline_stage']= args.decoder_last_pipeline_num_layers
+    if args.swiglu:
+        kw_args['activation_func'] = F.silu
+        kw_args['gated_linear_unit'] = True
+        kw_args['bias_activation_fusion'] = args.bias_swiglu_fusion
+    else:
+        kw_args['bias_activation_fusion'] = args.bias_gelu_fusion
+    if args.squared_relu:
+        assert not args.swiglu
+        kw_args['activation_func'] = squared_relu
+    if args.init_method_xavier_uniform:
+        kw_args['init_method'] = torch.nn.init.xavier_uniform_
+        kw_args['scaled_init_method'] = torch.nn.init.xavier_uniform_
+    if args.group_query_attention:
+        kw_args['num_query_groups'] = args.num_query_groups
+    else:
+        kw_args['num_query_groups'] = None
+    kw_args['config_logger_dir'] = args.config_logger_dir
+
+    if len(args.cp_comm_type) == 1:
+        kw_args['cp_comm_type'] = args.cp_comm_type[0]
+    
+    # Return config.
+    
+    # HACK(yehua.zhang): add dsv2 & dsv3 loss, mtp, q-rms-recompute from args to transformer config
+    config_instance = config_class(**kw_args)
+
+    config_instance.moe_device_level_aux_loss_coeff = args.moe_device_level_aux_loss_coeff
+    config_instance.moe_comm_aux_loss_coeff = args.moe_comm_aux_loss_coeff
+    config_instance.moe_device_level_capacity = args.moe_device_level_capacity
+
+    config_instance.moe_complementary_seq_aux_loss = args.moe_complementary_seq_aux_loss
+    config_instance.moe_router_norm_topk_prob = args.moe_router_norm_topk_prob
+    config_instance.moe_device_level_capacity = args.moe_device_level_capacity
+
+    config_instance.q_rms_recompute = args.q_rms_recompute
+    ## HACK(yehua.zhang)
+
+    # HACK(huang.huang): add attn-recompute, recompute-variance, mlp_recompute
+    config_instance.attn_recompute = args.attn_recompute
+    config_instance.mla_rms_recompute = args.mla_rms_recompute
+    config_instance.mlp_rms_recompute = args.mlp_rms_recompute
+    config_instance.recompute_variance = args.recompute_variance
+    config_instance.mlp_recompute = args.mlp_recompute
+    ## HACK(huang.huang)
+
+    # HACK(huang.huang): args check for pp=1 and first/last stage num layer=None
+    if config_instance.pipeline_model_parallel_size == 1:
+        assert config_instance.num_layers_in_first_pipeline_stage is None and config_instance.num_layers_in_last_pipeline_stage is None, \
+            f"For pipeline_model_parallel_size=1, first/last must be None, but get {config_instance.num_layers_in_first_pipeline_stage}/{config_instance.num_layers_in_last_pipeline_stage}"
+    ## HACK(huang.huang)
+
+    # HACK(huang.huang): control dp_reduce position: tp-only-amax-red 
+    config_instance.tp_only_amax_red = args.tp_only_amax_red
+    ##HACK(huang.huang)
+    
+    print('config_instance is ', config_instance)
+    return config_instance
+
+
+megatron.training.arguments._add_moe_args = _add_moe_args
+megatron.training.arguments.core_transformer_config_from_args = core_transformer_config_from_args
diff --git a/megatron-lm-musa-patch/musa_patch/checkpointing.py b/megatron-lm-musa-patch/musa_patch/checkpointing.py
new file mode 100644
index 00000000..45d08120
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/checkpointing.py
@@ -0,0 +1,76 @@
+import os
+
+from megatron.training.global_vars import (
+    get_args,
+)
+
+def save_checkpoint(iteration, model, optimizer, opt_param_scheduler,
+                    num_floating_point_operations_so_far,
+                    checkpointing_context=None, pipeline_rank=None,
+                    expert_rank=None, tensor_rank=None,
+                    pipeline_parallel=None, expert_parallel=None,
+                    non_persistent_ckpt=False,
+                    train_data_iterator=None, ft_client=None,
+                    preprocess_common_state_dict_fn=None
+                    ):
+  try:
+    from dlrover.trainer.torch.flash_checkpoint.megatron_dist_ckpt \
+      import save_checkpoint as dlrover_save_checkpoint_dist
+    from dlrover.trainer.torch.flash_checkpoint.megatron \
+      import save_checkpoint as dlrover_save_checkpoint
+  except Exception as e:
+    print(f"import flash_ckpt failed {str(e)}")
+    return
+
+  args = get_args()
+  if args.use_distributed_optimizer and not args.no_save_optim:
+    dlrover_save_checkpoint_dist(iteration, model, optimizer,
+                                 opt_param_scheduler, 0,
+                                 preprocess_common_state_dict_fn)
+  else:
+    dlrover_save_checkpoint(iteration, model, optimizer,
+                            opt_param_scheduler, 0)
+
+def load_checkpoint(model, optimizer, opt_param_scheduler,
+                    load_arg='load', strict=True,
+                    ft_client=None, checkpointing_context=None,
+                    skip_load_to_model_and_opt=False):
+  try:
+    from dlrover.trainer.torch.flash_checkpoint.megatron_dist_ckpt \
+      import load_checkpoint as dlrover_load_checkpoint_dist
+    from dlrover.trainer.torch.flash_checkpoint.megatron \
+      import load_checkpoint as dlrover_load_checkpoint
+  except Exception as e:
+    print(f"import flash_ckpt failed {str(e)}")
+    return 0, 0
+
+  i = 0
+  args = get_args()
+  if args.use_distributed_optimizer and not args.no_save_optim:
+    i,  num_floating_point_operations_so_far = dlrover_load_checkpoint_dist(model,
+                                        optimizer,
+                                        opt_param_scheduler,
+                                        load_arg,
+                                        strict)
+  else:
+    i, num_floating_point_operations_so_far = dlrover_load_checkpoint(model,
+                                optimizer,
+                                opt_param_scheduler,
+                                load_arg,
+                                strict,
+                                ft_client=ft_client,
+                                checkpointing_context=checkpointing_context,
+                                skip_load_to_model_and_opt=skip_load_to_model_and_opt)
+
+  return i, num_floating_point_operations_so_far
+
+enable_async_ckpt = int(os.getenv("ENABLE_ASYNC_CKPT", 0))
+if enable_async_ckpt:
+  print("flash ckpt enabled")
+  import megatron.training.checkpointing
+
+  megatron.training.checkpointing.save_checkpoint = save_checkpoint
+  megatron.training.checkpointing.load_checkpoint = load_checkpoint
+
+  megatron.training.training.save_checkpoint = save_checkpoint
+  megatron.training.training.load_checkpoint = load_checkpoint
diff --git a/megatron-lm-musa-patch/musa_patch/core_pipeline_parallel_schedules.py b/megatron-lm-musa-patch/musa_patch/core_pipeline_parallel_schedules.py
new file mode 100644
index 00000000..a0b6e9f1
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/core_pipeline_parallel_schedules.py
@@ -0,0 +1,61 @@
+import os
+import megatron
+import functools
+import torch
+
+
+def record_function_decorator(func):
+    @functools.wraps(func)
+    def new_func(*args, **kwargs):
+        with torch.profiler.record_function(func.__name__):
+            return func(*args, **kwargs)
+
+    return new_func
+
+
+original_forward_step = megatron.core.pipeline_parallel.schedules.forward_step
+original_backward_step = megatron.core.pipeline_parallel.schedules.backward_step
+
+
+@record_function_decorator
+def forward_step(
+    forward_step_func,
+    data_iterator,
+    model,
+    num_microbatches,
+    input_tensor,
+    forward_data_store,
+    config,
+    collect_non_loss_data=False,
+    checkpoint_activations_microbatch=None,
+    is_first_microbatch=False,
+    current_microbatch=None,
+    encoder_decoder_xattn=False,
+):
+    return original_forward_step(
+        forward_step_func,
+        data_iterator,
+        model,
+        num_microbatches,
+        input_tensor,
+        forward_data_store,
+        config,
+        collect_non_loss_data,
+        checkpoint_activations_microbatch,
+        is_first_microbatch,
+        current_microbatch,
+        encoder_decoder_xattn,
+    )
+
+
+@record_function_decorator
+def backward_step(input_tensor, output_tensor, output_tensor_grad, model_type, config):
+    return original_backward_step(
+        input_tensor, output_tensor, output_tensor_grad, model_type, config
+    )
+
+
+enable_profiler = int(os.getenv("ENABLE_PROFILER", 0))
+if enable_profiler:
+    megatron.core.pipeline_parallel.schedules.forward_step = forward_step
+    megatron.core.pipeline_parallel.schedules.backward_step = backward_step
diff --git a/megatron-lm-musa-patch/musa_patch/dot_product_attention.py b/megatron-lm-musa-patch/musa_patch/dot_product_attention.py
new file mode 100644
index 00000000..19bf27c5
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/dot_product_attention.py
@@ -0,0 +1,262 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+
+import math
+
+import torch
+from torch import Tensor
+
+from megatron.core import parallel_state, tensor_parallel
+from megatron.core.fusions.fused_softmax import FusedScaleMaskSoftmax
+from megatron.core.packed_seq_params import PackedSeqParams
+from megatron.core.transformer.enums import AttnMaskType
+from megatron.core.transformer.module import MegatronModule
+from megatron.core.transformer.transformer_config import TransformerConfig
+from megatron.core.transformer.utils import attention_mask_func
+from megatron.core.utils import divide
+
+
+
+class DotProductAttention(MegatronModule):
+    """
+    Region where selective activation recomputation is applied.
+    This region is memory intensive but less compute intensive which
+    makes activation checkpointing more efficient for LLMs (20B+).
+    See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
+
+    We use the following notation:
+     h: hidden size
+     n: number of attention heads
+     p: number of tensor model parallel partitions
+     b: batch size
+     s: sequence length
+    """
+
+    def __init__(
+        self,
+        config: TransformerConfig,
+        layer_number: int,
+        attn_mask_type: AttnMaskType,
+        attention_type: str,
+        attention_dropout: float = None,
+        softmax_scale: float = None,
+        k_channels: int = None,
+        v_channels: int = None,
+        cp_comm_type: str = None,
+    ):
+        super().__init__(config=config)
+
+        self.config: TransformerConfig = config
+
+        assert (
+            self.config.context_parallel_size == 1
+        ), "Context parallelism is only supported by TEDotProductAttention!"
+
+        assert (
+            self.config.window_size is None
+        ), "Sliding Window Attention is only supported by TEDotProductAttention!"
+        print("use DotProductAttention")
+        self.layer_number = max(1, layer_number)
+        self.attn_mask_type = attn_mask_type
+        self.attention_type = attention_type  # unused for now
+
+        projection_size = self.config.kv_channels * self.config.num_attention_heads
+        from megatron.training import get_args
+        args = get_args()
+        self.use_flash_attn = args.use_flash_attn and not args.multi_latent_attention
+
+        # Per attention head and per partition values.
+        world_size = parallel_state.get_tensor_model_parallel_world_size()
+        self.hidden_size_per_partition = divide(projection_size, world_size)
+        self.hidden_size_per_attention_head = divide(projection_size, config.num_attention_heads)
+        self.num_attention_heads_per_partition = divide(self.config.num_attention_heads, world_size)
+        self.num_query_groups_per_partition = divide(self.config.num_query_groups, world_size)
+
+        coeff = None
+        self.norm_factor = math.sqrt(self.hidden_size_per_attention_head)
+        if self.config.apply_query_key_layer_scaling:
+            coeff = self.layer_number
+            self.norm_factor *= coeff
+
+        self.scale_mask_softmax = FusedScaleMaskSoftmax(
+            input_in_fp16=self.config.fp16,
+            input_in_bf16=self.config.bf16,
+            attn_mask_type=self.attn_mask_type,
+            scaled_masked_softmax_fusion=self.config.masked_softmax_fusion,
+            mask_func=attention_mask_func,
+            softmax_in_fp32=self.config.attention_softmax_in_fp32,
+            scale=coeff,
+        )
+
+        # Dropout. Note that for a single iteration, this layer will generate
+        # different outputs on different number of parallel partitions but
+        # on average it should not be partition dependent.
+        self.attention_dropout = torch.nn.Dropout(
+            self.config.attention_dropout if attention_dropout is None else attention_dropout
+        )
+
+    def _flash_attn_impl(self, query_states, key_states, value_states, attention_mask=None):
+        # attention_mask useless for now
+        output_size = (
+            query_states.size(0),
+            query_states.size(1),
+            query_states.size(2) * query_states.size(3)
+        ) #seq_len, batch_size, head_num * head_dim
+
+        query_states = query_states.permute(1, 2, 0, 3)
+        key_states = key_states.permute(1, 2, 0, 3)
+        value_states = value_states.permute(1, 2, 0, 3)
+
+        bsz, num_heads, q_len, head_dim = query_states.size()
+        # kv_seq_len = key_states.size(2)
+        with torch.backends.cuda.sdp_kernel(enable_flash=True, enable_math=False):
+            attn_output = torch.nn.functional.scaled_dot_product_attention(
+                query_states, # batch_size, head_num , seq_len,  head_size
+                key_states, # batch_size, head_num, seq_len, head_size
+                value_states, #batch_size, head_num, seq_len, head_size
+                attn_mask=None,# bsz * num_heads, q_len, kv_seq_len
+                dropout_p=0.0,
+                is_causal=True,
+            )
+        if attn_output.size() != (bsz, num_heads, q_len, head_dim):
+            raise ValueError(
+                f"`attn_output` should be of size {(bsz, num_heads, q_len, head_dim)}, but is"
+                f" {attn_output.size()}"
+            )
+        attn_output = attn_output.permute(2, 0, 1, 3).reshape(*output_size).contiguous()
+        return attn_output
+    
+    def forward(
+        self,
+        query: Tensor,
+        key: Tensor,
+        value: Tensor,
+        attention_mask: Tensor,
+        attn_mask_type: AttnMaskType = None,
+        attention_bias: Tensor = None,
+        packed_seq_params: PackedSeqParams = None,
+    ):
+        assert packed_seq_params is None, (
+            "Packed sequence is not supported by DotProductAttention."
+            "Please use TEDotProductAttention instead."
+        )
+        # ===================================
+        # Raw attention scores. [b, n/p, s, s]
+        # ===================================
+
+        # expand the key and value [sk, b, ng, hn] -> [sk, b, np, hn]
+        # This is a noop for normal attention where ng == np. When using group query attention this
+        # creates a view that has the keys and values virtually repeated along their dimension to
+        # match the number of queries.
+
+        # attn_mask_type is not used.
+        if self.num_attention_heads_per_partition // self.num_query_groups_per_partition > 1:
+            key = key.repeat_interleave(
+                self.num_attention_heads_per_partition // self.num_query_groups_per_partition, dim=2
+            )
+            value = value.repeat_interleave(
+                self.num_attention_heads_per_partition // self.num_query_groups_per_partition, dim=2
+            )
+
+        
+        if self.use_flash_attn:
+            # TODO(optimize mask method)
+            # if attention_mask.dtype == torch.bool:
+            #     attention_mask.mas
+            assert attn_mask_type == AttnMaskType.causal
+                
+            context = self._flash_attn_impl(query, key, value, attention_mask)
+            # new_context_shape = context.size()[:-2] + (self.hidden_size_per_partition,)
+            # context = context.view(*new_context_shape)
+            return context
+        # [b, np, sq, sk]
+        output_size = (
+            query.size(1),
+            query.size(2),
+            query.size(0),
+            key.size(0),
+        )
+
+        # [sq, b, np, hn] -> [sq, b * np, hn]
+        # This will be a simple view when doing normal attention, but in group query attention
+        # the key and value tensors are repeated to match the queries so you can't use simple strides
+        # to extract the queries.
+        query = query.reshape(output_size[2], output_size[0] * output_size[1], -1)
+        # [sk, b, np, hn] -> [sk, b * np, hn]
+        key = key.view(output_size[3], output_size[0] * output_size[1], -1)
+
+
+        # preallocting input tensor: [b * np, sq, sk]
+        matmul_input_buffer = parallel_state.get_global_memory_buffer().get_tensor(
+            (output_size[0] * output_size[1], output_size[2], output_size[3]), query.dtype, "mpu",
+        )
+
+        # Raw attention scores. [b * np, sq, sk]
+        matmul_result = torch.bmm(query.transpose(0, 1), key.transpose(0, 1).transpose(1, 2))
+        matmul_result *= (1.0 / self.norm_factor)
+        
+        # torch.baddbmm(
+        #     matmul_input_buffer,
+        #     query.transpose(0, 1),  # [b * np, sq, hn]
+        #     key.transpose(0, 1).transpose(1, 2),  # [b * np, hn, sk]
+        #     beta=0.0,
+        #     alpha=(1.0 / self.norm_factor),
+        # )
+
+        # change view to [b, np, sq, sk]
+        attention_scores = matmul_result.view(*output_size)
+
+        # ===========================
+        # Attention probs and dropout
+        # ===========================
+
+        # attention scores and attention mask [b, np, sq, sk]
+        attention_probs: Tensor = self.scale_mask_softmax(attention_scores, attention_mask)
+
+        # This is actually dropping out entire tokens to attend to, which might
+        # seem a bit unusual, but is taken from the original Transformer paper.
+
+        if not self.config.sequence_parallel:
+            with tensor_parallel.get_cuda_rng_tracker().fork():
+                attention_probs = self.attention_dropout(attention_probs)
+        else:
+            attention_probs = self.attention_dropout(attention_probs)
+
+        # =========================
+        # Context layer. [sq, b, hp]
+        # =========================
+
+        # value -> context layer.
+        # [sk, b, np, hn] --> [b, np, sq, hn]
+
+        # context layer shape: [b, np, sq, hn]
+        output_size = (
+            value.size(1),
+            value.size(2),
+            query.size(0),
+            value.size(3),
+        )
+
+        # change view [sk, b * np, hn]
+        value = value.view(value.size(0), output_size[0] * output_size[1], -1)
+
+        # change view [b * np, sq, sk]
+        attention_probs = attention_probs.view(output_size[0] * output_size[1], output_size[2], -1)
+
+        # matmul: [b * np, sq, hn]
+        context = torch.bmm(attention_probs, value.transpose(0, 1))
+
+        # change view [b, np, sq, hn]
+        context = context.view(*output_size)
+
+        # [b, np, sq, hn] --> [sq, b, np, hn]
+        context = context.permute(2, 0, 1, 3).contiguous()
+
+        # [sq, b, np, hn] --> [sq, b, hp]
+        new_context_shape = context.size()[:-2] + (-1,)
+        context = context.view(*new_context_shape)
+
+        return context
+
+import megatron.core.transformer.dot_product_attention
+megatron.core.transformer.dot_product_attention.DotProductAttention = DotProductAttention
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/__init__.py b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/__init__.py
new file mode 100644
index 00000000..3d1537ff
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/__init__.py
@@ -0,0 +1,3 @@
+from . import param_and_grad_buffer
+from . import data_samplers
+from . import epx_model_and_optimizer
diff --git a/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/data_samplers.py b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/data_samplers.py
new file mode 100644
index 00000000..fb6bebfb
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/data_samplers.py
@@ -0,0 +1,76 @@
+# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+
+"""Dataloaders."""
+
+import os
+import logging
+import random
+import torch
+import numpy as np
+from torch.utils.data import Dataset
+from megatron.core import mpu
+from megatron.training import get_args
+from megatron.core.utils import log_single_rank
+from megatron.legacy.data.data_samplers import MegatronPretrainingSampler
+from megatron.legacy.data.data_samplers import MegatronPretrainingRandomSampler
+
+logger = logging.getLogger(__name__)
+
+def build_pretraining_data_loader(dataset, consumed_samples):
+    """Build dataloader given an input dataset."""
+
+    if dataset is None:
+        return None
+    args = get_args()
+
+    if int(os.getenv("USE_EPX", 0)): # Fault tolerance sampler
+        from epx import EpxSampler
+        log_single_rank(logger, logging.INFO, f"Use EpxSampler")
+
+        batch_sampler = EpxSampler(
+            dataset=None,
+            total_samples=len(dataset),
+            consumed_samples=consumed_samples,
+            micro_batch_size=args.micro_batch_size,
+            data_parallel_rank=mpu.get_data_parallel_rank(),
+            data_parallel_size=mpu.get_data_parallel_world_size())
+    else: # Megatron sampler
+        if args.dataloader_type == 'single':
+            batch_sampler = MegatronPretrainingSampler(
+                total_samples=len(dataset),
+                consumed_samples=consumed_samples,
+                micro_batch_size=args.micro_batch_size,
+                data_parallel_rank=mpu.get_data_parallel_rank(),
+                data_parallel_size=mpu.get_data_parallel_world_size())
+        elif args.dataloader_type == 'cyclic':
+            batch_sampler = MegatronPretrainingRandomSampler(
+                dataset,
+                total_samples=len(dataset),
+                consumed_samples=consumed_samples,
+                micro_batch_size=args.micro_batch_size,
+                data_parallel_rank=mpu.get_data_parallel_rank(),
+                data_parallel_size=mpu.get_data_parallel_world_size(),
+                data_sharding=args.data_sharding)
+        elif args.dataloader_type == "external":
+            # External dataloaders are passed through. User is expected to provide a
+            # torch-compatible dataloader and define samplers, if needed.
+            return dataset
+        else:
+            raise Exception('{} dataloader type is not supported.'.format(
+                    args.dataloader_type))
+
+    # Torch dataloader.
+    return torch.utils.data.DataLoader(dataset,
+                                       batch_sampler=batch_sampler,
+                                       num_workers=args.num_workers,
+                                       pin_memory=True,
+                                       persistent_workers=True if args.num_workers > 0 else False,
+                                       )
+
+
+import sys
+for k in sys.modules:
+    if k.startswith('megatron'):
+        for target in ['build_pretraining_data_loader']:
+            if getattr(sys.modules[k], target, None):
+                setattr(sys.modules[k], target, build_pretraining_data_loader)
diff --git a/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/epx_model_and_optimizer.py b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/epx_model_and_optimizer.py
new file mode 100644
index 00000000..83bbd828
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/epx_model_and_optimizer.py
@@ -0,0 +1,112 @@
+import logging
+import wrapt
+import megatron
+import megatron.core.parallel_state as parallel_state
+from megatron.training.training import setup_model_and_optimizer
+from epx.optim import epx_wrap_optimizer_instance
+
+from megatron.core.optimizer import ChainedOptimizer
+from megatron.core.optimizer.distrib_optimizer import DistributedOptimizer
+
+logger = logging.getLogger(__name__)
+
+# Do not use core.transformer.module.Float16Module now
+# from megatron.core.transformer.module import Float16Module
+# setattr(sys.modules["megatron.training.training"], "Float16Module", Float16Module)
+
+@wrapt.decorator
+def setup_model_and_optimizer_wrapper(wrapped, _, args, kwargs):
+    def _dump_state_dict():
+        nonlocal optimizer
+
+        state_dict = {}
+
+        if len(model) == 1:
+            state_dict['model'] =  model[0].state_dict_for_save_checkpoint()
+        else:
+            for i in range(len(model)):
+                mpu.set_virtual_pipeline_model_parallel_rank(i)
+                state_dict['model%d' % i] =  model[i].state_dict_for_save_checkpoint()
+
+        if opt_param_scheduler is not None:
+            state_dict['opt_param_scheduler'] = opt_param_scheduler.state_dict()
+
+        # Optimizer stuff.
+        if optimizer is not None and not optimizer.is_stub_optimizer:
+            state_dict["optimizer"] = []
+            if isinstance(optimizer, ChainedOptimizer):
+                for optim in optimizer.chained_optimizers:
+                    inner_state_dict = optim.optimizer.state_dict()
+                    shard_fp32_from_float16_groups = optim.shard_fp32_from_float16_groups
+                    state_dict["optimizer"].append({ "inner_state_dict" : inner_state_dict,
+                                                        "shard_fp32_from_float16_groups": shard_fp32_from_float16_groups})
+            elif isinstance(optimizer, DistributedOptimizer):
+                inner_state_dict = optimizer.optimizer.state_dict()
+                shard_fp32_from_float16_groups = optimizer.shard_fp32_from_float16_groups
+                state_dict["optimizer"] = { "inner_state_dict" : inner_state_dict,
+                                            "shard_fp32_from_float16_groups": shard_fp32_from_float16_groups}
+            else:
+                assert False, f"epx _dump_state_dict not support {optimizer} now."
+
+        return state_dict
+
+
+    def _load_state_dict(state_dict):
+        nonlocal optimizer
+        opt_param_scheduler.load_state_dict(state_dict["opt_param_scheduler"])
+
+        if len(model) == 1:
+            model[0].load_state_dict(state_dict["model"])
+        else:
+            for i in range(len(model)):
+                mpu.set_virtual_pipeline_model_parallel_rank(i)
+                model[i] = state_dict['model%d' % i]
+
+        if optimizer is not None and not optimizer.is_stub_optimizer:
+            if isinstance(optimizer, ChainedOptimizer):
+                optimizer_states = state_dict["optimizer"]
+                assert len(optimizer_states) == len(optimizer.chained_optimizers), "optimizer state size mismatch"
+                for optim, state in zip(optimizer.chained_optimizers, optimizer_states):
+                    optim.optimizer.load_state_dict(state["inner_state_dict"])
+                    _copy_shard_params(state["shard_fp32_from_float16_groups"], optim.shard_fp32_from_float16_groups)
+            elif isinstance(optimizer, DistributedOptimizer):
+                optimizer.optimizer.load_state_dict(state_dict["optimizer"]["inner_state_dict"])
+                _copy_shard_params(state_dict["optimizer"]["shard_fp32_from_float16_groups"], optimizer.shard_fp32_from_float16_groups)
+            else:
+                assert False, f"epx _load_state_dict not support {optimizer} now."
+
+
+    def _copy_shard_params(src_params, dst_params):
+        assert len(src_params) == len(dst_params), "param size mismatch"
+        for src, dst in zip(src_params, dst_params):
+            if src is None or dst is None:
+                continue
+
+            if isinstance(src, list) and isinstance(dst, list):
+                _copy_shard_params(src, dst)
+                continue
+
+            assert isinstance(src, torch.Tensor) and isinstance(dst, torch.Tensor), "param type mismatch"
+            assert src.shape == dst.shape, "param shape mismatch"
+            assert src.dtype == dst.dtype, "param dtype mismatch"
+            dst.data.copy_(src.data)
+
+    logger.info("epx wrapped setup_model_and_optimizer")
+
+    model, optimizer, opt_param_scheduler = wrapped(*args, **kwargs)
+    lcp = parallel_state.get_epx_data_parallel_lcp()
+
+    logger.info(f"epx register replica_state")
+    lcp.register_module("replica_state", _dump_state_dict, _load_state_dict)
+
+    logger.info(f"Start wrap optimizer by epx")
+
+    optimizer = epx_wrap_optimizer_instance(optimizer, lcp)
+
+    logger.info(f"Finished wrap optimizer by epx")
+
+    return model, optimizer, opt_param_scheduler
+
+wraped_setup_model_and_optimizer = setup_model_and_optimizer_wrapper(setup_model_and_optimizer)
+
+megatron.training.training.setup_model_and_optimizer = wraped_setup_model_and_optimizer
diff --git a/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/param_and_grad_buffer.py b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/param_and_grad_buffer.py
new file mode 100644
index 00000000..5de3b90f
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fault_tolerance_epx/param_and_grad_buffer.py
@@ -0,0 +1,210 @@
+import logging
+import os
+
+import torch
+from contextlib import nullcontext
+from torch.distributed import _coalescing_manager
+
+from megatron.core.distributed.param_and_grad_buffer import _ParamAndGradBucketGroup
+import megatron.core.parallel_state as parallel_state
+from megatron.core.utils import is_torch_min_version
+
+logger = logging.getLogger(__name__)
+
+if is_torch_min_version("1.13.0"):
+    dist_all_gather_func = torch.distributed.all_gather_into_tensor
+    dist_reduce_scatter_func = torch.distributed.reduce_scatter_tensor
+else:
+    dist_all_gather_func = torch.distributed._all_gather_base
+    dist_reduce_scatter_func = torch.distributed._reduce_scatter_base
+
+def shard_buffer(buffer: torch.Tensor, data_parallel_world_size: int):
+    """
+    Shard buffer into data_parallel_world_size chunks of equal size.
+    """
+    assert buffer.numel() % data_parallel_world_size == 0
+    shard_size = buffer.numel() // data_parallel_world_size
+    sharded_buffer = [
+        buffer[(r * shard_size) : ((r + 1) * shard_size)] for r in range(data_parallel_world_size)
+    ]
+    return sharded_buffer
+
+def start_grad_sync(self):
+    """
+    Initiates grad sync (all-reduce or reduce-scatter) communication operations
+    for all buckets in the bucket group.
+
+    When ddp_config.overlap_grad_reduce is set to True, dispatches an asynchronous
+    communication call. When ddp_config.overlap_grad_reduce is set to False, makes
+    synchronous call.
+    """
+    assert (
+        self.grad_reduce_handle is None
+    ), 'Should not have multiple communication calls outstanding at once'
+    #print('before')
+
+    if self.ddp_config.check_for_nan_in_grad or self.ddp_config.check_for_large_grads:
+        self.check_grads(
+            check_for_nan_or_inf=self.ddp_config.check_for_nan_in_grad,
+            check_for_large=self.ddp_config.check_for_large_grads,
+        )
+
+    # gradient_scaling_factor already takes into account whether we are computing
+    # an average or sum in the data-parallel collective.
+    for bucket in self.buckets:
+        if bucket.gradient_scaling_factor != 1.0:
+            bucket.grad_data *= bucket.gradient_scaling_factor
+
+    # Decide reduce_op.
+    reduce_op = torch.distributed.ReduceOp.SUM
+    if self.ddp_config.average_in_collective:
+        reduce_op = torch.distributed.ReduceOp.AVG
+
+    # We use the following stream synchronization for the gradient reduction
+    # within and across DistOpt instances.
+
+    # Compute Stream: -------------Gradient compute-------------------
+    # Comm. Stream:   ------(wait for NCCL)-----(wait for NCCL)-------
+    # NCCL Stream:          -------RS------     -------AR------
+
+    # Use async communications only when overlap_grad_reduce is True.
+    async_op = (
+        self.ddp_config.overlap_grad_reduce
+        and self.ddp_config.num_distributed_optimizer_instances == 1
+    )
+    if (
+        self.ddp_config.num_distributed_optimizer_instances > 1
+        and self.ddp_config.overlap_grad_reduce
+    ):
+        # Assign a communication stream if we have multiple DistOpt instances and we
+        # need to overlap communication.
+        stream_context = torch.cuda.stream(self.communication_stream)
+
+        # The RS/AR communication stream needs to wait for the default stream
+        # to complete its gradient computation before launching the next
+        # gradient reduction collective.
+        self.communication_stream.wait_stream(torch.cuda.default_stream())
+    else:
+        stream_context = nullcontext()
+
+    if self.ddp_config.use_distributed_optimizer:
+        communication_group = self.intra_distributed_optimizer_instance_group
+    else:
+        communication_group = self.data_parallel_group
+
+    # Coalesce communication kernels across buckets in the bucket group.
+    with stream_context, _coalescing_manager(communication_group, async_ops=async_op) as cm:
+        for bucket in self.buckets:
+            if self.ddp_config.use_distributed_optimizer:
+                local_data_view = shard_buffer(
+                    bucket.grad_data, self.intra_distributed_optimizer_instance_size
+                )[self.intra_distributed_optimizer_instance_rank]
+
+                dist_reduce_scatter_func(
+                    local_data_view,
+                    bucket.grad_data,
+                    op=reduce_op,
+                    group=communication_group,
+                    async_op=async_op,
+                )
+
+                if int(os.getenv("USE_EPX", 0)) and not async_op:
+                    epx_sync_grad_across_instances(local_data_view)
+            else:
+                torch.distributed.all_reduce(
+                    bucket.grad_data, op=reduce_op, group=communication_group, async_op=async_op
+                )
+                if int(os.getenv("USE_EPX", 0)) and not async_op:
+                    epx_sync_grad_across_instances(bucket.grad_data)
+
+    # print('before before allreduce')
+    # With multiple DistOpt instances, we need to all-reduce across instances.
+    if (
+        self.ddp_config.use_distributed_optimizer
+        and self.ddp_config.num_distributed_optimizer_instances > 1
+    ):
+        # Create a new coalescing manager for the inter-instance all-reduce.
+        with stream_context, _coalescing_manager(
+            self.inter_distributed_optimizer_instance_group, async_ops=async_op
+        ) as cm:
+            for bucket in self.buckets:
+                local_data_view = shard_buffer(
+                    bucket.grad_data, self.intra_distributed_optimizer_instance_size
+                )[self.intra_distributed_optimizer_instance_rank]
+                # print('before all reduce')
+                torch.distributed.all_reduce(
+                    local_data_view,
+                    op=reduce_op,
+                    group=self.inter_distributed_optimizer_instance_group,
+                    async_op=async_op,
+                )
+                # print('after all reduce')
+    # print('after after allreduce')
+
+    if async_op:
+        self.grad_reduce_handle = cm
+    else:
+        # When using `_coalescing_manager`, even if a synchronous op (async_op=False) is used,
+        # `cm` is not None, which is different from when `_coalescing_manager` is not used in
+        # which case the torch.distributed._reduce_scatter_base() will return None. In order to
+        # maintain consistency with prior code, we need to manually set communication handle to
+        # None.
+        self.grad_reduce_handle = None
+
+def finish_grad_sync(self):
+    """
+    Finishes grad sync (all-reduce or reduce-scatter) communication operations
+    for all buckets in the bucket group.
+
+    When ddp_config.overlap_grad_reduce is set to True, waits for asynchronous
+    communication call to complete. When ddp_config.overlap_grad_reduce is set to False,
+    makes synchronous call.
+    """
+    self.param_gather_dispatched = False
+
+    # If overlap_grad_reduce is False, start (and finish) synchronous communication call here.
+    # print(f'before self.ddp_config.overlap_grad_reduce is {self.ddp_config.overlap_grad_reduce}')
+    if not self.ddp_config.overlap_grad_reduce:
+        self.start_grad_sync()
+        return
+    # print(f'after self.ddp_config.overlap_grad_reduce is {self.ddp_config.overlap_grad_reduce}')
+    # When using multiple DistOpt instances, we don't need to sync here as we launch
+    # communications on a separate communication stream.
+    if self.ddp_config.num_distributed_optimizer_instances > 1:
+        torch.cuda.default_stream().wait_stream(self.communication_stream)
+        return
+    assert self.grad_reduce_handle is not None, (
+        f'Communication call has not been issued for this bucket '
+        f'({len(self.params_with_grad)}/{len(self.params)} params have grad available)'
+    )
+    self.grad_reduce_handle.wait()
+    self.grad_reduce_handle = None
+
+    # TODO: Using `_coalescing_manager` to optimize code structure.
+    if int(os.getenv("USE_EPX", 0)):
+        for bucket in self.buckets:
+            if self.ddp_config.use_distributed_optimizer:
+                local_data_view = shard_buffer(
+                    bucket.grad_data, self.intra_distributed_optimizer_instance_size
+                )[self.intra_distributed_optimizer_instance_rank]
+                if int(os.getenv("USE_EPX", 0)):
+                    epx_sync_grad_across_instances(local_data_view)
+            else:
+                if int(os.getenv("USE_EPX", 0)):
+                    epx_sync_grad_across_instances(bucket.grad_data)
+
+def epx_sync_grad_across_instances(tensor):
+    """
+    Sync grad across instances.
+    """
+    lcp = parallel_state.get_epx_data_parallel_lcp()
+    # TODO: avoid assemble before each allreduce
+    lcp.assemble()
+    logger.info("start epx allreduce")
+    logger.debug(f"grad before epx allreduce : {tensor[:10]}")
+    lcp.allreduce([tensor]).wait()
+    logger.info("finished epx allreduce")
+    logger.debug(f"grad after epx allreduce : {tensor[:10]}")
+
+_ParamAndGradBucketGroup.start_grad_sync = start_grad_sync
+_ParamAndGradBucketGroup.finish_grad_sync = finish_grad_sync
diff --git a/megatron-lm-musa-patch/musa_patch/fused_bias_swiglu.py b/megatron-lm-musa-patch/musa_patch/fused_bias_swiglu.py
new file mode 100644
index 00000000..5c2c2e58
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fused_bias_swiglu.py
@@ -0,0 +1,27 @@
+import torch
+import torch.nn.functional as F
+
+
+class MusaSwiGLUFunction(torch.autograd.Function):
+    @staticmethod
+    def forward(ctx, input, fp8_input_store):
+        ctx.save_for_backward(input)
+        ctx.fp8_input_store = fp8_input_store
+        return torch.ops.aten._fused_swiglu_forward(input)
+
+    @staticmethod
+    def backward(ctx, grad_output):
+        (input, ) = ctx.saved_tensors
+        return torch.ops.aten._fused_swiglu_backward(grad_output, input), None
+
+
+import megatron.core.fusions.fused_bias_swiglu
+megatron.core.fusions.fused_bias_swiglu.SwiGLUFunction = MusaSwiGLUFunction
+
+# import sys
+# for k in sys.modules:
+#     if k.startswith('megatron.core.fusions.fused_bias_swiglu'):
+#         for target in ['bias_swiglu_impl']:
+#             if getattr(sys.modules[k], target, None):
+#                 print(f'target is {target}')
+#                 setattr(sys.modules[k], target, bias_swiglu_impl)
diff --git a/megatron-lm-musa-patch/musa_patch/fused_layer_norm.py b/megatron-lm-musa-patch/musa_patch/fused_layer_norm.py
new file mode 100644
index 00000000..6faadd89
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/fused_layer_norm.py
@@ -0,0 +1,99 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+import numbers
+
+import torch
+import torch_musa
+from torch import Tensor
+from torch.nn import init
+from torch.nn.parameter import Parameter
+
+from megatron.core.transformer import TransformerConfig
+
+
+
+class FusedLayerNorm(torch.nn.Module):
+
+    """Layer Norm, fused into a single CUDA kernel.
+
+    Args:
+      hidden_size (int): Transformer hidden dimension.
+
+      eps (float): Epsilon added to denominator, for numerical stability.
+
+      persist_layer_norm (bool): Use persistent fused layer norm kernel.
+      This kernel supports only a set of hidden sizes. Please
+      check persist_ln_hidden_sizes if your hidden size is supported.
+
+      zero_centered_gamma (bool): Adjust LayerNorm weights such that they are
+      centered around zero. This improves numerical stability.
+
+      config (TransformerConfig): Transformer config. Include to match custom
+      layer norm interfaces.
+
+      normalization (str): Normalization type, used for Transformer Engine.
+      Must equal 'LayerNorm' here.
+    """
+
+    def __init__(
+        self,
+        config: TransformerConfig,
+        hidden_size: int,
+        eps: float = 1e-5,
+        persist_layer_norm: bool = True,
+        zero_centered_gamma: bool = False,
+        normalization: str = "LayerNorm",  # included to match TE interface
+    ):
+        super().__init__()
+        print("use FusedLayerNorm")
+
+        self.config = config
+
+        self.zero_centered_gamma = self.config.layernorm_zero_centered_gamma
+
+        if self.config.normalization == "LayerNorm":
+            self.norm_impl = torch.layer_norm
+        elif self.config.normalization == "RMSNorm":
+            self.norm_impl = torch.rms_norm
+        else:
+            raise ValueError(f'({self.config.normalization}) is not supported in FusedLayerNorm')
+
+        if isinstance(hidden_size, numbers.Integral):
+            hidden_size = (hidden_size,)
+        # self.hidden_size = torch.Size(hidden_size)
+        self.hidden_size = hidden_size
+        self.eps = eps
+        self.weight = Parameter(torch.Tensor(*hidden_size))
+        self.bias = Parameter(torch.Tensor(*hidden_size)) if self.config.normalization == "LayerNorm" else None
+        self.reset_parameters()
+        self.sequence_parallel = self.config.sequence_parallel
+
+
+        # set sequence parallelism flag on weight and bias parameters
+        setattr(self.weight, 'sequence_parallel', self.sequence_parallel)
+        if self.config.normalization == "LayerNorm":
+            setattr(self.bias, 'sequence_parallel', self.sequence_parallel)
+
+    def reset_parameters(self):
+
+        if self.zero_centered_gamma:
+            init.zeros_(self.weight)
+            if self.config.normalization == "LayerNorm":
+                init.zeros_(self.bias)
+        else:
+            init.ones_(self.weight)
+            if self.config.normalization == "LayerNorm":
+                init.zeros_(self.bias)
+
+    def forward(self, input: Tensor) -> Tensor:
+
+        weight = self.weight + 1 if self.zero_centered_gamma else self.weight
+        if self.config.normalization == "LayerNorm":
+            output = self.norm_impl(input, self.hidden_size, weight, self.bias, self.eps)
+        else:
+            output = self.norm_impl(input, self.hidden_size, weight, self.eps)
+
+        return output
+
+import megatron.core.fusions.fused_layer_norm
+megatron.core.fusions.fused_layer_norm.FusedLayerNorm = FusedLayerNorm
diff --git a/megatron-lm-musa-patch/musa_patch/linear_with_grad_accumulation_and_async_allreduce.py b/megatron-lm-musa-patch/musa_patch/linear_with_grad_accumulation_and_async_allreduce.py
new file mode 100644
index 00000000..b6491520
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/linear_with_grad_accumulation_and_async_allreduce.py
@@ -0,0 +1,188 @@
+# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
+
+# Parts of the code here are adapted from PyTorch
+# repo: https://github.com/pytorch/pytorch
+
+import io
+import math
+import os
+import warnings
+from typing import Any, Callable, List, Optional, Tuple
+
+import torch
+import torch.nn.functional as F
+import torch.nn.init as init
+from torch.cuda.amp import custom_bwd, custom_fwd
+from torch.nn.parameter import Parameter
+
+from megatron.core.parallel_state import (
+    get_global_memory_buffer,
+    get_tensor_model_parallel_group,
+    get_tensor_model_parallel_world_size,
+)
+
+from megatron.core.utils import prepare_input_tensors_for_wgrad_compute
+import fused_weight_gradient_mlp_cuda
+
+class LinearWithGradAccumulationAndAsyncCommunication(torch.autograd.Function):
+    """See linear_with_grad_accumulation_and_async_allreduce"""
+
+    @staticmethod
+    @custom_fwd
+    def forward(
+        ctx,
+        input,
+        weight,
+        bias,
+        gradient_accumulation_fusion,
+        allreduce_dgrad,
+        sequence_parallel,
+        grad_output_buffer,
+        wgrad_deferral_limit,
+    ):  
+        ctx.save_for_backward(input, weight)
+        ctx.use_bias = bias is not None
+        ctx.gradient_accumulation_fusion = gradient_accumulation_fusion
+        ctx.allreduce_dgrad = allreduce_dgrad
+        ctx.sequence_parallel = sequence_parallel
+        ctx.wgrad_deferral_limit = wgrad_deferral_limit
+        ctx.grad_output_buffer = grad_output_buffer
+
+        if sequence_parallel:
+            world_size = get_tensor_model_parallel_world_size()
+            dim_size = list(input.size())
+            dim_size[0] = dim_size[0] * world_size
+
+            all_gather_buffer = get_global_memory_buffer().get_tensor(dim_size, input.dtype, "mpu")
+            torch.distributed._all_gather_base(
+                all_gather_buffer, input, group=get_tensor_model_parallel_group()
+            )
+            total_input = all_gather_buffer
+        else:
+            total_input = input
+
+        output = torch.matmul(total_input, weight.t())
+        if bias is not None:
+            output = output + bias
+        return output
+
+    @staticmethod
+    @custom_bwd
+    def backward(ctx, grad_output):
+        input, weight = ctx.saved_tensors
+        use_bias = ctx.use_bias
+        grad_output_buffer = ctx.grad_output_buffer
+        wgrad_deferral_limit = ctx.wgrad_deferral_limit
+        
+        wgrad_compute = True
+        # if grad_output_buffer is not None:
+        #     grad_output_buffer.append(grad_output)
+        #     wgrad_compute = False
+
+        if grad_output_buffer is not None:
+            if wgrad_deferral_limit == 0 or len(grad_output_buffer) < wgrad_deferral_limit:
+                grad_output_buffer.append(grad_output)
+                wgrad_compute = False
+
+        if wgrad_compute:
+            if ctx.sequence_parallel:
+                world_size = get_tensor_model_parallel_world_size()
+                dim_size = list(input.size())
+                dim_size[0] = dim_size[0] * world_size
+
+                all_gather_buffer = get_global_memory_buffer().get_tensor(
+                    dim_size, input.dtype, "mpu"
+                )
+                handle = torch.distributed._all_gather_base(
+                    all_gather_buffer, input, group=get_tensor_model_parallel_group(), async_op=True
+                )
+                handle.wait()
+                # Here we rely on CUDA_DEVICE_MAX_CONNECTIONS=1 to ensure that the
+                # gather is scheduled before the input gradient computation
+                total_input = all_gather_buffer
+            else:
+                total_input = input
+        grad_input = grad_output.matmul(weight)
+
+        # if ctx.sequence_parallel and wgrad_compute:
+        #     handle.wait()
+
+        if wgrad_compute:
+            grad_output, total_input = prepare_input_tensors_for_wgrad_compute(
+                grad_output, total_input
+            )
+
+        if ctx.allreduce_dgrad:
+            # Asynchronous all-reduce
+            handle = torch.distributed.all_reduce(
+                grad_input, group=get_tensor_model_parallel_group(), async_op=True
+            )
+            # Here we rely on CUDA_DEVICE_MAX_CONNECTIONS=1 to ensure that the
+            # all-reduce is scheduled before the weight gradient computation
+
+        if ctx.sequence_parallel:
+            assert not ctx.allreduce_dgrad
+            dim_size = list(input.size())
+            sub_grad_input = torch.empty(
+                dim_size, dtype=input.dtype, device=torch.cuda.current_device(), requires_grad=False
+            )
+            # reduce_scatter
+            handle = torch.distributed._reduce_scatter_base(
+                sub_grad_input, grad_input, group=get_tensor_model_parallel_group(), async_op=True
+            )
+            handle.wait()
+            # Here we rely on CUDA_DEVICE_MAX_CONNECTIONS=1 to ensure that the
+            # reduce scatter is scheduled before the weight gradient computation
+
+        if ctx.gradient_accumulation_fusion:
+            if wgrad_compute:
+                if weight.main_grad.dtype == torch.float32:
+                    fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp32(
+                        total_input, grad_output, weight.main_grad
+                    )
+                elif weight.main_grad.dtype in (torch.float16, torch.bfloat16):
+                    fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp16(
+                        total_input, grad_output, weight.main_grad
+                    )
+                else:
+                    raise RuntimeError("Unsupported gradient type for gradient accumulation fusion")
+            # torch.addmm(weight.main_grad, grad_output.t(), total_input, out=weight.main_grad)
+            if hasattr(weight, 'grad_added_to_main_grad'):
+                # When overlap_grad_reduce is True, need to ensure that backward hooks
+                # are all run on the main backprop thread to prevent deadlocks. Setup
+                # dummy grad_weight tensor to prevent backward hooks from being run
+                # in a background thread.
+                if getattr(weight, 'zero_out_wgrad', False):
+                    grad_weight = torch.zeros(
+                        weight.main_grad.shape,
+                        dtype=input.dtype,
+                        device=torch.cuda.current_device(),
+                        requires_grad=False,
+                    )
+                else:
+                    grad_weight = torch.empty(
+                        weight.main_grad.shape,
+                        dtype=input.dtype,
+                        device=torch.cuda.current_device(),
+                        requires_grad=False,
+                    )
+                weight.grad_added_to_main_grad = True
+            else:
+                grad_weight = None
+        else:
+            grad_weight = grad_output.t().matmul(total_input)
+        grad_bias = grad_output.sum(dim=0) if use_bias else None
+
+        if ctx.sequence_parallel:
+            # handle.wait()
+            # Need to return None's as gradient has to flow for all the input arguments
+            # provided during forward
+            return sub_grad_input, grad_weight, grad_bias, None, None, None, None, None
+
+        if ctx.allreduce_dgrad:
+            handle.wait()
+        return grad_input, grad_weight, grad_bias, None, None, None, None, None
+
+
+import megatron.core.tensor_parallel.layers
+megatron.core.tensor_parallel.layers.LinearWithGradAccumulationAndAsyncCommunication = LinearWithGradAccumulationAndAsyncCommunication
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/moe_utils.py b/megatron-lm-musa-patch/musa_patch/moe_utils.py
new file mode 100644
index 00000000..9f83c153
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/moe_utils.py
@@ -0,0 +1,244 @@
+
+import math
+from typing import Optional, List
+
+import torch
+
+from megatron.core import parallel_state
+import megatron.core.transformer.moe.moe_utils
+from megatron.core.tensor_parallel.mappings import gather_from_sequence_parallel_region
+
+get_capacity = megatron.core.transformer.moe.moe_utils.get_capacity
+group_limited_topk = megatron.core.transformer.moe.moe_utils.group_limited_topk
+
+
+def sequence_load_balancing_loss_func(
+    probs: torch.Tensor,
+    routing_map: torch.Tensor,
+    batch_size: int,
+    seq_length: int,
+    topk: int,
+    moe_aux_loss_coeff: float,
+    sequence_partition_group=None,
+    moe_device_level_aux_loss_coeff: float=None,
+    moe_comm_aux_loss_coeff: float=None,
+    moe_router_topk_limited_devices: float=None,
+    moe_complementary_seq_aux_loss: bool=False,
+):
+    """
+    Calculate the auxiliary loss in sequence-level by computing the loss for each individual sample.
+    Refer to the DeepSeek-V2 huggingface repo
+    (https://huggingface.co/deepseek-ai/DeepSeek-V2) for details.
+
+    Args:
+        probs (torch.Tensor): Softmax probabilities output by the router for each token.
+                              Shape in [num_tokens, num_experts].
+        routing_map (torch.Tensor): Mapping of tokens to experts assignment.
+                                    Shape in [num_tokens, num_experts].
+        batch_size (int): Batch size to process.
+        seq_length (int): Sequence length to process.
+        topk (int): Number of experts to route to for each token.
+        moe_aux_loss_coeff (float): Scaling coefficient for the auxiliary loss.
+        sequence_partition_group (optional): The parallel group over which the sequence is
+                                             partitioned. If None, no partitioning is applied.
+                                             Defaults to None.
+
+    Returns:
+        torch.Tensor: The sequence auxiliary loss for load balancing.
+    """
+    num_sub_sequence = 1
+    num_experts = probs.shape[1]
+
+    probs_for_aux_loss = probs.view(seq_length, batch_size, -1)
+    routing_map = routing_map.view(seq_length, batch_size, -1)
+
+    # If the sequence is partitioned by certain parallelism strategies like Sequence Parallelism
+    # or Context Parallelism, compute the gradient of the auxiliary loss with respect to the full
+    # sequence.
+    if sequence_partition_group is not None:
+        num_sub_sequence = torch.distributed.get_world_size(sequence_partition_group)
+        seq_length *= num_sub_sequence
+        probs_for_aux_loss = gather_from_sequence_parallel_region(
+            probs_for_aux_loss, group=sequence_partition_group
+        )
+
+    cost_coeff = routing_map.sum(dim=0, dtype=torch.float).div_(seq_length * topk / num_experts)
+    if moe_complementary_seq_aux_loss:
+        assert (
+            (moe_device_level_aux_loss_coeff is None) and 
+            (moe_comm_aux_loss_coeff is None)
+            ), "moe_complementary_seq_aux_loss only used in deepseekV3, which means no other aux loss used"
+        sum_value = probs_for_aux_loss.sum(dim=-1, keepdim=True)
+        probs_for_aux_loss = probs_for_aux_loss / (sum_value + 1e-20)
+    seq_aux_loss = (cost_coeff * probs_for_aux_loss.mean(dim=0)).sum(dim=1).mean()
+    seq_aux_loss *= moe_aux_loss_coeff
+
+    if moe_device_level_aux_loss_coeff is not None:
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        device_aux_loss = (cost_coeff.view(batch_size, num_group, -1).mean(dim=2) * 
+                           probs_for_aux_loss.mean(dim=0).view(batch_size, num_group, -1).sum(dim=2)).sum(dim=1).mean()
+        device_aux_loss *= moe_device_level_aux_loss_coeff
+        seq_aux_loss += device_aux_loss
+    if moe_comm_aux_loss_coeff is not None:
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        cost_coeff = routing_map.view(seq_length, batch_size, num_group, -1).any(dim=3).sum(dim=0).float()
+        cost_coeff.div_(seq_length *  moe_router_topk_limited_devices / num_group)
+        comm_aux_loss = (cost_coeff * 
+                           probs_for_aux_loss.mean(dim=0).view(batch_size, num_group, -1).sum(dim=2)).sum(dim=1).mean()
+        comm_aux_loss *= moe_comm_aux_loss_coeff
+        seq_aux_loss += comm_aux_loss
+        
+    return seq_aux_loss
+
+def topk_softmax_with_capacity(
+    logits: torch.Tensor,
+    topk: int,
+    capacity_factor: Optional[float] = None,
+    pad_to_capacity: bool = False,
+    drop_policy: str = "probs",
+    use_pre_softmax: bool = False,
+    num_groups: Optional[int] = None,
+    group_topk: Optional[int] = None,
+    scaling_factor: Optional[float] = None,
+    deterministic_mode: bool = False,
+    score_function: str = "softmax",
+    expert_bias: Optional[torch.Tensor] = None,
+    device_level_capacity: bool = False,
+):
+    """Apply capacity and padding to the top-k selection.
+    Args:
+        logits (torch.Tensor): Logits tensor.
+        topk (int): The number of experts to select for each token.
+        capacity_factor (float): The capacity factor of each expert. Will drop tokens if the number
+                               of tokens exceeds the capacity.
+        pad_to_capacity (bool): Whether to need padding in token drop mode. The probs for padded
+                               tokens will be 0.
+        drop_policy (str): The policy to drop tokens. Can be either "prob" or "position".
+                           If "prob", the tokens with the lowest probabilities will be dropped.
+                           If "position", tokens at the end of each batch will be dropped.
+        use_pre_softmax (bool): Whether to apply softmax before top-k selection.
+        num_groups (int): Number of groups for routed experts.
+        group_topk (int): Number of selected groups for each token.
+        scaling_factor (float): Scaling factor of routing score in top-k selection.
+        deterministic_mode (bool): Deprecated.
+        score_function (str): The score function to use. Can be either "softmax" or "sigmoid".
+        expert_bias (torch.Tensor): The bias added to logits for expert routing.
+
+    Returns:
+        Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:
+            - routing_probs (torch.Tensor): A tensor of shape [num_tokens, num_experts] containing
+              the routing probabilities for each token to each expert.
+            - routing_map (torch.Tensor): A mask tensor of shape [num_tokens, num_experts]
+              indicating which experts were selected for each token. True values represent
+              the selected experts.
+            - tokens_per_expert (torch.Tensor): A tensor of shape [num_experts] containing
+              the number of local tokens assigned to each expert before dropping and padding.
+    """
+    assert logits.dim() == 2, f"Expected 2D logits [num_tokens, num_experts], got {logits.dim()}."
+    num_tokens, num_experts = logits.shape
+
+    def compute_topk(scores, topk, num_groups=None, group_topk=None):
+        if group_topk:
+            return group_limited_topk(
+                scores=scores,
+                topk=topk,
+                num_tokens=num_tokens,
+                num_experts=num_experts,
+                num_groups=num_groups,
+                group_topk=group_topk,
+            )
+        else:
+            return torch.topk(scores, k=topk, dim=1)
+
+    if score_function == "softmax":
+        if use_pre_softmax:
+            scores = torch.softmax(logits, dim=-1, dtype=torch.float32).type_as(logits)
+            probs, top_indices = compute_topk(scores, topk, num_groups, group_topk)
+        else:
+            scores, top_indices = compute_topk(logits, topk, num_groups, group_topk)
+            probs = torch.softmax(scores, dim=-1, dtype=torch.float32).type_as(logits)
+    elif score_function == "sigmoid":
+        scores = torch.sigmoid(logits)
+        if expert_bias is not None:
+            scores_for_routing = scores + expert_bias
+            _, top_indices = compute_topk(scores_for_routing, topk, num_groups, group_topk)
+            scores = torch.gather(scores, dim=1, index=top_indices).type_as(logits)
+        else:
+            scores, top_indices = compute_topk(scores, topk, num_groups, group_topk)
+        probs = scores / (scores.sum(dim=-1, keepdim=True) + 1e-20) if topk > 1 else scores
+    else:
+        raise ValueError(f"Invalid score_function: {score_function}")
+
+    if scaling_factor:
+        probs = probs * scaling_factor
+
+    # TODO Try using element-wise operations instead of scatter?
+    topk_masked_gates = torch.zeros_like(logits).scatter(1, top_indices, probs)
+    topk_map = torch.zeros_like(logits).int().scatter(1, top_indices, 1).bool()
+    tokens_per_expert = topk_map.sum(dim=0)
+
+    if capacity_factor is None:
+        # TopK without capacity
+        return topk_masked_gates, topk_map, tokens_per_expert
+    elif device_level_capacity:
+        assert drop_policy=='probs', f"only support 'probs' for device_level capacity, but get {drop_policy}"
+        num_group = (
+        parallel_state.get_expert_model_parallel_world_size()
+        )  # num_group equals to expert parallel size
+        device_expert_capacity = get_capacity(
+            num_tokens=num_tokens * topk, num_experts=num_experts, capacity_factor=capacity_factor
+        )*num_experts//num_group
+        # Maskout exceeded tokens
+        if drop_policy == "probs":
+            topk_masked_group_gates = topk_masked_gates.view(num_tokens, num_group, -1)
+            topk_masked_group_gates = topk_masked_group_gates.permute(0,2,1).reshape(-1, num_group)
+            _, capacity_indices = torch.topk(
+                topk_masked_group_gates, k=device_expert_capacity, dim=0, sorted=False
+            )
+            capacity_mask = torch.zeros([num_tokens*num_experts//num_group, num_group], device=logits.device).scatter(0, capacity_indices, 1).bool()
+            capacity_mask = capacity_mask.view(num_tokens, num_experts//num_group, num_group).permute(0,2,1).reshape(num_tokens, -1)
+        else:
+            raise ValueError(f"Invalid drop_policy: {drop_policy}")
+
+        if pad_to_capacity:
+            final_map = capacity_mask
+            final_probs = topk_masked_gates * final_map
+        else:
+            # Get exceed mask and maskout exceeded probs and indices
+            final_map = torch.logical_and(topk_map, capacity_mask)
+            final_probs = topk_masked_gates * final_map
+        return final_probs, final_map, tokens_per_expert
+    else:
+        # TopK with capacity
+        expert_capacity = get_capacity(
+            num_tokens=num_tokens * topk, num_experts=num_experts, capacity_factor=capacity_factor
+        )
+
+        # Maskout exceeded tokens
+        if drop_policy == "probs":
+            _, capacity_indices = torch.topk(
+                topk_masked_gates, k=expert_capacity, dim=0, sorted=False
+            )
+            capacity_mask = torch.zeros_like(logits).scatter(0, capacity_indices, 1).bool()
+        elif drop_policy == "position":
+            _, capacity_indices = torch.topk(topk_map.int(), k=expert_capacity, dim=0, sorted=False)
+            capacity_mask = torch.zeros_like(logits).scatter(0, capacity_indices, 1).bool()
+        else:
+            raise ValueError(f"Invalid drop_policy: {drop_policy}")
+
+        if pad_to_capacity:
+            final_map = capacity_mask
+            final_probs = topk_masked_gates * final_map
+        else:
+            # Get exceed mask and maskout exceeded probs and indices
+            final_map = torch.logical_and(topk_map, capacity_mask)
+            final_probs = topk_masked_gates * final_map
+        return final_probs, final_map, tokens_per_expert
+
+
+megatron.core.transformer.moe.moe_utils.sequence_load_balancing_loss_func = sequence_load_balancing_loss_func
+megatron.core.transformer.moe.moe_utils.topk_softmax_with_capacity = topk_softmax_with_capacity
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/optimizer.py b/megatron-lm-musa-patch/musa_patch/optimizer.py
new file mode 100644
index 00000000..7ac54851
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/optimizer.py
@@ -0,0 +1,238 @@
+# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
+import logging
+import warnings
+from typing import Callable, Dict, List, Optional, Tuple
+
+import os
+import torch
+from torch.optim import SGD as CPUSGD
+
+try:
+    from transformer_engine.pytorch.optimizers import FusedAdam as Adam
+    from transformer_engine.pytorch.optimizers import FusedSGD as SGD
+except ImportError:
+    try:
+        from apex.optimizers import FusedAdam as Adam
+        from apex.optimizers import FusedSGD as SGD
+    except ImportError:
+        import warnings
+
+        warnings.warn(
+            f'Transformer Engine and Apex are not installed. Falling back to Torch optimizers.'
+        )
+
+        # Apex's FusedAdam is a drop-in replacement for torch's AdamW.
+        # pylint: disable-next=line-too-long.
+        # See https://github.com/NVIDIA/apex/blob/7b73b12361068a10b0f44844534613f252a5ea75/apex/optimizers/fused_adam.py#L16.
+        from torch.optim import AdamW as Adam, SGD
+
+from megatron.core.optimizer.cpu_offloading.hybrid_optimizer import HybridDeviceOptimizer
+from megatron.core.distributed.param_and_grad_buffer import _ParamAndGradBuffer
+from megatron.core.transformer.module import MegatronModule
+from megatron.core.optimizer.distrib_optimizer import DistributedOptimizer
+from megatron.core.optimizer.grad_scaler import ConstantGradScaler, DynamicGradScaler
+from megatron.core.optimizer import (
+    Float16OptimizerWithFloat16Params,
+    FP32Optimizer,
+    MegatronOptimizer,
+)
+from megatron.core.optimizer.optimizer_config import OptimizerConfig
+from megatron.core.utils import is_te_min_version
+
+
+logger = logging.getLogger(__name__)
+
+def _get_megatron_optimizer_based_on_param_groups(
+    config: OptimizerConfig,
+    model_chunks: List[MegatronModule],
+    param_groups: List,
+    per_model_buffers: Optional[Dict[int, List[_ParamAndGradBuffer]]] = None,
+    model_parallel_group: Optional[torch.distributed.ProcessGroup] = None,
+    data_parallel_group: Optional[torch.distributed.ProcessGroup] = None,
+    data_parallel_group_gloo: Optional[torch.distributed.ProcessGroup] = None,
+    data_parallel_group_idx: Optional[int] = None,
+    distributed_optimizer_instance_id: Optional[int] = 0,
+) -> MegatronOptimizer:
+    """Get Megatron optimizer based on parameter groups.
+
+    Args:
+        config (OptimizerConfig): optimizer configuration object.
+        model_chunks (list): list of model chunks.
+        param_groups (list): list of parameter groups.
+        per_model_buffers (dict, optional): buffers for distributed optimizer. Defaults to None.
+        data_parallel_group (torch.distributed.ProcessGroup, optional): data-parallel group for
+            distributed optimizer. Defaults to None.
+        data_parallel_group_gloo (torch.distributed.ProcessGroup, optional): gloo data-parallel
+            group for distributed optimizer. Defaults to None.
+        data_parallel_group_idx (int, optional): data-parallel group index for distributed
+            optimizer. Defaults to None.
+        distributed_optimizer_instance_id (int, optional): Distributed optimizer instance. Defaults
+            0.
+
+    Returns:
+        Instance of MegatronOptimizer.
+    """
+    # when freezing sub-models we may have no trainable parameters on a rank and
+    # hence an empty param_groups. However, we still need to create an optimizer
+    # for the purposes of grad stats reductions
+    if param_groups:
+        if config.optimizer_cpu_offload:
+            if torch.__version__ < '2.3.0':
+                # is_available = lambda: False
+                # set cuda not available for complex cuda inspection
+                torch.cuda.is_available = lambda : False
+                # use DeepSpeedCPUAdam for better performance
+                from deepspeed.ops.adam import DeepSpeedCPUAdam as CPUAdam
+                # reset the cuda availability back to normal
+                torch.cuda.is_available = torch.musa.is_available
+                warnings.warn("We use DeepSpeedCPUAdam instead of torch.optim.AdamW "
+                              "for better performace if torch.version < 2.3.0.")
+            else:
+                # torch.optim.AdamW supports __fused_adamw when torch.version >= 2.3.0
+                from torch.optim import AdamW as CPUAdam
+
+            # cpu optimizer offload must config use_precision_aware_optimizer to True,
+            # we should reconfig use_precision_aware_optimizer to break the compatibility.
+            if not int(os.getenv("CPU_OPTIMIZER_PRECISION_AWARE_RECONFIG", 0)):
+                config.use_precision_aware_optimizer = False
+
+            gpu_optimizer_cls = Adam if config.optimizer == 'adam' else SGD
+            cpu_optimizer_cls = CPUAdam if config.optimizer == 'adam' else CPUSGD
+            if config.use_torch_optimizer_for_cpu_offload:
+                gpu_optimizer_cls = cpu_optimizer_cls
+            if config.optimizer == 'adam':
+                gpu_optimizer_cls = Adam
+                cpu_optimizer_cls = CPUAdam
+                optimizer_defaults = dict(
+                    lr=config.lr,
+                    weight_decay=config.weight_decay,
+                    betas=(config.adam_beta1, config.adam_beta2),
+                    eps=config.adam_eps,
+                    bias_correction=True,
+                    fused=True,  # this flag is used to improve the performance of the cpu optimizer
+                )
+            else:
+                gpu_optimizer_cls = SGD
+                cpu_optimizer_cls = CPUSGD
+                optimizer_defaults = dict(
+                    lr=config.lr, weight_decay=config.weight_decay, momentum=config.sgd_momentum
+                )
+
+            optimizer = HybridDeviceOptimizer(
+                param_groups,
+                offload_fraction=config.optimizer_offload_fraction,
+                cpu_optimizer_cls=cpu_optimizer_cls,
+                gpu_optimizer_cls=gpu_optimizer_cls,
+                overlap_cpu_optimizer_d2h_h2d=config.overlap_cpu_optimizer_d2h_h2d,
+                pin_cpu_grads=config.pin_cpu_grads,
+                pin_cpu_params=config.pin_cpu_params,
+                param_update_in_fp32=True,
+                **optimizer_defaults,
+            )
+            init_state_fn = None
+        elif config.optimizer == 'adam':
+            kwargs = {
+                "params": param_groups,
+                "lr": config.lr,
+                "weight_decay": config.weight_decay,
+                "betas": (config.adam_beta1, config.adam_beta2),
+                "eps": config.adam_eps,
+            }
+
+            if config.use_precision_aware_optimizer:
+                kwargs.update(
+                    {
+                        "master_weights": True,
+                        "use_decoupled_grad": True,
+                        "master_weight_dtype": config.main_params_dtype,
+                        "exp_avg_dtype": config.exp_avg_dtype,
+                        "exp_avg_sq_dtype": config.exp_avg_sq_dtype,
+                    }
+                )
+
+                if is_te_min_version("2.1.0.dev0"):
+                    kwargs.update({"store_param_remainders": True})
+
+            optimizer = Adam(**kwargs)
+
+            def init_state_fn(opt, config=None):
+                for group in opt.param_groups:
+                    for p in group['params']:
+                        if len(opt.state[p]) == 0:
+                            if config is None or not config.use_precision_aware_optimizer:
+                                opt.state[p]['exp_avg'] = torch.zeros_like(p.data)
+                                opt.state[p]['exp_avg_sq'] = torch.zeros_like(p.data)
+                            else:
+                                opt.initialize_state(p)
+
+        elif config.optimizer == 'sgd':
+            optimizer = SGD(
+                param_groups,
+                lr=config.lr,
+                weight_decay=config.weight_decay,
+                momentum=config.sgd_momentum,
+            )
+            init_state_fn = None
+        else:
+            raise Exception('{} optimizer is not supported.'.format(config.optimizer))
+    else:
+        optimizer = None
+        init_state_fn = None
+
+    # Mixed precision optimizer.
+    # - Note: both the Float16Optimizer and the DistributedOptimizer inherit
+    #   from the MixedPrecisionOptimizer, which manages any optimizer where
+    #   the model params and main params are distinct.
+    if config.fp16 or config.bf16 or config.use_distributed_optimizer:
+
+        # Grad scaler:
+        #    if loss-scale is provided, instantiate the constant scaler.
+        #    if we are using fp16 and loss-scale is not present, use a
+        #       dynamic scaler.
+        #    otherwise we are running in bf16 with no loss-scale so
+        #       leave it as None.
+        grad_scaler = None
+
+        # Constant loss scale.
+        if config.loss_scale:
+            grad_scaler = ConstantGradScaler(config.loss_scale)
+
+        # Dynamic loss scale.
+        else:
+            if config.fp16:
+                grad_scaler = DynamicGradScaler(
+                    initial_scale=config.initial_loss_scale,
+                    min_scale=config.min_loss_scale,
+                    growth_factor=2.0,
+                    backoff_factor=0.5,
+                    growth_interval=config.loss_scale_window,
+                    hysteresis=config.hysteresis,
+                )
+
+        optimizer_args = [optimizer, config, grad_scaler, init_state_fn]
+        if config.use_distributed_optimizer:
+            optimizer = DistributedOptimizer(
+                *optimizer_args,
+                model_chunks=model_chunks,
+                per_model_buffers=per_model_buffers,
+                data_parallel_group=data_parallel_group,
+                data_parallel_group_gloo=data_parallel_group_gloo,
+                data_parallel_group_idx=data_parallel_group_idx,
+                distributed_optimizer_instance_id=distributed_optimizer_instance_id,
+            )
+        else:
+            optimizer = Float16OptimizerWithFloat16Params(*optimizer_args)
+            setattr(optimizer, 'grad_stats_parallel_group', model_parallel_group)
+    else:
+        # FP32 optimizer.
+        optimizer = FP32Optimizer(optimizer, config, init_state_fn)
+        setattr(optimizer, 'grad_stats_parallel_group', model_parallel_group)
+
+    return optimizer
+
+import sys
+for k in sys.modules:
+    if k.startswith('megatron'):
+        for target in ['_get_megatron_optimizer_based_on_param_groups']:
+            if getattr(sys.modules[k], target, None):
+                setattr(sys.modules[k], target, _get_megatron_optimizer_based_on_param_groups)
diff --git a/megatron-lm-musa-patch/musa_patch/p2p_communication.py b/megatron-lm-musa-patch/musa_patch/p2p_communication.py
new file mode 100644
index 00000000..89ad8c12
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/p2p_communication.py
@@ -0,0 +1,93 @@
+# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+
+import operator
+from functools import reduce
+from typing import Callable, List, Optional, Tuple, Union
+
+import torch
+
+from megatron import core
+from megatron.core import ModelParallelConfig
+from megatron.core.parallel_state import (
+    get_pipeline_model_parallel_group,
+    get_pipeline_model_parallel_next_rank,
+    get_pipeline_model_parallel_prev_rank,
+    get_pipeline_model_parallel_rank,
+    get_pipeline_model_parallel_world_size,
+)
+
+def _p2p_ops(
+    *,
+    tensor_send_prev: Optional[torch.Tensor],
+    tensor_recv_prev: Optional[torch.Tensor],
+    tensor_send_next: Optional[torch.Tensor],
+    tensor_recv_next: Optional[torch.Tensor],
+    group: torch.distributed.ProcessGroup,
+    prev_pipeline_rank: int,
+    next_pipeline_rank: int,
+):
+    reqs = []
+    rank = get_pipeline_model_parallel_rank()
+    even_send_odd_recv_group = group
+    # if get_pipeline_model_parallel_world_size() == 2:
+    #     # Use the global process group for one of the two p2p communications
+    #     # to allow the overlap of the independent communications.
+    #     # Using the global process group is compatible because the pipeline-parallel
+    #     # communications set the source and destination by global rank.
+    #     even_recv_odd_send_group = torch.distributed.group.WORLD
+    # else:
+    even_recv_odd_send_group = group
+
+    if get_pipeline_model_parallel_rank() % 2 == 0:
+        if tensor_send_next is not None:
+            send_next_req = torch.distributed.isend(
+                tensor=tensor_send_next, dst=next_pipeline_rank, group=even_send_odd_recv_group
+            )
+            reqs.append(send_next_req)
+
+        if tensor_recv_prev is not None:
+            recv_prev_req = torch.distributed.irecv(
+                tensor=tensor_recv_prev, src=prev_pipeline_rank, group=even_recv_odd_send_group
+            )
+            reqs.append(recv_prev_req)
+
+        if tensor_send_prev is not None:
+            send_prev_req = torch.distributed.isend(
+                tensor=tensor_send_prev, dst=prev_pipeline_rank, group=even_send_odd_recv_group
+            )
+            reqs.append(send_prev_req)
+
+        if tensor_recv_next is not None:
+            recv_next_req = torch.distributed.irecv(
+                tensor=tensor_recv_next, src=next_pipeline_rank, group=even_recv_odd_send_group
+            )
+            reqs.append(recv_next_req)
+
+    else:
+        if tensor_recv_prev is not None:
+            recv_prev_req = torch.distributed.irecv(
+                tensor=tensor_recv_prev, src=prev_pipeline_rank, group=even_send_odd_recv_group
+            )
+            reqs.append(recv_prev_req)
+
+        if tensor_send_next is not None:
+            send_next_req = torch.distributed.isend(
+                tensor=tensor_send_next, dst=next_pipeline_rank, group=even_recv_odd_send_group
+            )
+            reqs.append(send_next_req)
+
+        if tensor_recv_next is not None:
+            recv_next_req = torch.distributed.irecv(
+                tensor=tensor_recv_next, src=next_pipeline_rank, group=even_send_odd_recv_group
+            )
+            reqs.append(recv_next_req)
+
+        if tensor_send_prev is not None:
+            send_prev_req = torch.distributed.isend(
+                tensor=tensor_send_prev, dst=prev_pipeline_rank, group=even_recv_odd_send_group
+            )
+            reqs.append(send_prev_req)
+    return reqs
+
+import megatron.core.pipeline_parallel.p2p_communication
+megatron.core.pipeline_parallel.p2p_communication._p2p_ops = _p2p_ops
diff --git a/megatron-lm-musa-patch/musa_patch/parallel_state.py b/megatron-lm-musa-patch/musa_patch/parallel_state.py
new file mode 100644
index 00000000..ed163ede
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/parallel_state.py
@@ -0,0 +1,823 @@
+import os
+import sys
+import logging
+import warnings
+from datetime import timedelta
+from functools import partial
+from itertools import cycle
+from typing import Callable, List, Optional
+
+import torch
+from megatron.core.parallel_state import *
+import megatron.core.parallel_state as parallel_state
+
+logger = logging.getLogger(__name__)
+
+_EPX_DATA_PARALLEL_LCP = None
+
+globals().update({k: getattr(parallel_state, k) for k in dir(parallel_state) if k.startswith('_')})
+
+group_list = {
+    name: value for name, value in globals().items()
+    if name.startswith("_") and not callable(value)
+}
+
+def initialize_model_parallel(
+    tensor_model_parallel_size: int = 1,
+    pipeline_model_parallel_size: int = 1,
+    virtual_pipeline_model_parallel_size: Optional[int] = None,
+    pipeline_model_parallel_split_rank: Optional[int] = None,
+    pipeline_model_parallel_comm_backend: Optional[str] = None,
+    use_sharp: bool = False,
+    context_parallel_size: int = 1,
+    hierarchical_context_parallel_sizes: Optional[List[int]] = None,
+    expert_model_parallel_size: int = 1,
+    num_distributed_optimizer_instances: int = 1,
+    expert_tensor_parallel_size: Optional[int] = None,
+    nccl_communicator_config_path: Optional[str] = None,
+    distributed_timeout_minutes: int = 30,
+    order: str = "tp-cp-ep-dp-pp",
+    encoder_tensor_model_parallel_size: int = 0,
+    encoder_pipeline_model_parallel_size: Optional[int] = 0,
+    get_embedding_ranks: Optional[Callable[[List[int], Optional[int]], List[int]]] = None,
+    get_position_embedding_ranks: Optional[Callable[[List[int], Optional[int]], List[int]]] = None,
+    create_gloo_process_groups: bool = True,
+) -> None:
+    # pylint: disable=line-too-long
+    """Initialize model data parallel groups.
+
+    Args:
+        tensor_model_parallel_size (int, default = 1):
+            The number of GPUs to split individual tensors across.
+
+        pipeline_model_parallel_size (int, default = 1):
+            The number of tensor parallel GPU groups to split the
+            Transformer layers across. For example, if
+            tensor_model_parallel_size is 4 and
+            pipeline_model_parallel_size is 2, the model will be split
+            into 2 groups of 4 GPUs.
+
+        virtual_pipeline_model_parallel_size (int, optional):
+            The number of stages that each pipeline group will have,
+            interleaving as necessary. If None, no interleaving is
+            performed. For example, if tensor_model_parallel_size is 1,
+            pipeline_model_parallel_size is 4,
+            virtual_pipeline_model_parallel_size is 2, and there are
+            16 transformer layers in the model, the model will be
+            split into 8 stages with two layers each and each GPU
+            would get 2 stages as such (layer number starting with 1):
+
+            GPU 0: [1, 2] [9, 10]
+            GPU 1: [3, 4] [11, 12]
+            GPU 2: [5, 6] [13, 14]
+            GPU 3: [7, 8] [15, 16]
+
+        pipeline_model_parallel_split_rank (int, optional):
+            DEPRECATED. For models with both an encoder and decoder, the rank in
+            pipeline to switch between encoder and decoder (i.e. the
+            first rank of the decoder). This allows the user to set
+            the pipeline parallel size of the encoder and decoder
+            independently. For example, if
+            pipeline_model_parallel_size is 8 and
+            pipeline_model_parallel_split_rank is 3, then ranks 0-2
+            will be the encoder and ranks 3-7 will be the decoder.
+
+        pipeline_model_parallel_comm_backend (str, optional):
+            The backend to use for pipeline parallel communication.
+            If None, the default backend will be used.
+
+        use_sharp (bool, default = False):
+            Set the use of SHARP for the collective communications of
+            data-parallel process groups. When `True`, run barrier
+            within each data-parallel process group, which specifies
+            the SHARP application target groups.
+
+        context_parallel_size (int, default = 1):
+            The number of tensor parallel GPU groups to split the
+            network input sequence length across. Compute of attention
+            module requires tokens of full sequence length, so GPUs
+            in a context parallel group need to communicate with each
+            other to exchange information of other sequence chunks.
+            Each GPU and its counterparts in other tensor parallel
+            groups compose a context parallel group.
+
+            For example, assume we have 8 GPUs, if tensor model parallel
+            size is 4 and context parallel size is 2, the network input
+            will be split into two sequence chunks, which are processed
+            by 2 different groups of 4 GPUs. One chunk is processed by
+            GPU0-3, the other chunk is processed by GPU4-7. Four groups
+            are build to do context parallel communications: [GPU0, GPU4],
+            [GPU1, GPU5], [GPU2, GPU6], and [GPU3, GPU7].
+
+            Context parallelism partitions sequence length, so it has no
+            impact on weights, which means weights are duplicated among
+            GPUs in a context parallel group. Hence, weight gradients
+            all-reduce is required in backward. For simplicity, we piggyback
+            GPUs of context parallelism on data parallel group for
+            weight gradient all-reduce.
+
+        expert_model_parallel_size (int, default = 1):
+            The number of Mixture of Experts parallel GPUs in each expert
+            parallel group.
+
+        num_distributed_optimizer_instances (int, default = 1):
+            The number of distributed optimizer replicas across the data-
+            parallel domain.
+
+        expert_tensor_parallel_size (int, default = tp_size):
+            The number of GPUs to split individual tensors of expert.
+
+        nccl_communicator_config_path (str, default = None):
+            Path to the yaml file of NCCL communicator configurations.
+            `min_ctas`, `max_ctas`, and `cga_cluster_size` can be set
+            for each communicator.
+
+        distributed_timeout_minutes (int, default = 30): Timeout, in
+            minutes,for operations executed against distributed
+            process groups. See PyTorch documentation at
+            https://pytorch.org/docs/stable/distributed.html for
+            caveats.
+
+        order (str, default=tp-dp-pp):
+            The rank initialization order of parallelism. Now we support
+            tp-dp-pp and tp-pp-dp orders.
+
+        encoder_tensor_model_parallel_size (int, default = 0):
+            The number of GPUs to split individual tensors across in the encoder. If 0,
+            then we use the default, decoder's tensor model parallel size.
+
+        encoder_pipeline_model_parallel_size (int, default = 0):
+            The number of tensor parallel GPU groups to allocate to the encoder. As an example,
+            if pipeline_model_parallel_size is 4 and encoder_pipeline_model_parallel_size is 2,
+            then the encoder will use the first two pipeline stages for its layers, and the total
+            amount of pipelineing is 6.
+
+        get_embedding_ranks (Callable[[List[int], Optional[int]], List[int]], optional, default=None):
+            A function that takes in a list of ranks for a pipeline group and returns
+            those ranks that should have embeddings.
+
+        get_position_embedding_ranks (Callable[[List[int], Optional[int]], List[int]], optional, default=None):
+            A function that takes in a list of ranks for a pipeline group, and returns
+            those ranks that should have position embeddings.
+
+        create_gloo_process_groups (bool, default = True):
+            Create Gloo process groups if set to True. If set to False, Gloo process groups are
+            not created and calls to get Gloo process groups will result in assertion errors.
+
+    Let's say we have a total of 16 GPUs denoted by g0 ... g15 and we
+    use 2 GPUs to parallelize the model tensor, and 4 GPUs to parallelize
+    the model pipeline. The present function will
+    create 8 tensor model-parallel groups, 4 pipeline model-parallel groups
+    and 8 data-parallel groups as:
+        8 data_parallel groups:
+            [g0, g2], [g1, g3], [g4, g6], [g5, g7], [g8, g10], [g9, g11], [g12, g14], [g13, g15]
+        8 tensor model-parallel groups:
+            [g0, g1], [g2, g3], [g4, g5], [g6, g7], [g8, g9], [g10, g11], [g12, g13], [g14, g15]
+        4 pipeline model-parallel groups:
+            [g0, g4, g8, g12], [g1, g5, g9, g13], [g2, g6, g10, g14], [g3, g7, g11, g15]
+    Note that for efficiency, the caller should make sure adjacent ranks
+    are on the same DGX box. For example if we are using 2 DGX-1 boxes
+    with a total of 16 GPUs, rank 0 to 7 belong to the first box and
+    ranks 8 to 15 belong to the second box.
+
+    """
+
+    if encoder_pipeline_model_parallel_size is None:
+        encoder_pipeline_model_parallel_size = 0
+
+    if encoder_tensor_model_parallel_size == 0 and encoder_pipeline_model_parallel_size > 0:
+        encoder_tensor_model_parallel_size = tensor_model_parallel_size
+
+    if get_embedding_ranks is None:
+        get_embedding_ranks = partial(
+            default_embedding_ranks, split_rank=pipeline_model_parallel_split_rank
+        )
+
+    if get_position_embedding_ranks is None:
+        get_position_embedding_ranks = partial(
+            default_position_embedding_ranks, split_rank=pipeline_model_parallel_split_rank
+        )
+
+    if encoder_pipeline_model_parallel_size > 0:
+        global _PIPELINE_MODEL_PARALLEL_DECODER_START
+        _PIPELINE_MODEL_PARALLEL_DECODER_START = encoder_pipeline_model_parallel_size
+
+    # Get world size and rank. Ensure some consistencies.
+    assert torch.distributed.is_initialized()
+    world_size: int = torch.distributed.get_world_size()
+
+    if encoder_tensor_model_parallel_size > 0:
+        assert (
+            encoder_tensor_model_parallel_size <= tensor_model_parallel_size
+        ), "We do not support encoders with more TP than the decoder."
+
+    encoder_model_size = (
+        encoder_tensor_model_parallel_size
+        * encoder_pipeline_model_parallel_size
+        * context_parallel_size
+    )
+    decoder_model_size = (
+        tensor_model_parallel_size * pipeline_model_parallel_size * context_parallel_size
+    )
+    total_model_size = encoder_model_size + decoder_model_size
+
+    if world_size % total_model_size != 0:
+        raise RuntimeError(f"world_size ({world_size}) is not divisible by {total_model_size}")
+
+    data_parallel_size: int = world_size // total_model_size
+
+    encoder_world_size = encoder_model_size * data_parallel_size
+    decoder_world_size = decoder_model_size * data_parallel_size
+
+    assert (
+        encoder_world_size + decoder_world_size == world_size
+    ), f"{encoder_world_size=} + {decoder_world_size=} != {world_size=}"
+
+    if virtual_pipeline_model_parallel_size is not None:
+        if not pipeline_model_parallel_size > 1:
+            raise RuntimeError(
+                "pipeline-model-parallel size should be greater than 1 with interleaved schedule"
+            )
+        global _VIRTUAL_PIPELINE_MODEL_PARALLEL_RANK
+        global _VIRTUAL_PIPELINE_MODEL_PARALLEL_WORLD_SIZE
+        _VIRTUAL_PIPELINE_MODEL_PARALLEL_RANK = 0
+        _VIRTUAL_PIPELINE_MODEL_PARALLEL_WORLD_SIZE = virtual_pipeline_model_parallel_size
+
+    if pipeline_model_parallel_split_rank is not None:
+        global _PIPELINE_MODEL_PARALLEL_SPLIT_RANK
+        _PIPELINE_MODEL_PARALLEL_SPLIT_RANK = pipeline_model_parallel_split_rank
+
+    rank = torch.distributed.get_rank()
+
+    nccl_comm_cfgs = {}
+    if nccl_communicator_config_path is not None:
+        try:
+            import yaml
+        except ImportError:
+            raise RuntimeError(
+                "Cannot import `yaml`. Setting custom nccl communicator configs "
+                "requires the yaml package."
+            )
+
+        with open(nccl_communicator_config_path, "r") as stream:
+            nccl_comm_cfgs = yaml.safe_load(stream)
+
+    if encoder_world_size > 0:
+        encoder_rank_generator = RankGenerator(
+            tp=encoder_tensor_model_parallel_size,
+            ep=1,
+            dp=data_parallel_size,
+            pp=encoder_pipeline_model_parallel_size,
+            cp=context_parallel_size,
+            order=order,
+            rank_offset=0,
+        )
+    else:
+        encoder_rank_generator = None
+
+    decoder_rank_generator = RankGenerator(
+        tp=tensor_model_parallel_size,
+        ep=1,
+        dp=data_parallel_size,
+        pp=pipeline_model_parallel_size,
+        cp=context_parallel_size,
+        order=order,
+        rank_offset=encoder_world_size,
+    )
+
+    # Build expert rank generator
+    if expert_tensor_parallel_size is None:
+        expert_tensor_parallel_size = tensor_model_parallel_size
+    expert_tensor_model_pipeline_parallel_size = (
+        expert_tensor_parallel_size * expert_model_parallel_size * pipeline_model_parallel_size
+    )
+    expert_data_parallel_size = decoder_world_size // expert_tensor_model_pipeline_parallel_size
+    if decoder_world_size % expert_tensor_model_pipeline_parallel_size != 0:
+        raise RuntimeError(
+            f"decoder world_size ({decoder_world_size}) is not divisible by expert_tensor_model_pipeline_parallel size ({expert_tensor_model_pipeline_parallel_size})"
+        )
+
+    # TODO: support expert specific ordering
+    expert_decoder_rank_generator = RankGenerator(
+        tp=expert_tensor_parallel_size,
+        ep=expert_model_parallel_size,
+        dp=expert_data_parallel_size,
+        pp=pipeline_model_parallel_size,
+        cp=1,
+        order=order,
+        rank_offset=encoder_world_size,
+    )
+
+    assert (
+        order.endswith("pp")
+        or pipeline_model_parallel_size == 1
+        or expert_data_parallel_size == data_parallel_size
+    ), "When not using pp-last rank ordering, the data parallel size of the attention and moe layers must be the same"
+
+    assert decoder_rank_generator.get_ranks("pp") == expert_decoder_rank_generator.get_ranks(
+        "pp"
+    ), f"Pipeline parallel groups are expected to be the same for Non-Expert and Expert part, \
+    but got {decoder_rank_generator.get_ranks('pp')} and {expert_decoder_rank_generator.get_ranks('pp')}"
+
+    def generator_wrapper(group_type, is_expert=False, **kwargs):
+        """The `RankGenerator` class produces a hyper-rectangle for a given set of
+        tensor, pipeline, data, expert, and context parallelism. If we have an encoder,
+        in addition to the default decoder, we essentially instantiate two `RankGenerator`
+        classes to construct the parallelism for each module separately, and we then have
+        to stitch them together for the right groups. For now, this means pp and tp-pp."""
+        if is_expert:
+            d_ranks = expert_decoder_rank_generator.get_ranks(group_type, **kwargs)
+        else:
+            d_ranks = decoder_rank_generator.get_ranks(group_type, **kwargs)
+
+        if encoder_rank_generator is None:
+            for x in d_ranks:
+                yield x
+            return
+        e_ranks = encoder_rank_generator.get_ranks(group_type, **kwargs)
+        if group_type == 'pp':
+            # Map 1 encoder tp rank to several decoder tp ranks, because
+            # these won't be the same size.
+            for x, y in zip(cycle(e_ranks), d_ranks):
+                yield x + y
+        elif group_type == 'tp-pp':
+            # For this group, we can just return the concatenated
+            # groups together, because their sizes are the same.
+            assert len(e_ranks) == len(d_ranks)
+            for x, y in zip(e_ranks, d_ranks):
+                yield x + y
+        else:
+            for x in e_ranks:
+                yield x
+            for x in d_ranks:
+                yield x
+
+    timeout = timedelta(minutes=distributed_timeout_minutes)
+
+    # Build the data-parallel groups.
+    global _DATA_PARALLEL_GROUP
+    global _DATA_PARALLEL_GROUP_GLOO
+    global _DATA_PARALLEL_GLOBAL_RANKS
+    global _DATA_PARALLEL_GROUP_WITH_CP
+    global _DATA_PARALLEL_GROUP_WITH_CP_GLOO
+    global _DATA_PARALLEL_GLOBAL_RANKS_WITH_CP
+    global _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP
+    global _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP_GLOO
+    global _INTER_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP
+    assert _DATA_PARALLEL_GROUP is None, 'data parallel group is already initialized'
+
+    global _EPX_DATA_PARALLEL_LCP
+    if int(os.getenv("USE_EPX", 0)):
+        from epx.process_group import EpxProcessGroup
+        from epx.lcp import Lcp
+        import torch.distributed as dist
+
+        logger.info(f"start initialization _EPX_DATA_PARALLEL_LCP for epx")
+
+        epx_rank = int(os.environ.get("RANK", 0))
+
+        pg = EpxProcessGroup(group_name=str(epx_rank))
+
+        # rank = torch.distributed.get_rank()
+        _EPX_DATA_PARALLEL_LCP = Lcp(pg, rank)
+
+        logger.info(f"finish initialization _EPX_DATA_PARALLEL_LCP for epx")
+
+
+    for ranks in generator_wrapper('dp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('dp', nccl_comm_cfgs),
+            group_desc='DATA_PARALLEL_GROUP',
+        )
+        if create_gloo_process_groups:
+            group_gloo = create_group(
+                ranks, timeout=timeout, backend="gloo", group_desc='DATA_PARALLEL_GROUP_GLOO'
+            )
+        else:
+            group_gloo = None
+        if rank in ranks:
+            _DATA_PARALLEL_GROUP = group
+            _DATA_PARALLEL_GROUP_GLOO = group_gloo
+            _DATA_PARALLEL_GLOBAL_RANKS = ranks
+
+    assert (
+        data_parallel_size * context_parallel_size
+    ) % num_distributed_optimizer_instances == 0, (
+        'Data parallel size should be divisible by partial DistOpt shard factor'
+    )
+    intra_partial_data_parallel_size = (
+        data_parallel_size * context_parallel_size
+    ) // num_distributed_optimizer_instances
+
+    for ranks_with_cp in generator_wrapper('dp-cp'):
+        group_with_cp = create_group(
+            ranks_with_cp,
+            timeout=timeout,
+            pg_options=get_nccl_options('dp_cp', nccl_comm_cfgs),
+            group_desc='DATA_PARALLEL_GROUP_WITH_CP',
+        )
+        if create_gloo_process_groups:
+            group_with_cp_gloo = create_group(
+                ranks_with_cp,
+                timeout=timeout,
+                backend="gloo",
+                group_desc='DATA_PARALLEL_GROUP_WITH_CP_GLOO',
+            )
+        else:
+            group_with_cp_gloo = None
+        if rank in ranks_with_cp:
+            _DATA_PARALLEL_GROUP_WITH_CP = group_with_cp
+            _DATA_PARALLEL_GROUP_WITH_CP_GLOO = group_with_cp_gloo
+            _DATA_PARALLEL_GLOBAL_RANKS_WITH_CP = ranks_with_cp
+
+        if num_distributed_optimizer_instances > 1:
+            # Create groups for Partial DistOpt, one for intra-partial DP domain
+            # Another for inter-partial DP domain
+            for i in range(num_distributed_optimizer_instances):
+                intra_partial_data_parallel_ranks_with_cp = ranks_with_cp[
+                    (i * intra_partial_data_parallel_size) : (
+                        (i + 1) * intra_partial_data_parallel_size
+                    )
+                ]
+
+                intra_partial_data_parallel_group_with_cp = create_group(
+                    intra_partial_data_parallel_ranks_with_cp,
+                    timeout=timeout,
+                    pg_options=get_nccl_options('intra_dp_cp', nccl_comm_cfgs),
+                    group_desc='INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP',
+                )
+                if create_gloo_process_groups:
+                    intra_partial_data_parallel_group_with_cp_gloo = create_group(
+                        intra_partial_data_parallel_ranks_with_cp,
+                        timeout=timeout,
+                        backend="gloo",
+                        group_desc='INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP_GLOO',
+                    )
+                else:
+                    intra_partial_data_parallel_group_with_cp_gloo = None
+
+                if rank in intra_partial_data_parallel_ranks_with_cp:
+                    _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP = (
+                        intra_partial_data_parallel_group_with_cp
+                    )
+                    _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP_GLOO = (
+                        intra_partial_data_parallel_group_with_cp_gloo
+                    )
+
+            for i in range(intra_partial_data_parallel_size):
+                inter_partial_data_parallel_ranks_with_cp = ranks_with_cp[
+                    i::intra_partial_data_parallel_size
+                ]
+
+                inter_partial_data_parallel_group_with_cp = create_group(
+                    inter_partial_data_parallel_ranks_with_cp,
+                    timeout=timeout,
+                    pg_options=get_nccl_options('inter_dp_cp', nccl_comm_cfgs),
+                    group_desc='INTER_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP',
+                )
+
+                if rank in inter_partial_data_parallel_ranks_with_cp:
+                    _INTER_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP = (
+                        inter_partial_data_parallel_group_with_cp
+                    )
+        else:
+            _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP = _DATA_PARALLEL_GROUP_WITH_CP
+            _INTRA_PARTIAL_DATA_PARALLEL_GROUP_WITH_CP_GLOO = _DATA_PARALLEL_GROUP_WITH_CP_GLOO
+
+    # Apply SHARP to DP process groups
+    if use_sharp:
+        if rank == 0:
+            print(
+                "The number of process groups to use SHARP with depends on the type "
+                "of the network switch. Nvidia QM1 switch supports SAHRP up to 8 "
+                "process groups and QM2 supports up to 256 process groups. We apply "
+                "SHARP to the communications of the data-parallel domain. If the "
+                "number of data-parallel process groups is larger than the max "
+                "process groups that the network switch supports, the communication "
+                "will fall back to non-SHARP operators. To enable SHARP, "
+                "`#SBATCH_NETWORK=sharp` should be set in the sbatch script."
+            )
+        torch.distributed.barrier(
+            group=get_data_parallel_group(with_context_parallel=True),
+            device_ids=[torch.cuda.current_device()],
+        )
+        # Set `NCCL_COLLNET_ENABLE=0` to restrict SHARP application to DP process groups
+        os.environ["NCCL_COLLNET_ENABLE"] = "0"
+
+    # Build the context-parallel groups.
+    global _CONTEXT_PARALLEL_GROUP
+    global _CONTEXT_PARALLEL_GLOBAL_RANKS
+    assert _CONTEXT_PARALLEL_GROUP is None, 'context parallel group is already initialized'
+    for ranks in generator_wrapper('cp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('cp', nccl_comm_cfgs),
+            group_desc='CONTEXT_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _CONTEXT_PARALLEL_GROUP = group
+            _CONTEXT_PARALLEL_GLOBAL_RANKS = ranks
+        if hierarchical_context_parallel_sizes:
+            global _HIERARCHICAL_CONTEXT_PARALLEL_GROUPS
+            _HIERARCHICAL_CONTEXT_PARALLEL_GROUPS += create_hierarchical_parallel_groups(
+                rank,
+                ranks,
+                context_parallel_size,
+                hierarchical_context_parallel_sizes,
+                get_nccl_options('hcp', nccl_comm_cfgs),
+            )
+
+    # Build the model-parallel groups.
+    global _MODEL_PARALLEL_GROUP
+    global _MODEL_PARALLEL_GLOBAL_RANKS
+    assert _MODEL_PARALLEL_GROUP is None, 'model parallel group is already initialized'
+    for ranks in generator_wrapper('tp-pp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('mp', nccl_comm_cfgs),
+            group_desc='MODEL_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _MODEL_PARALLEL_GROUP = group
+            _MODEL_PARALLEL_GLOBAL_RANKS = ranks
+
+    # Build the tensor model-parallel groups.
+    global _TENSOR_MODEL_PARALLEL_GROUP
+    global _TENSOR_MODEL_PARALLEL_GLOBAL_RANKS
+    assert (
+        _TENSOR_MODEL_PARALLEL_GROUP is None
+    ), 'tensor model parallel group is already initialized'
+    for ranks in generator_wrapper('tp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp', nccl_comm_cfgs),
+            group_desc='TENSOR_MODEL_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _TENSOR_MODEL_PARALLEL_GROUP = group
+            _TENSOR_MODEL_PARALLEL_GLOBAL_RANKS = ranks
+
+    # Build the pipeline model-parallel groups and embedding groups
+    # (first and last rank in each pipeline model-parallel group).
+    global _PIPELINE_MODEL_PARALLEL_GROUP
+    global _PIPELINE_GLOBAL_RANKS
+    assert (
+        _PIPELINE_MODEL_PARALLEL_GROUP is None
+    ), 'pipeline model parallel group is already initialized'
+    global _EMBEDDING_GROUP
+    global _EMBEDDING_GLOBAL_RANKS
+    assert _EMBEDDING_GROUP is None, 'embedding group is already initialized'
+    global _POSITION_EMBEDDING_GROUP
+    global _POSITION_EMBEDDING_GLOBAL_RANKS
+    assert _POSITION_EMBEDDING_GROUP is None, 'position embedding group is already initialized'
+    if pipeline_model_parallel_comm_backend == 'ucc':
+        # The UCC backend provides two key benefits:
+        # 1) Achieves better bandwidth utilization than NCCL when using InfiniBand links.
+        # 2) Does not use GPU SM resources (Zero-SM), mitigating performance interference
+        #    with overlapping compute kernels.
+
+        # The UCC backend is recommended in the following cases:
+        # 1) When the exposed pipeline-parallel (PP) communications are significant.
+        #    - E.g., Pipeline parallelism with very less gradient accumulation steps.
+        #    - It may provide better performance due to improved bandwidth utilization.
+        # 2) When the critical-path pipeline stage has substantial PP-communication overlap.
+        #    - E.g., Uneven pipeline parallelism.
+        #    - It may provide better performance due to zero SM resource usage.
+        if 'CUDA_DEVICE_MAX_CONNECTIONS' in os.environ:
+            # UCC backend requires CUDA_DEVICE_MAX_CONNECTIONS variable to be larger than 1,
+            # to gurantee the overlapped UCC communications. If this environment variable is set to 1,
+            # all the UCC communication will be serialized.
+            assert (
+                os.environ['CUDA_DEVICE_MAX_CONNECTIONS'] != '1'
+            ), "UCC-backend requires CUDA_DEVICE_MAX_CONNECTIONS > 1"
+
+        # Setting up required environment variables for ucc backend
+        #
+        # "TORCH_UCC_BLOCKING_WAIT=none" allows non-blocking waits of the communiction handle
+        # "UCC_EC_CUDA_STREAM_TASK_MODE" controls how CUDA execution engines (EC)
+        # schedule tasks on CUDA streams.
+        # "UCX_TLS" controls transport layer selection
+        # "NSYS_UCP_COMM_PARAMS=1" enables capturing ucx tracing in nsys profiling
+        # "UCX_RNDV_THRESH" controls threshold threshold for switching between
+        # eager and rendezvous (RNDV) communication protocols.
+        # "UCX_NET_DEVICES" select which network interfaces UCX should use.
+        # "UCC_CL_BASIC_TLS" controls which Transport Layers are used by
+        # the Basic Collective libraray
+
+        os.environ['TORCH_UCC_BLOCKING_WAIT'] = (
+            os.environ['TORCH_UCC_BLOCKING_WAIT']
+            if "TORCH_UCC_BLOCKING_WAIT" in os.environ
+            else 'none'
+        )
+        os.environ['UCC_EC_CUDA_STREAM_TASK_MODE'] = (
+            os.environ['UCC_EC_CUDA_STREAM_TASK_MODE']
+            if "UCC_EC_CUDA_STREAM_TASK_MODE" in os.environ
+            else 'driver'
+        )
+        os.environ['UCX_TLS'] = (
+            os.environ['UCX_TLS'] if "UCX_TLS" in os.environ else 'ib,cuda_copy'
+        )  # cuda_ipc (i.e., NVLink-enablement) will be later supported
+        os.environ['NSYS_UCP_COMM_PARAMS'] = '1'
+        os.environ['UCX_RNDV_THRESH'] = '0'
+        os.environ['UCX_NET_DEVICES'] = 'all'
+        os.environ['UCC_CL_BASIC_TLS'] = '^sharp,nccl'
+
+    for ranks in generator_wrapper('pp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            backend=pipeline_model_parallel_comm_backend,
+            pg_options=(
+                None
+                if pipeline_model_parallel_comm_backend == 'ucc'
+                else get_nccl_options('pp', nccl_comm_cfgs)
+            ),
+            group_desc='PIPELINE_MODEL_PARALLEL_GROUP',
+        )
+        assert (
+            pipeline_model_parallel_comm_backend == None
+            or pipeline_model_parallel_comm_backend == 'nccl'
+            or pipeline_model_parallel_comm_backend == 'ucc'
+        ), f'"{pipeline_model_parallel_comm_backend}" backend for PP communication is currently not supported'
+
+        if rank in ranks:
+            if _PIPELINE_MODEL_PARALLEL_GROUP is None:
+                _PIPELINE_MODEL_PARALLEL_GROUP = group
+                _PIPELINE_GLOBAL_RANKS = ranks
+            elif isinstance(_PIPELINE_GLOBAL_RANKS[0], list):
+                _PIPELINE_MODEL_PARALLEL_GROUP.append(group)
+                _PIPELINE_GLOBAL_RANKS.append(ranks)
+            else:
+                _PIPELINE_MODEL_PARALLEL_GROUP = [_PIPELINE_MODEL_PARALLEL_GROUP, group]
+                _PIPELINE_GLOBAL_RANKS = [_PIPELINE_GLOBAL_RANKS, ranks]
+
+        embedding_ranks = get_embedding_ranks(ranks)
+        group = create_group(
+            embedding_ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('embd', nccl_comm_cfgs),
+            group_desc='EMBEDDING_GROUP',
+        )
+        if rank in embedding_ranks:
+            _EMBEDDING_GROUP = group
+            _EMBEDDING_GLOBAL_RANKS = embedding_ranks
+
+        position_embedding_ranks = get_position_embedding_ranks(ranks)
+        group = create_group(
+            position_embedding_ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('pos_embd', nccl_comm_cfgs),
+            group_desc='POSITION_EMBEDDING_GROUP',
+        )
+        if rank in position_embedding_ranks:
+            _POSITION_EMBEDDING_GROUP = group
+            _POSITION_EMBEDDING_GLOBAL_RANKS = position_embedding_ranks
+
+    # Build the tensor + data parallel groups.
+    global _TENSOR_AND_DATA_PARALLEL_GROUP
+    global _TENSOR_AND_DATA_PARALLEL_GROUP_WITH_CP
+    assert (
+        _TENSOR_AND_DATA_PARALLEL_GROUP is None
+    ), 'Tensor + data parallel group is already initialized'
+    for ranks in generator_wrapper('tp-dp-cp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp_dp_cp', nccl_comm_cfgs),
+            group_desc='TENSOR_AND_DATA_PARALLEL_GROUP_WITH_CP',
+        )
+        if rank in ranks:
+            _TENSOR_AND_DATA_PARALLEL_GROUP_WITH_CP = group
+    for ranks in generator_wrapper('tp-dp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp_dp', nccl_comm_cfgs),
+            group_desc='TENSOR_AND_DATA_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _TENSOR_AND_DATA_PARALLEL_GROUP = group
+
+    global _TENSOR_AND_CONTEXT_PARALLEL_GROUP
+    assert (
+        _TENSOR_AND_CONTEXT_PARALLEL_GROUP is None
+    ), 'Tensor + context parallel group is already initialized'
+    for ranks in generator_wrapper('tp-cp'):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp_cp', nccl_comm_cfgs),
+            group_desc='TENSOR_AND_CONTEXT_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _TENSOR_AND_CONTEXT_PARALLEL_GROUP = group
+
+    ### Expert-related parallel groups initialization
+    # Build the expert model parallel group
+    global _EXPERT_MODEL_PARALLEL_GROUP
+    assert _EXPERT_MODEL_PARALLEL_GROUP is None, 'Expert parallel group is already initialized'
+    for ranks in generator_wrapper('ep', is_expert=True):
+        group = create_group(
+            ranks,
+            pg_options=get_nccl_options('ep', nccl_comm_cfgs),
+            group_desc='EXPERT_MODEL_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _EXPERT_MODEL_PARALLEL_GROUP = group
+
+    # Build the expert tensor parallel group
+    global _EXPERT_TENSOR_PARALLEL_GROUP
+    assert (
+        _EXPERT_TENSOR_PARALLEL_GROUP is None
+    ), 'Expert tensor model parallel group is already initialized'
+    for ranks in generator_wrapper('tp', is_expert=True):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('ep_tp', nccl_comm_cfgs),
+            group_desc='EXPERT_TENSOR_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _EXPERT_TENSOR_PARALLEL_GROUP = group
+
+    # Build the tensor + expert parallel groups
+    global _EXPERT_TENSOR_AND_MODEL_PARALLEL_GROUP
+    assert (
+        _EXPERT_TENSOR_AND_MODEL_PARALLEL_GROUP is None
+    ), 'Expert tensor + model parallel group is already initialized'
+    for ranks in generator_wrapper('tp-ep', is_expert=True):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp_ep_mp', nccl_comm_cfgs),
+            group_desc='EXPERT_TENSOR_AND_MODEL_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _EXPERT_TENSOR_AND_MODEL_PARALLEL_GROUP = group
+
+    # Build the expert+tensor+pipeline parallel groups
+    global _EXPERT_TENSOR_MODEL_PIPELINE_PARALLEL_GROUP
+    assert (
+        _EXPERT_TENSOR_MODEL_PIPELINE_PARALLEL_GROUP is None
+    ), 'The expert_tensor_model_pipeline parallel group is already initialized'
+    for ranks in generator_wrapper('tp-ep-pp', is_expert=True):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('tp_ep_pp', nccl_comm_cfgs),
+            group_desc='EXPERT_TENSOR_MODEL_PIPELINE_PARALLEL_GROUP',
+        )
+        if rank in ranks:
+            _EXPERT_TENSOR_MODEL_PIPELINE_PARALLEL_GROUP = group
+
+    # Build the expert data parallel group
+    global _EXPERT_DATA_PARALLEL_GROUP
+    assert _EXPERT_DATA_PARALLEL_GROUP is None, 'Expert data group is already initialized'
+    global _EXPERT_DATA_PARALLEL_GROUP_GLOO
+    assert _EXPERT_DATA_PARALLEL_GROUP_GLOO is None, 'Expert data group-gloo is already initialized'
+
+    for ranks in generator_wrapper('dp', is_expert=True):
+        group = create_group(
+            ranks,
+            timeout=timeout,
+            pg_options=get_nccl_options('ep_dp', nccl_comm_cfgs),
+            group_desc='EXPERT_DATA_PARALLEL_GROUP',
+        )
+        if create_gloo_process_groups:
+            group_gloo = create_group(
+                ranks, backend="gloo", group_desc='EXPERT_DATA_PARALLEL_GROUP_GLOO'
+            )
+        else:
+            group_gloo = None
+        if rank in ranks:
+            _EXPERT_DATA_PARALLEL_GROUP = group
+            _EXPERT_DATA_PARALLEL_GROUP_GLOO = group_gloo
+    ### End of expert related parallel groups initialization
+
+    # Initialize global memory buffer
+    # This isn't really "parallel state" but there isn't another good place to
+    # put this. If we end up with a more generic initialization of megatron-core
+    # we could stick it there
+    _set_global_memory_buffer()
+
+    for var in list(group_list.keys())[8:]:
+        setattr(sys.modules["megatron.core.parallel_state"], var, eval(var))
+
+def get_epx_data_parallel_lcp():
+        return parallel_state._EPX_DATA_PARALLEL_LCP
+
+# use for fault_tolerance
+# initialize_model_parallel only update to set _EPX_DATA_PARALLEL_LCP, and no other changes
+# get_epx_data_parallel_lcp used to get _EPX_DATA_PARALLEL_LCP.
+# _EPX_DATA_PARALLEL_LCP is only used in fault_tolerance
+attrs_to_register = ['initialize_model_parallel', 'get_epx_data_parallel_lcp']
+
+for k in sys.modules:
+    if k.endswith('megatron.core.parallel_state'):
+        for target in attrs_to_register:
+            setattr(sys.modules[k], target, eval(target))
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/profiling.py b/megatron-lm-musa-patch/musa_patch/profiling.py
new file mode 100644
index 00000000..0a38dbf4
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/profiling.py
@@ -0,0 +1,160 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+# All rights reserved.
+#
+# This source code is licensed under the BSD-style license found in the
+# LICENSE file in the root directory of this source tree.
+
+import contextlib
+import os
+import pickle
+import time
+from datetime import datetime
+from pathlib import Path
+import json
+
+import torch
+
+# the number of warmup steps before the active step in each profiling cycle
+profile_freq = 4
+# how much memory allocation/free ops to record in memory snapshots
+MEMORY_SNAPSHOT_MAX_ENTRIES = 100000
+
+
+@contextlib.contextmanager
+def maybe_enable_profiling(args, global_step):
+    #add tarce related centext: renll
+    on_demand_profiling = int(os.getenv("KINETO_USE_DAEMON", 0))
+    if on_demand_profiling == 1:
+        training_job_path = os.getenv("TRAINING_JOB_PATH", "/home/dist")
+        rank_pid_relation_dir = os.getenv("RANK_PID_RELATION_DIR", "rank_pid_relation_dir")
+        job_id = os.getenv("MCCFLOW_JOB_ID", "default-job-id")
+        rank_full_path = "{}/{}/{}".format(training_job_path, rank_pid_relation_dir, job_id)
+        Path(rank_full_path).mkdir(parents=True, exist_ok=True)
+
+        rank_pid_relation_map = {
+            "rank": torch.distributed.get_rank(),
+            "world_size": torch.distributed.get_world_size(),
+            "pid": os.getpid(),
+        }
+        rank_file = rank_full_path + "/rank" + str(torch.distributed.get_rank())
+        with open(rank_file, "w+") as f:
+            json.dump(rank_pid_relation_map, f)
+    # get user defined profiler settings
+    enable_profiling = int(os.getenv("ENABLE_PROFILER", 0))
+     # fetch profiler related env
+    wait_steps = int(os.getenv("PROFILER_WAIT_STEPS", 0))
+    warmup_steps = int(os.getenv("PROFILER_WARMUP_STEPS", 3))
+    active_steps = int(os.getenv("PROFILER_ACTIVE_STEPS", 1))
+    repeat_num = int(os.getenv("PROFILER_REPEAT_NUM", 0))
+    profile_freq = int(os.getenv("PROFILER_FREQ", 1))
+    current_time = datetime.now().strftime("%Y.%m.%d-%H:%M:%S")
+    save_dir = os.getenv("PROFILER_SAVE_DIR", f"./profiler_result/{current_time}")
+    worker_name = os.getenv(
+        "PROFILER_WORKER_NAME", "rank" + str(torch.distributed.get_rank())
+    )
+    record_shapes = int(os.getenv("PROFILER_RECORD_SHAPES", 1))
+    profile_memory = int(os.getenv("PROFILER_PROFILE_MEMORY", 0))
+    with_stack = int(os.getenv("PROFILER_WITH_STACK", 1))
+    with_modules = int(os.getenv("PROFILER_WITH_MODULES", 1))
+    kineto_log_level = int(os.getenv("KINETO_LOG_LEVEL", 0))
+
+    if enable_profiling:
+        profile_freq = profile_freq
+
+        rank = torch.distributed.get_rank()
+
+        def trace_handler(prof):
+            curr_trace_dir_name = "iteration_" + str(prof.step_num)
+            curr_trace_dir = os.path.join(save_dir, curr_trace_dir_name)
+            if not os.path.exists(curr_trace_dir):
+                os.makedirs(curr_trace_dir, exist_ok=True)
+            curr_trace_path = os.path.join(curr_trace_dir, f"rank{rank}.{int(time.time()*1000)}.pt.trace.json")
+            print(f"Dumping profiler traces at step {prof.step_num} to {curr_trace_path}")
+            begin = time.monotonic()
+            prof.export_chrome_trace(curr_trace_path)
+            print(
+                f"Finished dumping profiler traces in {time.monotonic() - begin:.2f} seconds"
+            )
+
+        print(f"Profiling active. Traces will be saved at {save_dir}")
+
+        if not os.path.exists(save_dir):
+            os.makedirs(save_dir, exist_ok=True)
+
+        # warmup, active = WARMUP, 1
+        wait = profile_freq - (active_steps + warmup_steps)
+        assert (
+            wait >= 0
+        ), "profile_freq must be greater than or equal to warmup + active"
+        with torch.profiler.profile(
+            activities=[
+                torch.profiler.ProfilerActivity.CPU,
+                torch.profiler.ProfilerActivity.MUSA,
+                # torch.profiler.ProfilerActivity.CUDA,
+            ],
+            schedule=torch.profiler.schedule(wait=wait, warmup=warmup_steps, active=active_steps, repeat=repeat_num),
+            on_trace_ready=trace_handler,
+            record_shapes=record_shapes,
+            profile_memory=profile_memory,
+            with_stack=with_stack,
+            with_modules=with_modules,
+            start_step=global_step,
+        ) as torch_profiler:
+            yield torch_profiler
+    else:
+        torch_profiler = contextlib.nullcontext()
+        yield None
+
+
+@contextlib.contextmanager
+def maybe_enable_memory_snapshot(args, global_step: int = 0):
+    pass
+    # enable_snapshot = config.profiling.enable_memory_snapshot
+    # if enable_snapshot:
+    #     snapshot_folder = config.profiling.save_memory_snapshot_folder
+    #     snapshot_dir = os.path.join(config.job.dump_folder, snapshot_folder)
+    #     if not os.path.exists(snapshot_dir):
+    #         os.makedirs(snapshot_dir, exist_ok=True)
+    #     rank = torch.distributed.get_rank()
+
+    #     class MemoryProfiler:
+    #         def __init__(self, step_num: int, freq: int):
+    #             torch.musa.memory._record_memory_history(
+    #                 max_entries=MEMORY_SNAPSHOT_MAX_ENTRIES
+    #             )
+    #             # when resume training, we start from the last step
+    #             self.step_num = step_num
+    #             self.freq = freq
+
+    #         def step(self, exit_ctx: bool = False):
+    #             self.step_num += 1
+    #             if not exit_ctx and self.step_num % self.freq != 0:
+    #                 return
+    #             if not exit_ctx:
+    #                 curr_step = self.step_num
+    #                 dir_name = f"iteration_{curr_step}"
+    #             else:
+    #                 # dump as iteration_0_exit if OOM at iter 1
+    #                 curr_step = self.step_num - 1
+    #                 dir_name = f"iteration_{curr_step}_exit"
+    #             curr_snapshot_dir = os.path.join(snapshot_dir, dir_name)
+    #             if not os.path.exists(curr_snapshot_dir):
+    #                 os.makedirs(curr_snapshot_dir, exist_ok=True)
+    #             logger.info(f"Dumping memory snapshot at step {curr_step}")
+    #             begin = time.monotonic()
+    #             with open(
+    #                 f"{curr_snapshot_dir}/rank{rank}_memory_snapshot.pickle", "wb"
+    #             ) as output:
+    #                 pickle.dump(torch.musa.memory._snapshot(), output)
+    #             logger.info(
+    #                 f"Finished dumping memory snapshot in {time.monotonic() - begin:.2f} seconds"
+    #             )
+
+    #     logger.info(f"Memory profiler active. Snapshot will be saved at {snapshot_dir}")
+    #     profiler = MemoryProfiler(global_step, config.profiling.profile_freq)
+    #     try:
+    #         yield profiler
+    #     except torch.OutOfMemoryError as e:
+    #         profiler.step(exit_ctx=True)
+    # else:
+    #     yield None
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/__init__.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/__init__.py
new file mode 100644
index 00000000..0437d153
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/__init__.py
@@ -0,0 +1,7 @@
+from . import multi_latent_attention
+from . import random
+from . import moe_layer
+from . import mlp
+from . import transformer_layer
+from . import transformer_engine
+from . import schedules
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/mlp.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/mlp.py
new file mode 100644
index 00000000..d0ae4d67
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/mlp.py
@@ -0,0 +1,144 @@
+# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
+
+import torch
+import torch.nn.functional as F
+
+from megatron.core import tensor_parallel, parallel_state
+
+from megatron.core.fusions.fused_bias_geglu import bias_geglu_impl
+from megatron.core.fusions.fused_bias_gelu import bias_gelu_impl
+from megatron.core.fusions.fused_bias_swiglu import bias_swiglu_impl
+
+from transformer_engine.pytorch.distributed import checkpoint, checkpointVirance
+# HACK(huang.huang): recompute/variance for mlp in moe with fp8/bf16: 
+# support mlp_rms_recompute,  which combine rms, mlp into one checkpoint;
+# add new arg "no_recompute" to avoid repated recompute for sharedEXP while 
+# moe_layer is already recomputed outsides
+def MLP_forward(self, hidden_states, norm_func=None, no_recompute=False):
+    """
+    Perform the forward pass through the MLP block.
+    Args:
+    hidden_states (Tensor): Input tensor of shape [s, b, h] where s is sequence length,
+        b is batch size, and h is hidden size.
+    norm_func (function): whether to do layernorm inner MLP instead of transformerlayer.
+    no_recompute (bool): default is False. only set to True when is sharedEXP, 
+                        to avoid repeated recomputation between this mlp and moe_layer 
+    """
+    # [s, b, 4 * h/p]
+    def custom_forward(hidden_states):
+        if norm_func is not None:
+            assert self.config.mlp_rms_recompute
+            
+            hidden_states= norm_func(hidden_states)
+        intermediate_parallel, bias_parallel = self.linear_fc1(hidden_states)
+
+        if self.config.bias_activation_fusion:
+            if self.activation_func == F.gelu:
+                if self.config.gated_linear_unit:
+                    intermediate_parallel = bias_geglu_impl(intermediate_parallel, bias_parallel)
+                else:
+                    assert self.config.add_bias_linear is True
+                    intermediate_parallel = bias_gelu_impl(intermediate_parallel, bias_parallel)
+            elif self.activation_func == F.silu and self.config.gated_linear_unit:
+                intermediate_parallel = bias_swiglu_impl(
+                    intermediate_parallel,
+                    bias_parallel,
+                    self.config.activation_func_fp8_input_store,
+                )
+            else:
+                raise ValueError("Only support fusion of gelu and swiglu")
+        else:
+            if bias_parallel is not None:
+                intermediate_parallel = intermediate_parallel + bias_parallel
+            if self.config.gated_linear_unit:
+
+                def glu(x):
+                    x = torch.chunk(x, 2, dim=-1)
+                    return self.config.activation_func(x[0]) * x[1]
+
+                intermediate_parallel = glu(intermediate_parallel)
+            else:
+                intermediate_parallel = self.activation_func(intermediate_parallel)
+
+        # [s, b, h]
+        output, output_bias = self.linear_fc2(intermediate_parallel)
+        return output, output_bias
+    
+    if norm_func is not None:
+        _custom_func_first = lambda x : self.custom_func_first(norm_func(x))
+    else:
+        _custom_func_first = lambda x : self.custom_func_first(x)# use lambda to create new func instead of method object which can't add new attribute
+    if no_recompute: #avoid to recompute under another recompute context outside this function, like in sharedExp
+        return custom_forward(hidden_states)
+    
+    if self.config.mlp_recompute:
+        if self.config.fp8:
+            if self.config.recompute_variance:
+                output, output_bias = checkpointVirance(
+                    _custom_func_first,
+                    self.linear_fc2,
+                    hidden_states,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                )
+            else:
+                output, output_bias = checkpoint(
+                    custom_forward, 
+                    hidden_states,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                    )
+        else:
+            if self.config.recompute_variance:
+                output, output_bias = tensor_parallel.checkpointVirance(
+                    _custom_func_first, self.linear_fc2, False, hidden_states)
+            else:
+                output, output_bias = tensor_parallel.checkpoint(
+                    custom_forward, False, hidden_states)
+    else:
+        output, output_bias = custom_forward(hidden_states)
+    return output, output_bias
+## HACK(huang.huang)
+
+# HACK(huang.huang): seperate linear1 and act from mlp, to support potential recoumpute variance,
+# which need a separated linear2
+def MLP_custom_func_first(self, hidden_states):
+    intermediate_parallel, bias_parallel = self.linear_fc1(hidden_states)
+
+    if self.config.bias_activation_fusion:
+        if self.activation_func == F.gelu:
+            if self.config.gated_linear_unit:
+                intermediate_parallel = bias_geglu_impl(intermediate_parallel, bias_parallel)
+            else:
+                assert self.config.add_bias_linear is True
+                intermediate_parallel = bias_gelu_impl(intermediate_parallel, bias_parallel)
+        elif self.activation_func == F.silu and self.config.gated_linear_unit:
+            intermediate_parallel = bias_swiglu_impl(
+                intermediate_parallel,
+                bias_parallel,
+                self.config.activation_func_fp8_input_store,
+            )
+        else:
+            raise ValueError("Only support fusion of gelu and swiglu")
+    else:
+        if bias_parallel is not None:
+            intermediate_parallel = intermediate_parallel + bias_parallel
+        if self.config.gated_linear_unit:
+
+            def glu(x):
+                x = torch.chunk(x, 2, dim=-1)
+                return self.config.activation_func(x[0]) * x[1]
+
+            intermediate_parallel = glu(intermediate_parallel)
+        else:
+            intermediate_parallel = self.activation_func(intermediate_parallel)
+    
+    return intermediate_parallel
+## HACK(huang.huang)
+
+from transformer_engine.musa.pytorch.utils import replace_attr, add_attr
+from megatron.core.transformer.mlp import MLP
+replace_attr(MLP,"forward", MLP_forward)
+add_attr(MLP,"custom_func_first", MLP_custom_func_first)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/moe_layer.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/moe_layer.py
new file mode 100644
index 00000000..8b1fbb42
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/moe_layer.py
@@ -0,0 +1,216 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+from functools import partial, wraps
+
+import torch
+import torch.nn.functional as F
+from torch.nn import Identity
+
+from megatron.core import tensor_parallel, parallel_state
+from megatron.core.fusions.fused_bias_geglu import bias_geglu_impl
+from megatron.core.fusions.fused_bias_gelu import bias_gelu_impl
+from megatron.core.fusions.fused_bias_swiglu import bias_swiglu_impl
+
+from transformer_engine.pytorch.distributed import checkpoint, checkpointVirance
+from megatron.core.transformer.moe.shared_experts import SharedExpertMLP
+
+# HACK(huang.huang): recompute/variance for experts in moe with fp8/bf16: 
+# support mlp_rms_recompute which combine rms, sharedEXP and gating into one checkpoint;
+def MoELayer_forward(self, hidden_states: torch.Tensor, norm_func=None):
+    """
+    Perform the forward pass through the MLP block.
+    Args:
+    hidden_states (Tensor): Input tensor of shape [s, b, h] where s is sequence length,
+        b is batch size, and h is hidden size.
+    norm_func (function): whether to do layernorm inner MLP instead of transformerlayer.
+    """
+    if (
+        self.training
+        and self.config.tensor_model_parallel_size > 1
+        and not self.config.sequence_parallel
+    ):
+        raise ValueError(
+            "During training, performance may degrade if MoE and tensor parallelism"
+            "are enabled without also enabling sequence parallelism."
+        )
+
+    
+    # process MoE
+    def custom_forward(hidden_states):
+        
+        if norm_func is not None:
+            assert self.config.mlp_rms_recompute
+            
+            def rms_recompute_func(hidden_states):
+                #combination of rms, sharedEXP and gating
+                hidden_states= norm_func(hidden_states)
+                logits = self.router.apply_input_jitter(hidden_states)
+                logits = self.router.gating(logits)
+                shared_output = self.shared_experts(hidden_states, no_recompute=True)
+                return hidden_states, logits, shared_output
+            
+            if self.config.fp8:
+                if self.config.recompute_variance:
+                    func_before_routing = lambda x : self.router.gating(self.router.apply_input_jitter(x))
+                    linears = (Identity(), Identity(), self.shared_experts.linear_fc2)
+                    mid_function = (Identity(), func_before_routing, self.shared_experts.custom_func_first)
+                    hidden_states, logits, shared_output = checkpointVirance(
+                        norm_func, 
+                        linears,
+                        hidden_states,
+                        distribute_saved_activations=self.config.distribute_saved_activations,
+                        get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                        tp_group=parallel_state.get_tensor_model_parallel_group(),
+                        mid_function=mid_function
+                    )
+                else:
+                    hidden_states, logits, shared_output = checkpoint(
+                        rms_recompute_func,
+                        hidden_states,
+                        distribute_saved_activations=self.config.distribute_saved_activations,
+                        get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                        tp_group=parallel_state.get_tensor_model_parallel_group(),
+                    )
+            else:
+                if self.config.recompute_variance:
+                    func_before_routing = lambda x : self.router.gating(self.router.apply_input_jitter(x))
+                    linears = (Identity(), Identity(), self.shared_experts.linear_fc2)
+                    mid_function = (Identity(), func_before_routing, self.shared_experts.custom_func_first)
+                    hidden_states, logits, shared_output = tensor_parallel.checkpointVirance(
+                        norm_func, 
+                        linears,
+                        False, 
+                        hidden_states,
+                        mid_function=mid_function
+                        )
+                else:
+                    hidden_states, logits, shared_output = tensor_parallel.checkpoint(
+                        rms_recompute_func, False, hidden_states)
+            probs, routing_map = self.router.routing(logits)
+        else:
+            probs, routing_map = self.router(hidden_states)
+        (dispatched_input, tokens_per_expert) = self.token_dispatcher.token_permutation(
+            hidden_states, probs, routing_map
+        )
+        custom_expert_forward = partial(self.experts, tokens_per_expert=tokens_per_expert)
+
+        def _custom_func_first(permuted_local_hidden_states, tokens_per_expert):
+            #forward for linear1 and act in self.experts
+            tokens_per_expert = tokens_per_expert.tolist()
+            intermediate_parallel, bias_parallel = self.experts.linear_fc1(
+                permuted_local_hidden_states, tokens_per_expert
+            )
+
+            if self.experts.config.bias_activation_fusion:
+                if self.experts.activation_func == F.gelu:
+                    if self.experts.config.gated_linear_unit:
+                        intermediate_parallel = bias_geglu_impl(intermediate_parallel, bias_parallel)
+                    else:
+                        assert self.experts.config.add_bias_linear is True
+                        intermediate_parallel = bias_gelu_impl(intermediate_parallel, bias_parallel)
+                elif self.experts.activation_func == F.silu and self.experts.config.gated_linear_unit:
+                    intermediate_parallel = bias_swiglu_impl(
+                        intermediate_parallel,
+                        bias_parallel,
+                        self.config.activation_func_fp8_input_store,
+                    )
+                else:
+                    raise ValueError("Only support fusion of gelu and swiglu")
+            else:
+                if bias_parallel is not None:
+                    shape = intermediate_parallel.shape
+                    intermediate_parallel = torch.cat(
+                        [
+                            t + b
+                            for t, b in zip(
+                                torch.split(
+                                    intermediate_parallel.view(-1, shape[-1]), tokens_per_expert
+                                ),
+                                bias_parallel,
+                            )
+                        ]
+                    ).view(shape)
+                if self.experts.config.gated_linear_unit:
+
+                    def glu(x):
+                        x = torch.chunk(x, 2, dim=-1)
+                        return self.experts.config.activation_func(x[0]) * x[1]
+
+                    intermediate_parallel = glu(intermediate_parallel)
+                else:
+                    intermediate_parallel = self.experts.activation_func(intermediate_parallel)
+            return intermediate_parallel, tokens_per_expert
+
+        custom_func_first = partial(_custom_func_first, tokens_per_expert=tokens_per_expert) 
+
+
+        if self.config.mlp_recompute:
+            if self.config.fp8:
+                if self.config.recompute_variance:
+                    expert_output, mlp_bias = checkpointVirance(
+                        custom_func_first,
+                        self.experts.linear_fc2,
+                        dispatched_input,
+                        distribute_saved_activations=self.config.distribute_saved_activations,
+                        get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                        tp_group=parallel_state.get_tensor_model_parallel_group(),
+                    )
+                else:
+                    expert_output, mlp_bias = checkpoint(
+                        custom_expert_forward, 
+                        dispatched_input,
+                        distribute_saved_activations=self.config.distribute_saved_activations,
+                        get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                        tp_group=parallel_state.get_tensor_model_parallel_group(),
+                        )
+            else:
+                if self.config.recompute_variance:
+                    expert_output, mlp_bias = tensor_parallel.checkpointVirance(
+                        custom_func_first, self.experts.linear_fc2, False, dispatched_input)
+                else:
+                    expert_output, mlp_bias = tensor_parallel.checkpoint(
+                        custom_expert_forward, False, dispatched_input)
+        else:
+            expert_output, mlp_bias = self.experts(dispatched_input, tokens_per_expert)
+
+        output, mlp_bias = self.token_dispatcher.token_unpermutation(expert_output, mlp_bias)
+        if norm_func is not None:
+            #self.shared_experts called in the begining of custom_forward, which is convenient for rms recmopute 
+            output = output + shared_output
+        elif self.use_shared_expert and not self.shared_expert_overlap:
+            # if shared_expert_overlap is True, the expert calculation happens in
+            # the token_dispatcher to overlap communications and computations
+            output = output + self.shared_experts(hidden_states)
+        return output, mlp_bias
+
+    if self.moe_layer_recompute:
+        output, mlp_bias = tensor_parallel.checkpoint(custom_forward, False, hidden_states)
+    else:
+        output, mlp_bias = custom_forward(hidden_states)
+
+    return output, mlp_bias
+## HACK(huang.huang)
+
+
+# HACK(huang.huang): recompute/variance for SharedExpertMLP, avoid repeated recomputation between moe-layer and sharedExp  
+def SharedExpertMLP_forward(self, hidden_states, no_recompute=False):
+    """ 
+    Perform the forward pass through the SharedExpertMLP block.
+    Args:
+    hidden_states (Tensor): Input tensor of shape [s, b, h] where s is sequence length,
+        b is batch size, and h is hidden size.
+    no_recompute (bool): default is False. only set to True when is sharedEXP, 
+                        to avoid repeated recomputation between this mlp and moe_layer 
+    """
+    output, _ = super(SharedExpertMLP, self).forward(hidden_states, no_recompute=no_recompute)
+    if self.use_shared_expert_gate:
+        logits = torch.nn.functional.linear(hidden_states, self.gate_weight)
+        gate_score = torch.nn.functional.sigmoid(logits)
+        output = output * gate_score
+    return output
+## HACK(huang.huang)
+
+from transformer_engine.musa.pytorch.utils import replace_attr
+from megatron.core.transformer.moe.moe_layer import MoELayer
+replace_attr(MoELayer,"forward", MoELayer_forward)
+replace_attr(SharedExpertMLP,"forward", SharedExpertMLP_forward)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/multi_latent_attention.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/multi_latent_attention.py
new file mode 100644
index 00000000..739bad16
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/multi_latent_attention.py
@@ -0,0 +1,297 @@
+import os
+import torch
+from functools import partial
+from megatron.core import tensor_parallel, parallel_state
+from megatron.core.models.common.embeddings import apply_rotary_pos_emb
+from megatron.core.transformer.multi_latent_attention import MLASelfAttention
+try:
+    from transformer_engine.pytorch.distributed import checkpoint
+    from transformer_engine.pytorch.distributed import checkpointViranceAttention
+    HAVE_TE = True
+except ImportError:
+    HAVE_TE = False
+
+# HACK(huang.huang): recompute-variance for fa: 
+# 1. modify get_query_key_value_tensors for MLASelfAttention, just add a logic to call recompute;
+# 2. modify forward for MLASelfAttention, seperate the core attention from other part around it, and send them to checkpoint_forward
+# 3. add RoPEQInplace
+# TODO: huang.huang revise code before to follow new version "get_qkv" in Megatron-LM:main
+class RoPEQInplace(torch.autograd.Function):
+    """
+    limiation:
+    1. pre_op backward cannot use self output(e.g. softmax).
+    2. if you call backward directly and pass in dy, be careful that dy is overwritten.
+    """
+
+    @staticmethod
+    def forward(ctx, x, freqs, custom_metadata):
+        (
+            split_start,
+            split_end,
+            rotary_interleaved,
+            batch_first,
+        ) = ctx.custom_metadata = custom_metadata
+        assert x.dim() == 4 and freqs.dim() == 2
+        assert (split_end - split_start) == freqs.shape[-1]
+        assert x.shape[batch_first] == freqs.shape[0]
+        ctx.save_for_backward(freqs)
+        y = torch.ops.aten._fused_rope_forward(
+            x[..., split_start:split_end], freqs, rotary_interleaved, batch_first
+        )
+        # x.data[..., split_start:split_end] = y # Using `tensor.data` does not affect `tensor._version`.
+        x[..., split_start:split_end] = y
+        return x
+
+    @staticmethod
+    def backward(ctx, dy):
+        (freqs,) = ctx.saved_tensors
+        (
+            split_start,
+            split_end,
+            rotary_interleaved,
+            batch_first,
+        ) = ctx.custom_metadata
+        sub_dy = dy[..., split_start:split_end]
+        dx = torch.ops.aten._fused_rope_backward(
+            sub_dy, freqs, rotary_interleaved, batch_first
+        )
+        dy[..., split_start:split_end] = dx
+        return dy, None, None
+
+
+def MLASelfAttention_forward(
+    self,
+    hidden_states,
+    attention_mask,
+    key_value_states=None,
+    inference_params=None,
+    rotary_pos_emb=None,
+    rotary_pos_cos=None,
+    rotary_pos_sin=None,
+    attention_bias=None,
+    packed_seq_params=None,
+    position_ids=None,
+    sequence_len_offset=None,
+    q_compressed=None,
+    kv_combined=None,
+):
+    if not int(os.getenv("USE_RECOMPUTE_VARIANCE", 0)):
+        #original forward
+        return super(MLASelfAttention ,self).forward(
+            hidden_states,
+            attention_mask,
+            key_value_states,
+            inference_params,
+            rotary_pos_emb,
+            rotary_pos_cos,
+            rotary_pos_sin,
+            attention_bias,
+            packed_seq_params,
+            position_ids,
+            sequence_len_offset
+            )
+    
+    """Forward pass for multi-latent attention"""
+    assert rotary_pos_emb is None, "Rotary position embeddings should not be passed into MLA."
+    assert attention_bias is None, "Attention bias should not be passed into MLA."
+    assert (
+        rotary_pos_cos is None and rotary_pos_sin is None
+    ), "MLA does not support Flash Decoding"
+
+    # hidden_states: [sq, b, h]
+
+    # =====================
+    # Query, Key, and Value
+    # =====================
+    # Get the query, key and value tensors based on the type of attention -
+    # self or cross attn.
+    # query: [96, 1, 16, 128], key:[96, 1, 16, 128], value:[96, 1, 16, 128]
+    if self.config.mla_rms_recompute:
+        assert self.config.attn_recompute, 'mla_rms_recompute only use with attn_recompute now.'
+        pass
+    else:
+        assert (
+            hidden_states.ndim == 3
+        ), f"hidden_states should be 3D, [s, b, n*h], got {hidden_states.ndim}D"
+
+        if self.config.q_lora_rank is not None:
+            q_compressed, _ = self.linear_q_down_proj(hidden_states)
+        else:
+            q_compressed = hidden_states      
+
+        kv_combined, _ = self.linear_kv_down_proj(hidden_states)    
+
+    def _custom_forward_before_attention(
+        q_compressed, 
+        kv_combined,
+        key_value_states=None,
+        position_ids=None,
+        packed_seq_params=None,
+        inference_params=None,
+    ):
+        q_len, bsz, _ = q_compressed.size()
+
+        if self.config.q_lora_rank is not None:
+            q_compressed = self.q_layernorm(q_compressed)
+            q, _ = self.linear_q_up_proj(q_compressed)
+        else:
+            q, _ = self.linear_q_proj(q_compressed)
+        
+        # q: [s, b, n, 192]
+        q = q.view(q_len, bsz, self.num_attention_heads_per_partition, self.q_head_dim)
+
+        # q: [s, b, n, 128], q_pos_emb: [s, b, n, 64]
+        q_no_pe, q_pos_emb = torch.split(
+            q, [self.config.qk_head_dim, self.config.qk_pos_emb_head_dim], dim=-1
+        )
+
+
+        # kv_compressed:[s, b, 512], k_pos_emb: [s, b, 64]
+        kv_compressed, k_pos_emb = torch.split(
+            kv_combined, [self.config.kv_lora_rank, self.config.qk_pos_emb_head_dim], dim=-1
+        )
+        kv, _ = self.linear_kv_up_proj(self.kv_layernorm(kv_compressed))
+
+        # kv: [s, b, n, 256]
+        kv = kv.view(
+            q_len,
+            bsz,
+            self.num_attention_heads_per_partition,
+            self.config.qk_head_dim + self.config.v_head_dim,
+        )
+
+        # k_no_pe: [s, b, n, 128], value: [s, b, n, 128]
+        k_no_pe, value = torch.split(kv, [self.config.qk_head_dim, self.config.v_head_dim], dim=-1)
+
+        # rotary_pos_emb:[s, b, 1, 64]
+        rotary_pos_emb = self.rotary_pos_emb(max_seq_len=self.config.max_position_embeddings)
+
+        if len(rotary_pos_emb) == 2:
+            mscale = rotary_pos_emb[1]
+            rotary_pos_emb = rotary_pos_emb[0]
+
+        if inference_params is not None:
+            # add offset to the sequence start for inference
+            sequence_start = inference_params.sequence_len_offset
+            sequence_end = sequence_start + q_len
+            rotary_pos_emb = rotary_pos_emb[sequence_start:sequence_end]
+
+        # [s, b, 64] -> [s, b, 1, 64]
+        k_pos_emb = torch.unsqueeze(k_pos_emb, 2)
+
+        if packed_seq_params is not None:
+            cu_seqlens_q = packed_seq_params.cu_seqlens_q
+            cu_seqlens_kv = packed_seq_params.cu_seqlens_kv
+        else:
+            cu_seqlens_q = cu_seqlens_kv = None
+
+        # # q_pos_emb: [s, b, n, 64], k_pos_emb:[s, b, 1, 64]
+        # q_pos_emb = apply_rotary_pos_emb(
+        #     q_pos_emb, rotary_pos_emb, config=self.config, cu_seqlens=cu_seqlens_q, mscale=mscale
+        # )
+        k_pos_emb = apply_rotary_pos_emb(
+            k_pos_emb, rotary_pos_emb, config=self.config, cu_seqlens=cu_seqlens_kv, mscale=mscale
+        )
+
+        # # query: [s, b, n, 192]
+        # query = torch.cat([q_no_pe, q_pos_emb], dim=-1)
+        q_split_start = self.config.qk_head_dim
+        q_split_end = q_split_start + self.config.qk_pos_emb_head_dim
+        rotary_interleaved = False
+        batch_first = False
+        query = RoPEQInplace.apply(q, rotary_pos_emb.squeeze(1).squeeze(1), 
+                                   (q_split_start, q_split_end, rotary_interleaved, batch_first))
+
+        # key: [s, b, n, 192]
+        k_pos_emb = k_pos_emb.expand(-1, -1, self.config.num_attention_heads, -1)
+        key = torch.cat([k_no_pe, k_pos_emb], dim=-1)
+
+        query = query.contiguous()
+        key = key.contiguous()
+        value = value.contiguous()    
+
+        query, key, value, _, attn_mask_type = self._adjust_key_value_for_inference(
+        inference_params, query, key, value, rotary_pos_emb=None
+        )    
+        return query, key, value, attention_mask, \
+            {"attn_mask_type":attn_mask_type, "attention_bias":attention_bias, "packed_seq_params":packed_seq_params}
+        
+    def _custom_forward_self_attention(
+        q_compressed, 
+        kv_combined,
+        key_value_states=None,
+        position_ids=None,
+        packed_seq_params=None,
+        inference_params=None,
+        ):
+        
+        query, key, value, attention_mask, kwargs = _custom_forward_before_attention(q_compressed, kv_combined, key_value_states, position_ids, packed_seq_params,inference_params)
+        core_attn_out = self.core_attention(query, key, value, attention_mask, **kwargs)
+        return core_attn_out       
+
+    custom_forward_self_attention = partial(
+        _custom_forward_self_attention,
+        key_value_states=key_value_states,
+        inference_params=inference_params,
+        position_ids=position_ids,
+        packed_seq_params=packed_seq_params,
+    )
+
+
+    custom_forward_before_attention = partial(
+        _custom_forward_before_attention,
+        key_value_states=key_value_states,
+        inference_params=inference_params,
+        position_ids=position_ids,
+        packed_seq_params=packed_seq_params,
+    )
+
+    if self.config.attn_recompute == True:
+        if self.config.fp8:
+            if self.config.recompute_variance == True:
+                core_attn_out = checkpointViranceAttention(
+                    custom_forward_before_attention,
+                    self.core_attention,
+                    q_compressed,
+                    kv_combined,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                )      
+            else:
+                core_attn_out =  checkpoint(
+                    custom_forward_self_attention,
+                    q_compressed,
+                    kv_combined,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                )    
+        else:
+            if self.config.recompute_variance == True:
+                core_attn_out = tensor_parallel.checkpointViranceAttention(
+                    custom_forward_before_attention, self.core_attention, False, q_compressed, kv_combined)
+            else:
+                core_attn_out = tensor_parallel.checkpoint(
+                    custom_forward_self_attention, False, q_compressed, kv_combined)
+    else:
+        core_attn_out = custom_forward_self_attention(q_compressed, kv_combined)
+    if packed_seq_params is not None:
+        # reshape to same output shape as unpacked case
+        # (t, np, hn) -> (t, b=1, h=np*hn)
+        # t is the pack size = sum (sq_i)
+        # note that batch is a dummy dimension in the packed case
+        core_attn_out = core_attn_out.reshape(core_attn_out.size(0), 1, -1)
+
+    # =================
+    # Output. [sq, b, h]
+    # =================
+    output, bias = self.linear_proj(core_attn_out)
+
+    return output, bias
+# HACK(huang.huang)
+
+
+from transformer_engine.musa.pytorch.utils import replace_attr
+
+replace_attr(MLASelfAttention, "forward", MLASelfAttention_forward)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/random.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/random.py
new file mode 100644
index 00000000..6f011236
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/random.py
@@ -0,0 +1,309 @@
+# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+
+# Parts of the code here are adapted from PyTorch
+# repo: https://github.com/pytorch/pytorch
+
+# import contextlib
+# import logging
+
+import torch
+# from torch import _C
+from torch.cuda import _lazy_call
+from torch.nn import Identity
+# from torch.cuda import device as device_ctx_manager
+from torch.utils.checkpoint import detach_variable
+
+# from megatron.core.parallel_state import (
+#     get_expert_model_parallel_rank,
+#     get_expert_tensor_parallel_rank,
+#     get_tensor_model_parallel_rank,
+# )
+from megatron.core.utils import is_te_min_version, safely_set_viewless_tensor_data
+
+from megatron.core.tensor_parallel.utils import gather_split_1d_tensor, split_tensor_into_1d_equal_chunks
+
+
+from megatron.core.tensor_parallel.random import (CheckpointFunction, get_cuda_rng_tracker,
+                                                   _set_cuda_rng_state)
+
+    
+# HACK(huang.huang): recompute-variance for [somefunc+fa] and [somefunc+linear], 
+# which can save a forward for fa/linear when backward recompute 
+# 2025.4.2: support list of linear as last_function, and args "mid_function" to support complex situations
+class IdentityTupleOp(torch.nn.Module):
+    """
+    This is a placeholder for IdentityTupleOp(*args) -> args,
+    """
+
+    def __init__(self,):
+        super().__init__()
+
+    def forward(self, *args):
+        return args
+
+
+class CheckpointFunctionVirance(CheckpointFunction):
+    """Checkpoint Function
+
+    This function is adapted from torch.utils.checkpoint with two main changes:
+    1) torch.cuda.set_rng_state is replaced with `_set_cuda_rng_state`
+    2) the states in the model parallel tracker are also properly tracked/set/reset.
+    """
+
+    # pylint: disable=missing-function-docstring
+    @staticmethod
+    def forward(ctx, run_function, last_function, mid_function, distribute_saved_activations, *args):
+        """Forward pass."""
+        if not isinstance(last_function, tuple):
+            last_function = (last_function, )
+        mid_function = tuple(IdentityTupleOp() for _ in last_function) if mid_function is None else mid_function       
+        ctx.run_function = run_function
+        ctx.last_function = last_function 
+        ctx.mid_function = mid_function
+        ctx.distribute_saved_activations = distribute_saved_activations
+
+        # Copy the rng states.
+        ctx.fwd_cpu_rng_state = torch.get_rng_state()
+        ctx.fwd_cuda_rng_state = torch.cuda.get_rng_state()
+        ctx.fwd_cuda_rng_state_tracker = get_cuda_rng_tracker().get_states()
+
+        with torch.no_grad():
+            outputs = run_function(*args)
+            outputs = outputs if isinstance(outputs, tuple) else (outputs, )
+            total_outputs = []
+            for i, func in enumerate(last_function):
+                outputs_f = mid_function[i](*outputs)
+                outputs_f = outputs_f if isinstance(outputs_f, tuple) else (outputs_f, )
+                outputs_f = func(*outputs_f)
+                total_outputs.append(outputs_f)
+            if len(total_outputs)==1:
+                #maintain original behavior when only one last_function 
+                total_outputs=total_outputs[0] 
+            else:
+                flat_outputs = []
+                for outputs_f in total_outputs:
+                    if isinstance(outputs_f, tuple):
+                        #Manually remove bias_out which is 'None', and assign 'None' to grad-bias in the corresponding backward direction
+                        outputs_f = tuple([x for x in outputs_f if x is not None])         
+                    flat_outputs.append(outputs_f)   
+                total_outputs = flat_outputs
+                #The reentrant version does not consider tensors in nested structures (e.g., custom objects, lists, dicts, etc) 
+                # as participating in autograd, while the non-reentrant version does
+                total_outputs = sum( [x if isinstance(x, tuple) else (x,) for x in total_outputs ], tuple()) 
+        # Divide hidden states across model parallel group and only keep
+        # the chunk corresponding to the current rank.
+        if distribute_saved_activations:
+            ctx.input_0_shape = args[0].data.shape
+            safely_set_viewless_tensor_data(
+                args[0], split_tensor_into_1d_equal_chunks(args[0].data, new_buffer=True)
+            )
+
+        # Store everything.
+        ctx.inputs = [arg if not torch.is_tensor(arg) else None for arg in args]
+        tensor_inputs = [arg if torch.is_tensor(arg) else None for arg in args]
+        ctx.save_for_backward(*tensor_inputs)
+
+        return total_outputs
+
+    # pylint: disable=missing-function-docstring
+    @staticmethod
+    def backward(ctx, *args):
+        """Backward pass."""
+        if not torch.autograd._is_checkpoint_valid():
+            raise RuntimeError(
+                "Checkpointing is not compatible with .grad(), "
+                "please use .backward() if possible"
+            )
+        # inputs = ctx.saved_tensors
+        inputs = tuple(
+            t if t is not None else arg for (t, arg) in zip(ctx.saved_tensors, ctx.inputs)
+        )
+        if ctx.distribute_saved_activations:
+            safely_set_viewless_tensor_data(
+                inputs[0], gather_split_1d_tensor(inputs[0].data).view(ctx.input_0_shape)
+            )
+
+        # Store the current states.
+        bwd_cpu_rng_state = torch.get_rng_state()
+        bwd_cuda_rng_state = torch.cuda.get_rng_state()
+        bwd_cuda_rng_state_tracker = get_cuda_rng_tracker().get_states()
+
+        # Set the states to what it used to be before the forward pass.
+        torch.set_rng_state(ctx.fwd_cpu_rng_state)
+        _set_cuda_rng_state(ctx.fwd_cuda_rng_state)
+        get_cuda_rng_tracker().set_states(ctx.fwd_cuda_rng_state_tracker)
+
+        # Compute the forward pass.
+        detached_inputs = detach_variable(inputs)
+        with torch.enable_grad():
+            outputs = ctx.run_function(*detached_inputs)
+            outputs = outputs if isinstance(outputs, tuple) else (outputs, )
+            total_outputs = []
+            for i,func in enumerate(ctx.mid_function):
+                outputs_f = func(*outputs)
+                if isinstance(outputs_f, torch.Tensor):
+                    outputs_f = [outputs_f,]
+                total_outputs.append(outputs_f)
+        # Set the states back to what it was at the start of this function.
+        torch.set_rng_state(bwd_cpu_rng_state)
+        _set_cuda_rng_state(bwd_cuda_rng_state)
+        get_cuda_rng_tracker().set_states(bwd_cuda_rng_state_tracker)
+
+
+        total_grad_input = []
+        for i,func in enumerate(ctx.last_function):
+            if isinstance(func, Identity):
+                grad_input_f = args[i]
+            else:
+                # Assign 'None' to grad_bias to correspond to the operation of removing 'none' during forward
+                grad_out_bias = args[i] if isinstance(args[i], tuple) else (args[i], None)
+                grad_input_f = func.backward_custom(*total_outputs[i], *grad_out_bias)
+            if isinstance(grad_input_f, torch.Tensor):
+                grad_input_f = (grad_input_f,)
+            total_grad_input.append(grad_input_f)
+
+        total_outputs_with_grad = []
+        total_args_with_grad = []
+        for j, outputs in enumerate(total_outputs):
+            outputs_with_grad = []
+            args_with_grad = []
+            for i, output in enumerate(outputs):
+                if torch.is_tensor(output) and output.requires_grad:
+                    outputs_with_grad.append(output)
+                    args_with_grad.append(total_grad_input[j][i])    
+            total_outputs_with_grad += outputs_with_grad
+            total_args_with_grad += args_with_grad
+        torch.autograd.backward(total_outputs_with_grad, total_args_with_grad)
+        grads = tuple(inp.grad if isinstance(inp, torch.Tensor) else inp for inp in detached_inputs)
+        return (None, None, None, None) + grads
+    
+def checkpointVirance(run_function, last_function, distribute_saved_activations, *args, mid_function=None):
+    """Checkpoint a model or part of the model.
+    This has been directly copied from torch.utils.checkpoint."""
+    return CheckpointFunctionVirance.apply(run_function, last_function, mid_function, distribute_saved_activations, *args)
+
+
+
+class CheckpointFunctionViranceAttention(CheckpointFunction):
+    """Checkpoint Function
+
+    This function is adapted from torch.utils.checkpoint with two main changes:
+    1) torch.cuda.set_rng_state is replaced with `_set_cuda_rng_state`
+    2) the states in the model parallel tracker are also properly tracked/set/reset.
+    """
+
+    # pylint: disable=missing-function-docstring
+    @staticmethod
+    def forward(ctx, run_function, last_function, distribute_saved_activations, *args):
+        """Forward pass."""
+        ctx.run_function = run_function
+        ctx.last_function = last_function 
+        ctx.distribute_saved_activations = distribute_saved_activations
+
+        # Copy the rng states.
+        ctx.fwd_cpu_rng_state = torch.get_rng_state()
+        ctx.fwd_cuda_rng_state = torch.cuda.get_rng_state()
+        ctx.fwd_cuda_rng_state_tracker = get_cuda_rng_tracker().get_states()
+
+        with torch.no_grad():
+            outputs = run_function(*args)
+            outputs = last_function.forward_before_fa(*outputs[:4], **outputs[4])
+            outputs = last_function.forward_fa(*outputs) 
+            #outputs: Union[output=Union[Tensor output, Tensor logsumexp, Tensor dropout_mask], 
+            # qkv_format, indices_q, batch_size, attn_mask_type, max_seqlen_q, q_shape, v_shape]
+            core_attn_out = last_function.forward_after_fa(*outputs)
+        # Divide hidden states across model parallel group and only keep
+        # the chunk corresponding to the current rank.
+        if distribute_saved_activations:
+            ctx.input_0_shape = args[0].data.shape
+            safely_set_viewless_tensor_data(
+                args[0], split_tensor_into_1d_equal_chunks(args[0].data, new_buffer=True)
+            )
+
+        # Store everything.
+        ctx.save_for_backward(*args, *outputs[0])
+        (ctx.qkv_format, ctx.indices_q, ctx.batch_size, 
+         ctx.attn_mask_type, ctx.max_seqlen_q, ctx.q_shape, ctx.v_shape) = outputs[1:]
+
+        return core_attn_out
+
+# pylint: disable=missing-function-docstring
+    @staticmethod
+    def backward(ctx, *args):
+        """Backward pass."""
+        if not torch.autograd._is_checkpoint_valid():
+            raise RuntimeError(
+                "Checkpointing is not compatible with .grad(), "
+                "please use .backward() if possible"
+            )
+        inputs = ctx.saved_tensors
+        fa_output = inputs[-3:]
+        inputs = inputs[:-3]
+        if ctx.distribute_saved_activations:
+            safely_set_viewless_tensor_data(
+                inputs[0], gather_split_1d_tensor(inputs[0].data).view(ctx.input_0_shape)
+            )
+
+        # Store the current states.
+        bwd_cpu_rng_state = torch.get_rng_state()
+        bwd_cuda_rng_state = torch.cuda.get_rng_state()
+        bwd_cuda_rng_state_tracker = get_cuda_rng_tracker().get_states()
+
+        # Set the states to what it used to be before the forward pass.
+        torch.set_rng_state(ctx.fwd_cpu_rng_state)
+        _set_cuda_rng_state(ctx.fwd_cuda_rng_state)
+        get_cuda_rng_tracker().set_states(ctx.fwd_cuda_rng_state_tracker)
+
+        # Compute the forward pass.
+        detached_inputs = detach_variable(inputs)
+        detached_ori_outputs = detach_variable(fa_output)
+        detached_ori_outputs[0].requires_grad = True #only 0 element need grad in output of FA: [Tensor output, Tensor logsumexp, Tensor dropout_mask]
+        # ori_outputs is not requires_grad
+        with torch.enable_grad():
+            outputs_before_fa = ctx.run_function(*detached_inputs) 
+            # outputs_before_fa: query, key, value, attention_mask, {"attn_mask_type":attn_mask_type, "attention_bias":attention_bias, "packed_seq_params":packed_seq_params}
+            outputs_before_fa = ctx.last_function.forward_before_fa(*outputs_before_fa[:4], **outputs_before_fa[4])
+            outputs = ctx.last_function.forward_after_fa(detached_ori_outputs, 
+                                                         ctx.qkv_format, ctx.indices_q,  
+                                                         ctx.batch_size, ctx.attn_mask_type, 
+                                                         ctx.max_seqlen_q, ctx.q_shape, ctx.v_shape)
+        # Set the states back to what it was at the start of this function.
+        torch.set_rng_state(bwd_cpu_rng_state)
+        _set_cuda_rng_state(bwd_cuda_rng_state)
+        get_cuda_rng_tracker().set_states(bwd_cuda_rng_state_tracker)
+
+        
+        if isinstance(outputs, torch.Tensor):
+            outputs = (outputs,)
+        # filter out non tensor outputs for backward pass
+        outputs, args = zip(*filter(lambda x: torch.is_tensor(x[0]), zip(outputs, args)))
+        torch.autograd.backward(outputs, args)
+        
+        #costum bwd fa
+        with torch.backends.cuda.sdp_kernel(enable_flash=True, enable_math=False):
+            with torch.no_grad():
+                grad_input = torch.ops.aten._scaled_dot_product_attention_flash_musa_backward(
+                    # ori_outputs[0][0].grad,
+                    detached_ori_outputs[0].grad,
+                    *outputs_before_fa[:3], #q, k, v
+                    *detached_ori_outputs, #(Tensor output, Tensor logsumexp, Tensor dropout_mask)
+                    is_causal="causal" in ctx.attn_mask_type, #causal same as fwd
+                ) 
+        
+        #bwd before fa: for qkv
+        torch.autograd.backward(outputs_before_fa[:3], grad_input)
+        grads = tuple(inp.grad if isinstance(inp, torch.Tensor) else inp for inp in detached_inputs)
+        return (None, None, None) + grads
+    
+
+def checkpointViranceAttention(run_function, last_function, distribute_saved_activations, *args):
+    """Checkpoint a model or part of the model.
+    This has been directly copied from torch.utils.checkpoint."""
+    return CheckpointFunctionViranceAttention.apply(run_function, last_function, distribute_saved_activations, *args)
+# HACK(huang.huang)
+
+
+from transformer_engine.musa.pytorch.utils import add_attr
+from megatron.core import tensor_parallel
+add_attr(tensor_parallel, 'checkpointVirance', checkpointVirance)
+add_attr(tensor_parallel, 'checkpointViranceAttention', checkpointViranceAttention)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/schedules.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/schedules.py
new file mode 100644
index 00000000..65c904e6
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/schedules.py
@@ -0,0 +1,256 @@
+# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
+
+import contextlib
+from typing import Iterator, List, Union
+
+import torch
+
+from megatron.core import parallel_state
+from megatron.core.enums import ModelType
+from megatron.core.transformer.moe.router import MoEAuxLossAutoScaler
+from megatron.core.utils import (
+    get_attr_wrapped_model,
+    get_model_type,
+)
+from transformer_engine.pytorch.fp8 import FP8GlobalStateManager
+from megatron.core.pipeline_parallel.schedules import set_current_microbatch, custom_backward
+
+# Types
+Shape = Union[List[int], torch.Size]
+
+
+#HACK(huang.huang): add FP8GlobalStateManager.reduce_and_update_fp8_tensors to the end of forward and backward,
+# to avoid redundant calls of reduce among dp
+def forward_step(
+    forward_step_func,
+    data_iterator,
+    model,
+    num_microbatches,
+    input_tensor,
+    forward_data_store,
+    config,
+    collect_non_loss_data=False,
+    checkpoint_activations_microbatch=None,
+    is_first_microbatch=False,
+    current_microbatch=None,
+    encoder_decoder_xattn=False,
+):
+    """Forward step for passed-in model.
+
+    If it is the first stage, the input tensor is obtained from the data_iterator.
+    Otherwise, the passed-in input_tensor is used.
+
+    Args:
+        forward_step_func (callable):
+            The forward step function for the model that takes the
+            data iterator as the first argument, and model as the second.
+            This user's forward step is expected to output a tuple of two elements:
+
+                1. The output object from the forward step. This output object needs to be a
+                    tensor or some kind of collection of tensors. The only hard requirement
+                    for this object is that it needs to be acceptible as input into the second
+                    function.
+                2. A function to reduce (optionally) the output from the forward step. This
+                    could be a reduction over the loss from the model, it could be a function that
+                    grabs the output from the model and reformats, it could be a function that just
+                    passes through the model output. This function must have one of the following
+                    patterns, and depending on the pattern different things happen internally:
+
+                        a. A tuple of reduced loss and some other data. Note that in this case
+                            the first argument is divided by the number of global microbatches,
+                            assuming it is a loss, so that the loss is stable as a function of
+                            the number of devices the step is split across.
+                        b. A triple of reduced loss, number of tokens, and some other data. This
+                            is similar to case (a), but the loss is further averaged across the
+                            number of tokens in the batch. If the user is not already averaging
+                            across the number of tokens, this pattern is useful to use.
+                        c. Any arbitrary data the user wants (eg a dictionary of tensors, a list
+                            of tensors, etc in the case of inference). To trigger case 3 you need
+                            to specify `collect_non_loss_data=True` and you may also want to
+                            specify `forward_only=True` in the call to the parent forward_backward
+                            function.
+        data_iterator (iterator):
+            The data iterator.
+        model (nn.Module):
+            The model to perform the forward step on.
+        num_microbatches (int):
+            The number of microbatches.
+        input_tensor (Tensor or list[Tensor]):
+            The input tensor(s) for the forward step.
+        forward_data_store (list):
+            The list to store the forward data. If you go down path 2.a or
+            2.b for the return of your forward reduction function then this will store only the
+            final dimension of the output, for example the metadata output by the loss function.
+            If you go down the path of 2.c then this will store the entire output of the forward
+            reduction function applied to the model output.
+        config (object):
+            The configuration object.
+        collect_non_loss_data (bool, optional):
+            Whether to collect non-loss data. Defaults to False.
+            This is the path to use if you want to collect arbitrary output from the model forward,
+            such as with inference use cases. Defaults to False.
+        checkpoint_activations_microbatch (int, optional):
+            The microbatch to checkpoint activations.
+            Defaults to None.
+        is_first_microbatch (bool, optional):
+            Whether it is the first microbatch. Defaults to False.
+        current_microbatch (int, optional):
+            The current microbatch. Defaults to None.
+
+    Returns:
+        Tensor or list[Tensor]: The output object(s) from the forward step.
+        Tensor: The number of tokens.
+    """
+    if config.timers is not None:
+        config.timers('forward-compute', log_level=2).start()
+
+    if is_first_microbatch and hasattr(model, 'set_is_first_microbatch'):
+        model.set_is_first_microbatch()
+    if current_microbatch is not None:
+        set_current_microbatch(model, current_microbatch)
+
+    unwrap_output_tensor = False
+    if not isinstance(input_tensor, list):
+        input_tensor = [input_tensor]
+        unwrap_output_tensor = True
+
+    set_input_tensor = get_attr_wrapped_model(model, "set_input_tensor")
+    set_input_tensor(input_tensor)
+
+    if config.enable_autocast:
+        context_manager = torch.autocast("cuda", dtype=config.autocast_dtype)
+    else:
+        context_manager = contextlib.nullcontext()
+    with context_manager:
+        if checkpoint_activations_microbatch is None:
+            output_tensor, loss_func = forward_step_func(data_iterator, model)
+        else:
+            output_tensor, loss_func = forward_step_func(
+                data_iterator, model, checkpoint_activations_microbatch
+            )
+
+    num_tokens = torch.tensor(0, dtype=torch.int)
+    if parallel_state.is_pipeline_last_stage():
+        if not collect_non_loss_data:
+            outputs = loss_func(output_tensor)
+            if len(outputs) == 3:
+                output_tensor, num_tokens, loss_reduced = outputs
+                if not config.calculate_per_token_loss:
+                    output_tensor /= num_tokens
+                    output_tensor /= num_microbatches
+            else:
+                # preserve legacy loss averaging behavior (ie, over the number of microbatches)
+                assert len(outputs) == 2
+                output_tensor, loss_reduced = outputs
+                output_tensor /= num_microbatches
+            forward_data_store.append(loss_reduced)
+        else:
+            data = loss_func(output_tensor, non_loss_data=True)
+            forward_data_store.append(data)
+    FP8GlobalStateManager.reduce_and_update_fp8_tensors(forward=True, skip=False)
+
+    if config.timers is not None:
+        config.timers('forward-compute').stop()
+
+    # Set the loss scale for the auxiliary loss of the MoE layer.
+    # Since we use a trick to do backward on the auxiliary loss, we need to set the scale
+    # explicitly.
+    if hasattr(config, 'num_moe_experts') and config.num_moe_experts is not None:
+        # Calculate the loss scale based on the grad_scale_func if available, else default to 1.
+        loss_scale = (
+            config.grad_scale_func(torch.ones(1, device=output_tensor.device))
+            if config.grad_scale_func is not None
+            else torch.tensor(1.0)
+        )
+        # Set the loss scale
+        MoEAuxLossAutoScaler.set_loss_scale(loss_scale / num_microbatches)
+
+    # If T5 model and in decoder stack, then send encoder_hidden_state
+    # downstream as well.
+    model_type = get_model_type(model)
+    if (
+        model_type == ModelType.encoder_and_decoder
+        and encoder_decoder_xattn
+        and parallel_state.is_inside_decoder()
+    ):
+        return [output_tensor, input_tensor[-1]], num_tokens
+
+    if unwrap_output_tensor:
+        return output_tensor, num_tokens
+    return [output_tensor], num_tokens
+
+
+def backward_step(input_tensor, output_tensor, output_tensor_grad, model_type, config):
+    """Backward step through passed-in output tensor.
+
+    If last stage, output_tensor_grad is None, otherwise gradient of loss
+    with respect to stage's output tensor.
+
+    Returns gradient of loss with respect to input tensor (None if first
+    stage)."""
+
+    # NOTE: This code currently can handle at most one skip connection. It
+    # needs to be modified slightly to support arbitrary numbers of skip
+    # connections.
+
+    if config.timers is not None:
+        config.timers('backward-compute', log_level=2).start()
+
+    # Retain the grad on the input_tensor.
+    unwrap_input_tensor_grad = False
+    if not isinstance(input_tensor, list):
+        input_tensor = [input_tensor]
+        unwrap_input_tensor_grad = True
+    for x in input_tensor:
+        if x is not None:
+            x.retain_grad()
+
+    if not isinstance(output_tensor, list):
+        output_tensor = [output_tensor]
+    if not isinstance(output_tensor_grad, list):
+        output_tensor_grad = [output_tensor_grad]
+
+    # Backward pass.
+    if output_tensor_grad[0] is None and config.grad_scale_func is not None:
+        output_tensor[0] = config.grad_scale_func(output_tensor[0])
+
+    if config.deallocate_pipeline_outputs:
+        custom_backward(output_tensor[0], output_tensor_grad[0])
+    else:
+        torch.autograd.backward(output_tensor[0], grad_tensors=output_tensor_grad[0])
+
+    # Collect the grad of the input_tensor.
+    input_tensor_grad = [None]
+    if input_tensor is not None:
+        input_tensor_grad = []
+        for x in input_tensor:
+            if x is None:
+                input_tensor_grad.append(None)
+            else:
+                input_tensor_grad.append(x.grad)
+
+    # Handle single skip connection if it exists (encoder_hidden_state in
+    # model with encoder and decoder).
+    if (
+        parallel_state.get_pipeline_model_parallel_world_size() > 1
+        and model_type == ModelType.encoder_and_decoder
+        and len(output_tensor_grad) > 1  # excludes models that lack a skip connection.
+    ):
+        if output_tensor_grad[1] is not None:
+            assert input_tensor_grad[-1] is not None
+            input_tensor_grad[-1].add_(output_tensor_grad[1])
+    if unwrap_input_tensor_grad:
+        input_tensor_grad = input_tensor_grad[0]
+
+    FP8GlobalStateManager.reduce_and_update_fp8_tensors(forward=False, skip=False)
+    if config.timers is not None:
+        config.timers('backward-compute').stop()
+
+    return input_tensor_grad
+#HACK(huang.huang)
+
+
+from transformer_engine.musa.pytorch.utils import replace_attr
+from megatron.core.pipeline_parallel import schedules
+replace_attr(schedules, "forward_step", forward_step)
+replace_attr(schedules, "backward_step", backward_step)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_engine.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_engine.py
new file mode 100644
index 00000000..934d6f39
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_engine.py
@@ -0,0 +1,245 @@
+# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
+
+import dataclasses
+import os
+from typing import Any, Callable, Optional
+
+import torch
+from packaging.version import Version as PkgVersion
+from torch import Tensor
+
+from megatron.core.packed_seq_params import PackedSeqParams
+from megatron.core.parallel_state import (
+    get_context_parallel_global_ranks,
+    get_context_parallel_group,
+    get_hierarchical_context_parallel_groups,
+    get_tensor_model_parallel_group,
+)
+from megatron.core.tensor_parallel import get_cuda_rng_tracker, get_expert_parallel_rng_tracker_name
+from megatron.core.transformer.enums import AttnMaskType
+from megatron.core.transformer.transformer_config import TransformerConfig
+from megatron.core.utils import get_te_version, is_te_min_version
+
+from megatron.core.extensions.transformer_engine import TEDotProductAttention
+
+
+# HACK(huang.huang): recompute-variance for fa: modify __init__ for TEDotProductAttention, 
+# just add a attr "recompute_variance" when call super.__init__,
+# add functions "forward_after_fa", "forward_before_fa"
+def TEDotProductAttention__init__(
+    self,
+    config: TransformerConfig,
+    layer_number: int,
+    attn_mask_type: AttnMaskType,
+    attention_type: str,
+    attention_dropout: Optional[float] = None,
+    softmax_scale: Optional[float] = None,
+    k_channels: Optional[int] = None,
+    v_channels: Optional[int] = None,
+    cp_comm_type: str = "p2p",
+):
+    self.config = config
+    self.te_forward_mask_type = False
+    self.qkv_format: str = 'sbhd'
+
+    if self.config.apply_query_key_layer_scaling != bool(
+        int(os.getenv('NVTE_APPLY_QK_LAYER_SCALING', '0'))
+    ):
+        raise ValueError(
+            f"apply_query_key_layer_scaling is {self.config.apply_query_key_layer_scaling} "
+            f"but environment variable NVTE_APPLY_QK_LAYER_SCALING is "
+            f"{os.getenv('NVTE_APPLY_QK_LAYER_SCALING')}. Transformer Engine does not support "
+            f"setting query key layer scaling via argument, so these two must match."
+        )
+
+    extra_kwargs: dict[str, Any] = {}
+    if is_te_min_version("0.11.0"):
+        extra_kwargs["num_gqa_groups"] = self.config.num_query_groups
+    elif self.config.num_query_groups != self.config.num_attention_heads:
+        raise ValueError(
+            f"Transformer Engine v{get_te_version()} does not support Grouped Query Attention, "
+            f"use a newer version of Transformer Engine. "
+            f"(num_query_groups ({self.config.num_query_groups}) != "
+            f"num_attention_heads ({self.config.num_attention_heads}))"
+        )
+
+    if is_te_min_version("0.10.0"):
+        extra_kwargs["attention_type"] = attention_type
+        # older version don't need attention_type
+
+    if is_te_min_version("0.12.0", check_equality=False):
+        self.te_forward_mask_type = True
+
+    # This check is important as CP config can be disabled while having a valid CP group
+    # Example - Disabling CP for encoder while a valid CP group exists for decoder
+    if self.config.context_parallel_size > 1:
+        assert is_te_min_version(
+            "1.0.0"
+        ), "Only Transformer-Engine version >= 1.0.0 supports context parallelism!"
+        if getattr(TEDotProductAttention, "cp_stream") is None:
+            TEDotProductAttention.cp_stream = torch.cuda.Stream()
+        extra_kwargs["cp_group"] = get_context_parallel_group(check_initialized=False)
+        extra_kwargs["cp_global_ranks"] = get_context_parallel_global_ranks(
+            check_initialized=False
+        )
+        extra_kwargs["cp_stream"] = TEDotProductAttention.cp_stream
+        if is_te_min_version("1.10.0"):
+            if cp_comm_type is None:
+                extra_kwargs["cp_comm_type"] = "p2p"
+            elif cp_comm_type == "a2a+p2p":
+                assert is_te_min_version("1.12.0"), (
+                    f"Transformer-Engine v{get_te_version()} must be >= 1.12.0 to support"
+                    "hierarchical cp commucation."
+                )
+                extra_kwargs["cp_comm_type"] = "a2a+p2p"
+                extra_kwargs["cp_group"] = get_hierarchical_context_parallel_groups(
+                    check_initialized=False
+                )
+            else:
+                extra_kwargs["cp_comm_type"] = cp_comm_type
+
+    if self.config.deterministic_mode:
+        if int(os.getenv("NVTE_ALLOW_NONDETERMINISTIC_ALGO", "1")) != 0:
+            raise RuntimeError(
+                "deterministic_mode is on and we are using DotProductAttention from "
+                "Transformer Engine, but NVTE_ALLOW_NONDETERMINISTIC_ALGO is not 0. "
+                f"Currently set to: {os.getenv('NVTE_ALLOW_NONDETERMINISTIC_ALGO', 'not set')}."
+            )
+
+    if config.window_size is not None:
+        # Check version
+        assert is_te_min_version("1.2.0"), (
+            f"Transformer-Engine v{get_te_version()} must be >= 1.2.0 to support"
+            "sliding window attention."
+        )
+        extra_kwargs['window_size'] = config.window_size
+
+    if is_te_min_version("1.10.0"):
+        # TE 1.10.0 introduces the ability to set the different k and v channels
+        kv_channels = (
+            (k_channels, v_channels)
+            if k_channels is not None and v_channels is not None
+            else self.config.kv_channels
+        )
+        extra_kwargs['softmax_scale'] = softmax_scale
+    else:
+        kv_channels = self.config.kv_channels
+
+    self.kept_packed_seq_params = set(
+        field.name for field in dataclasses.fields(PackedSeqParams)
+    )
+    if get_te_version() < PkgVersion("1.3.0"):
+        # TE 1.3.0 introduces precomputing max_seqlen to remove unnecessary kernels and D2H
+        # copies (#555)
+        # These two arguments did not exist prior to 1.3.0
+        self.kept_packed_seq_params.discard("max_seqlen_q")
+        self.kept_packed_seq_params.discard("max_seqlen_kv")
+
+    if get_te_version() < PkgVersion("1.10.0"):
+        # TE 1.8.0 introduces cu_seqlens_padded which is the cu_seqlens with paddings counted
+        # in each individual sequence in THD format dataset
+        # These two arguments did not exist prior to 1.8.0. Full support added in 1.10.0 (#1012)
+        self.kept_packed_seq_params.discard("cu_seqlens_q_padded")
+        self.kept_packed_seq_params.discard("cu_seqlens_kv_padded")
+
+    super(TEDotProductAttention, self).__init__(
+        num_attention_heads=self.config.num_attention_heads,
+        kv_channels=kv_channels,
+        attention_dropout=(
+            self.config.attention_dropout if attention_dropout is None else attention_dropout
+        ),
+        attn_mask_type=attn_mask_type.name,
+        sequence_parallel=self.config.sequence_parallel,
+        tp_size=self.config.tensor_model_parallel_size,
+        get_rng_state_tracker=(
+            get_cuda_rng_tracker if get_cuda_rng_tracker().is_initialized() else None
+        ),
+        tp_group=get_tensor_model_parallel_group(check_initialized=False),
+        layer_number=layer_number,
+        recompute_variance = self.config.recompute_variance, # MUSA patch: support recompute_variance
+        **extra_kwargs,
+    )
+
+def TEDotProductAttention_forward_before_fa(self,
+    query: Tensor,
+    key: Tensor,
+    value: Tensor,
+    attention_mask: Tensor,
+    attn_mask_type: AttnMaskType,
+    attention_bias: Tensor = None,
+    packed_seq_params: PackedSeqParams = None,):
+
+    packed_seq_kwargs = (
+        {key: getattr(packed_seq_params, key) for key in self.kept_packed_seq_params}
+        if packed_seq_params is not None
+        else {}
+    )
+    # overwrite self.qkv_format depending on self.config.apply_rope_fusion, which can be set
+    # after init
+    if self.config.apply_rope_fusion and is_te_min_version("0.13.0", check_equality=False):
+        self.qkv_format = 'bshd'
+
+    qkv_format = packed_seq_kwargs.get('qkv_format', self.qkv_format)
+
+    # WAR for peak memory usage.
+    # See https://gitlab-master.nvidia.com/ADLR/megatron-lm/-/merge_requests/2388
+    if self.config.apply_rope_fusion and qkv_format == 'bshd':
+        query, key, value = [x.transpose(0, 1).contiguous() for x in (query, key, value)]
+        # In PyTorch, the following two tensors are in fact the same:
+        #   Tensor with shape (1, S, H, D) and stride (S*H*D, H*D, D, 1)
+        #   Tensor with shape (1, S, H, D) and stride (H*D, H*D, D, 1)
+        # Stride for a dimension that is 1 has no meaning, so tensors created two different ways
+        # can have same shape but different strides.
+        # We unify them to the first one to pass the stride check in TE
+        if value.shape == key.shape and value.shape[0] == 1 and value.stride() != key.stride():
+            value = value.as_strided(value.shape, key.stride())
+
+    attention_bias_kwargs = {}
+    if attention_bias is not None:
+        assert is_te_min_version("1.2.0"), (
+            f"Transformer-Engine v{get_te_version()} must be >= 1.2.0 to support"
+            "`attention_bias`."
+        )
+        attention_bias_kwargs = dict(
+            core_attention_bias_type='post_scale_bias', core_attention_bias=attention_bias
+        )
+    if self.te_forward_mask_type:
+        if qkv_format == 'thd' and is_te_min_version("1.7.0"):
+            # thd format uses flash attention with cuDNN kernel which requires is_padding=True,
+            # so the only acceptable mask types are `padding_causal` and `padding`. These do not
+            # necessarily indicate there are padded tokens in the sequence.
+            if attn_mask_type == AttnMaskType.causal:
+                attn_mask_type = AttnMaskType.padding_causal
+            elif attn_mask_type == AttnMaskType.no_mask:
+                attn_mask_type = AttnMaskType.padding
+        output = super(TEDotProductAttention, self).forward_before_fa(
+            query,
+            key,
+            value,
+            attention_mask,
+            attn_mask_type=attn_mask_type.name,
+            **attention_bias_kwargs,
+            **packed_seq_kwargs,
+        )
+    else:
+        output = super(TEDotProductAttention, self).forward_before_fa(
+            query, key, value, attention_mask, **attention_bias_kwargs, **packed_seq_kwargs
+        )
+
+    return output
+
+def TEDotProductAttention_forward_after_fa(self, *args):
+    core_attn_out = super(TEDotProductAttention, self).forward_after_fa(*args)
+
+    if self.config.apply_rope_fusion and self.qkv_format == 'bshd':
+        return core_attn_out.transpose(0, 1)
+    else:
+        return core_attn_out
+# HACK(huang.huang)
+
+
+from transformer_engine.musa.pytorch.utils import replace_attr, add_attr
+
+replace_attr(TEDotProductAttention,"__init__", TEDotProductAttention__init__)
+add_attr(TEDotProductAttention, "forward_before_fa", TEDotProductAttention_forward_before_fa)
+add_attr(TEDotProductAttention, "forward_after_fa", TEDotProductAttention_forward_after_fa)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_layer.py b/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_layer.py
new file mode 100644
index 00000000..c85e0d5a
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/recomupte_variance/transformer_layer.py
@@ -0,0 +1,192 @@
+from megatron.core.utils import make_viewless_tensor
+from megatron.core import parallel_state, tensor_parallel
+
+from transformer_engine.pytorch.distributed import checkpoint, checkpointVirance
+
+# HACK(huang.huang): support mlp_rms_recompute and mla_rms_recompute, 
+# which need to decide to do layernorm in TransformerLayer or inner mlp/mla
+def TransformerLayer_forward(
+    self,
+    hidden_states,
+    attention_mask=None,
+    context=None,
+    context_mask=None,
+    rotary_pos_emb=None,
+    rotary_pos_cos=None,
+    rotary_pos_sin=None,
+    attention_bias=None,
+    inference_params=None,
+    packed_seq_params=None,
+    sequence_len_offset=None,
+):
+    """
+    Perform a forward pass through the transformer layer.
+
+    This method implements the core computation of a transformer layer, including
+    self-attention, cross-attention (if applicable), and feed-forward operations.
+
+    Args:
+        hidden_states (Tensor): Input tensor of shape [s, b, h] where s is sequence length,
+            b is batch size, and h is hidden size.
+        attention_mask (Tensor): Mask tensor for self-attention.
+        context (Tensor, optional): Context tensor for cross-attention.
+        context_mask (Tensor, optional): Mask tensor for cross-attention.
+        rotary_pos_emb (Tensor, optional): Rotary positional embeddings.
+        attention_bias (Tensor, optional): Bias tensor for Q * K.T.
+        inference_params (object, optional): Parameters for inference-time optimizations.
+        packed_seq_params (object, optional): Parameters for packed sequence processing.
+
+    Returns:
+        Tuple[Tensor, Tensor]: A tuple containing:
+            output (Tensor): Transformed hidden states of shape [s, b, h].
+            context (Tensor): Updated context tensor if cross-attention is used,
+            otherwise None.
+    """
+
+    # Residual connection.
+    residual = hidden_states
+    
+    # Optional Input Layer norm
+    #HACK(huang.haung): support mla_rms_recompute
+    if self.config.mla_rms_recompute:
+        assert self.config.attn_recompute, 'mla_rms_recompute only use with attn_recompute now.'
+        def rms_with_down_proj(hidden_states):
+            hidden_states = self.input_layernorm(hidden_states)
+            if self.self_attention.config.q_lora_rank is not None:
+                q_compressed, _ = self.self_attention.linear_q_down_proj(hidden_states)
+            else:
+                q_compressed = hidden_states      
+            kv_combined, _ = self.self_attention.linear_kv_down_proj(hidden_states)
+            return q_compressed, kv_combined
+        input_layernorm_output = None
+        if self.config.fp8:
+            if self.config.recompute_variance == True:
+                linears = (self.self_attention.linear_q_down_proj, self.self_attention.linear_kv_down_proj)
+                q_compressed, kv_combined = checkpointVirance(
+                    self.input_layernorm, 
+                    linears,
+                    hidden_states,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                )
+            else:
+                q_compressed, kv_combined =  checkpoint(
+                    rms_with_down_proj,
+                    hidden_states,
+                    distribute_saved_activations=self.config.distribute_saved_activations,
+                    get_rng_state_tracker=tensor_parallel.random.get_cuda_rng_tracker,
+                    tp_group=parallel_state.get_tensor_model_parallel_group(),
+                )
+        else:
+            if self.config.recompute_variance:
+                assert self.self_attention.config.q_lora_rank is not None, "not support Now" #TODO
+                linears = (self.self_attention.linear_q_down_proj, self.self_attention.linear_kv_down_proj)
+                q_compressed, kv_combined = tensor_parallel.checkpointVirance(
+                    self.input_layernorm, 
+                    linears,
+                    False, 
+                    hidden_states)
+            else:
+                q_compressed, kv_combined =  tensor_parallel.checkpoint(
+                    rms_with_down_proj, False, hidden_states)
+
+        attention_output_with_bias = self.self_attention(
+            input_layernorm_output,
+            attention_mask=attention_mask,
+            inference_params=inference_params,
+            rotary_pos_emb=rotary_pos_emb,
+            rotary_pos_cos=rotary_pos_cos,
+            rotary_pos_sin=rotary_pos_sin,
+            attention_bias=attention_bias,
+            packed_seq_params=packed_seq_params,
+            sequence_len_offset=sequence_len_offset,
+            q_compressed=q_compressed,
+            kv_combined=kv_combined,
+        )
+
+    else: #maintain original implement, to support non MLA attention
+        input_layernorm_output = self.input_layernorm(hidden_states)
+        # Self attention.
+        attention_output_with_bias = self.self_attention(
+            input_layernorm_output,
+            attention_mask=attention_mask,
+            inference_params=inference_params,
+            rotary_pos_emb=rotary_pos_emb,
+            rotary_pos_cos=rotary_pos_cos,
+            rotary_pos_sin=rotary_pos_sin,
+            attention_bias=attention_bias,
+            packed_seq_params=packed_seq_params,
+            sequence_len_offset=sequence_len_offset,
+        )       
+    ## HACK(huang.haung)
+
+    # TODO: could we move `bias_dropout_add_exec_handler` itself
+    # inside the module provided in the `bias_dropout_add_spec` module?
+    with self.bias_dropout_add_exec_handler():
+        hidden_states = self.self_attn_bda(self.training, self.config.bias_dropout_fusion)(
+            attention_output_with_bias, residual, self.hidden_dropout
+        )
+
+    # Residual connection.
+    residual = hidden_states
+
+    # Optional Layer norm after self-attention
+    pre_cross_attn_layernorm_output = self.pre_cross_attn_layernorm(hidden_states)
+
+    # Cross attention.
+    attention_output_with_bias = self.cross_attention(
+        pre_cross_attn_layernorm_output,
+        attention_mask=context_mask,
+        key_value_states=context,
+        inference_params=inference_params,
+    )
+
+    if isinstance(attention_output_with_bias, dict) and "context" in attention_output_with_bias:
+        context = attention_output_with_bias["context"]
+
+    # TODO: could we move `bias_dropout_add_exec_handler` itself
+    # inside the module provided in the `bias_dropout_add_spec` module?
+    with self.bias_dropout_add_exec_handler():
+        hidden_states = self.cross_attn_bda(self.training, self.config.bias_dropout_fusion)(
+            attention_output_with_bias, residual, self.hidden_dropout
+        )
+
+    # Residual connection.
+    residual = hidden_states
+
+    # Optional Layer norm post the cross-attention.
+    #HACK(huang.haung): support mlp_rms_recompute
+    if self.config.mlp_rms_recompute:
+        pre_mlp_layernorm_output = None
+        mlp_output_with_bias = self.mlp(hidden_states, self.pre_mlp_layernorm)
+    else:
+        pre_mlp_layernorm_output = self.pre_mlp_layernorm(hidden_states)
+        mlp_output_with_bias = self.mlp(pre_mlp_layernorm_output)
+    ## HACK(huang.haung)
+    # TODO: could we move `bias_dropout_add_exec_handler` itself
+    # inside the module provided in the `bias_dropout_add_spec` module?
+    with self.bias_dropout_add_exec_handler():
+        hidden_states = self.mlp_bda(self.training, self.config.bias_dropout_fusion)(
+            mlp_output_with_bias, residual, self.hidden_dropout
+        )
+
+    # Jit compiled function creates 'view' tensor. This tensor
+    # potentially gets saved in the MPU checkpoint function context,
+    # which rejects view tensors. While making a viewless tensor here
+    # won't result in memory savings (like the data loader, or
+    # p2p_communication), it serves to document the origin of this
+    # 'view' tensor.
+    output = make_viewless_tensor(
+        inp=hidden_states, requires_grad=hidden_states.requires_grad, keep_graph=True
+    )
+
+    # CUDA graph requires returned values to be Tensors
+    if self.config.external_cuda_graph and self.training:
+        return output
+    return output, context
+## HACK(huang.huang)
+
+from transformer_engine.musa.pytorch.utils import replace_attr
+from megatron.core.transformer.transformer_layer import TransformerLayer
+replace_attr(TransformerLayer, "forward", TransformerLayer_forward)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/rotary_pos_embedding.py b/megatron-lm-musa-patch/musa_patch/rotary_pos_embedding.py
new file mode 100644
index 00000000..c0ecb331
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/rotary_pos_embedding.py
@@ -0,0 +1,140 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+from __future__ import annotations
+
+from typing import TYPE_CHECKING, Optional
+
+if TYPE_CHECKING:
+    from megatron.core.transformer.transformer_config import TransformerConfig
+    from megatron.core.transformer.transformer_block import TransformerBlock
+
+import logging
+
+import torch
+import torch_musa
+from torch import Tensor, nn
+
+from megatron.core import parallel_state
+
+logger = logging.getLogger(__name__)
+
+try:
+    from apex.transformer.functional import (
+        fused_apply_rotary_pos_emb,
+        fused_apply_rotary_pos_emb_thd,
+    )
+
+    HAVE_APPLY_ROPE_FUSION = True
+except ImportError:
+    HAVE_APPLY_ROPE_FUSION = False
+
+def _rotate_half(x: Tensor, rotary_interleaved: bool) -> Tensor:
+    """Change sign so the last dimension becomes [-odd, +even]
+
+    Args:
+        x (Tensor): Input tensor
+
+    Returns:
+        Tensor: Tensor rotated half
+    """
+    if not rotary_interleaved:
+        x1, x2 = torch.chunk(x, 2, dim=-1)
+        return torch.cat((-x2, x1), dim=-1)
+    else:
+        x1 = x[:, :, :, ::2]
+        x2 = x[:, :, :, 1::2]
+        x_new = torch.stack((-x2, x1), dim=-1)
+        return x_new.view(x_new.shape[0], x_new.shape[1], x_new.shape[2], -1)
+    
+def apply_rotary_pos_emb_bshd(t: Tensor, freqs: Tensor, rotary_interleaved: bool = False) -> Tensor:
+    """Apply rotary positional embedding to input tensor T.
+
+    check https://kexue.fm/archives/8265 for detailed formulas
+
+    Args:
+        t (Tensor): Input tensor T is of shape [seq_length, ... , dim]
+        freqs (Tensor): Rotary Positional embedding tensor freq is of shape [seq_length, ..., dim]
+
+    Returns:
+        Tensor: The input tensor after applying RoPE
+    """
+    rot_dim = freqs.shape[-1]
+
+    # ideally t_pass is empty so rotary pos embedding is applied to all tensor t
+    t, t_pass = t[..., :rot_dim], t[..., rot_dim:]
+
+    # first part is cosine component
+    # second part is sine component, need to change signs with _rotate_half method
+    cos_ = torch.cos(freqs).to(t.dtype)
+    sin_ = torch.sin(freqs).to(t.dtype)
+
+    t = (t * cos_) + (_rotate_half(t, rotary_interleaved) * sin_)
+    return torch.cat((t, t_pass), dim=-1)
+
+
+def apply_rotary_pos_emb_thd(
+    t: Tensor, cu_seqlens: Tensor, freqs: Tensor, rotary_interleaved: bool = False
+) -> Tensor:
+    """A baseline implementation of applying RoPE for `thd` format.
+
+    Args:
+        t (Tensor): Input tensor T is of shape [t, h, d]
+        cu_seqlens(Tensor):  Cumulative sum of sequence lengths in a batch for `t`,
+        with shape [b + 1] and dtype torch.int32.
+        freqs (Tensor): Rotary Positional embedding tensor freq is of shape [max_s, 1, 1, d]
+
+    Returns:
+        Tensor: Shape [t, h, d]. The input tensor after applying RoPE.
+    """
+
+    seqlens = (cu_seqlens[1:] - cu_seqlens[:-1]).tolist()
+    return torch.cat(
+        [
+            apply_rotary_pos_emb_bshd(x.unsqueeze(1), freqs[: x.size(0)])
+            for x in torch.split(t, seqlens)
+        ]
+    ).squeeze(1)
+    
+def apply_rotary_pos_emb(
+    t: Tensor, freqs: Tensor, config: TransformerConfig, cu_seqlens: Optional[Tensor] = None, mscale: float = 1.0,
+):
+
+    """
+    Reroute to the appropriate apply_rotary_pos_emb function depending on
+    fused/unfused kernels, or bshd (conventional) / thd (packed seq) format
+    """
+    # assert cu_seqlens is None, "Only support cu_seqlens is None for now!"
+    if config.apply_rope_fusion and not HAVE_APPLY_ROPE_FUSION:
+        # setting apply_rope_fusion in config to False so that subsequent queries to this config also return False
+        config.apply_rope_fusion = False
+        if not getattr(apply_rotary_pos_emb, "printed_fused_warning", False):
+            logger.warning(
+                "Setting apply_rope_fusion to false because its implementation"
+                " is not included in Apex. Try upgrading to the latest version"
+            )
+            apply_rotary_pos_emb.printed_fused_warning = True
+    if config.apply_rope_fusion:
+        if cu_seqlens is None:
+            return torch.rope(t, freqs.squeeze(1).squeeze(1), rotary_interleaved=False, batch_first=False, multi_latent_attention=True)
+            # return fused_apply_rotary_pos_emb(t, freqs, transpose_output_memory=True)
+        else:
+            return fused_apply_rotary_pos_emb_thd(t, cu_seqlens, freqs)
+    else:
+        if cu_seqlens is None:
+            return apply_rotary_pos_emb_bshd(t, freqs, rotary_interleaved=config.rotary_interleaved)
+        else:
+            return apply_rotary_pos_emb_thd(
+                t, cu_seqlens, freqs, rotary_interleaved=config.rotary_interleaved
+            )
+            
+# import megatron.core.models.common.embeddings.rotary_pos_embedding
+# megatron.core.models.common.embeddings.rotary_pos_embedding.apply_rotary_pos_emb = apply_rotary_pos_emb
+# import megatron.core.transformer.attention
+# megatron.core.transformer.attention.apply_rotary_pos_emb = apply_rotary_pos_emb
+
+import sys
+for k in sys.modules:
+    if k.startswith('megatron.core'):
+        for target in ['apply_rotary_pos_emb']:
+            if getattr(sys.modules[k], target, None):
+                setattr(sys.modules[k], target, apply_rotary_pos_emb)
diff --git a/megatron-lm-musa-patch/musa_patch/router.py b/megatron-lm-musa-patch/musa_patch/router.py
new file mode 100644
index 00000000..59ef35c4
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/router.py
@@ -0,0 +1,55 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+from functools import partial
+import torch
+
+from .moe_utils import (
+    sequence_load_balancing_loss_func,
+    topk_softmax_with_capacity,
+)
+
+def seq_aux_loss_load_balancing(self, logits: torch.Tensor, bsz: int, seq_length: int):
+    """Apply loss-based load balancing to the logits tensor."""
+
+    probs, routing_map, tokens_per_expert = topk_softmax_with_capacity(
+            logits,
+            self.topk,
+            capacity_factor=self.config.moe_expert_capacity_factor,
+            pad_to_capacity=self.config.moe_pad_expert_input_to_capacity,
+            drop_policy=self.config.moe_token_drop_policy,
+            use_pre_softmax=self.config.moe_router_pre_softmax,
+            num_groups=self.config.moe_router_num_groups,
+            group_topk=self.config.moe_router_group_topk,
+            scaling_factor=self.config.moe_router_topk_scaling_factor,
+            deterministic_mode=self.config.deterministic_mode,
+            score_function=self.score_function,
+            expert_bias=self.expert_bias,
+            device_level_capacity=self.config.moe_device_level_capacity,
+        )
+
+    if self.training:
+        if self.score_function == "sigmoid":
+            scores = torch.sigmoid(logits)
+        else: 
+            scores = torch.softmax(logits, dim=-1, dtype=torch.float32)
+        aux_loss_func = partial(
+            sequence_load_balancing_loss_func,
+            probs=scores,
+            routing_map=routing_map,
+            batch_size=bsz,
+            seq_length=seq_length,
+            topk=self.topk,
+            moe_router_topk_limited_devices=self.config.moe_router_group_topk,
+            moe_device_level_aux_loss_coeff=self.config.moe_device_level_aux_loss_coeff,
+            moe_comm_aux_loss_coeff=self.config.moe_comm_aux_loss_coeff,
+            moe_complementary_seq_aux_loss=self.config.moe_complementary_seq_aux_loss,
+        )
+        probs = self.apply_load_balancing_loss(
+            activation=probs, load_balancing_loss_func=aux_loss_func
+        )
+
+    return probs, routing_map
+
+
+import megatron.core.transformer.moe.router
+megatron.core.transformer.moe.router.TopKRouter.seq_aux_loss_load_balancing = seq_aux_loss_load_balancing
diff --git a/megatron-lm-musa-patch/musa_patch/theoretical_memory_usage.py b/megatron-lm-musa-patch/musa_patch/theoretical_memory_usage.py
new file mode 100644
index 00000000..5f783d5f
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/theoretical_memory_usage.py
@@ -0,0 +1,220 @@
+# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
+
+"""Computes theoretical memory footprint for model training."""
+
+
+import math
+
+NUM_BYTES_IN_MEGABYTE = 1024 * 1024
+
+def compute_weight_and_optimizer_memory(args, verbose=False):
+    # Attention projection size.
+    attn_dim = args.kv_channels
+    kv_projection_size = attn_dim * args.num_attention_heads
+    query_projection_size = attn_dim * args.num_attention_heads
+    ## MLA
+    if args.kv_lora_rank:
+        kv_projection_size = attn_dim * args.num_attention_heads + args.kv_lora_rank
+    if args.q_lora_rank:
+        query_projection_size = attn_dim * args.num_attention_heads + args.q_lora_rank
+
+    output_projection_size = attn_dim * args.num_attention_heads
+    ## Group Query Attention.
+    if args.group_query_attention:
+        kv_projection_size = args.num_query_groups / args.num_attention_heads * kv_projection_size
+    else:
+        attn_size = 1
+    attn_size = query_projection_size + 2 * kv_projection_size + output_projection_size
+    attn_multiplier = attn_size / 2 / args.hidden_size
+
+    # swiglu
+    gated_linear_multiplier = 3 / 2 if args.swiglu else 1
+
+    # MoE or Dense
+    num_experts = 0 if args.num_experts is None else args.num_experts
+    shared_expert_ffn_hidden_size = 0 if args.moe_shared_expert_intermediate_size else args.moe_shared_expert_intermediate_size
+    num_shared_expert = args.moe_shared_expert_intermediate_size // args.moe_ffn_hidden_size
+    num_moe_layer = 0 if args.moe_layer_freq is None else len(args.moe_layer_freq)
+    num_dense_layer = args.num_layers - num_moe_layer
+    mlp_multiplier_dense = num_dense_layer * args.ffn_hidden_size
+    mlp_multiplier_moe =  num_moe_layer * num_experts * args.moe_ffn_hidden_size 
+    mlp_multiplier_shared_expert = num_moe_layer * num_shared_expert * shared_expert_ffn_hidden_size
+    mlp_multiplier = (mlp_multiplier_dense + mlp_multiplier_moe + mlp_multiplier_shared_expert) /args.num_layers/args.hidden_size
+
+    num_parameters_in_transformer_layers = (
+        2
+        * args.num_layers
+        * args.hidden_size
+        * args.hidden_size
+        * (
+            # Attention.
+            attn_multiplier
+            # MLP.
+            # + ((args.ffn_hidden_size / args.hidden_size) * num_experts * gated_linear_multiplier)
+            + mlp_multiplier * gated_linear_multiplier
+            # Router
+            +  num_experts / args.hidden_size * 2
+            # Transformer layernorms.
+            + (2 / args.hidden_size)
+            # Final layernorm.
+            + (1 / (args.num_layers * args.hidden_size))
+        )
+    )
+
+    embedding_size = args.hidden_size * args.padded_vocab_size
+    if args.untie_embeddings_and_output_weights:
+        num_parameters_in_embedding_layers = 2 * embedding_size
+    else:
+        num_parameters_in_embedding_layers = embedding_size
+
+    # TODO; add MTP block and projection
+    num_parameters_in_mtp = 0
+
+    num_total_parameters = num_parameters_in_transformer_layers + num_parameters_in_embedding_layers + num_parameters_in_mtp
+    if verbose:
+        print(
+            f"Number of parameters in transformer layers in billions: "
+            f"{num_parameters_in_transformer_layers / 10**9: .2f}"
+        )
+        print(
+            f"Number of parameters in embedding layers in billions: "
+            f"{num_parameters_in_embedding_layers / 10**9:.2f}"
+        )
+        print(f"Total number of parameters in billions: {num_total_parameters / 10**9:.2f}")
+
+    # Most loaded model shard has (1/pp_size transformer layers + 1 embedding layer) / tp_size.
+    num_parameters_on_most_loaded_model_shard = (
+        (num_parameters_in_transformer_layers / args.pipeline_model_parallel_size) + embedding_size
+    ) / args.tensor_model_parallel_size
+    if args.untie_embeddings_and_output_weights and args.pipeline_model_parallel_size == 1:
+        num_parameters_on_most_loaded_model_shard += (
+            embedding_size / args.tensor_model_parallel_size
+        )
+    if verbose:
+        print(
+            f"Number of parameters in most loaded shard in billions: "
+            f"{num_parameters_on_most_loaded_model_shard / 10**9:.4f}"
+        )
+
+    if args.pipeline_model_parallel_size > 1:
+        # Other shards just have (1/pp_size transformer layers) / tp_size.
+        num_parameters_on_other_model_shards = num_parameters_in_transformer_layers / (
+            args.pipeline_model_parallel_size * args.tensor_model_parallel_size
+        )
+        if verbose:
+            print(
+                f"Number of parameters in other shards in billions: "
+                f"{num_parameters_on_other_model_shards / 10**9:.4f}"
+            )
+
+    num_bytes_per_parameter = (
+        18 if not args.use_distributed_optimizer else 6 + (12 / args.data_parallel_size)
+    )
+    weight_and_optimizer_memory = (
+        num_parameters_on_most_loaded_model_shard * num_bytes_per_parameter
+    )
+
+    return weight_and_optimizer_memory
+
+
+def compute_activation_memory(args, num_microbatches, verbose=False):
+    # Using formula in Table 2 of https://arxiv.org/pdf/2205.05198.pdf.
+    # We are trying to compute the maximum activation footprint, so all calculations in this
+    # function are for the first pipeline stage.
+
+    # TODO: This function needs to take into account query_projection_size potentially being
+    # different from hidden_size.
+
+    # Memory footprint from transformer layer (self-attention and MLP).
+    activation_memory = (args.seq_length * args.micro_batch_size * args.hidden_size) * (
+        18 + (4 * (args.ffn_hidden_size / args.hidden_size))
+    )
+    if verbose:
+        print(
+            f"Activation memory footprint per transformer layer: "
+            f"{activation_memory / NUM_BYTES_IN_MEGABYTE / args.tensor_model_parallel_size:.1f} MB"
+        )
+    activation_memory *= args.num_layers
+
+    # Now add activation memory required for input embeddings, last LayerNorm and output layer.
+
+    # Input to embedding (pp_size microbatches in flight).
+    activation_memory += (
+        8 * args.seq_length * args.micro_batch_size * args.pipeline_model_parallel_size
+    )
+    # Dropout in embedding layer (pp_size microbatches in flight).
+    activation_memory += (
+        args.seq_length
+        * args.micro_batch_size
+        * args.hidden_size
+        * args.pipeline_model_parallel_size
+    )
+
+    # Multiply by interleaved PP memory factor.
+    if args.virtual_pipeline_model_parallel_size is not None:
+        interleaved_schedule_memory_penalty = 1 + (
+            (args.pipeline_model_parallel_size - 1)
+            / (args.pipeline_model_parallel_size * args.virtual_pipeline_model_parallel_size)
+        )
+        in_flight_microbatches = math.ceil(
+            interleaved_schedule_memory_penalty * args.pipeline_model_parallel_size
+        )
+        if verbose:
+            print(
+                f"Memory penalty from interleaved schedule: {interleaved_schedule_memory_penalty:.2f}"
+            )
+            print(f"Number of in-flight microbatches: {in_flight_microbatches}")
+        activation_memory *= interleaved_schedule_memory_penalty
+
+    # If using non-interleaved schedule, number of microbatches in pipeline can be less than pp_size,
+    # so discount accordingly.
+    if args.virtual_pipeline_model_parallel_size is None and args.pipeline_model_parallel_size > 1:
+        if num_microbatches is not None:
+            activation_memory *= min(1, num_microbatches / args.pipeline_model_parallel_size)
+            in_flight_microbatches = min(num_microbatches, args.pipeline_model_parallel_size)
+        else:
+            in_flight_microbatches = args.pipeline_model_parallel_size
+        if verbose:
+            print(f"Number of in-flight microbatches: {in_flight_microbatches}")
+
+    if args.pipeline_model_parallel_size == 1:
+        # Inputs to output layer and CE loss.
+        activation_memory += (
+            args.seq_length
+            * args.micro_batch_size
+            * args.hidden_size
+            * 4
+            * (1 + (args.padded_vocab_size / args.hidden_size))
+        )
+
+    # Activation memory is partitioned by TP size due to tensor and sequence model parallelism.
+    return activation_memory / args.tensor_model_parallel_size
+
+
+def report_theoretical_memory(args, num_microbatches=None, verbose=False):
+    weight_and_optimizer_memory = (
+        compute_weight_and_optimizer_memory(args, verbose=verbose) / NUM_BYTES_IN_MEGABYTE
+    )
+
+    # Formulae here assume sequence parallelism and selective activation recomputation.
+    if not args.sequence_parallel or args.recompute_granularity != 'selective':
+        print(
+            f"Theoretical memory footprints: weight and optimizer={weight_and_optimizer_memory:.2f} MB"
+        )
+        return
+
+    activation_memory = (
+        compute_activation_memory(args, num_microbatches=num_microbatches, verbose=verbose)
+        / NUM_BYTES_IN_MEGABYTE
+    )
+    total_memory = weight_and_optimizer_memory + activation_memory
+
+    print(
+        f"Theoretical memory footprints: weight and optimizer={weight_and_optimizer_memory:.2f} MB, "
+        f"activation={activation_memory:.2f} MB, total={total_memory:.2f} MB\n"
+    )
+
+import megatron.training.theoretical_memory_usage
+megatron.training.theoretical_memory_usage.compute_weight_and_optimizer_memory = compute_weight_and_optimizer_memory
+megatron.training.theoretical_memory_usage.report_theoretical_memory = report_theoretical_memory
+megatron.training.theoretical_memory_usage.compute_activation_memory = compute_activation_memory
diff --git a/megatron-lm-musa-patch/musa_patch/token_dispatcher.py b/megatron-lm-musa-patch/musa_patch/token_dispatcher.py
new file mode 100644
index 00000000..6cf4c06c
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/token_dispatcher.py
@@ -0,0 +1,462 @@
+# Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
+
+from typing import List, Optional, Tuple
+
+import torch
+
+from megatron.core.tensor_parallel import (
+    all_to_all,
+    gather_from_sequence_parallel_region,
+    reduce_scatter_to_sequence_parallel_region,
+)
+from megatron.core.transformer.moe.moe_utils import (
+    get_capacity,
+    permute,
+    sort_chunks_by_idxs,
+    unpermute,
+)
+from megatron.core.transformer.transformer_config import TransformerConfig
+
+
+#HACK(huang.huang):use pin_memory, non_blocking, cuda.stream to optimze D2H
+#class MoEAlltoAllTokenDispatcher:
+#   function update: __init__, preprocess, token_permutation, token_unpermutation
+#       __init__: extra opration after ori_init
+#           a. copy sort_input_by_local_experts and restore_output_by_local_experts to cpu, prevent redunt D2H in each Forward
+#           b. add self.cuda_dtoh_stream to support async copy
+#           c. follow Megatron:main, add cuda_sync_point_priority and cuda_dtoh_point to manage sync point
+#       preprocess:
+#           a. remove D2H such as .cpu() and do it in token_permutation as once
+#           b. use new method to manage sync point
+#           c. don't set self.cuda_sync_point to "before_permutation_1" when not used drop and pad, while it's seems to be unnecessary
+#       token_permutation:
+#           a. do ravel for num_global_tokens_per_local_expert and num_global_tokens_per_local_expert_T before D2H
+#           b. pass numpy to sort_chunks instead call tolist for gpu tensor
+#       token_unpermutation:
+#           a. pass numpy to sort_chunks instead call tolist for gpu tensor
+#
+#   new function: _maybe_update_cuda_sync_point, _ensure_cpu_tensor, _maybe_dtoh_and_synchronize
+#       _maybe_update_cuda_sync_point: update sync_point if this point is reached earlier than current one
+#       _ensure_cpu_tensor: 
+#           a. use pin_memory to alloc cpu tensor, and copy value in gpu tensor to it
+#           b. will be used under cuda_dtoh_stream to prevent block
+#       _maybe_dtoh_and_synchronize:
+#           a. call _ensure_cpu_tensor in dtoh_point, which equals to "before_pemutation1" expert_capacity used
+#           b. in self.cuda_sync_point, do cuda_dtoh_stream.synchronize(), .numpy, tolist where synchronize needs to be done before
+#           .numpy and tolist, otherwise D2H maybe not be finished. 
+def MoEAlltoAllTokenDispatcher___init__(
+    self, num_local_experts: int, local_expert_indices: List[int], config: TransformerConfig
+) -> None:
+    self._orig___init__(num_local_experts, local_expert_indices, config)
+    
+    self.sort_input_by_local_experts = self.sort_input_by_local_experts.cpu().numpy()
+    self.restore_output_by_local_experts = self.restore_output_by_local_experts.cpu().numpy()
+    self.cuda_sync_point_priority = {
+        "before_permutation_1": 0,
+        "before_ep_alltoall": 1,
+        "before_permutation_2": 2,
+        "before_finish": 3,
+        "no_sync": 4,
+    }
+    self.cuda_dtoh_point = "before_permutation_1"
+    self.cuda_dtoh_stream = torch.cuda.Stream()
+
+def MoEAlltoAllTokenDispatcher__maybe_update_cuda_sync_point(self, point: str):
+    """
+    Update the CUDA sync point if the priority of the new point is higher than the current
+    sync point, which means the new point is reached earlier than the current sync point.
+    """
+    if (
+        self.cuda_sync_point_priority[point]
+        < self.cuda_sync_point_priority[self.cuda_sync_point]
+    ):
+        self.cuda_sync_point = point
+
+def MoEAlltoAllTokenDispatcher__ensure_cpu_tensor(self, cpu_attr_name, gpu_tensor):
+    if gpu_tensor is None:
+        return
+    cpu_tensor = getattr(self, cpu_attr_name, None)
+    if cpu_tensor is None:
+        cpu_tensor = torch.empty(
+            gpu_tensor.size(),
+            device="cpu",
+            pin_memory=True,
+            dtype=gpu_tensor.dtype
+        )
+        setattr(self, cpu_attr_name, cpu_tensor)
+    cpu_tensor.copy_(gpu_tensor, non_blocking=True)
+    gpu_tensor.record_stream(torch.cuda.current_stream())
+
+def MoEAlltoAllTokenDispatcher__maybe_dtoh_and_synchronize(
+    self, point: str, tokens_per_expert: torch.Tensor = None,
+    num_global_tokens_per_local_expert: torch.Tensor = None,
+    num_global_tokens_per_local_expert_T: torch.Tensor = None,
+):
+    """
+    Move all possible GPU tensors to CPU and make a synchronization at the expected point.
+    """
+    if not self.drop_and_pad:
+        if point == self.cuda_dtoh_point:
+            # Move all possible GPU tensors to CPU at self.cuda_dtoh_point.
+            on_side_stream = torch.cuda.current_stream() != self.cuda_dtoh_stream
+            if on_side_stream:
+                self.cuda_dtoh_stream.wait_stream(torch.cuda.current_stream())
+            with torch.cuda.stream(self.cuda_dtoh_stream):
+                # TODO: use MemcpyBatchAsync instead.
+                self._ensure_cpu_tensor('tokens_per_expert_cpu', tokens_per_expert)
+                if self.ep_size > 1 or self.tp_size > 1:
+                    self._ensure_cpu_tensor('output_splits_tp_cpu', self.output_splits_tp)
+                    self._ensure_cpu_tensor('input_splits_cpu', self.input_splits)
+                    self._ensure_cpu_tensor('output_splits_cpu', self.output_splits)
+                #NOTE(huang.huang): only fuse-moe-permute need num_out_tokens, but in that case fused-kernel will do D2H itself,
+                # if we want to do this D2H here, then we need to sync stream before permute1, which resulted in D2H not being well overlaped
+                # self._ensure_cpu_tensor('num_out_tokens_cpu', self.num_out_tokens)
+                if self.num_local_experts > 1:
+                    self._ensure_cpu_tensor('num_global_tokens_per_local_expert_cpu', num_global_tokens_per_local_expert)
+                    self._ensure_cpu_tensor('num_global_tokens_per_local_expert_T_cpu', num_global_tokens_per_local_expert_T)
+        
+        if point == self.cuda_sync_point:
+            # Synchronize with the dtoh stream at self.cuda_sync_point.
+            self.cuda_dtoh_stream.synchronize()
+            # Need to do before sync, otherwise copy for value in num_global_tokens_per_local_expert_cpu is not finished
+            # self.num_out_tokens = self.num_out_tokens_cpu.numpy()
+            
+            tokens_per_expert = self.tokens_per_expert_cpu.numpy().copy()
+            # need copy(), because recompute groupedLinear1 save it as msplit, value in ctx will change while next copy gpu data to _cpu
+            # not use tolist, since expert will call tolist again, otherwise we need to modify experts.py
+            
+            if self.ep_size > 1 or self.tp_size > 1:
+                self.output_splits_tp = self.output_splits_tp_cpu.numpy().tolist()
+                self.input_splits = self.input_splits_cpu.numpy().tolist()
+                self.output_splits = self.output_splits_cpu.numpy().tolist()
+            if self.num_local_experts > 1:
+                self.num_global_tokens_per_local_expert = self.num_global_tokens_per_local_expert_cpu.numpy()
+                self.num_global_tokens_per_local_expert_T = self.num_global_tokens_per_local_expert_T_cpu.numpy()
+
+    return tokens_per_expert
+
+def MoEAlltoAllTokenDispatcher_preprocess(self, routing_map: torch.Tensor) -> torch.Tensor:
+    """
+    Preprocess token routing map for AlltoAll communication and token permutation.
+
+    This method computes the number of tokens assigned to each expert based on the routing_map.
+    It also initializes the necessary data structures for AlltoAll communication, such as input
+    and output splits, and the mapping between global tokens and local experts.
+
+    Args:
+        routing_map (torch.Tensor): The mapping of tokens to experts, with shape
+            [num_tokens, num_experts].
+
+    Returns:
+        torch.Tensor: Tensor containing the number of tokens assigned to local expert.
+    """
+    # [num_experts], number of tokens assigned to each expert from the current rank's input.
+    num_local_tokens_per_expert = routing_map.sum(dim=0).long()
+
+    if self.drop_and_pad:
+        # Drop and pad the input to capacity.
+        num_tokens = routing_map.size(0) * self.config.moe_router_topk
+        self.capacity = get_capacity(
+            num_tokens=num_tokens,
+            num_experts=self.num_experts,
+            capacity_factor=self.moe_expert_capacity_factor,
+        )
+        self.num_out_tokens = self.capacity * self.num_experts
+        # [num_local_experts], number of tokens processed by each expert.
+        num_tokens_per_local_expert = torch.full(
+            (self.num_local_experts,),
+            self.capacity * self.tp_size * self.ep_size,
+            dtype=torch.long,
+        )
+        # [tp_size * ep_size, num_local_experts]. Represents the number of tokens sent
+        # to each local expert by all ranks.
+        self.num_global_tokens_per_local_expert = torch.full(
+            (self.num_experts * self.tp_size,),
+            self.capacity,
+            dtype=torch.long,
+            device=self.permute_idx_device,
+        )
+        return num_tokens_per_local_expert
+    elif self.config.moe_expert_capacity_factor is not None:
+        # Drop tokens to capacity, no padding.
+        # A synchronization is needed before the first
+        # permutation to get the `num_out_tokens` CPU value.
+        self.num_out_tokens = num_local_tokens_per_expert.sum()
+        # #TODO(huang.huang): make sure num_out_tokens is not needed for permutation_1 excpet drop_and_pad
+        # self.cuda_sync_point = "before_permutation_1" 
+
+    else:
+        # Dropless
+        self.num_out_tokens = routing_map.size(0) * self.config.moe_router_topk
+        #HACK(huang.huang): move setattr for self.cuda_sync_point below
+        # if self.ep_size > 1 or self.num_local_experts > 1:
+        #     # Token dropless and enable ep. A synchronization is needed before expert parallel
+        #     # AlltoAll communication to get the `input_splits` and `output_splits` CPU values.
+        #     self.cuda_sync_point = "before_ep_alltoall"
+        # else:
+        #     # Token dropless and no ep. A synchronization is needed before the returns
+        #     # to get the `tokens_per_expert` CPU value for
+        #     self.cuda_sync_point = "before_finish"
+        ##HACK(huang.huang)
+    if self.ep_size > 1 or self.tp_size > 1:
+        # ===================================================
+        # Calculate input_splits, output_splits for alltoall/allgather in variable size.
+        # ===================================================
+        # [ep_size]. Represents the number of tokens sent by the current rank to other
+        # EP ranks.
+        self.input_splits = num_local_tokens_per_expert.reshape(
+            self.ep_size, self.num_local_experts
+        ).sum(axis=1)
+        # Gather the global distribution of tokens across ranks.
+        # num_global_tokens_per_expert represents the number of tokens sent to each
+        # expert by all ranks.
+        # [tp_size, ep_size, num_experts]
+        num_global_tokens_per_expert = (
+            gather_from_sequence_parallel_region(
+                num_local_tokens_per_expert, group=self.tp_ep_group
+            )
+            .reshape(self.ep_size, self.tp_size, self.num_experts)
+            .transpose(0, 1)
+        )
+        # [tp_size, ep_size, num_experts] -> [tp_size, ep_size, num_local_experts]
+        num_global_tokens_per_local_expert = num_global_tokens_per_expert[
+            :, :, self.local_expert_indices[0] : self.local_expert_indices[-1] + 1
+        ].contiguous()
+        # [tp_size, ep_size, num_local_experts] -> [tp_size, ep_size]
+        num_global_tokens_per_rank = num_global_tokens_per_local_expert.sum(axis=2)
+        # [tp_size, ep_size] -> [ep_size]
+        # self.output_splits represents the number of tokens received by the current rank
+        # from other EP rank.
+        self.output_splits = num_global_tokens_per_rank[self.tp_rank]
+        # [tp_size, ep_size] -> [tp_size]
+        # self.output_splits_tp represents the number of tokens received by the current
+        # rank from other TP rank.
+        self.output_splits_tp = num_global_tokens_per_rank.sum(axis=1)
+        # [tp_size, ep_size, num_local_experts] -> [num_local_experts]
+        num_tokens_per_local_expert = num_global_tokens_per_local_expert.sum(dim=(0, 1))
+        # A synchronization is needed before expert parallel AlltoAll communication
+        # to get the `input_splits` and `output_splits` CPU values.
+        self._maybe_update_cuda_sync_point("before_ep_alltoall")
+    else:
+        num_global_tokens_per_local_expert = num_local_tokens_per_expert.reshape(
+            self.num_experts
+        )
+        num_tokens_per_local_expert = num_local_tokens_per_expert
+        # A synchronization is needed before the returns
+        # to get the `num_tokens_per_local_expert` CPU value.
+        self._maybe_update_cuda_sync_point("before_finish")
+
+    if self.num_local_experts > 1:
+        # [tp_size * ep_size, num_local_experts]. Represents the number of tokens sent
+        # to each local expert by all ranks.
+        self.num_global_tokens_per_local_expert = num_global_tokens_per_local_expert.view(
+            -1, self.num_local_experts
+        )
+        if not self.config.moe_permute_fusion:
+            # A synchronization is needed before permutation 2
+            # to get the `num_global_tokens_per_local_expert` CPU value.
+            self._maybe_update_cuda_sync_point("before_permutation_2")
+
+    return num_tokens_per_local_expert
+
+
+def MoEAlltoAllTokenDispatcher_token_permutation(
+    self, hidden_states: torch.Tensor, probs: torch.Tensor, routing_map: torch.Tensor
+) -> Tuple[torch.Tensor, torch.Tensor]:
+    """
+    Dispatch tokens to local experts using AlltoAll communication.
+
+    This method performs the following steps:
+    1. Preprocess the routing map to get metadata for communication and permutation.
+    2. Permute input tokens for AlltoAll communication.
+    3. Perform expert parallel AlltoAll communication.
+    4. Sort tokens by local expert (if multiple local experts exist).
+
+    Args:
+        hidden_states (torch.Tensor): Input token embeddings.
+        probs (torch.Tensor): The probabilities of token to experts assignment.
+        routing_map (torch.Tensor): The mapping of token to experts assignment.
+
+    Returns:
+        Tuple[torch.Tensor, torch.Tensor]:
+            - Permuted token embeddings for local experts.
+            - Number of tokens per expert.
+    """
+    # Preprocess: Get the metadata for communication, permutation and computation operations.
+    self.hidden_shape = hidden_states.shape
+    self.probs = probs
+    self.routing_map = routing_map
+    assert probs.dim() == 2, "Expected 2D tensor for probs"
+    assert routing_map.dim() == 2, "Expected 2D tensor for token2expert mask"
+    assert routing_map.dtype == torch.bool, "Expected bool tensor for mask"
+    hidden_states = hidden_states.view(-1, self.hidden_shape[-1])
+    tokens_per_expert = self.preprocess(self.routing_map)
+
+    if self.shared_experts is not None:
+        self.shared_experts.pre_forward_comm(hidden_states.view(self.hidden_shape))
+
+    # Permutation 1: input to AlltoAll input
+    self.hidden_shape_before_permute = hidden_states.shape
+
+    #GPU operations that data depended on need to be performed before the d2h command
+    num_global_tokens_per_local_expert = self.num_global_tokens_per_local_expert.ravel()
+    num_global_tokens_per_local_expert_T = self.num_global_tokens_per_local_expert.T.ravel()
+
+    # Permutation 1: input to AlltoAll input
+    tokens_per_expert = self._maybe_dtoh_and_synchronize(
+        "before_permutation_1", tokens_per_expert,
+        num_global_tokens_per_local_expert, num_global_tokens_per_local_expert_T
+    )
+    permutated_local_input_tokens, self.reversed_local_input_permutation_mapping = permute(
+        hidden_states,
+        routing_map,
+        num_out_tokens=self.num_out_tokens,
+        fused=self.config.moe_permute_fusion,
+        drop_and_pad=self.drop_and_pad,
+    )
+    # Perform expert parallel AlltoAll communication
+    tokens_per_expert = self._maybe_dtoh_and_synchronize(
+        "before_ep_alltoall", tokens_per_expert,
+        num_global_tokens_per_local_expert, num_global_tokens_per_local_expert_T
+    )
+
+    global_input_tokens = all_to_all(
+        self.ep_group, permutated_local_input_tokens, self.output_splits, self.input_splits
+    )
+    if self.shared_experts is not None:
+        self.shared_experts.linear_fc1_forward_and_act(global_input_tokens)
+
+    if self.tp_size > 1:
+        if self.output_splits_tp is None:
+            output_split_sizes = None
+        else:
+            output_split_sizes = self.output_splits_tp.tolist()
+        global_input_tokens = gather_from_sequence_parallel_region(
+            global_input_tokens, group=self.tp_group, output_split_sizes=output_split_sizes
+        )
+
+    # Permutation 2: Sort tokens by local expert.
+    tokens_per_expert = self._maybe_dtoh_and_synchronize(
+        "before_permutation_2", tokens_per_expert,
+        num_global_tokens_per_local_expert, num_global_tokens_per_local_expert_T
+    )
+    if self.num_local_experts > 1:
+        if self.drop_and_pad:
+            global_input_tokens = (
+                global_input_tokens.view(
+                    self.tp_size * self.ep_size,
+                    self.num_local_experts,
+                    self.capacity,
+                    *global_input_tokens.size()[1:],
+                )
+                .transpose(0, 1)
+                .contiguous()
+                .flatten(start_dim=0, end_dim=2)
+            )
+        else:
+            global_input_tokens = sort_chunks_by_idxs(
+                global_input_tokens,
+                self.num_global_tokens_per_local_expert,
+                self.sort_input_by_local_experts,
+                fused=self.config.moe_permute_fusion,
+            )
+
+    tokens_per_expert = self._maybe_dtoh_and_synchronize(
+        "before_finish", tokens_per_expert,
+        num_global_tokens_per_local_expert, num_global_tokens_per_local_expert_T
+    )
+    return global_input_tokens, tokens_per_expert
+
+
+def MoEAlltoAllTokenDispatcher_token_unpermutation(
+    self, hidden_states: torch.Tensor, bias: Optional[torch.Tensor] = None
+) -> Tuple[torch.Tensor, Optional[torch.Tensor]]:
+    """
+    Reverse the token permutation to restore the original order.
+
+    This method performs the following steps:
+    1. Unsort tokens by local expert (if multiple local experts exist).
+    2. Perform expert parallel AlltoAll communication to restore the original order.
+    3. Unpermute tokens to restore the original order.
+
+    Args:
+        hidden_states (torch.Tensor): Output from local experts.
+        bias (torch.Tensor, optional): Bias tensor (not supported).
+
+    Returns:
+        Tuple[torch.Tensor, Optional[torch.Tensor]]:
+            - Unpermuted token embeddings in the original order.
+            - None (bias is not supported).
+    """
+    assert bias is None, "Bias is not supported in MoEAlltoAllTokenDispatcher"
+
+    # Unpermutation 2: Unsort tokens by local expert.
+    if self.num_local_experts > 1:
+        if self.drop_and_pad:
+            hidden_states = (
+                hidden_states.view(
+                    self.num_local_experts,
+                    self.tp_size * self.ep_size,
+                    self.capacity,
+                    *hidden_states.size()[1:],
+                )
+                .transpose(0, 1)
+                .contiguous()
+                .flatten(start_dim=0, end_dim=2)
+            )
+        else:
+            hidden_states = sort_chunks_by_idxs(
+                hidden_states,
+                self.num_global_tokens_per_local_expert_T,
+                self.restore_output_by_local_experts,
+                fused=self.config.moe_permute_fusion,
+            )
+
+    if self.tp_size > 1:
+        if self.output_splits_tp is None:
+            input_split_sizes = None
+        else:
+            input_split_sizes = self.output_splits_tp.tolist()
+        hidden_states = reduce_scatter_to_sequence_parallel_region(
+            hidden_states, group=self.tp_group, input_split_sizes=input_split_sizes
+        )
+
+    # Perform expert parallel AlltoAll communication
+    # hidden_states: [SEQL, H] -> [SEQL, H/TP]
+    permutated_local_input_tokens = all_to_all(
+        self.ep_group, hidden_states, self.input_splits, self.output_splits
+    )
+    if self.shared_experts is not None:
+        self.shared_experts.linear_fc2_forward(permutated_local_input_tokens)
+        self.shared_experts.post_forward_comm()
+
+    # Unpermutation 1: AlltoAll output to output
+    output = unpermute(
+        permutated_local_input_tokens,
+        self.reversed_local_input_permutation_mapping,
+        restore_shape=self.hidden_shape_before_permute,
+        probs=self.probs,
+        routing_map=self.routing_map,
+        fused=self.config.moe_permute_fusion,
+        drop_and_pad=self.drop_and_pad,
+    )
+
+    # Reshape the output tensor
+    output = output.view(self.hidden_shape)
+
+    # Add shared experts output
+    if self.shared_experts is not None:
+        shared_expert_output = self.shared_experts.get_output()
+        output += shared_expert_output
+    return output, None
+##HACK(huang.huang)
+
+from transformer_engine.musa.pytorch.utils import replace_attr, add_attr
+from megatron.core.transformer.moe.token_dispatcher import MoEAlltoAllTokenDispatcher
+replace_attr(MoEAlltoAllTokenDispatcher, '__init__', MoEAlltoAllTokenDispatcher___init__)
+add_attr(MoEAlltoAllTokenDispatcher, '_maybe_update_cuda_sync_point', MoEAlltoAllTokenDispatcher__maybe_update_cuda_sync_point)
+add_attr(MoEAlltoAllTokenDispatcher, '_ensure_cpu_tensor', MoEAlltoAllTokenDispatcher__ensure_cpu_tensor)
+add_attr(MoEAlltoAllTokenDispatcher, '_maybe_dtoh_and_synchronize', MoEAlltoAllTokenDispatcher__maybe_dtoh_and_synchronize)
+replace_attr(MoEAlltoAllTokenDispatcher, 'preprocess', MoEAlltoAllTokenDispatcher_preprocess)
+replace_attr(MoEAlltoAllTokenDispatcher, 'token_permutation', MoEAlltoAllTokenDispatcher_token_permutation)
+replace_attr(MoEAlltoAllTokenDispatcher, 'token_unpermutation', MoEAlltoAllTokenDispatcher_token_unpermutation)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/training.py b/megatron-lm-musa-patch/musa_patch/training.py
new file mode 100644
index 00000000..9624b1bc
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/training.py
@@ -0,0 +1,954 @@
+from datetime import datetime
+
+import gc
+import os
+import sys
+import logging
+import torch
+import torch.distributed
+from megatron.core import mpu
+
+from megatron.core.transformer.moe.moe_utils import track_moe_metrics
+from megatron.core.transformer.moe.router import TopKRouter
+from megatron.training.global_vars import (
+    get_args,
+    get_timers,
+    get_tensorboard_writer,
+    get_wandb_writer,
+    get_one_logger
+)
+# get_num_microbatches
+from megatron.core.num_microbatches_calculator import get_num_microbatches
+from megatron.training.utils import (
+    report_memory,
+    print_rank_last
+)
+from megatron.core.rerun_state_machine import (
+    get_rerun_state_machine,
+)
+from megatron.core.utils import (
+    check_param_hashes_across_dp_replicas,
+)
+from megatron.training.theoretical_memory_usage import report_theoretical_memory
+from megatron.training import one_logger_utils
+from megatron.training.initialize import write_args_to_tensorboard
+from megatron.core.distributed import finalize_model_grads
+from megatron.core.distributed import DistributedDataParallel as DDP
+
+from megatron.training.training import (
+    print_datetime,
+    save_checkpoint_and_time,
+    train_step,
+    evaluate_and_print_results,
+)
+from megatron.training.async_utils import maybe_finalize_async_save
+from megatron.core.num_microbatches_calculator import (
+    get_current_global_batch_size,
+    get_current_running_global_batch_size,
+    get_num_microbatches,
+    update_num_microbatches
+)
+from megatron.training.utils import (
+    calc_params_l2_norm,
+    print_rank_0,
+    print_rank_last,
+    report_memory,
+)
+from megatron.training import ft_integration
+from megatron.training.global_vars import (
+    get_args,
+    get_timers,
+    get_tensorboard_writer,
+    get_wandb_writer,
+    get_one_logger
+)
+from .profiling import maybe_enable_profiling
+
+from megatron.training.training import (
+    enable_forward_pre_hook,
+    disable_forward_pre_hook,
+    post_training_step_callbacks,
+    checkpoint_and_decide_exit
+)
+
+from megatron.training.utils import (
+    calc_params_l2_norm,
+    logical_and_across_model_parallel_group,
+    reduce_max_stat_across_model_parallel_group,
+    print_rank_0,
+    print_rank_last,
+    report_memory,
+    unwrap_model,
+)
+
+from megatron.core.pipeline_parallel import get_forward_backward_func
+try:
+    import mlflow
+except Exception as e:
+    print(f"import mlflow failed {str(e)}")
+
+logger = logging.getLogger(__name__)
+
+def throughput_calculator(args, elapsed_time_per_iter, consumed_tokens_per_iter):
+    # training_time = elapsed_time
+    system_throughput = float(consumed_tokens_per_iter) / elapsed_time_per_iter
+    world_size = args.world_size
+    chip_throughput = system_throughput / world_size
+    # For 70B
+    # all_param_num = getattr(args, "all_param_num", None)
+    # assert all_param_num is not None, "please set all_param_num"
+    # MFU = chip_throughput * 6 * all_param_num * (1 + args.seq_length / (6 * args.hidden_size) ) / 98e12
+    # # tflops_throughput = chip_throughput / float(config.flops_16bit) * 1e12
+    # # logger.info("Throughput(token per chip per second): " + str(chip_throughput))
+    # # logger.info("MFU: " + str(MFU))
+    # # logger.info("Throughput(token per TFLOPS): " + str(tflops_throughput))
+    h = args.hidden_size
+    s = args.seq_length
+    N = 12 * args.num_layers * h **2
+    D = 1
+
+    attn_matmul = 2 * N * D
+    attn_sdp = N * D * (s / h)
+    mlp_matmul = 4 * N * D
+    # moe
+    if args.num_experts is None:
+        factor = 1
+    else:
+        factor = args.moe_router_topk
+    activated_dense_flops = attn_matmul + attn_sdp + mlp_matmul * factor
+    if args.num_experts is not None:
+        act_params = N + args.num_layers *(args.num_experts - 1) * 8 * h**2
+        if torch.distributed.get_rank() == 0:
+            print(f"N: {N} Act param: {act_params} Act flops: {activated_dense_flops}")
+    tflops =  chip_throughput *  activated_dense_flops
+    mfu = tflops / 98e12
+
+    return chip_throughput, mfu
+
+def num_floating_point_operations(args, batch_size):
+    # Attention projection size.
+    query_projection_size = args.kv_channels * args.num_attention_heads
+    query_projection_to_hidden_size_ratio = query_projection_size / args.hidden_size
+    # Group Query Attention.
+    if not args.group_query_attention:
+        args.num_query_groups = args.num_attention_heads
+    # MoE.
+    num_experts_routed_to = 1 if args.num_experts is None else args.moe_router_topk
+    gated_linear_multiplier = 3 / 2 if args.swiglu else 1
+    shared_expert_ffn_hidden_size = (
+        0
+        if args.moe_shared_expert_intermediate_size is None
+        else args.moe_shared_expert_intermediate_size
+    )
+    if not args.multi_latent_attention:
+        return (
+            12
+            * batch_size
+            * args.seq_length
+            * args.num_layers
+            * args.hidden_size
+            * args.hidden_size
+            * (
+                # Attention.
+                (
+                    (
+                        1
+                        + (args.num_query_groups / args.num_attention_heads)
+                        + (args.seq_length / args.hidden_size)
+                    ) * query_projection_to_hidden_size_ratio
+                )
+                # MLP.
+                + (
+                    (args.moe_ffn_hidden_size / args.hidden_size)
+                    * num_experts_routed_to
+                    * gated_linear_multiplier
+                )
+                # Shared Experts.
+                + ((shared_expert_ffn_hidden_size / args.hidden_size) * gated_linear_multiplier)
+                # Logit.
+                + (args.padded_vocab_size / (2 * args.num_layers * args.hidden_size))
+            )
+        )
+    else:
+        if args.q_lora_rank is None:
+            mla_flops_q = args.hidden_size * args.num_attention_heads * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+        else:
+            mla_flops_q = args.hidden_size * args.q_lora_rank +\
+                  args.q_lora_rank * args.num_attention_heads * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+        return (
+            6
+            * batch_size
+            * args.seq_length
+            * args.num_layers
+            * (
+                # MLA Attention.
+                (
+                    (
+                        mla_flops_q
+                        + args.hidden_size * (args.kv_lora_rank + args.qk_pos_emb_head_dim)
+                        + args.num_attention_heads * args.kv_lora_rank * (args.qk_head_dim + args.v_head_dim)
+                        + args.num_attention_heads * args.seq_length * (args.qk_head_dim + args.qk_pos_emb_head_dim)
+                        + args.num_attention_heads * args.seq_length * args.v_head_dim
+                        + args.num_attention_heads * args.v_head_dim * args.hidden_size
+                    )
+                )
+                # Router
+                + args.hidden_size * args.num_experts
+                # MLP.
+                + (
+                    2 * args.hidden_size *  args.moe_ffn_hidden_size * num_experts_routed_to
+                    * gated_linear_multiplier
+                )
+                # Shared Experts.
+                + (2 * args.hidden_size * shared_expert_ffn_hidden_size * gated_linear_multiplier)
+                # Logit.
+                + (args.padded_vocab_size * args.hidden_size / args.num_layers)
+            )
+        )
+
+def need_mlflow():
+    return os.getenv("MLFLOW_TRACKING_URI", default=None) and \
+            torch.distributed.get_rank() == (torch.distributed.get_world_size() - 1)
+
+
+def train_step(forward_step_func, data_iterator,
+               model, optimizer, opt_param_scheduler, config):
+    """Single training step."""
+    args = get_args()
+    timers = get_timers()
+
+    rerun_state_machine = get_rerun_state_machine()
+    while rerun_state_machine.should_run_forward_backward(data_iterator):
+        # Set grad to zero.
+        for model_chunk in model:
+            model_chunk.zero_grad_buffer()
+        optimizer.zero_grad()
+
+        # Forward pass.
+        forward_backward_func = get_forward_backward_func()
+        losses_reduced = forward_backward_func( # forward_data_store
+            forward_step_func=forward_step_func,
+            data_iterator=data_iterator,
+            model=model,
+            num_microbatches=get_num_microbatches(),
+            seq_length=args.seq_length,
+            micro_batch_size=args.micro_batch_size,
+            decoder_seq_length=args.decoder_seq_length,
+            forward_only=False)
+    should_checkpoint, should_exit, exit_code = rerun_state_machine.should_checkpoint_and_exit()
+    if should_exit:
+        return {}, True, should_checkpoint, should_exit, exit_code, None, None
+
+    # Empty unused memory.
+    if args.empty_unused_memory_level >= 1:
+        torch.cuda.empty_cache()
+
+    # Vision gradients.
+    if args.vision_pretraining and args.vision_pretraining_type == "dino":
+        unwrapped_model = unwrap_model(model[0])
+        unwrapped_model.cancel_gradients_last_layer(args.curr_iteration)
+
+    # Update parameters.
+
+    timers('optimizer', log_level=1).start(barrier=args.barrier_with_L1_time)
+    update_successful, grad_norm, num_zeros_in_grad = optimizer.step()
+    timers('optimizer').stop()
+
+    # when freezing sub-models we may have a mixture of successful and unsucessful ranks,
+    # so we must gather across mp ranks
+    update_successful = logical_and_across_model_parallel_group(update_successful)
+    # grad_norm and num_zeros_in_grad will be None on ranks without trainable params,
+    # so we must gather across mp ranks
+    grad_norm = reduce_max_stat_across_model_parallel_group(grad_norm)
+    if args.log_num_zeros_in_grad:
+        num_zeros_in_grad = reduce_max_stat_across_model_parallel_group(num_zeros_in_grad)
+
+    # Vision momentum.
+    if args.vision_pretraining and args.vision_pretraining_type == "dino":
+        unwrapped_model = unwrap_model(model[0])
+        unwrapped_model.update_momentum(args.curr_iteration)
+
+    # Update learning rate.
+    if update_successful:
+        increment = get_num_microbatches() * \
+                    args.micro_batch_size * \
+                    args.data_parallel_size
+        opt_param_scheduler.step(increment=increment)
+        skipped_iter = 0
+    else:
+        skipped_iter = 1
+
+    # Empty unused memory.
+    if args.empty_unused_memory_level >= 2:
+        torch.cuda.empty_cache()
+
+    if mpu.is_pipeline_last_stage(ignore_virtual=True):
+        # Average loss across microbatches.
+        loss_reduced = {}
+        for key in losses_reduced[0].keys():
+            numerator = 0
+            denominator = 0
+
+            # HACK(xuerong.huang): Reduce the report loss(loss_reduced) on the last training step of multi-microbatches.
+            if int(os.getenv("NO_LOSS_REDUCE", 0)):
+                val0 = losses_reduced[0][key]
+                if isinstance(val0, tuple) or isinstance(val0, list):
+                    reduce_data = [sum([v[key][0] for v in losses_reduced])] # get the sum of the losses of all microbatches
+                    reduce_data.extend([v[key][1] for v in losses_reduced]) # get the token-num of all microbatches
+                    reduce_data = torch.stack(reduce_data)     
+                    torch.distributed.all_reduce(reduce_data, group=mpu.get_data_parallel_group()) # reduce the losses-sum and token-num from all dp-ranks
+                    numerator = reduce_data[0] 
+                    denominator = sum(reduce_data[1:])
+                else:
+                    numerator = sum([v[key] for v in losses_reduced])
+                    denominator = len(losses_reduced)
+                    torch.distributed.all_reduce(numerator, group=mpu.get_data_parallel_group())    # reduce the losses-sum from all dp-ranks
+            # HACK(xuerong.huang): Reduce the report loss(loss_reduced) on the last training step of multi-microbatches.
+            else:
+                for x in losses_reduced:
+                    val = x[key]
+                    # there is one dict per microbatch. in new reporting, we average
+                    # over the total number of tokens across the global batch.
+                    if isinstance(val, tuple) or isinstance(val, list):
+                        numerator += val[0]
+                        denominator += val[1]
+                    else:
+                        # legacy behavior. we average over the number of microbatches,
+                        # and so the denominator is 1.
+                        numerator += val
+                        denominator += 1
+
+            loss_reduced[key] = numerator / denominator
+            
+        return loss_reduced, skipped_iter, should_checkpoint, should_exit, exit_code, grad_norm, num_zeros_in_grad
+    return {}, skipped_iter, should_checkpoint, should_exit, exit_code, grad_norm, num_zeros_in_grad
+
+
+def training_log(loss_dict, total_loss_dict, learning_rate, decoupled_learning_rate, iteration,
+                 loss_scale, report_memory_flag, skipped_iter,
+                 grad_norm, params_norm, num_zeros_in_grad):
+    """Log training information such as losses, timing, ...."""
+    args = get_args()
+    timers = get_timers()
+    writer = get_tensorboard_writer()
+    wandb_writer = get_wandb_writer()
+    one_logger = get_one_logger()
+
+    # Advanced, skipped, and Nan iterations.
+    advanced_iters_key = 'advanced iterations'
+    skipped_iters_key = 'skipped iterations'
+    nan_iters_key = 'nan iterations'
+    # Advanced iterations.
+    if not skipped_iter:
+        total_loss_dict[advanced_iters_key] = total_loss_dict.get(
+            advanced_iters_key, 0) + 1
+    else:
+        if advanced_iters_key not in total_loss_dict:
+            total_loss_dict[advanced_iters_key] = 0
+    # Skipped iterations.
+    total_loss_dict[skipped_iters_key] = total_loss_dict.get(
+        skipped_iters_key, 0) + skipped_iter
+    # Update losses and set nan iterations
+    got_nan = False
+    for key in loss_dict:
+        if not skipped_iter:
+            total_loss_dict[key] = total_loss_dict.get(
+                key, torch.tensor([0.0], dtype=torch.float, device='cuda')) + loss_dict[key]
+        else:
+            value = loss_dict[key].float().sum().item()
+            is_nan = value == float('inf') or \
+                     value == -float('inf') or \
+                     value != value
+            got_nan = got_nan or is_nan
+    total_loss_dict[nan_iters_key] = total_loss_dict.get(
+        nan_iters_key, 0) + int(got_nan)
+
+    # Logging.
+    timers_to_log = [
+        'forward-backward',
+        'forward-compute',
+        'backward-compute',
+        'batch-generator',
+        'forward-recv',
+        'forward-send',
+        'backward-recv',
+        'backward-send',
+        'forward-send-forward-recv',
+        'forward-send-backward-recv',
+        'backward-send-forward-recv',
+        'backward-send-backward-recv',
+        'forward-backward-send-forward-backward-recv',
+        'layernorm-grads-all-reduce',
+        'embedding-grads-all-reduce',
+        'all-grads-sync',
+        'params-all-gather',
+        'optimizer-copy-to-main-grad',
+        'optimizer-unscale-and-check-inf',
+        'optimizer-clip-main-grad',
+        'optimizer-count-zeros',
+        'optimizer-inner-step',
+        'optimizer-copy-main-to-model-params',
+        'optimizer']
+
+    # Calculate batch size.
+    batch_size = args.micro_batch_size * args.data_parallel_size * \
+        get_num_microbatches()
+
+    # Track app tag & app tag ID
+    one_logger_utils.track_app_tag(batch_size, args.world_size, args.seq_length)
+
+    total_iterations = total_loss_dict[advanced_iters_key] + \
+                       total_loss_dict[skipped_iters_key]
+
+    # Tensorboard values.
+    # Timer requires all the ranks to call.
+    if args.log_timers_to_tensorboard and \
+       (iteration % args.tensorboard_log_interval == 0):
+        timers.write(timers_to_log, writer, iteration,
+                     normalizer=total_iterations)
+    if writer and (iteration % args.tensorboard_log_interval == 0):
+        if wandb_writer:
+            wandb_writer.log({'samples vs steps': args.consumed_train_samples},
+                             iteration)
+        writer.add_scalar('learning-rate', learning_rate, iteration)
+        if args.decoupled_lr is not None:
+            writer.add_scalar('decoupled-learning-rate', decoupled_learning_rate, iteration)
+        writer.add_scalar('learning-rate vs samples', learning_rate,
+                          args.consumed_train_samples)
+        if wandb_writer:
+            wandb_writer.log({'learning-rate': learning_rate}, iteration)
+        if args.skipped_train_samples > 0:
+            writer.add_scalar('skipped-train-samples', args.skipped_train_samples, iteration)
+            if wandb_writer:
+                wandb_writer.log({'skipped-train-samples': args.skipped_train_samples}, iteration)
+        writer.add_scalar('batch-size', batch_size, iteration)
+        writer.add_scalar('batch-size vs samples', batch_size,
+                          args.consumed_train_samples)
+        if wandb_writer:
+            wandb_writer.log({'batch-size': batch_size}, iteration)
+        for key in loss_dict:
+            writer.add_scalar(key , loss_dict[key], iteration)
+            writer.add_scalar(key + ' vs samples', loss_dict[key],
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({key: loss_dict[key]}, iteration)
+        if args.log_loss_scale_to_tensorboard:
+            writer.add_scalar('loss-scale', loss_scale, iteration)
+            writer.add_scalar('loss-scale vs samples', loss_scale,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'loss-scale': loss_scale}, iteration)
+        if args.log_world_size_to_tensorboard:
+            writer.add_scalar('world-size', args.world_size, iteration)
+            writer.add_scalar('world-size vs samples', args.world_size,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'world-size': args.world_size}, iteration)
+        if grad_norm is not None:
+            writer.add_scalar('grad-norm', grad_norm, iteration)
+            writer.add_scalar('grad-norm vs samples', grad_norm,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'grad-norm': grad_norm}, iteration)
+        if num_zeros_in_grad is not None:
+            writer.add_scalar('num-zeros', num_zeros_in_grad, iteration)
+            writer.add_scalar('num-zeros vs samples', num_zeros_in_grad,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'num-zeros': num_zeros_in_grad}, iteration)
+        if params_norm is not None:
+            writer.add_scalar('params-norm', params_norm, iteration)
+            writer.add_scalar('params-norm vs samples', params_norm,
+                              args.consumed_train_samples)
+            if wandb_writer:
+                wandb_writer.log({'params-norm': params_norm}, iteration)
+        if args.log_memory_to_tensorboard:
+            mem_stats = torch.cuda.memory_stats()
+            writer.add_scalar(
+                "mem-reserved-bytes",
+                mem_stats["reserved_bytes.all.current"],
+                iteration,
+            )
+            writer.add_scalar(
+                "mem-allocated-bytes",
+                mem_stats["allocated_bytes.all.current"],
+                iteration,
+            )
+            writer.add_scalar(
+                "mem-allocated-count",
+                mem_stats["allocation.all.current"],
+                iteration,
+            )
+    if args.num_experts is not None:
+        moe_loss_scale = 1 / get_num_microbatches()
+        track_moe_metrics(moe_loss_scale, iteration, writer, wandb_writer, total_loss_dict, args.moe_per_layer_logging)
+
+    if iteration % args.log_interval == 0:
+        # HACK(huang.huang): support memory analysis dump
+        if args.record_memory_history:
+            snapshot = torch.cuda.memory._snapshot()
+            from pickle import dump
+            os.makedirs("./memory_snapshot", exist_ok=True)
+            with open(f"./memory_snapshot/iter{iteration}-{args.memory_snapshot_path}", 'wb') as f:
+                dump(snapshot, f)
+        ## HACK(huang.huang)
+
+        elapsed_time = timers('interval-time').elapsed(barrier=True)
+        elapsed_time_per_iteration = elapsed_time / total_iterations
+
+        throughput = num_floating_point_operations(args, batch_size) / (
+            elapsed_time_per_iteration * 10**12 * args.world_size)
+
+        one_logger_utils.track_e2e_metrics(args.log_throughput, throughput)
+
+        if args.log_timers_to_tensorboard:
+            if writer:
+                writer.add_scalar('iteration-time',
+                                  elapsed_time_per_iteration, iteration)
+            if wandb_writer:
+                wandb_writer.log({'iteration-time': elapsed_time_per_iteration},
+                                 iteration)
+        log_string = f" [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]"
+        log_string += ' iteration {:8d}/{:8d} |'.format(
+            iteration, args.train_iters)
+        # mfu = throughput / 465
+        # tokens_per_gpu_per_second = float(batch_size * args.seq_length) / elapsed_time_per_iteration / args.world_size
+        # log_string += ' tokens_per_gpu_per_second: {:.2f} /s |'.format(tokens_per_gpu_per_second)
+        # log_string += ' mfu: {:.4f} |'.format(mfu)
+        log_string += ' consumed samples: {:12d} |'.format(
+            args.consumed_train_samples)
+        if args.skipped_train_samples > 0:
+            log_string += ' skipped samples: {:12d} |'.format(
+                args.skipped_train_samples)
+        log_string += ' elapsed time per iteration (ms): {:.1f} |'.format(
+            elapsed_time_per_iteration * 1000.0)
+        if args.log_throughput:
+            log_string += f' throughput per GPU (TFLOP/s/GPU): {throughput:.1f} |'
+            if args.log_timers_to_tensorboard:
+                if writer:
+                    writer.add_scalar('throughput', throughput, iteration)
+                if wandb_writer:
+                    wandb_writer.log({'throughput': throughput}, iteration)
+        assert learning_rate is not None
+        # Decoupled_learning_rate should be not None only on first and last pipeline stage.
+        log_string += ' learning rate: {:.6E} |'.format(learning_rate)
+        if args.decoupled_lr is not None and (mpu.is_pipeline_first_stage(ignore_virtual=True) or
+                                              mpu.is_pipeline_last_stage(ignore_virtual=True)):
+            assert decoupled_learning_rate is not None
+            log_string += ' decoupled learning rate: {:.6E} |'.format(decoupled_learning_rate)
+        else:
+            assert decoupled_learning_rate is None
+        log_string += ' global batch size: {:5d} |'.format(batch_size)
+        current_loss_dic = dict()
+        for key in total_loss_dict:
+            if key not in [advanced_iters_key, skipped_iters_key,
+                           nan_iters_key]:
+                avg = total_loss_dict[key].item() / \
+                      float(max(1, total_loss_dict[advanced_iters_key]))
+                if avg > 0.0:
+                    log_string += ' {}: {:.6E} |'.format(key, avg)
+                    current_loss_dic[key] = avg
+                total_loss_dict[key] = torch.tensor([0.0], dtype=torch.float, device='cuda')
+        log_string += ' loss scale: {:.1f} |'.format(loss_scale)
+        if grad_norm is not None:
+            log_string += ' grad norm: {:.3f} |'.format(grad_norm)
+        if num_zeros_in_grad is not None:
+            log_string += ' num zeros: {:.1f} |'.format(num_zeros_in_grad)
+        if params_norm is not None:
+            log_string += ' params norm: {:.3f} |'.format(params_norm)
+        log_string += ' number of skipped iterations: {:3d} |'.format(
+            total_loss_dict[skipped_iters_key])
+        log_string += ' number of nan iterations: {:3d} |'.format(
+            total_loss_dict[nan_iters_key])
+        total_loss_dict[advanced_iters_key] = 0
+        total_loss_dict[skipped_iters_key] = 0
+        total_loss_dict[nan_iters_key] = 0
+        print_rank_last(log_string)
+        if report_memory_flag and learning_rate > 0.:
+            # Report memory after optimizer state has been initialized.
+            if torch.distributed.get_rank() == 0:
+                num_microbatches = get_num_microbatches()
+                report_theoretical_memory(args, num_microbatches=num_microbatches, verbose=True)
+            report_memory('(after {} iterations)'.format(iteration))
+            # report_memory_flag = False
+        timers.log(timers_to_log, normalizer=args.log_interval)
+
+        # log to mlflow
+        if need_mlflow():
+            mlflow_metrics = current_loss_dic
+            mlflow_metrics['mfu'] = mfu
+            mlflow_metrics["tps"] = tokens_per_gpu_per_second
+            mlflow_metrics['learning-rate'] = learning_rate
+            mlflow_metrics['consumed-samples'] = args.consumed_train_samples
+            mlflow_metrics['batch-size'] = batch_size
+            mlflow_metrics['loss-scale'] = loss_scale
+            mlflow_metrics['iteration-time'] = elapsed_time_per_iteration
+            mlflow_metrics['world-size'] = args.world_size
+
+            mlflow.log_metrics(mlflow_metrics, step=iteration, synchronous=False)
+
+    return report_memory_flag
+
+def train(forward_step_func, model, optimizer, opt_param_scheduler,
+          train_data_iterator, valid_data_iterator,
+          process_non_loss_data_func, config, checkpointing_context, non_loss_data_func):
+    """Train the model function."""
+    args = get_args()
+    timers = get_timers()
+    one_logger = get_one_logger()
+
+    # Write args to tensorboard
+    write_args_to_tensorboard()
+
+    # Turn on training mode which enables dropout.
+    for model_module in model:
+        model_module.train()
+
+    # Tracking loss.
+    total_loss_dict = {}
+
+    # Iterations.
+    iteration = args.iteration
+
+    # Track E2E metrics at the start of training
+    one_logger_utils.on_train_start(iteration=iteration, consumed_train_samples=args.consumed_train_samples,
+                                    train_samples=args.train_samples, seq_length=args.seq_length,
+                                    train_iters=args.train_iters, save=args.save, async_save=args.async_save,
+                                    log_throughput=args.log_throughput,
+                                    num_floating_point_operations_so_far=args.num_floating_point_operations_so_far)
+
+    num_floating_point_operations_so_far = args.num_floating_point_operations_so_far
+
+    # Setup some training config params
+    config.grad_scale_func = optimizer.scale_loss
+    config.timers = timers
+    if isinstance(model[0], DDP) and args.overlap_grad_reduce:
+        assert config.no_sync_func is None, \
+            ('When overlap_grad_reduce is True, config.no_sync_func must be None; '
+             'a custom no_sync_func is not supported when overlapping grad-reduce')
+        config.no_sync_func = [model_chunk.no_sync for model_chunk in model]
+        if len(model) == 1:
+            config.no_sync_func = config.no_sync_func[0]
+        if args.align_grad_reduce:
+            config.grad_sync_func = [model_chunk.start_grad_sync for model_chunk in model]
+            if len(model) == 1:
+                config.grad_sync_func = config.grad_sync_func[0]
+    if args.overlap_param_gather and args.align_param_gather:
+        config.param_sync_func = [model_chunk.start_param_sync for model_chunk in model]
+        if len(model) == 1:
+            config.param_sync_func = config.param_sync_func[0]
+    config.finalize_model_grads_func = finalize_model_grads
+
+    timers('interval-time', log_level=0).start(barrier=True)
+    print_datetime('before the start of training step')
+    report_memory_flag = True
+    # exit = False
+    pre_hook_enabled = False
+    should_exit = False
+    exit_code = 0
+
+    if args.manual_gc:
+        # Disable the default garbage collector and perform the collection manually.
+        # This is to align the timing of garbage collection across ranks.
+        assert args.manual_gc_interval >= 0, \
+            'Manual garbage collection interval should be laerger than or equal to 0.'
+        gc.disable()
+        gc.collect()
+
+    # Singleton Initialization
+    if args.log_straggler:
+        global stimer
+        world = torch.distributed.get_world_size()
+        rank = torch.distributed.get_rank()
+        mmcnt = args.straggler_minmax_count
+        stimer.configure(world, rank,
+                mmcnt = mmcnt,
+                enabled = not args.disable_straggler_on_startup,
+                port = args.straggler_ctrlr_port)
+    # total_flops = 0.0
+    num_floating_point_operations_since_last_log_event = 0.0
+
+    num_microbatches = get_num_microbatches()
+    eval_duration = 0.0
+    eval_iterations = 0
+
+    def get_e2e_base_metrics():
+        """Get base metrics values for one-logger to calculate E2E tracking metrics.
+        """
+        return {
+            'iteration': iteration,
+            'train_duration': timers('interval-time').active_time(),
+            'eval_duration': eval_duration,
+            'eval_iterations': eval_iterations,
+            'total_flops': num_floating_point_operations_since_last_log_event,
+            'num_floating_point_operations_so_far': num_floating_point_operations_so_far,
+            'consumed_train_samples': args.consumed_train_samples,
+            'world_size': args.world_size,
+            'seq_length': args.seq_length
+        }
+    # Cache into one-logger for callback
+    if one_logger:
+        with one_logger.get_context_manager():
+            one_logger.store_set('get_e2e_base_metrics', get_e2e_base_metrics)
+
+    prof = None
+    if args.profile and torch.distributed.get_rank() in args.profile_ranks and args.use_pytorch_profiler:
+        prof = torch.profiler.profile(
+        schedule=torch.profiler.schedule(
+            wait=max(args.profile_step_start-1, 0),
+            warmup=1 if args.profile_step_start > 0 else 0,
+            active=args.profile_step_end-args.profile_step_start,
+            repeat=1),
+        on_trace_ready=torch.profiler.tensorboard_trace_handler(args.tensorboard_dir),
+        record_shapes=True,
+        with_stack=True)
+        prof.start()
+
+    start_iteration = iteration
+    # Disable forward pre-hook to start training to ensure that errors in checkpoint loading
+    # or random initialization don't propagate to all ranks in first all-gather (which is a
+    # no-op if things work correctly).
+    if args.use_distributed_optimizer and args.overlap_param_gather:
+        disable_forward_pre_hook(model, param_sync=False)
+        # Also remove param_sync_func temporarily so that sync calls made in
+        # `forward_backward_func` are no-ops.
+        param_sync_func = config.param_sync_func
+        config.param_sync_func = None
+        pre_hook_enabled = False
+    # Also, check weight hash across DP replicas to be very pedantic.
+    if args.check_weight_hash_across_dp_replicas_interval is not None:
+        assert check_param_hashes_across_dp_replicas(model, cross_check=True), \
+            "Parameter hashes not matching across DP replicas"
+        torch.distributed.barrier()
+        print_rank_0(f">>> Weight hashes match after {iteration} iterations...")
+
+    # HACK(dongsheng.zhang) modelstudio init
+    if need_mlflow():
+        mlflow.start_run()
+
+    with maybe_enable_profiling(
+        args, global_step=iteration
+    ) as torch_profiler:
+        while iteration < args.train_iters:
+            if args.profile and torch.distributed.get_rank() in args.profile_ranks:
+                if args.use_pytorch_profiler:
+                    prof.step()
+                elif iteration == args.profile_step_start:
+                    torch.cuda.cudart().cudaProfilerStart()
+                    torch.autograd.profiler.emit_nvtx(record_shapes=True).__enter__()
+
+            maybe_finalize_async_save(blocking=False)
+
+            # Update number of microbatches first without consistency check to decide if a
+            # checkpoint should be saved. If the number of microbatches is different
+            # from the previous iteration, save a checkpoint. Then run consistency check
+            # to make sure training configuration is still valid.
+            update_num_microbatches(args.consumed_train_samples, consistency_check=False, verbose=True)
+            if get_num_microbatches() != num_microbatches and iteration != 0:
+                assert get_num_microbatches() > num_microbatches, \
+                    "number of microbatches should be increasing due to batch size rampup ... %d -> %d." % (num_microbatches, get_num_microbatches())
+                if args.save is not None:
+                    save_checkpoint_and_time(iteration, model, optimizer,
+                                            opt_param_scheduler,
+                                            num_floating_point_operations_so_far,
+                                            checkpointing_context, train_data_iterator=train_data_iterator)
+            num_microbatches = get_num_microbatches()
+            update_num_microbatches(args.consumed_train_samples, consistency_check=True, verbose=True)
+
+            args.curr_iteration = iteration
+            loss_dict, skipped_iter, should_checkpoint, should_exit, exit_code, grad_norm, num_zeros_in_grad = \
+                train_step(forward_step_func,
+                        train_data_iterator,
+                        model,
+                        optimizer,
+                        opt_param_scheduler,
+                        config)
+
+            if should_checkpoint:
+                save_checkpoint_and_time(iteration, model, optimizer,
+                                        opt_param_scheduler,
+                                        num_floating_point_operations_so_far,
+                                        checkpointing_context, train_data_iterator=train_data_iterator)
+            if should_exit:
+                break
+
+            # Enable forward pre-hooks after first set of forward and backward passes.
+            # When running in fp16, skip all NaN iterations until steady-state loss scaling value
+            # is reached.
+            if iteration == start_iteration:
+                if skipped_iter:
+                    # Only enable forward pre-hook after a training step has successfully run. Relevant
+                    # for fp16 codepath where first XX iterations are skipped until steady-state loss
+                    # scale value is reached.
+                    start_iteration = iteration + 1
+                else:
+                    # Enable forward pre-hook after training step has successfully run. All subsequent
+                    # forward passes will use the forward pre-hook / `param_sync_func` in
+                    # `forward_backward_func`.
+                    if args.use_distributed_optimizer and args.overlap_param_gather:
+                        enable_forward_pre_hook(model)
+                        config.param_sync_func = param_sync_func
+                        pre_hook_enabled = True
+
+            if torch_profiler:
+                torch_profiler.step()
+            iteration += 1
+            batch_size = mpu.get_data_parallel_world_size() * \
+                        args.micro_batch_size * \
+                        get_num_microbatches()
+            args.consumed_train_samples += batch_size
+            num_skipped_samples_in_batch = (get_current_global_batch_size() -
+                                            get_current_running_global_batch_size())
+            if args.decrease_batch_size_if_needed:
+                assert num_skipped_samples_in_batch >= 0
+            else:
+                assert num_skipped_samples_in_batch == 0
+            args.skipped_train_samples += num_skipped_samples_in_batch
+            num_floating_point_operations_in_batch = num_floating_point_operations(args, batch_size)
+            num_floating_point_operations_so_far += num_floating_point_operations_in_batch
+            num_floating_point_operations_since_last_log_event += num_floating_point_operations_in_batch
+
+            # # Send heartbeat to FT package and update timeouts.
+            # if args.enable_ft_package:
+            #     ft_client = ft_integration.get_rank_monitor_client(
+            #         ft_integration.StateMachineActions.TRAIN_HEARTBEAT)
+            #     if ft_client is not None:
+            #         ft_client.send_heartbeat()
+            #         # TODO we are always calculating timeouts in the current implementation
+            #         # if we want to rely on manually setup then we need to add additional argument
+            #         # to training and pass it here
+            #         if ft_integration.can_update_timeouts():
+            #             ft_integration.get_rank_monitor_client(
+            #                 ft_integration.StateMachineActions.UPDATE_TIMEOUT).calculate_and_set_timeouts()
+            #             print_rank_0(f'Updated FT timeouts. New values: \
+            #                 {ft_integration.get_rank_monitor_client().timeouts}')
+
+            # # Bring CPU and GPU back in sync if on right iteration.
+            # if (
+            #     args.train_sync_interval
+            #     and iteration % args.train_sync_interval == 0
+            # ):
+            #     torch.cuda.synchronize()
+
+            # Logging.
+            if not optimizer.is_stub_optimizer:
+                loss_scale = optimizer.get_loss_scale().item()
+            else:
+                loss_scale = 1.0
+            params_norm = None
+            if args.log_params_norm:
+                params_norm = calc_params_l2_norm(model)
+
+            learning_rate = None
+            decoupled_learning_rate = None
+            for param_group in optimizer.param_groups:
+                if param_group['is_decoupled_lr']:
+                    decoupled_learning_rate = param_group['lr']
+                else:
+                    learning_rate = param_group['lr']
+            report_memory_flag = training_log(loss_dict, total_loss_dict,
+                                            learning_rate,
+                                            decoupled_learning_rate,
+                                            iteration, loss_scale,
+                                            report_memory_flag, skipped_iter,
+                                            grad_norm, params_norm, num_zeros_in_grad)
+
+            # # StragglerDetector
+            # if iteration % args.log_interval == 0 and args.log_straggler:
+            #     stimer.report(total_flops, args.log_interval)
+            #     total_flops = 0.0
+
+            # if args.check_weight_hash_across_dp_replicas_interval is not None and \
+            #         iteration % args.check_weight_hash_across_dp_replicas_interval == 0:
+            #     if args.use_distributed_optimizer and args.overlap_param_gather:
+            #         optimizer.disable_pre_hook()
+            #     assert check_param_hashes_across_dp_replicas(model, cross_check=True), \
+            #         "Parameter hashes not matching across DP replicas"
+            #     torch.distributed.barrier()
+            #     print_rank_0(f">>> Weight hashes match after {iteration} iterations...")
+            #     if args.use_distributed_optimizer and args.overlap_param_gather:
+            #         optimizer.enable_pre_hook()
+
+            # # Autoresume
+            # if args.adlr_autoresume and \
+            # (iteration % args.adlr_autoresume_interval == 0):
+            #     check_adlr_autoresume_termination(iteration, model, optimizer,
+            #                                     opt_param_scheduler)
+
+            # Evaluation
+            if args.eval_interval and iteration % args.eval_interval == 0 and \
+                args.do_valid:
+                timers('interval-time').stop()
+                if args.use_distributed_optimizer and args.overlap_param_gather:
+                    disable_forward_pre_hook(model)
+                    pre_hook_enabled = False
+                if args.manual_gc and args.manual_gc_eval:
+                    # Collect all objects.
+                    gc.collect()
+                prefix = f'iteration {iteration}'
+                timers('eval-time', log_level=0).start(barrier=True)
+                evaluate_and_print_results(prefix, forward_step_func,
+                                        valid_data_iterator, model,
+                                        iteration, process_non_loss_data_func,
+                                        config, verbose=False, write_to_tensorboard=True,
+                                        non_loss_data_func=non_loss_data_func)
+                eval_duration += timers('eval-time').elapsed()
+                eval_iterations += args.eval_iters
+                timers('eval-time').stop()
+                one_logger_utils.track_e2e_metrics()
+
+                if args.manual_gc and args.manual_gc_eval:
+                    # Collect only the objects created and used in evaluation.
+                    gc.collect(generation=0)
+                if args.use_distributed_optimizer and args.overlap_param_gather:
+                    enable_forward_pre_hook(model)
+                    pre_hook_enabled = True
+                timers('interval-time', log_level=0).start(barrier=True)
+
+
+                if args.enable_ft_package and ft_integration.get_rank_monitor_client() is not None:
+                    ft_integration.get_rank_monitor_client(
+                        ft_integration.StateMachineActions.EVAL_HEARTBEAT).send_heartbeat()
+
+            # Miscellaneous post-training-step functions (e.g., FT heartbeats, GC).
+            # Some of these only happen at specific iterations.
+            post_training_step_callbacks(model, optimizer, opt_param_scheduler, iteration, prof,
+                                        num_floating_point_operations_since_last_log_event)
+
+            # Checkpoint and decide whether to exit.
+            should_exit = checkpoint_and_decide_exit(model, optimizer, opt_param_scheduler, iteration,
+                                                    num_floating_point_operations_so_far,
+                                                    checkpointing_context, train_data_iterator)
+            if should_exit:
+                break
+
+    one_logger_utils.track_e2e_metrics()
+
+    # Flush TensorBoard, WandB writers and one-logger.
+    writer = get_tensorboard_writer()
+    if writer:
+        writer.flush()
+
+    # Close out pre-hooks if using distributed optimizer and overlapped param gather.
+    if pre_hook_enabled:
+        disable_forward_pre_hook(model)
+
+    if args.enable_ft_package and ft_integration.get_rank_monitor_client() is not None:
+        ft_integration.get_rank_monitor_client().shutdown_workload_monitoring()
+
+    maybe_finalize_async_save(blocking=True)
+
+    # If any exit conditions (signal handler, duration, iterations) have been reached, exit.
+    if should_exit:
+        wandb_writer = get_wandb_writer()
+        if wandb_writer:
+            wandb_writer.finish()
+        sys.exit(exit_code)
+
+    return iteration, num_floating_point_operations_so_far
+
+
+import megatron.training
+megatron.training.training.train_step = train_step
+megatron.training.training.training_log = training_log
+megatron.training.training.train = train
diff --git a/megatron-lm-musa-patch/musa_patch/utils.py b/megatron-lm-musa-patch/musa_patch/utils.py
new file mode 100644
index 00000000..ab83ec74
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/utils.py
@@ -0,0 +1,68 @@
+import contextlib
+import gc
+import math
+import os
+import subprocess
+from dataclasses import dataclass
+from datetime import timedelta
+from typing import Generator, Iterable, List, Optional, Set, Union
+
+# hardcoded BF16 type peak flops for Moore Threads S4000, and S5000 GPU
+def get_peak_flops(device_name: str) -> int:
+    try:
+        # Run the lspci command and capture the output
+        result = subprocess.run(["lspci", "-d", "1ed5:"], stdout=subprocess.PIPE, text=True)
+        # Filter the output for lines containing both "NVIDIA" and "H100"
+        filtered_lines = [
+            line
+            for line in result.stdout.splitlines()
+            if "NVIDIA" in line and "H100" in line
+        ]
+        # Join all filtered lines into a single string
+        device_name = " ".join(filtered_lines) or device_name
+    except FileNotFoundError as e:
+        logger.warning(f"Error running lspci: {e}, fallback to use device_name")
+    if "A100" in device_name:
+        # data from https://www.nvidia.com/en-us/data-center/a100/
+        return 312e12
+    elif "H100" in device_name:
+        # data from https://www.nvidia.com/en-us/data-center/h100/
+        # NOTE: Specifications are one-half lower without sparsity.
+        if "NVL" in device_name:
+            return 835e12
+        elif "PCIe" in device_name:
+            return 756e12
+        else:  # for H100 SXM and other variants
+            return 989e12
+    elif "H200" in device_name:
+        # data from https://www.nvidia.com/en-us/data-center/h200/
+        return 989e12
+    else:  # for other GPU types, assume A100
+        logger.warning(f"Peak flops undefined for: {device_name}, fallback to A100")
+        return 312e12
+
+
+@dataclass(frozen=True)
+class Color:
+    black = "\033[30m"
+    red = "\033[31m"
+    green = "\033[32m"
+    yellow = "\033[33m"
+    blue = "\033[34m"
+    magenta = "\033[35m"
+    cyan = "\033[36m"
+    white = "\033[37m"
+    reset = "\033[39m"
+
+
+@dataclass(frozen=True)
+class NoColor:
+    black = ""
+    red = ""
+    green = ""
+    yellow = ""
+    blue = ""
+    magenta = ""
+    cyan = ""
+    white = ""
+    reset = ""
diff --git a/megatron-lm-musa-patch/musa_patch/zbb_light/__init__.py b/megatron-lm-musa-patch/musa_patch/zbb_light/__init__.py
new file mode 100644
index 00000000..8b0d05a8
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/zbb_light/__init__.py
@@ -0,0 +1,2 @@
+
+from .zbpp_light import patch_megatron
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/zbb_light/auto_schedule.py b/megatron-lm-musa-patch/musa_patch/zbb_light/auto_schedule.py
new file mode 100644
index 00000000..e9786921
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/zbb_light/auto_schedule.py
@@ -0,0 +1,94 @@
+from dataclasses import dataclass
+
+@dataclass(eq=True)
+class ScheduledNode:
+    type: str
+    stage: int
+    minibatch: int
+
+def auto_schedule(nstages, nmb):
+    f = [0] * nstages
+    b = [0] * nstages
+    # W is a stack for each stage
+    w = [[] for i in range(nstages)]
+    result = [[] for i in range(nstages)]
+    last_compute_id = [-1] * nstages
+    def schedule_f(stage):
+        if not stage == 0:
+            result[stage].append(ScheduledNode(
+                'RECV_FORWARD',
+                stage=stage,
+                minibatch=f[stage]))
+        result[stage].append(
+            ScheduledNode(
+              type='F',
+              stage=stage,
+              minibatch=f[stage]))
+        last_compute_id[stage] = len(result[stage]) - 1
+        if not stage == nstages - 1:
+            result[stage].append(ScheduledNode(
+                'SEND_FORWARD',
+                stage=stage,
+                minibatch=f[stage]))
+        f[stage] += 1
+    def schedule_b(stage):
+        if not stage == nstages - 1:
+            result[stage].append(ScheduledNode(
+                'RECV_BACKWARD',
+                stage=stage,
+                minibatch=b[stage]))
+        result[stage].append(
+            ScheduledNode(
+              type='B',
+              stage=stage,
+              minibatch=b[stage]))
+        last_compute_id[stage] = len(result[stage]) - 1
+        if not stage == 0:
+            result[stage].append(ScheduledNode(
+                'SEND_BACKWARD',
+                stage=stage,
+                minibatch=b[stage]))
+        w[stage].append(b[stage])
+        b[stage] += 1
+    def schedule_w(stage):
+        assert last_compute_id[stage] != -1
+        if result[stage][last_compute_id[stage]].type == 'B' and (stage == 0 or not f[stage] == nmb):
+            result[stage][last_compute_id[stage]].type = 'BW'
+        else:
+            result[stage].append(
+                ScheduledNode(
+                  type='W',
+                  stage=stage,
+                  minibatch=w[stage][-1]))
+            last_compute_id[stage] = len(result[stage]) - 1
+        w[stage].pop(-1)
+        
+    
+    for stage in range(nstages):
+        num_warmup_microbatches = nstages - stage - 1
+        num_warmup_microbatches = min(num_warmup_microbatches, nmb)
+        remaining = nmb - num_warmup_microbatches
+        for i in range(num_warmup_microbatches):
+            schedule_f(stage)
+        for i in range(remaining):
+            schedule_f(stage)
+            schedule_b(stage)
+            if i >= stage:
+                schedule_w(stage)
+        for i in range(num_warmup_microbatches):
+            schedule_b(stage)
+            if remaining + i >= stage:
+                schedule_w(stage)
+        assert f[stage] == b[stage] == nmb
+        while len(w[stage]) > 0:
+            schedule_w(stage)
+
+    for stage in range(nstages):
+        print(' '.join([f'{x.type}{x.minibatch}' for x in result[stage] if x.type in {'F', 'B', 'W', 'BW'}]))
+    return result
+
+
+if __name__ == "__main__":
+    auto_schedule(4, 12)
+    auto_schedule(8, 4)
+    
diff --git a/megatron-lm-musa-patch/musa_patch/zbb_light/weight_grad_store.py b/megatron-lm-musa-patch/musa_patch/zbb_light/weight_grad_store.py
new file mode 100644
index 00000000..530b17d1
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/zbb_light/weight_grad_store.py
@@ -0,0 +1,56 @@
+import queue
+import torch
+from typing import List
+
+class WeightGradStore:
+
+    cache = []
+    weight_grad_queue = queue.Queue()
+    combine_bw = False
+
+    @classmethod
+    def set_combine_bw(cls, combine_bw):
+        # For the following backward pass, combine W with B and skip next W
+        cls.combine_bw = combine_bw
+
+    @classmethod
+    def split_bw(cls):
+        # For the following backward pass, combine W with B and skip next W
+        return not cls.combine_bw
+
+    @classmethod
+    def put(cls, inputs, func, pos_func = None):
+        if cls.combine_bw:
+            func(*inputs)
+            if pos_func is not None:
+                if isinstance(inputs[0], List):
+                    pos_func(*inputs[0])
+                else:
+                    pos_func(inputs[0])
+            return
+        # Store the weight gradient computation of linear layers.
+        cls.cache.append((inputs, func, pos_func))
+
+    @classmethod
+    def flush(cls):
+        if cls.combine_bw:
+            cls.combine_bw = False
+            return
+        # Collect all stored computations during backward as a W.
+        cls.weight_grad_queue.put(cls.cache)
+        cls.cache = []
+
+    @classmethod
+    def pop(cls):
+        assert not cls.combine_bw
+        # Execute a single W.
+        assert cls.weight_grad_queue.qsize() > 0
+        stored_grads = cls.weight_grad_queue.get()
+        with torch.enable_grad():
+            for inputs, func, pos_func in stored_grads:
+                func(*inputs)
+                if pos_func is not None:
+                    if isinstance(inputs[0], List):
+                        pos_func(*inputs[0])
+                    else:
+                        pos_func(inputs[0])
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/musa_patch/zbb_light/zb_schedule.py b/megatron-lm-musa-patch/musa_patch/zbb_light/zb_schedule.py
new file mode 100644
index 00000000..eeda4811
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/zbb_light/zb_schedule.py
@@ -0,0 +1,580 @@
+import contextlib
+import itertools
+from typing import Iterator, List, Union
+import os
+import torch
+
+from megatron import core
+from megatron.core import parallel_state
+from megatron.core.utils import get_model_config, get_model_type, get_model_xattn
+from megatron.core.parallel_state import (
+    get_pipeline_model_parallel_group,
+    get_pipeline_model_parallel_next_rank,
+    get_pipeline_model_parallel_prev_rank,
+)
+from megatron.core.pipeline_parallel.schedules import (
+    recv_forward,
+    send_forward,
+    recv_backward,
+    send_backward,
+    deallocate_output_tensor,
+    forward_step,
+    backward_step,
+    get_tensor_shapes,
+)
+from megatron.core.num_microbatches_calculator import get_num_microbatches
+from . import auto_schedule
+from .weight_grad_store import WeightGradStore
+
+
+AUTO_SCHEDULE_COMMUNICATION_TYPES = {'RECV_FORWARD', 'RECV_BACKWARD', 'SEND_FORWARD', 'SEND_BACKWARD'}
+
+
+def fused_pipeline_ops(
+    tensor_send_prev: List[torch.Tensor],
+    tensor_recv_prev: List[torch.Tensor],
+    tensor_send_next: List[torch.Tensor],
+    tensor_recv_next: List[torch.Tensor],
+    group: torch.distributed.ProcessGroup,
+):
+    ops = []
+    if parallel_state.get_pipeline_model_parallel_rank() % 2 == 0:
+        for t in tensor_send_next:
+            send_next_op = torch.distributed.P2POp(
+                torch.distributed.isend,
+                t,
+                get_pipeline_model_parallel_next_rank(),
+                group,
+            )
+            ops.append(send_next_op)
+        for t in tensor_recv_prev:
+            recv_prev_op = torch.distributed.P2POp(
+                torch.distributed.irecv,
+                t,
+                get_pipeline_model_parallel_prev_rank(),
+                group,
+            )
+            ops.append(recv_prev_op)
+        for t in tensor_send_prev:
+            send_prev_op = torch.distributed.P2POp(
+                torch.distributed.isend,
+                t,
+                get_pipeline_model_parallel_prev_rank(),
+                group,
+            )
+            ops.append(send_prev_op)
+        for t in tensor_recv_next:
+            recv_next_op = torch.distributed.P2POp(
+                torch.distributed.irecv,
+                t,
+                get_pipeline_model_parallel_next_rank(),
+                group,
+            )
+            ops.append(recv_next_op)
+    else:
+        for t in tensor_recv_prev:
+            recv_prev_op = torch.distributed.P2POp(
+                torch.distributed.irecv,
+                t,
+                get_pipeline_model_parallel_prev_rank(),
+                group,
+            )
+            ops.append(recv_prev_op)
+        for t in tensor_send_next:
+            send_next_op = torch.distributed.P2POp(
+                torch.distributed.isend,
+                t,
+                get_pipeline_model_parallel_next_rank(),
+                group,
+            )
+            ops.append(send_next_op)
+        for t in tensor_recv_next:
+            recv_next_op = torch.distributed.P2POp(
+                torch.distributed.irecv,
+                t,
+                get_pipeline_model_parallel_next_rank(),
+                group,
+            )
+            ops.append(recv_next_op)
+        for t in tensor_send_prev:
+            send_prev_op = torch.distributed.P2POp(
+                torch.distributed.isend,
+                t,
+                get_pipeline_model_parallel_prev_rank(),
+                group,
+            )
+            ops.append(send_prev_op)
+        
+    if len(ops) > 0:
+        reqs = torch.distributed.batch_isend_irecv(ops)
+        for req in reqs:
+            req.wait()
+    else:
+        reqs = []
+    return reqs,[],[],[],[]
+
+def p2p_pipeline_ops(
+    tensor_send_prev: List[torch.Tensor],
+    tensor_recv_prev: List[torch.Tensor],
+    tensor_send_next: List[torch.Tensor],
+    tensor_recv_next: List[torch.Tensor],
+    group: torch.distributed.ProcessGroup,
+):
+    assert( len(tensor_send_prev) <= 1 and len(tensor_recv_prev) <= 1 and len(tensor_send_next)<=1 and len(tensor_recv_next) <=1)
+    reqs, sp_reqs, rp_reqs, sn_reqs, rn_reqs= [], [], [], [], []
+    if parallel_state.get_pipeline_model_parallel_rank() % 2 == 0:
+        for t in tensor_send_next:
+            send_next_req = torch.distributed.isend(
+                tensor=t,
+                dst=get_pipeline_model_parallel_next_rank(),
+                group=group,
+            )
+            sn_reqs.append(send_next_req)
+            reqs.append(send_next_req)
+
+        for t in tensor_recv_prev:
+            recv_prev_req = torch.distributed.irecv(
+                tensor=t,
+                src=get_pipeline_model_parallel_prev_rank(),
+                group=group,
+            )
+            rp_reqs.append(recv_prev_req)
+            reqs.append(recv_prev_req)
+    
+        for t in tensor_send_prev:
+            send_prev_req = torch.distributed.isend(
+                tensor=t,
+                dst=get_pipeline_model_parallel_prev_rank(),
+                group=group,
+            )
+            sp_reqs.append(send_prev_req)
+            reqs.append(send_prev_req)
+
+        for t in tensor_recv_next:
+            recv_next_req = torch.distributed.irecv(
+                tensor=t,
+                src=get_pipeline_model_parallel_next_rank(),
+                group=group,
+            )
+            rn_reqs.append(recv_next_req)
+            reqs.append(recv_next_req)
+    else:
+        
+        for t in tensor_recv_prev:
+            recv_prev_req = torch.distributed.irecv(
+                tensor=t,
+                src=get_pipeline_model_parallel_prev_rank(),
+                group=group,
+            )
+            rp_reqs.append(recv_prev_req)
+            reqs.append(recv_prev_req)
+
+        for t in tensor_send_next:
+            send_next_req = torch.distributed.isend(
+                tensor=t,
+                dst=get_pipeline_model_parallel_next_rank(),
+                group=group,
+            )
+            sn_reqs.append(send_next_req)
+            reqs.append(send_next_req)   
+
+        for t in tensor_recv_next:
+            recv_next_req = torch.distributed.irecv(
+                tensor=t,
+                src=get_pipeline_model_parallel_next_rank(),
+                group=group,
+            )
+            rn_reqs.append(recv_next_req)
+            reqs.append(recv_next_req)
+    
+        for t in tensor_send_prev:
+            send_prev_req = torch.distributed.isend(
+                tensor=t,
+                dst=get_pipeline_model_parallel_prev_rank(),
+                group=group,
+            )
+            sp_reqs.append(send_prev_req)
+            reqs.append(send_prev_req)
+        
+    # for req in reqs:
+    #         req.wait() 
+    return (reqs, sp_reqs, rp_reqs, sn_reqs, rn_reqs)
+
+
+
+def multi_pipeline_ops(
+    tensor_send_prev: List[torch.Tensor],
+    tensor_recv_prev: List[torch.Tensor],
+    tensor_send_next: List[torch.Tensor],
+    tensor_recv_next: List[torch.Tensor],
+):
+    group = get_pipeline_model_parallel_group()
+    if True:
+        p2p_func = fused_pipeline_ops
+    else:
+        p2p_func = p2p_pipeline_ops
+    return p2p_func(
+        tensor_send_prev=tensor_send_prev,
+        tensor_recv_prev=tensor_recv_prev,
+        tensor_send_next=tensor_send_next,
+        tensor_recv_next=tensor_recv_next,
+        group=group,
+    )
+
+
+class ZeroBubbleScheduler:
+
+    def __init__(self):
+        self._reset()
+
+        self.schedules = None
+        self.send_tensor_shapes = None
+        self.recv_tensor_shapes = None
+        self.config = None
+        self.forward_step_func = None
+        self.data_iterator = None
+        self.model = None
+        self.model_type = None
+        self.num_microbatches = None
+        self.collect_non_loss_data = None
+        self.forward_only = None
+        self.no_sync_context = None
+        self.no_sync_func = None
+
+        self.do_post_validation = False
+        self.is_first_run = True
+        self.optimizer = None
+
+    def _free_buffers(self):
+        self.input_tensors = []
+        self.output_tensors = []
+        self.send_forward_buffer = []
+        self.recv_forward_buffer = []
+        self.send_backward_buffer = []
+        self.recv_backward_buffer = []
+        self.forward_data_store = []
+
+    def _reset(self):
+        # Input, output tensors only need to be saved when doing backward passes
+        self._free_buffers()
+        self.send_handles = []
+        self.communication_batch = {
+            'SEND_NEXT': [],
+            'RECV_NEXT': [],
+            'SEND_PREV': [],
+            'RECV_PREV': [],
+        }
+
+    def get_schedules(self):
+        if self.schedules is None:
+            # bootstrap_p2p_communication(self.config)
+            self.schedules = auto_schedule.auto_schedule(
+                parallel_state.get_pipeline_model_parallel_world_size(),
+                get_num_microbatches())[parallel_state.get_pipeline_model_parallel_rank()]
+
+        return self.schedules
+
+    @classmethod
+    def direction_map(cls, node):
+        return {
+            'SEND_FORWARD': 'SEND_NEXT',
+            'RECV_FORWARD': 'RECV_PREV',
+            'SEND_BACKWARD': 'SEND_PREV',
+            'RECV_BACKWARD': 'RECV_NEXT',
+        }[node.type]
+
+    def buffer_map(self, node):
+        return {
+            'SEND_FORWARD': self.send_forward_buffer,
+            'RECV_FORWARD': self.recv_forward_buffer,
+            'SEND_BACKWARD': self.send_backward_buffer,
+            'RECV_BACKWARD': self.recv_backward_buffer,
+        }[node.type]
+
+    def flush(self):
+        name = '_'.join(
+            [f'{v[0].type}.{v[0].minibatch}' for v in itertools.chain(
+                *[vs for k, vs in self.communication_batch.items()])])
+        assert self.send_tensor_shapes == self.recv_tensor_shapes
+        assert len(self.send_tensor_shapes) == 1
+        sn_tensors = [
+            self.buffer_map(x[0]).pop(0)[0]
+            for x in self.communication_batch['SEND_NEXT']
+        ]
+        sp_tensors = [
+            self.buffer_map(x[0]).pop(0)[0]
+            for x in self.communication_batch['SEND_PREV']
+        ]
+
+        rn_tensors = [
+            torch.empty(
+                self.send_tensor_shapes[0],
+                requires_grad=True,
+                device=torch.cuda.current_device(),
+                dtype=self.config.pipeline_dtype,
+            ) for x in self.communication_batch['RECV_NEXT']
+        ]
+        rp_tensors = [
+            torch.empty(
+                self.send_tensor_shapes[0],
+                requires_grad=True,
+                device=torch.cuda.current_device(),
+                dtype=self.config.pipeline_dtype,
+            ) for x in self.communication_batch['RECV_PREV']
+        ]
+        (reqs, sp_reqs, rp_reqs, sn_reqs, rn_reqs) = multi_pipeline_ops(
+            sp_tensors,
+            rp_tensors,
+            sn_tensors,
+            rn_tensors
+        )
+        # We don't care about the reqs order here, all users need to all reqs to finish
+        for x in self.communication_batch['RECV_NEXT']:
+            self.buffer_map(x[0]).append(([rn_tensors.pop(0)], [rn_reqs]))
+        for x in self.communication_batch['RECV_PREV']:
+            self.buffer_map(x[0]).append(([rp_tensors.pop(0)], [rp_reqs]))
+        self.send_handles.append([sp_reqs, sn_reqs])
+        assert(not rn_tensors)
+        assert(not rp_tensors)
+        for direction in ['SEND_PREV', 'SEND_NEXT']:
+            for id, x in enumerate(self.communication_batch[direction]):
+                if x[0].type == 'SEND_FORWARD':
+                    deallocate_output_tensor(sp_tensors[id] if direction == 'SEND_PREV' else sn_tensors[id],
+                                             self.config.deallocate_pipeline_outputs)
+        for k, v in self.communication_batch.items():
+            v.clear()
+
+    def add_communication(
+        self,
+        scheduled_node: auto_schedule.ScheduledNode,
+        next_is_comm: bool,
+        next_compute: auto_schedule.ScheduledNode
+    ):
+        if self.forward_only and 'BACKWARD' in scheduled_node.type:
+            return
+        self.communication_batch[self.direction_map(scheduled_node)].append(
+            (scheduled_node, None))
+        def is_consumer(scheduled_node, next_compute):
+            if scheduled_node.minibatch == next_compute.minibatch:
+                if scheduled_node.type == 'RECV_FORWARD' and next_compute.type == 'F':
+                    return True
+                if scheduled_node.type == 'RECV_BACKWARD' and next_compute.type == 'B':
+                    return True
+            return False
+        if (next_compute is not None and is_consumer(scheduled_node, next_compute)) or not next_is_comm or self.forward_only:
+            self.flush()
+
+    def schedule_f(self, scheduled_node):
+        if core.parallel_state.is_pipeline_first_stage():
+            input_tensor = [None] * len(self.recv_tensor_shapes)
+        else:
+            input_tensor = self.recv_forward_buffer.pop(0)
+            for h in input_tensor[1]:
+                for hh in h:
+                     hh.wait()
+            input_tensor = input_tensor[0]
+        
+        output_tensor, _ = forward_step(
+            self.forward_step_func,
+            self.data_iterator,
+            self.model,
+            self.num_microbatches,
+            input_tensor,
+            self.forward_data_store,
+            self.config,
+            self.collect_non_loss_data,
+            checkpoint_activations_microbatch=None,
+        )
+        if not core.parallel_state.is_pipeline_last_stage():
+            self.send_forward_buffer.append(output_tensor)
+        if not self.forward_only:
+            self.input_tensors.append(input_tensor)
+            self.output_tensors.append(output_tensor)
+            if core.parallel_state.is_pipeline_last_stage():
+                deallocate_output_tensor(output_tensor[0], self.config.deallocate_pipeline_outputs)
+
+    def schedule_b(self, scheduled_node):
+        WeightGradStore.set_combine_bw(scheduled_node.type == 'BW')
+        if not self.forward_only:
+            input_tensor = self.input_tensors.pop(0)
+            output_tensor = self.output_tensors.pop(0)
+
+            if core.parallel_state.is_pipeline_last_stage():
+                # Keep the original behavior when we do a dummy communication
+                output_tensor_grad = [None] * len(self.send_tensor_shapes)
+            else:
+                output_tensor_grad = self.recv_backward_buffer.pop(0)
+                for h in output_tensor_grad[1]:
+                    for hh in h:
+                        hh.wait()
+                output_tensor_grad = output_tensor_grad[0]
+            input_tensor_grad = backward_step(
+                input_tensor, output_tensor, output_tensor_grad, self.model_type,
+                self.config
+            )
+            self.send_backward_buffer.append(input_tensor_grad)
+            WeightGradStore.flush()
+
+    def schedule_w(self, scheduled_node):
+        if not self.forward_only:
+            WeightGradStore.pop()
+
+    def disable_grad_sync(self):
+        """Disable asynchronous grad reductions"""
+        if self.no_sync_context is None:
+            self.no_sync_context = self.no_sync_func()
+            self.no_sync_context.__enter__()
+
+    def enable_grad_sync(self):
+        """Enable asynchronous grad reductions"""
+        if self.no_sync_context is not None:
+            self.no_sync_context.__exit__(None, None, None)
+            self.no_sync_context = None
+
+    def prepare(
+        self,
+        forward_step_func,
+        data_iterator: Union[Iterator, List[Iterator]],
+        model: Union[torch.nn.Module, List[torch.nn.Module]],
+        num_microbatches: int,
+        seq_length: int,
+        micro_batch_size: int,
+        decoder_seq_length: int = None,
+        forward_only: bool = False,
+        collect_non_loss_data: bool = False,
+    ):
+        if isinstance(model, list):
+            assert (
+                len(model) == 1
+            ), "non-interleaved pipeline parallelism does not support model chunking"
+            model = model[0]
+        if isinstance(data_iterator, list):
+            assert (
+                len(data_iterator) == 1
+            ), "non-pipeline-parallel schedule does not support model chunking"
+            data_iterator = data_iterator[0]
+
+        config = get_model_config(model)
+        if config.overlap_p2p_comm:
+            raise ValueError(
+                "Non-interleaved pipeline parallelism does not support overlapping p2p communication"
+            )
+        # Disable async grad reductions
+        no_sync_func = config.no_sync_func
+        if no_sync_func is None:
+            no_sync_func = contextlib.nullcontext
+        self.no_sync_func = no_sync_func
+        self.no_sync_context = None
+
+        # Checkpoint the activations of partial Transformer layers in a number of micro-batches
+        # within the maximum outstanding micro-batch backpropagations.
+        # Micro-batches with the ids less than 'num_microbatches_with_partial_activation_checkpoints'
+        # checkpoint partial Transformer layers (or skip checkpointing) and
+        # the rest of micro-batches within a window of micro-batches checkpoint
+        # all Transformer layers. The window of micro-batches is set by the maximum
+        # outstanding backpropagations and becomes smaller at later pipeline stages.
+        # Please refer the appendix C in https://arxiv.org/pdf/2205.05198.pdf
+        assert config.num_microbatches_with_partial_activation_checkpoints is None
+
+        model_type = get_model_type(model)
+        encoder_decoder_xattn = get_model_xattn(model)
+
+        rank = parallel_state.get_pipeline_model_parallel_rank()
+        recv_tensor_shapes = get_tensor_shapes(
+            rank=rank - 1,
+            model_type=model_type,
+            seq_length=seq_length,
+            micro_batch_size=micro_batch_size,
+            decoder_seq_length=decoder_seq_length,
+            config=config,
+            encoder_decoder_xattn=encoder_decoder_xattn,
+
+        )
+        send_tensor_shapes = get_tensor_shapes(
+            rank=rank,
+            model_type=model_type,
+            seq_length=seq_length,
+            micro_batch_size=micro_batch_size,
+            decoder_seq_length=decoder_seq_length,
+            config=config,
+            encoder_decoder_xattn=encoder_decoder_xattn,
+        )
+        
+        self.config = config
+        self.model_type = model_type
+        self.recv_tensor_shapes = recv_tensor_shapes
+        self.send_tensor_shapes = send_tensor_shapes
+        self.forward_step_func = forward_step_func
+        self.data_iterator = data_iterator
+        self.model = model
+        self.num_microbatches = num_microbatches
+        self.collect_non_loss_data = collect_non_loss_data
+        self.forward_only = forward_only
+        self._reset()
+        self.it = 0
+
+
+
+    def run(self):
+        # print('-----run:--')
+        schedules = self.get_schedules()
+        self.disable_grad_sync()
+        for it in range(len(schedules)):
+            scheduled_node = schedules[it]
+            # print('----scheduled_node.type:', scheduled_node.type)
+            if scheduled_node.type in AUTO_SCHEDULE_COMMUNICATION_TYPES:
+                next_is_comm = it + 1 < len(schedules) and schedules[it + 1].type in AUTO_SCHEDULE_COMMUNICATION_TYPES
+                next_compute = list(filter(lambda x: x.type in ['F', 'B', 'W'], schedules[it + 1:]))
+                next_compute = next_compute[0] if len(next_compute) > 0 else None
+                self.add_communication(scheduled_node, next_is_comm, next_compute)
+            elif scheduled_node.type == 'F':
+                self.schedule_f(scheduled_node)
+            elif scheduled_node.type in {'B', 'BW'}:
+                self.schedule_b(scheduled_node)
+            elif scheduled_node.type == 'W':
+                self.schedule_w(scheduled_node)
+            else:
+                raise ValueError(f"Unknown node type {scheduled_node.type}")
+
+        for h in self.send_handles:
+            for hh in h:
+                for hhh in hh:
+                    hhh.wait()
+
+        if not self.forward_only:
+            # Launch any remaining grad reductions
+            if self.no_sync_context is not None:
+                self.enable_grad_sync()
+
+            if self.config.finalize_model_grads_func is not None:
+                # Finalize model grads (perform full grad all-reduce / reduce-scatter for
+                # data parallelism, layernorm all-reduce for sequence parallelism).
+                self.config.finalize_model_grads_func([self.model])
+
+        return self.forward_data_store
+
+    def __call__(self, *args, **kwargs):
+        self.prepare(*args, **kwargs)
+        return self.run()
+
+zb_scheduler = ZeroBubbleScheduler()
+
+def bootstrap_p2p_communication(config):
+
+    if parallel_state.get_pipeline_model_parallel_world_size() > 1:
+        nccl_init_tensor = [torch.Tensor([torch.distributed.get_rank() + 100]).cuda() ]
+        shape = [(1,)]
+        if not parallel_state.is_pipeline_first_stage(ignore_virtual=True):
+            recv_forward(shape, config)
+        if not parallel_state.is_pipeline_last_stage(ignore_virtual=True):
+            send_forward(nccl_init_tensor, shape, config)
+            recv_backward(shape, config)
+        if not parallel_state.is_pipeline_first_stage(ignore_virtual=True):
+            send_backward(nccl_init_tensor, shape, config)
+            exit()
+        torch.distributed.barrier()
+
+def get_zero_bubble_forward_backward_func():
+    pipeline_model_parallel_size = parallel_state.get_pipeline_model_parallel_world_size()
+    assert (pipeline_model_parallel_size > 1), "zero-bubble must be used with pipelined parallelism"
+    return zb_scheduler
diff --git a/megatron-lm-musa-patch/musa_patch/zbb_light/zbpp_light.py b/megatron-lm-musa-patch/musa_patch/zbb_light/zbpp_light.py
new file mode 100644
index 00000000..54e8a95f
--- /dev/null
+++ b/megatron-lm-musa-patch/musa_patch/zbb_light/zbpp_light.py
@@ -0,0 +1,126 @@
+import os, sys
+from typing import Optional, Tuple, Union, List
+import torch
+def wrap_w_funcs(original_func):
+    from .weight_grad_store import WeightGradStore
+    def wrapped_func(total_input, grad_output, weight):
+        from megatron.training import get_args
+        if os.getenv("ENABLE_ZERO_BUBBLE", "0") == "1":
+            WeightGradStore.put((total_input, grad_output, weight), original_func)
+        else:
+            original_func(total_input, grad_output, weight)
+    return wrapped_func
+
+def wrap_w_funcs_gemm(original_func):
+    def wrapped_func(
+        A: torch.Tensor,
+        B: torch.Tensor,
+        dtype: torch.dtype,
+        workspace: torch.Tensor,
+        layout: str = "TN",
+        **kwargs
+    ) -> Tuple[Union[torch.Tensor, None], ...]:
+
+        import functools
+        from musa_patch.zbb_light.weight_grad_store import WeightGradStore
+        from megatron.training import get_args
+        if layout == "NT" and os.getenv("ENABLE_ZERO_BUBBLE", "0") == "1":
+            WeightGradStore.put(
+                                (A, B, dtype, workspace),
+                                functools.partial(
+                                    original_func,
+                                    layout="NT",
+                                    **kwargs)
+                                )
+            return (None, None, None)
+        else:
+            return original_func(A, B, dtype, workspace, layout=layout, **kwargs)
+
+
+    return wrapped_func
+
+def wrap_w_general_gemm(original_func):
+    def wrapped_func(
+        A: torch.Tensor,
+        B: torch.Tensor,
+        workspace: torch.Tensor,
+        layout: str = "TN",
+        **kwargs
+    ) -> Tuple[Union[torch.Tensor, None], ...]:
+
+        import functools
+        from musa_patch.zbb_light.weight_grad_store import WeightGradStore
+        from megatron.training import get_args
+        if layout == "NT" and os.getenv("ENABLE_ZERO_BUBBLE", "0") == "1":
+            from transformer_engine.pytorch.utils import clear_tensor_data
+            WeightGradStore.put(
+                                (A, B, workspace),
+                                functools.partial(
+                                    original_func,
+                                    layout="NT",
+                                    **kwargs),
+                                clear_tensor_data
+                                )
+            return (None, None, None, None)
+        else:
+            return original_func(A, B, workspace, layout=layout, **kwargs)
+
+
+    return wrapped_func
+
+def wrap_w_general_grouped_gemm(original_func):
+    def wrapped_func(
+        A: List[torch.Tensor],
+        B: List[torch.Tensor],
+        out: List[torch.Tensor],
+        out_dtype: torch.dtype,
+        workspaces: List[torch.Tensor],
+        layout: str = "TN",
+        use_bias: bool = False,
+        **kwargs
+    ) -> Tuple[Union[torch.Tensor, None], ...]:
+
+        import functools
+        from musa_patch.zbb_light.weight_grad_store import WeightGradStore
+        from megatron.training import get_args
+        if layout == "NT" and os.getenv("ENABLE_ZERO_BUBBLE", "0") == "1":
+            from transformer_engine.pytorch.utils import clear_tensor_data
+            WeightGradStore.put(
+                                (A, B, out, out_dtype, workspaces),
+                                functools.partial(
+                                    original_func,
+                                    layout="NT",
+                                    use_bias = False,
+                                    **kwargs),
+                                clear_tensor_data
+                                )
+            assert use_bias== False, "Zero-bubble doesn't support the case where bias is used."
+            return (None, [None] * len(A), None)
+        else:
+            return original_func(A, B, out, out_dtype, workspaces, use_bias = use_bias, layout=layout, **kwargs)
+
+
+    return wrapped_func
+
+    
+def patch_megatron():
+    assert all([not x.startswith('megatron') for x in sys.modules.keys()]), 'Please patch zbpp before importing any megatron modules.'
+    import fused_weight_gradient_mlp_cuda
+    assert hasattr(fused_weight_gradient_mlp_cuda, 'wgrad_gemm_accum_fp32')
+    assert hasattr(fused_weight_gradient_mlp_cuda, 'wgrad_gemm_accum_fp16')
+    fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp32 = wrap_w_funcs(fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp32)
+    fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp16 = wrap_w_funcs(fused_weight_gradient_mlp_cuda.wgrad_gemm_accum_fp16)
+
+    import transformer_engine.pytorch.cpp_extensions
+    transformer_engine.pytorch.cpp_extensions.gemm = wrap_w_funcs_gemm(transformer_engine.pytorch.cpp_extensions.gemm)
+    transformer_engine.pytorch.cpp_extensions.general_gemm = wrap_w_general_gemm(transformer_engine.pytorch.cpp_extensions.general_gemm)
+    transformer_engine.pytorch.cpp_extensions.general_grouped_gemm = wrap_w_general_grouped_gemm(transformer_engine.pytorch.cpp_extensions.general_grouped_gemm)
+    
+    import megatron.core.pipeline_parallel
+    from .zb_schedule import get_zero_bubble_forward_backward_func
+    assert hasattr(megatron.core.pipeline_parallel.schedules, 'get_forward_backward_func')
+    assert hasattr(megatron.core.pipeline_parallel, 'get_forward_backward_func')
+    megatron.core.pipeline_parallel.schedules.get_forward_backward_func_origin = megatron.core.pipeline_parallel.schedules.get_forward_backward_func
+    megatron.core.pipeline_parallel.get_forward_backward_func_origin = megatron.core.pipeline_parallel.get_forward_backward_func
+    megatron.core.pipeline_parallel.schedules.get_forward_backward_func = get_zero_bubble_forward_backward_func
+    megatron.core.pipeline_parallel.get_forward_backward_func = get_zero_bubble_forward_backward_func
diff --git a/megatron-lm-musa-patch/test/compare.ipynb b/megatron-lm-musa-patch/test/compare.ipynb
new file mode 100644
index 00000000..402b2c77
--- /dev/null
+++ b/megatron-lm-musa-patch/test/compare.ipynb
@@ -0,0 +1,1252 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "#!/usr/bin/env python\n",
+    "# encoding: utf-8\n",
+    "\n",
+    "import os\n",
+    "import sys\n",
+    "import paramiko\n",
+    "from collections import OrderedDict\n",
+    "import numpy as np\n",
+    "import matplotlib.pyplot as plt\n",
+    "\n",
+    "\n",
+    "def _process_logs(logs):\n",
+    "    # loss_dict = OrderedDict()\n",
+    "    # lr_dict = OrderedDict()\n",
+    "    res = {\"lm_loss\": {}, \"z_loss\": {}, \"aux_loss\": {}, \"lr\": {}}\n",
+    "    # need_keys = {\"lm loss:\" : \"lm_loss\", \"z_loss:\" : \"z_loss\", \"load_balancing_loss:\" : \"aux_loss\", \"learning rate:\": \"lr\"}\n",
+    "    need_keys = {\"lm loss:\" : \"lm_loss\", \"learning rate:\": \"lr\"}\n",
+    "    for num, log in enumerate(logs):\n",
+    "        # log_split = log.split('|')\n",
+    "        # if len(log_split) != LOG_LEN:\n",
+    "        #     continue\n",
+    "        log_split = log.split('] iteration')\n",
+    "        if len(log_split) != 2:\n",
+    "            continue\n",
+    "        iteration = int(log_split[1].split(\"/\")[0].strip())\n",
+    "        for k,v in need_keys.items():\n",
+    "            extract_value = float(log_split[1].split(k)[1].split(\"|\")[0].strip())\n",
+    "            res[v][iteration] = extract_value\n",
+    "    return res\n",
+    "\n",
+    "\n",
+    "def _load_local_file(base_dir, file):\n",
+    "    with open(os.path.join(base_dir, file), \"r\") as f:\n",
+    "        logs = f.readlines()\n",
+    "    res = _process_logs(logs)\n",
+    "    return res\n",
+    "\n",
+    "\n",
+    "def stat(cuda_info, musa_info):\n",
+    "    cuda, cuda_lr = cuda_info[\"lm_loss\"], cuda_info[\"lr\"]\n",
+    "    musa, musa_lr = musa_info[\"lm_loss\"], musa_info[\"lr\"]\n",
+    "    c_ks = len(cuda.keys())\n",
+    "    m_ks = len(musa.keys())\n",
+    "    ks = cuda.keys() if c_ks < m_ks else musa.keys()\n",
+    "    x_axis, c_axis, m_axis, diff_ratios = [], [], [], []\n",
+    "    c_lr, m_lr = [], []\n",
+    "\n",
+    "    # ==== stat ====\n",
+    "    for i, k in enumerate(ks):\n",
+    "        if STEPS > 9000 and i >= STEPS:\n",
+    "            break\n",
+    "        x_axis.append(int(k) - 1) # iter\n",
+    "        c_loss = cuda[k]\n",
+    "        m_loss = musa[k]\n",
+    "        diff_ratio = abs(m_loss - c_loss) / c_loss * 100\n",
+    "        c_axis.append(c_loss)\n",
+    "        m_axis.append(m_loss)\n",
+    "        diff_ratios.append(diff_ratio)\n",
+    "        c_lr.append(cuda_lr[k])\n",
+    "        m_lr.append(musa_lr[k])\n",
+    "\n",
+    "    # ==== plotting ====\n",
+    "    plt.figure(figsize=(10, 8))\n",
+    "    # loss\n",
+    "    plt.subplot(2, 1, 1)\n",
+    "    plt.plot(x_axis, c_axis, color='green', linestyle='-.')\n",
+    "    plt.plot(x_axis, m_axis, color='orange', linestyle='-.')\n",
+    "    plt.gca().xaxis.set_major_locator(plt.MultipleLocator(1000))\n",
+    "    plt.title(\"loss compare\")\n",
+    "    plt.ylabel(\"loss\")\n",
+    "    plt.legend([\"cuda\", \"musa\"], loc='upper right')\n",
+    "    # lr\n",
+    "    plt.subplot(2, 1, 2)\n",
+    "    plt.plot(x_axis, c_lr, color='green', linestyle='-.')\n",
+    "    plt.plot(x_axis, m_lr, color='orange', linestyle='-.')\n",
+    "    plt.gca().xaxis.set_major_locator(plt.MultipleLocator(1000))\n",
+    "    plt.title(\"lr compare\")\n",
+    "    plt.xlabel(\"iterations\")\n",
+    "    plt.ylabel(\"lr\")\n",
+    "    plt.legend([\"cuda\", \"musa\"], loc='upper right')\n",
+    "\n",
+    "    plt.show()\n",
+    "    print(f\"diff: {np.mean(diff_ratios):.3f}(+-{np.var(diff_ratios):.3f})%\")\n",
+    "    return diff_ratios\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "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Zw/9+/f3SZy+cPDgQafepkOHDmGxWEhNTQVg1qxZGI1G/vjjD1JSUmztli1b5vVjdOrUCYPB0CDxCyGE8EyGBQohhPC5oUOHEhQUxH//+1+n3puvv/6awsJCbrjhBgCKioowmUxO+/bp0wetVovRaATgzJkzLsevSpaq2rgzcuRItFotr732mktvT1VM3sbpSxMnTnS6/b///Q+A4cOHA/ZeMMd4CgsL+fbbb71+jDvuuIN169axYMECl/sKCgpcfuZCCCF8Q3quhBBC+FxCQgJjx47l1Vdf5brrruOmm25i//79fPLJJ1x00UXce++9ACxdupQnn3yS22+/na5du2Iymfjhhx/Q6XTceuutALz22musXLmSG264gfbt23P69Gk++eQT2rZty2WXXeYxhs6dO/Ovf/2L119/ncsvv5xbbrkFvV7Ppk2bSE5OZsKECV7H6UsZGRncdNNNXHfddaxbt44ff/yRu+++m379+gFw7bXXEhQUxIgRI3jssccwGAx8+eWXtGrViqysLK8e45///Cd//PEHN954Iw888AADBgygpKSEnTt3Mm3aNI4ePUp8fLzPn5sQQpz3/FqrUAghRItQvRR7lY8//ljp3r27EhgYqCQmJip//etflbNnz9ruP3LkiPKXv/xF6dSpkxIcHKzExsYqQ4YMURYvXmxrs2TJEuXmm29WkpOTlaCgICU5OVkZPXq0S5lxT7755hslLS1N0ev1SkxMjHLFFVcoixYtqlOciqKWYu/Vq5fL8du3b6/ccMMNLtsB5YknnrDdrirFvmfPHuW2225TIiIilJiYGOXJJ59UysrKnPb9448/lL59+yrBwcFKamqq8vbbbyvffPONy8/Y02MriqIUFxcrY8eOVTp37qwEBQUp8fHxyuDBg5V3331XqaioqO3HJoQQoh40iuLFbFshhBBCnJOqxYpzc3Ol10gIIVoomXMlhBBCCCGEED4gyZUQQgghhBBC+IAkV0IIIYQQQgjhAzLnSgghhBBCCCF8wK89VytXrmTEiBEkJyej0WiYMWNGje1Xr17NpZdeSlxcHCEhIXTv3p0PPvjAqc348ePRaDROX927d2/AZyGEEEIIIYQQfl7nqqSkhH79+vGXv/yFW265pdb2YWFhPPnkk/Tt25ewsDBWr17NY489RlhYGI8++qitXa9evVi8eLHtdkCALOcl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TCYTmzZtEkJYdm6qcutogUJYdn5ee+01kZCQIFJTU8XOnTtFRESEcHV1FVlZWUIIy86NEBXD91tZWYn33ntPnD59Wvz888/Czs5O/PTTT/o2lv75rNVqhZ+fn5g2bVqleZZ+/IwePVr4+Pjoh2JfvXq1cHV1FVOnTtW3seTjJy4uTvz555/i3LlzYtOmTSIkJESEhYUJjUYjhLC83JjLd8GdO3cKKysr8fHHH4vjx4+L6OhoDsVe33zxxRfCz89PKJVK0blzZ7F7926pQzK5rVu3CgCVXqNHjxZCVAzBOWvWLOHh4SFUKpXo27evOHnypEEfV69eFSNGjBD29vZCrVaLMWPGiIKCAoM2hw4dEt27dxcqlUr4+PiIefPm1dYmPpCqcgNALF26VN+mpKRE/Oc//xHOzs7Czs5ODB06VKSnpxv0c/78eTFgwABha2srXF1dxWuvvSbKysoM2mzdulW0a9dOKJVKERQUZLAOc/Xcc88Jf39/oVQqhZubm+jbt6++sBLCsnNTlduLK0vOT1RUlPDy8hJKpVL4+PiIqKgog2c4WXJubvjf//4nWrduLVQqlWjevLn45ptvDOZb+ufzxo0bBYBK2ywEj5/8/HwxceJE4efnJ2xsbERQUJCYOXOmwTDYlnz8rFixQgQFBQmlUik8PT3F+PHjRW5urn6+peXGnL4Lrly5UjRt2lQolUrRqlUrsX79eqO3RybELY/LJiIiIiIiovvCe66IiIiIiIhMgMUVERERERGRCbC4IiIiIiIiMgEWV0RERERERCbA4oqIiIiIiMgEWFwRERERERGZAIsrIiIiIiIiE2BxRUREREREZAIsroiIiIiIiEyAxRUREREREZEJsLgiIiIiIiIyARZXREREREREJsDiioiIalVsbCxkMhnOnz8vdShEREQmxeKKiIiIiIjIBFhcERERERERmQCLKyIiMjtCCJSUlEgdhlkpKiqSOgQiIroLFldERCS5gIAAPProo9i4cSM6duwIW1tbfP3119Uus2fPHjzyyCNwdnZGgwYN0LZtWyxYsMCgzZYtW9CjRw80aNAATk5OGDx4MI4fP27QZs6cOZDJZDh16hSefvppODo6ws3NDbNmzYIQAhcvXsTgwYOhVqvh6emJTz75xGD5hIQEyGQyrFixAm+++SY8PT3RoEEDPPbYY7h48aJB27///htP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uicLJ3Q6aA9MQJfUj7Dtzzs/IJqIiIiIqLbU2D1XwcHBePvtt7Fz50506NABDRo0MJj/6quv1tSqyQIk7pqMrvJCFOqAFp3nSR0OEREREVHN3HMFoNp7rWQyGc6dO1cTqzUJ3nNl3q6X5iJ7pSsaKbRIcHgIvQfF330hIiIiIqL7YExtUGNnrlJTU2uqa7Jwu+NHoLdCi3StHJ0jVkgdDhERERERABMXV1OmTLmndjKZDJ988okpV00W4krOUYTmxAFy4Kzfi+hu6yp1SEREREREAExcXCUlJd1TO5lMZsrVkgU5viUKPeXAMa0duvb4UupwiIiIiIj0TFpcbd261ZTdERk4c+53dCs9CsgATdv3IZeb/TOwiYiIiMiC1NhQ7ESmdi3xRShkwG54oV3IRKnDISIiIiIywOKK6oQDB2LQSXYFGgF4dv9B6nCIiIiIiCphcUVmT1uugfrYXABAok0oAvz6SRwREREREVFlLK7I7O3c9gKCFaW4ppWhbcQqqcMhIiIiIqoSiysye81DXsd26+Y47PE4nB0bSx0OEREREVGVONwamT1317Zwf/K41GEQEREREVWLZ67IbGk0hVKHQERERER0z1hckdnat7oN9v7igQsX46UOhYiIiIjornhZIJml9Mx96KQ9DysAJ0sypA6HiIiIiOiueOaKzJKXRydc6hGHv92GoUXTkVKHQ0RERER0VzxzRWYr0C8SgX6RUodBRERERHRPeOaKzEppaT5Onf1N6jCIiIiIiIzG4orMSuKWkWiyexgS1naVOhQiIiIiIqOwuCKzcfXaSYReXQe5DFA4Npc6HCIiIiIio7C4IrOREv8kHOXACa0tuvZYLHU4RERERERGqRPF1cKFCxEQEAAbGxuEhYVh79691bbPzc3F+PHj4eXlBZVKhaZNm2LDhg21FC3dj3MXNqBb6REAQEmbd6CwUkocERERERGRccx+tMAVK1ZgypQpWLx4McLCwjB//nxERkbi5MmTcHd3r9Reo9GgX79+cHd3x6+//gofHx9cuHABTk5OtR883bMrO59DkAzYAw+EtXtN6nCIiIiIiIxm9sXVp59+ihdffBFjxowBACxevBjr16/H999/j+nTp1dq//333yMnJwe7du2CtbU1ACAgIKA2QyYjJSV/gjBkokwAbt2XSh0OEREREdF9MevLAjUaDQ4cOICI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4cOH8fPPP+unCSGg0+mQmpqKFi1aAAA6duxYadkVK1bg888/x9mzZ1FYWIjy8nKo1Wqj1n/8+HGEhIToCysA6NatG3Q6HU6ePKkvrlq1agWFQqFv4+XlhSNHjgAA+vXrB39/fwQFBaF///7o378/hg4dCjs7O6NiISIiafGyQCIiqtMKCwsxduxYJCcn61+HDh3C6dOn0bhxY327W4sfAEhMTMTIkSPxyCOPYN26dUhKSsLMmTOh0WhqJE5ra2uD9zKZDDqdDkDF5YkHDx7EsmXL4OXlhdmzZyMkJAS5ubk1EgsREdUMnrkiIqI6Q6lUQqvVGkxr3749jh07hiZNmhjV165du+Dv74+ZM2fqp124cOGu67tdixYtEBsbi6KiIn0Bt3PnTsjlcjRr1uye47GyskJERAQiIiIQHR0NJycnbNmyBY8//rgRW0VERFLimSsiIqozAgICsH37dly6dAnZ2dkAKkb827VrFyZMmIDk5GScPn0av//+e6UBJW4XHByMtLQ0LF++HGfPnsXnn3+ONWvWVFpfamoqkpOTkZ2djdLS0kr9jBw5EjY2Nhg9ejRSUlKwdetWvPLKK3jmmWf0lwTezbp16/D5558jOTkZFy5cwI8//gidTmdUcUZERNJjcUVERHXG22+/jfPnz6Nx48Zwc3MDALRt2xbbtm3DqVOn0KNHD4SGhmL27Nnw9vautq/HHnsMkydPxoQJE9CuXTvs2rVLP4rgDU888QT69++PPn36wM3NDcuWLavUj52dHTZu3IicnBx06tQJw4YNQ9++ffHll1/e83Y5OTlh9erVeOihh9CiRQssXrwYy5YtQ6tWre65DyIikp5MCCGkDoKIiIiIiKiu45krIiIiIiIiE2BxRUREREREZAIsroiIiIiIiEyAxRUREREREZEJsLgiIiIiIiIyARZXREREREREJsDiioiIiIiIyARYXBEREREREZkAiysiIiIiIiITYHFFRERERERkAiyuiIiIiIiITOD/AU8kwDME89pYAAAAAElFTkSuQmCC",
+      "text/plain": [
+       "<Figure size 1000x800 with 2 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "diff: 0.059(+-0.005)%\n"
+     ]
+    }
+   ],
+   "source": [
+    "BASE_DIR_CUDA = \"/data2/yutian.rong/projects/megatron-lm-musa-patch/examples/mixtral/output/compare_cuda\"\n",
+    "BASE_DIR_MUSA = \"/data2/yutian.rong/projects/megatron-lm-musa-patch/examples/mixtral/output/compare_musa\"\n",
+    "STEPS = int(os.getenv(\"STEPS\", 5000))\n",
+    "\n",
+    "# ======== Mixtral ==========\n",
+    "# LOG_LEN = 14\n",
+    "# CUDA_FILE = \"2024-05-17_04:00:23/tp1_pp1_dp4_mbs1_numbs1_gbs4_gpus4.log.0.172.31.208.8\"\n",
+    "# CUDA_FILE = \"2024-05-23_03:37:40/tp1_pp1_dp2_mbs1_numbs1_gbs2_gpus2.log.0.172.31.208.6\" # 10b, 3 layers\n",
+    "CUDA_FILE = \"tp2_pp1_dp4_mbs2_numbs2_gbs16_gpus8.log.0.172.31.208.6\" # 10b, 6 layers\n",
+    "# MUSA_FILE = \"2024-05-21_16:45:41/tp1_pp1_dp4_mbs1_numbs1_gbs4_gpus4.log.0.10.70.147.165\"  # done\n",
+    "# MUSA_FILE = \"2024-05-23_15:48:09/tp1_pp1_dp2_mbs1_numbs1_gbs2_gpus2.log.0.10.70.147.165\"  # 10b, 3 layers\n",
+    "MUSA_FILE = \"tp2_pp1_dp4_mbs2_numbs2_gbs16_gpus8.log.0.10.70.147.226\" # 10b, 6 layers\n",
+    "\n",
+    "cuda_info = _load_local_file(BASE_DIR_CUDA, CUDA_FILE)\n",
+    "# print(f\"cuda iterations: {len(cuda_info[1])}\")\n",
+    "musa_info = _load_local_file(BASE_DIR_MUSA, MUSA_FILE)\n",
+    "# print(f\"musa iterations: {len(musa_info[1])}\")\n",
+    "stat(cuda_info, musa_info)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "abs_diff = 1e-2\n",
+    "rel_diff = 5e-3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 8,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "0.0033333333333333335"
+      ]
+     },
+     "execution_count": 8,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "1e-2 / 3"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 1000x800 with 2 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "diff: 0.005(+-0.000)%\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "[0.0003659022967711139,\n",
+       " 0.0006394662101569402,\n",
+       " 0.0010055506395246156,\n",
+       " 0.0004571913455496397,\n",
+       " 0.0007311912476455559,\n",
+       " 0.0003659803010964375,\n",
+       " 0.00027378482884217556,\n",
+       " 0.0010042672227208007,\n",
+       " 0.0004571892553199317,\n",
+       " 0.0007323177306986137,\n",
+       " 0.0001830430727899993,\n",
+       " 0.0001828290603227957,\n",
+       " 0.0004581296946829786,\n",
+       " 0.00045774509274266643,\n",
+       " 0.0010071968795153402,\n",
+       " 0.0009175069501293069,\n",
+       " 0.00018318625003313697,\n",
+       " 0.0010059083397975597,\n",
+       " 0.00027525006467334485,\n",
+       " 0.0,\n",
+       " 0.0006418167448074855,\n",
+       " 9.180738443168405e-05,\n",
+       " 9.178522257568998e-05,\n",
+       " 0.0012835628771614648,\n",
+       " 0.0003677876835284635,\n",
+       " 0.000644367856714003,\n",
+       " 0.00018415137979327945,\n",
+       " 0.00018370550538779958,\n",
+       " 0.0006448350097591419,\n",
+       " 0.0002766070639971069,\n",
+       " 0.00027635378812545196,\n",
+       " 9.203171045901534e-05,\n",
+       " 0.0002757697653278743,\n",
+       " 0.0006456355498085014,\n",
+       " 0.0004617235771746347,\n",
+       " 0.0012937782205377033,\n",
+       " 0.0008298533280359079,\n",
+       " 0.0014874063166525195,\n",
+       " 9.345043295231806e-05,\n",
+       " 0.0004685974129663104,\n",
+       " 0.0010298381562635667,\n",
+       " 9.369621251445425e-05,\n",
+       " 0.00037566128125160995,\n",
+       " 0.0004708426010841007,\n",
+       " 0.0005657809993720291,\n",
+       " 0.00018839327849747738,\n",
+       " 0.0010376350222515015,\n",
+       " 0.0003762924469663966,\n",
+       " 0.0003787394603934351,\n",
+       " 0.00018998331947423256,\n",
+       " 9.478035127134972e-05,\n",
+       " 0.0006641435536889159,\n",
+       " 0.0005680532530942797,\n",
+       " 0.00142939230815078,\n",
+       " 0.0,\n",
+       " 0.0003817136269881272,\n",
+       " 0.00029176096217770645,\n",
+       " 0.0004920790042671464,\n",
+       " 0.0004915217414800454,\n",
+       " 0.0005894031212950488,\n",
+       " 0.00019865648617641737,\n",
+       " 0.0009872818353941224,\n",
+       " 0.0006851840338882261,\n",
+       " 0.0004988312384072466,\n",
+       " 0.0006362202618686238,\n",
+       " 0.0003519959932844327,\n",
+       " 0.0007828756588547874,\n",
+       " 0.00029855945063930804,\n",
+       " 0.0010687613574936268,\n",
+       " 0.0005858065141606133,\n",
+       " 7.071882860615278e-05,\n",
+       " 0.001266130011330525,\n",
+       " 0.00021528759244573064,\n",
+       " 0.00013204821302863424,\n",
+       " 0.0004439293966698955,\n",
+       " 0.00019349084574432412,\n",
+       " 0.00010057868956224313,\n",
+       " 0.0011111018519381183,\n",
+       " 0.0011241869956415754,\n",
+       " 0.0005987960276617474,\n",
+       " 0.0008137003238475391,\n",
+       " 0.0015334184363454218,\n",
+       " 0.0014556768091820436,\n",
+       " 0.000883157802208261,\n",
+       " 0.0015550531664227341,\n",
+       " 0.0026486350418168337,\n",
+       " 0.0010712225906441058,\n",
+       " 0.001491592267287677,\n",
+       " 2.156366316048213e-05,\n",
+       " 0.0011406870048656932,\n",
+       " 0.0011240467759131264,\n",
+       " 0.0028740278089545344,\n",
+       " 0.002157114797792079,\n",
+       " 0.0017662501705938886,\n",
+       " 0.000175096045657827,\n",
+       " 0.00010888354729989951,\n",
+       " 0.0013768669523612608,\n",
+       " 0.0011623254171175361,\n",
+       " 0.0007220871033343453,\n",
+       " 0.0004410401048626401,\n",
+       " 0.0012470028177882487,\n",
+       " 0.0003750675811044856,\n",
+       " 0.0005101055230824342,\n",
+       " 0.0013825443926578761,\n",
+       " 7.812214017266184e-05,\n",
+       " 0.0014696361481581076,\n",
+       " 0.001139016524467989,\n",
+       " 0.00014470449448990416,\n",
+       " 0.00025930209630581726,\n",
+       " 3.3022899724656774e-05,\n",
+       " 0.00023705456319051514,\n",
+       " 0.0030636247528756577,\n",
+       " 0.0013854715815849628,\n",
+       " 0.0025212099576594625,\n",
+       " 0.0006995472688014267,\n",
+       " 0.0019577512722645744,\n",
+       " 0.0019410950581200976,\n",
+       " 0.0004146857264076282,\n",
+       " 0.000848111679342331,\n",
+       " 0.0013233655010048114,\n",
+       " 0.0011501061640987198,\n",
+       " 0.0020951819402165845,\n",
+       " 0.002533514905740991,\n",
+       " 0.0011999927767343316,\n",
+       " 0.002266822861544365,\n",
+       " 0.001978581966585862,\n",
+       " 0.004653434310526063,\n",
+       " 0.0006392427646400446,\n",
+       " 0.0027128571187793344,\n",
+       " 0.002069326386597037,\n",
+       " 0.0014744866416758554,\n",
+       " 0.00222503542292437,\n",
+       " 0.004063472129272272,\n",
+       " 0.0019078195123616926,\n",
+       " 0.0027845614087577777,\n",
+       " 0.00610021642813691,\n",
+       " 0.0016227136320322469,\n",
+       " 0.00042717269227016694,\n",
+       " 0.0024039328341177108,\n",
+       " 0.003180026669358042,\n",
+       " 0.0012740584707795729,\n",
+       " 0.00536400987258085,\n",
+       " 0.0009813441686591182,\n",
+       " 0.003254976672655863,\n",
+       " 0.0012082019514366481,\n",
+       " 0.0033029676574593447,\n",
+       " 0.0033217862840853804,\n",
+       " 0.004940463839298734,\n",
+       " 0.0020885521987166963,\n",
+       " 0.0004935520434922111,\n",
+       " 0.00034978264626508326,\n",
+       " 0.0031130585021616614,\n",
+       " 0.0018035367476712748,\n",
+       " 0.006897160248872555,\n",
+       " 0.0016257353419451206,\n",
+       " 0.0003881528473030209,\n",
+       " 0.0005116552632364637,\n",
+       " 0.00019663609713307137,\n",
+       " 0.005233833742682059,\n",
+       " 0.0003421453269652072,\n",
+       " 0.0016611802930425403,\n",
+       " 0.0008785653126207766,\n",
+       " 0.0014846387131696134,\n",
+       " 0.0013184260014290406,\n",
+       " 0.0008303462238338277,\n",
+       " 0.0004410493445970345,\n",
+       " 0.006036136092328295,\n",
+       " 0.0026107086878494495,\n",
+       " 4.91835046245129e-05,\n",
+       " 0.0026811503147910858,\n",
+       " 0.002171645917281415,\n",
+       " 0.0002707077592783227,\n",
+       " 0.001486751004257061,\n",
+       " 0.0013085910748801693,\n",
+       " 0.0021909573018680712,\n",
+       " 0.0003973984311597107,\n",
+       " 0.0005263885471845723,\n",
+       " 0.0017029590270714436,\n",
+       " 0.000661885274066598,\n",
+       " 0.0005370940911380374,\n",
+       " 0.0015505901399667224,\n",
+       " 0.0010103288033986924,\n",
+       " 0.0010879419316142244,\n",
+       " 0.00021268793638528683,\n",
+       " 0.00045002430130855735,\n",
+       " 0.0002667566695235561,\n",
+       " 0.0009748199020261574,\n",
+       " 0.000666623985964959,\n",
+       " 0.001575961139297935,\n",
+       " 0.0019240551537335125,\n",
+       " 0.000983986130328917,\n",
+       " 1.2481806220057943e-05,\n",
+       " 0.0006384858221096278,\n",
+       " 0.002307836365571649,\n",
+       " 0.0011208019439783192,\n",
+       " 0.0002924565164913096,\n",
+       " 1.2669760539495863e-05,\n",
+       " 0.00021529236893300333,\n",
+       " 0.0005700562379489828,\n",
+       " 0.0004969268261248228,\n",
+       " 0.0004233252739064839,\n",
+       " 0.0005875993042757244,\n",
+       " 0.0006049337641700012,\n",
+       " 0.00011343583143447829,\n",
+       " 0.0011813008459583042,\n",
+       " 0.0005513050930164694,\n",
+       " 0.0014066087851449395,\n",
+       " 0.0007992201640954303,\n",
+       " 0.00019266417042816032,\n",
+       " 0.0004661969645992184,\n",
+       " 0.0011876005310306591,\n",
+       " 0.0007150829770772996,\n",
+       " 0.0008964477362007174,\n",
+       " 0.00016700459403997544,\n",
+       " 0.0006159046600179599,\n",
+       " 0.0002977954976125499,\n",
+       " 7.736263554836943e-05,\n",
+       " 0.0006059320750074825,\n",
+       " 0.0010003138647152762,\n",
+       " 0.001687907892279254,\n",
+       " 0.0013729808761861056,\n",
+       " 0.001971971378527828,\n",
+       " 0.0014707409402703834,\n",
+       " 0.003102166896578841,\n",
+       " 0.0014917768373897279,\n",
+       " 0.005014804547360979,\n",
+       " 0.002688041420647517,\n",
+       " 0.0007552985167644824,\n",
+       " 0.00036305552195599106,\n",
+       " 0.0008754192195938253,\n",
+       " 0.0012205241770821104,\n",
+       " 5.2237174528721866e-05,\n",
+       " 0.0007145771132603968,\n",
+       " 0.0012874695481235124,\n",
+       " 0.001284778663438036,\n",
+       " 0.001043057409886673,\n",
+       " 0.0012756536553513874,\n",
+       " 0.00011797405515064007,\n",
+       " 0.0024679820462497706,\n",
+       " 0.0014070553172601662,\n",
+       " 0.0005435651271980137,\n",
+       " 0.0002109794218644316,\n",
+       " 0.00028903571902788355,\n",
+       " 0.001802838410007318,\n",
+       " 0.0030829344037597915,\n",
+       " 0.0015065254356329406,\n",
+       " 2.6378473047681427e-05,\n",
+       " 0.00039290852499850954,\n",
+       " 0.002117459165463818,\n",
+       " 0.0016491458013709697,\n",
+       " 0.0007705840635412295,\n",
+       " 0.0006545218822358503,\n",
+       " 0.0044569490921028965,\n",
+       " 0.003011384347850328,\n",
+       " 0.0010419973744237674,\n",
+       " 0.0014061303835805042,\n",
+       " 0.0007943667745027472,\n",
+       " 0.001734378938768577,\n",
+       " 0.0001301901779128145,\n",
+       " 0.00031614709428286127,\n",
+       " 0.0006415095146618616,\n",
+       " 0.0004245091977218184,\n",
+       " 0.0006151458811799265,\n",
+       " 0.0009320243982685983,\n",
+       " 0.000717254921968543,\n",
+       " 6.676309037012805e-05,\n",
+       " 0.002296243125713082,\n",
+       " 0.002524873974419355,\n",
+       " 0.001445470360023549,\n",
+       " 0.0004260436204765085,\n",
+       " 0.0034444300135184486,\n",
+       " 0.00017346919440693628,\n",
+       " 0.0009954335794319976,\n",
+       " 0.00021425577586130036,\n",
+       " 0.00016028464415541384,\n",
+       " 0.0005187217313180252,\n",
+       " 0.0003958971854976585,\n",
+       " 0.0011697305632087057,\n",
+       " 0.00026648918487128935,\n",
+       " 0.0007658133525382622,\n",
+       " 0.0015737071995405153,\n",
+       " 0.0005205155185712232,\n",
+       " 0.0005852938793814798,\n",
+       " 0.0005342277017399001,\n",
+       " 0.0011283707587408552,\n",
+       " 0.002120141437585793,\n",
+       " 0.00034933376004711884,\n",
+       " 0.00026507220434483856,\n",
+       " 0.00014779129934683474,\n",
+       " 0.0007619268422314002,\n",
+       " 0.000990144714998022,\n",
+       " 0.0008647621451460565,\n",
+       " 0.00038153376574318786,\n",
+       " 0.0017732073246260372,\n",
+       " 0.0002713322426699394,\n",
+       " 0.0017180059641548771,\n",
+       " 0.00028599907854189504,\n",
+       " 0.0011253997711513837,\n",
+       " 0.000533758003976665,\n",
+       " 0.001469140303562781,\n",
+       " 0.0007083683563490405,\n",
+       " 0.002379861289240254,\n",
+       " 0.0007787640604481274,\n",
+       " 0.0003156570421995087,\n",
+       " 0.00277101414429944,\n",
+       " 0.0014581804742255999,\n",
+       " 0.0015090322439073036,\n",
+       " 0.0009301545574869705,\n",
+       " 0.0011996643666386173,\n",
+       " 0.0004860747230235311,\n",
+       " 0.0007525416066529902,\n",
+       " 0.0005900683807011602,\n",
+       " 0.001305867493898756,\n",
+       " 0.0005973970325107943,\n",
+       " 0.0006323014494440288,\n",
+       " 0.0009380320831766145,\n",
+       " 0.0006767517408022007,\n",
+       " 5.541831057777761e-05,\n",
+       " 0.0016180063920860767,\n",
+       " 0.0012172660895239172,\n",
+       " 0.0005531554754130972,\n",
+       " 0.0003859885069092342,\n",
+       " 0.0005406984409739929,\n",
+       " 1.3791825090691981e-05,\n",
+       " 0.0003288890374952956,\n",
+       " 0.0014806109878334492,\n",
+       " 0.0007579776128582505,\n",
+       " 4.10438097578283e-05,\n",
+       " 0.000489638891311542,\n",
+       " 0.002133755642571717,\n",
+       " 0.001018285097818305,\n",
+       " 0.0013666060060991843,\n",
+       " 0.0005737302052907979,\n",
+       " 0.00032090066491541656,\n",
+       " 0.001196644775018766,\n",
+       " 0.0009712984095129313,\n",
+       " 0.0010424334896567279,\n",
+       " 0.0009696619107522414,\n",
+       " 0.0003916590060080641,\n",
+       " 0.0013616056387074943,\n",
+       " 0.001292949739702478,\n",
+       " 0.000360042834020136,\n",
+       " 0.0018010576301574403,\n",
+       " 0.0006273311451103756,\n",
+       " 0.00794934315457673,\n",
+       " 0.002903027521116358,\n",
+       " 0.0010006686412308843,\n",
+       " 0.0020775498836608426,\n",
+       " 0.001551985557661223,\n",
+       " 0.00012583183581072886,\n",
+       " 0.0006516497599702945,\n",
+       " 0.00017842853868455286,\n",
+       " 0.0015761886197337746,\n",
+       " 0.0004095743801849139,\n",
+       " 0.001121801253832156,\n",
+       " 0.00014938375805602,\n",
+       " 0.002540084652546094,\n",
+       " 0.00026950652787351755,\n",
+       " 0.002449672184862512,\n",
+       " 0.00129828307707112,\n",
+       " 0.0007321977040837486,\n",
+       " 0.0016734358788680819,\n",
+       " 0.001798911282161714,\n",
+       " 0.0014467353665750006,\n",
+       " 0.0018955565089139666,\n",
+       " 0.0011904201707081405,\n",
+       " 0.0,\n",
+       " 0.001227267794383357,\n",
+       " 0.0019972307899354972,\n",
+       " 0.0007038752980719514,\n",
+       " 0.000944616049702128,\n",
+       " 0.0009553379508088498,\n",
+       " 0.002193359759998153,\n",
+       " 0.0004930722642422608,\n",
+       " 0.0010648272429880424,\n",
+       " 0.0016489494667624191,\n",
+       " 0.0008940246882132763,\n",
+       " 0.0008363923082564012,\n",
+       " 0.0006975153526600442,\n",
+       " 0.0020355120521353995,\n",
+       " 0.0006234678101434668,\n",
+       " 0.0007486062857703452,\n",
+       " 0.00035672828791028904,\n",
+       " 0.0010576806121810423,\n",
+       " 0.00034315976074046384,\n",
+       " 0.0013327932212409304,\n",
+       " 0.0009295614114775634,\n",
+       " 0.00017156305235119267,\n",
+       " 0.0006093611188747794,\n",
+       " 0.0004983096624443418,\n",
+       " 0.0010305967225673694,\n",
+       " 0.0008399499560699525,\n",
+       " 0.0016414954193111893,\n",
+       " 0.00045617914611292604,\n",
+       " 0.0006122391736633698,\n",
+       " 0.0004399754294996461,\n",
+       " 0.000985221252848392,\n",
+       " 0.002027501548668503,\n",
+       " 0.0004889773011028963,\n",
+       " 0.001001420586632387,\n",
+       " 0.0012832648996700087,\n",
+       " 0.0010055500617409821,\n",
+       " 0.0008989153943673708,\n",
+       " 0.002244156301675866,\n",
+       " 0.0010462721752306048,\n",
+       " 0.002497786444431724,\n",
+       " 0.0012627391223538273,\n",
+       " 0.0015361614539824628,\n",
+       " 0.0018051170092604836,\n",
+       " 0.0007486842594053177,\n",
+       " 0.0006153015771866952,\n",
+       " 0.0018451680840885691,\n",
+       " 0.001225847944687383,\n",
+       " 0.0012358017739824546,\n",
+       " 0.0009198927232613992,\n",
+       " 0.00011489980448853021,\n",
+       " 0.0008780998724960529,\n",
+       " 0.00044264644314866446,\n",
+       " 0.00010043775076386881,\n",
+       " 0.00035927520681952824,\n",
+       " 0.0001142274419753872,\n",
+       " 0.0005152053558543588,\n",
+       " 0.0004476361059224311,\n",
+       " 0.00026479490016572435,\n",
+       " 0.0010195146593306738,\n",
+       " 0.0013443916861113757,\n",
+       " 0.0007624122147111436,\n",
+       " 0.0005595674629616166,\n",
+       " 0.000415862188427626,\n",
+       " 0.0010045529208526315,\n",
+       " 0.000852521570966833,\n",
+       " 0.0011980772571589398,\n",
+       " 0.0009714904692461111,\n",
+       " 0.001120938162012707,\n",
+       " 0.0003732167595581388,\n",
+       " 0.00040852963181373277,\n",
+       " 0.0010114246190290653,\n",
+       " 0.001444968448182669,\n",
+       " 0.0015474505462985952,\n",
+       " 0.0014613659416650034,\n",
+       " 0.0012660167489739716,\n",
+       " 0.0008473537507489267,\n",
+       " 0.0018521945786242405,\n",
+       " 0.0012665741048576956,\n",
+       " 0.0012837342646994532,\n",
+       " 1.461934871005852e-05,\n",
+       " 0.0012459067666446154,\n",
+       " 0.00250707337227257,\n",
+       " 0.0009745997486184807,\n",
+       " 5.777757683545182e-05,\n",
+       " 0.0007491433325659254,\n",
+       " 0.0005927631713119082,\n",
+       " 8.710406845611072e-05,\n",
+       " 0.00011606398027246085,\n",
+       " 0.0011283832510348148,\n",
+       " 0.00034559708592251965,\n",
+       " 0.0019659827167041754,\n",
+       " 0.002062617883337295,\n",
+       " 7.337844641243808e-05,\n",
+       " 0.000944065728217107,\n",
+       " 0.0022648840754413697,\n",
+       " 0.0004486540090259377,\n",
+       " 0.0016027323498752479,\n",
+       " 0.0009217835897929033,\n",
+       " 0.00019100147952744406,\n",
+       " 0.0002939627114199079,\n",
+       " 0.0017829380470043097,\n",
+       " 0.0019235690249528746,\n",
+       " 8.664234904665242e-05,\n",
+       " 8.808830323797172e-05,\n",
+       " 0.0011437726573689455,\n",
+       " 0.0008846342568186587,\n",
+       " 0.0015955656741438696,\n",
+       " 0.0005396653287319238,\n",
+       " 0.0005856916696396454,\n",
+       " 0.0009581523285211818,\n",
+       " 0.002517608623103172,\n",
+       " 0.0016169215841579981,\n",
+       " 0.002741054766719904,\n",
+       " 0.0030815971712705266,\n",
+       " 0.0020648449817634216,\n",
+       " 0.0009527627554808233,\n",
+       " 0.0009668570333822086,\n",
+       " 0.0017231349971559102,\n",
+       " 0.0004437528897602192,\n",
+       " 0.00022048972827022742,\n",
+       " 0.002068036619422036,\n",
+       " 0.0012329163105329265,\n",
+       " 0.0005772086564469064,\n",
+       " 1.4607035685277073e-05,\n",
+       " 0.0003578394192594537,\n",
+       " 0.0015129455257380864,\n",
+       " 2.9618164100199104e-05,\n",
+       " 5.847046241159248e-05,\n",
+       " 0.0011499238721211311,\n",
+       " 0.00027032547186589854,\n",
+       " 0.0005763304625690695,\n",
+       " 0.0004557068387909455,\n",
+       " 0.0005426981721022443,\n",
+       " 0.0017232051258849925,\n",
+       " 0.0018866693791843882,\n",
+       " 0.0006379883485492546,\n",
+       " 0.0016838643845777281,\n",
+       " 4.4822721659853124e-05,\n",
+       " 0.0005693020925665097,\n",
+       " 0.0018693111967962343,\n",
+       " 0.000457289392049865,\n",
+       " 0.00017866041315370884,\n",
+       " 0.00034192949028199755,\n",
+       " 0.00048714836190877125,\n",
+       " 0.0008251638429093443,\n",
+       " 0.002165773372277021,\n",
+       " 0.0002685172076992755,\n",
+       " 0.0013288398858695672,\n",
+       " 0.00019318436639229172,\n",
+       " 0.0024243806493052787,\n",
+       " 0.0026302238876571584,\n",
+       " 0.0006407451001355158,\n",
+       " 0.00043131277180494536,\n",
+       " 0.00020890377743064073,\n",
+       " 0.0002774795278523909,\n",
+       " 0.001069896170234047,\n",
+       " 0.0010029232262362226,\n",
+       " 0.002386038165205985,\n",
+       " 2.976476165166978e-05,\n",
+       " 0.0007931824620518732,\n",
+       " 0.0020575753678838795,\n",
+       " 0.000888300830510787,\n",
+       " 0.0008847601415161118,\n",
+       " 0.0025128998001224877,\n",
+       " 0.00020560958763646836,\n",
+       " 0.0009244988619685093,\n",
+       " 0.0008303944917320518,\n",
+       " 0.0009535116867020431,\n",
+       " 0.0008290092962175675,\n",
+       " 0.0018049524047392357,\n",
+       " 0.0009294149797510851,\n",
+       " 0.0004976228706290885,\n",
+       " 0.0002522166879573903,\n",
+       " 0.0017482473450050069,\n",
+       " 0.0007865617736145589,\n",
+       " 0.001984834651147267,\n",
+       " 0.0002548606804047321,\n",
+       " 0.0022603091803681578,\n",
+       " 0.0020811071849535234,\n",
+       " 0.002085477775510666,\n",
+       " 0.0020209508229211467,\n",
+       " 0.001575567877033848,\n",
+       " 0.0010871073447583392,\n",
+       " 0.0022395300826039133,\n",
+       " 0.0006984147174756783,\n",
+       " 0.003088964874447938,\n",
+       " 0.001154325527595797,\n",
+       " 0.003052853907042947,\n",
+       " 0.0005398007865152806,\n",
+       " 0.0017542461452365644,\n",
+       " 0.000286799595763385,\n",
+       " 0.0005542377014630484,\n",
+       " 0.00012036544152045093,\n",
+       " 0.0002808344389340478,\n",
+       " 0.0027668494742153233,\n",
+       " 0.0012752066464895328,\n",
+       " 0.0012974987582224757,\n",
+       " 0.0003472850837532666,\n",
+       " 0.0005881983587245631,\n",
+       " 0.0017820555164737679,\n",
+       " 0.00033531008791694213,\n",
+       " 0.0020470574534625008,\n",
+       " 0.0005157030830311294,\n",
+       " 0.00041898943936329307,\n",
+       " 0.0018146160975620203,\n",
+       " 0.0008377353082519466,\n",
+       " 0.003622268060309186,\n",
+       " 0.000329018062050871,\n",
+       " 0.0030173335250409574,\n",
+       " 9.089588347448709e-05,\n",
+       " 0.0007913595482427385,\n",
+       " 0.0013276974587850417,\n",
+       " 0.00043560647311971366,\n",
+       " 0.0014530455084900667,\n",
+       " 0.0020037873086731707,\n",
+       " 0.000512956140595116,\n",
+       " 0.001460052878001079,\n",
+       " 0.00022373089767429216,\n",
+       " 0.0016679115351893935,\n",
+       " 0.0005194733233159743,\n",
+       " 0.0010560472964361645,\n",
+       " 3.0374027281516623e-05,\n",
+       " 0.0012307293986120668,\n",
+       " 0.0018384318666410404,\n",
+       " 0.0010253180092744353,\n",
+       " 0.0008248619501806968,\n",
+       " 5.98034440288969e-05,\n",
+       " 0.0007484912288037908,\n",
+       " 0.0008606609845598029,\n",
+       " 2.998622133548968e-05,\n",
+       " 0.0016494527940355327,\n",
+       " 0.000840950821043322,\n",
+       " 7.629727493312103e-05,\n",
+       " 0.0008995520535744736,\n",
+       " 0.00020029900018505713,\n",
+       " 0.0010520289292689654,\n",
+       " 0.00034981494030028354,\n",
+       " 0.0007681051996863592,\n",
+       " 0.001086373419290783,\n",
+       " 0.0004431413711071012,\n",
+       " 0.000891283773427406,\n",
+       " 0.00042509441649829223,\n",
+       " 0.001213805361245904,\n",
+       " 0.0014614501421731582,\n",
+       " 0.0010603053194611239,\n",
+       " 0.0006058215818997151,\n",
+       " 0.0,\n",
+       " 0.0021110270553755415,\n",
+       " 0.0024008700630867427,\n",
+       " 0.00012135587276307063,\n",
+       " 0.0012594693506624468,\n",
+       " 0.0024988164696534755,\n",
+       " 0.0017157851934085867,\n",
+       " 0.0017347808672370313,\n",
+       " 0.0010683206304925338,\n",
+       " 0.0018326746649664225,\n",
+       " 0.00019559887485570078,\n",
+       " 0.0001216008015824804,\n",
+       " 0.0025998164129585563,\n",
+       " 0.0011618235921110815,\n",
+       " 0.0026503097607641513,\n",
+       " 0.0007003981458970834,\n",
+       " 0.0010004930121751347,\n",
+       " 0.001851922672132134,\n",
+       " 0.0014047842629627285,\n",
+       " 0.0002474369781953909,\n",
+       " 0.000817750177942482,\n",
+       " 0.0005869662295155735,\n",
+       " 0.00022870898505082316,\n",
+       " 0.002019322293852384,\n",
+       " 7.779292146354486e-05,\n",
+       " 0.002479990067562108,\n",
+       " 0.004773291003991094,\n",
+       " 0.0032036523476165696,\n",
+       " 0.0004927146746294285,\n",
+       " 0.004420580229168621,\n",
+       " 0.0017936276931138462,\n",
+       " 0.0018757583096141504,\n",
+       " 0.003412092455673567,\n",
+       " 0.0015503650024289095,\n",
+       " 0.0014468425432015864,\n",
+       " 0.002892234119397941,\n",
+       " 0.0004009405448362792,\n",
+       " 0.002992475466707914,\n",
+       " 0.0020581166403201836,\n",
+       " 0.001055528647952463,\n",
+       " 0.0017771594787053032,\n",
+       " 0.0005128398787908168,\n",
+       " 0.0012373092668375894,\n",
+       " 0.0006407321224079937,\n",
+       " 0.003637127362758961,\n",
+       " 0.00014115269051723402,\n",
+       " 0.0036736626787422823,\n",
+       " 0.005652023151809655,\n",
+       " 0.0016838606676091651,\n",
+       " 0.0034237593191334017,\n",
+       " 0.005015068567819635,\n",
+       " 0.00037580969372609134,\n",
+       " 0.004939601591496023,\n",
+       " 0.0032497317805094414,\n",
+       " 0.003517204098004209,\n",
+       " 0.007566209773252505,\n",
+       " 0.004017637274880117,\n",
+       " 4.64972678132762e-05,\n",
+       " 0.008380924828860322,\n",
+       " 0.004502406216740844,\n",
+       " 0.002784493346415496,\n",
+       " 0.009974487132142319,\n",
+       " 0.0017363044683330624,\n",
+       " 0.00661224995600244,\n",
+       " 0.0069894658320149555,\n",
+       " 0.0007639809273671638,\n",
+       " 0.005616099443228283,\n",
+       " 0.0067289346360013425,\n",
+       " 0.00816656673162871,\n",
+       " 0.0033444969064103255,\n",
+       " 0.0010153033911186114,\n",
+       " 0.0039990042005324635,\n",
+       " 0.0052445699523049755,\n",
+       " 0.0011022216063779973,\n",
+       " 0.005929196133799475,\n",
+       " 0.006763457498483404,\n",
+       " 0.00323703543850903,\n",
+       " 0.0038861503289286045,\n",
+       " 0.006550709657594975,\n",
+       " 0.0037825515411457874,\n",
+       " 0.005001991238556265,\n",
+       " 0.001846994361026328,\n",
+       " 0.0030654876408867052,\n",
+       " 0.006162564663466236,\n",
+       " 0.004412086362997327,\n",
+       " 0.005207194909041099,\n",
+       " 0.003717799056716345,\n",
+       " 0.0035480143678822337,\n",
+       " 0.003585925957803544,\n",
+       " 0.0030473012200467548,\n",
+       " 0.0036435118868721893,\n",
+       " 0.007071523180903231,\n",
+       " 0.002945752502502382,\n",
+       " 0.0025507483680605506,\n",
+       " 0.005301287448692096,\n",
+       " 0.002313706877717948,\n",
+       " 0.006395012323947427,\n",
+       " 0.006989372541253062,\n",
+       " 0.002371954512506644,\n",
+       " 0.007013916169549202,\n",
+       " 0.0013743546062460524,\n",
+       " 0.0003777226722476787,\n",
+       " 0.003741132719468938,\n",
+       " 0.00010931315266925178,\n",
+       " 0.00754979015231259,\n",
+       " 0.002698508009123186,\n",
+       " 0.006975362922383343,\n",
+       " 0.0038172734806026193,\n",
+       " 0.010097393954406503,\n",
+       " 0.0044303149168302535,\n",
+       " 0.0061565118248440185,\n",
+       " 0.004141559461851126,\n",
+       " 0.004185793417142489,\n",
+       " 0.005614213575850405,\n",
+       " 0.004630993458064251,\n",
+       " 0.0014297799330409515,\n",
+       " 0.002462531245332057,\n",
+       " 0.004359434225879119,\n",
+       " 0.004072858285131083,\n",
+       " 0.0036746324532453017,\n",
+       " 0.004914331867071456,\n",
+       " 0.006734268155387259,\n",
+       " 0.0022886593907382076,\n",
+       " 0.002389864153056374,\n",
+       " 0.0032116345337086863,\n",
+       " 0.005059664690393032,\n",
+       " 0.0043021018795014465,\n",
+       " 0.004169943334929794,\n",
+       " 0.002305289855789521,\n",
+       " 0.0017185467005406227,\n",
+       " 0.0014729056652606368,\n",
+       " 0.003103051038749448,\n",
+       " 0.00027185437304483437,\n",
+       " 0.004142888542070187,\n",
+       " 0.0009326312990787862,\n",
+       " 0.0016788562288216709,\n",
+       " 0.0034796737997387205,\n",
+       " 0.0012566225974300483,\n",
+       " 0.0023487592116402493,\n",
+       " 0.00012586512606716895,\n",
+       " 0.00556516159098665,\n",
+       " 0.005324134923428644,\n",
+       " 0.0014532267782790393,\n",
+       " 0.003945827463180976,\n",
+       " 0.002328258633174711,\n",
+       " 0.001368333307115745,\n",
+       " 0.006495371848069681,\n",
+       " 0.004194799384524949,\n",
+       " 0.0025818761332041537,\n",
+       " 0.003343104068873857,\n",
+       " 0.0007927307227036121,\n",
+       " 0.002734018383474397,\n",
+       " 0.0018024823592255807,\n",
+       " 0.004918053738470844,\n",
+       " 0.0018267934666074714,\n",
+       " 0.004023110825023652,\n",
+       " 0.006737407324892685,\n",
+       " 0.0033961900834683376,\n",
+       " 0.0046214185622024916,\n",
+       " 0.004328757280256671,\n",
+       " 0.005756294386297671,\n",
+       " 0.004538971966147756,\n",
+       " 0.00414772406404097,\n",
+       " 0.003980874902055962,\n",
+       " 0.002622278753920157,\n",
+       " 0.0020650183947987354,\n",
+       " 0.0034472386496178916,\n",
+       " 0.0027960179562113436,\n",
+       " 0.0032900302682777097,\n",
+       " 0.0013357191745393137,\n",
+       " 0.00358057267968589,\n",
+       " 0.0026890102903258076,\n",
+       " 0.0050021433234329025,\n",
+       " 0.0018311055148294432,\n",
+       " 0.0032617723204974264,\n",
+       " 0.0019569509292978898,\n",
+       " 0.0031558867240540096,\n",
+       " 0.0018976368758661921,\n",
+       " 0.0005357836505668128,\n",
+       " 0.0003362682075266561,\n",
+       " 0.00363391432547902,\n",
+       " 0.003923656030263313,\n",
+       " 0.0028723357481303543,\n",
+       " 0.0038782946273131225,\n",
+       " 0.0013453632296422414,\n",
+       " 0.0038188108920082387,\n",
+       " 0.004179273610346965,\n",
+       " 0.004184208311306,\n",
+       " 0.005893409274125505,\n",
+       " 0.004205211038836223,\n",
+       " 0.0014580366743835648,\n",
+       " 0.0027396562979677725,\n",
+       " 0.0027272831197546797,\n",
+       " 0.0019541847141478766,\n",
+       " 0.00396248740015135,\n",
+       " 0.004286090014377849,\n",
+       " 0.003920658191025735,\n",
+       " 0.004099457040685194,\n",
+       " 0.007035955856639024,\n",
+       " 0.0038952300943433955,\n",
+       " 0.006330864732321636,\n",
+       " 0.004091220691396589,\n",
+       " 0.0018520807061491356,\n",
+       " 0.0045270348463682004,\n",
+       " 0.005897645640681923,\n",
+       " 0.005299279201677101,\n",
+       " 0.0009356559109273885,\n",
+       " 0.005682357834606593,\n",
+       " 0.0026957347800536,\n",
+       " 0.004759930869674518,\n",
+       " 0.0022116992287124523,\n",
+       " 0.001065631070001859,\n",
+       " 0.00648598142084452,\n",
+       " 0.004203649264054818,\n",
+       " 0.0025218335368302363,\n",
+       " 0.0030762101614361208,\n",
+       " 0.005268979776153054,\n",
+       " 0.0041747104879224185,\n",
+       " 0.0015062294605954582,\n",
+       " 0.003274149950849857,\n",
+       " 0.0025691985529514524,\n",
+       " 0.0020739779779464,\n",
+       " 0.0018235268833541318,\n",
+       " 0.0008987674140366938,\n",
+       " 0.003610350604801403,\n",
+       " 0.0032723823006749453,\n",
+       " 0.0006959596065134131,\n",
+       " 0.00442194809730525,\n",
+       " 0.004773125370357697,\n",
+       " 0.0022234771062027174,\n",
+       " 0.0010264638416895083,\n",
+       " 0.004407395280372948,\n",
+       " 0.0013876384007884756,\n",
+       " 0.002408513420552301,\n",
+       " 0.004519368451952742,\n",
+       " 0.0035452771466793977,\n",
+       " 0.003856154240908352,\n",
+       " 0.00048733711365745114,\n",
+       " 0.0005873715124912893,\n",
+       " 0.003774388085539688,\n",
+       " 0.002199067165627931,\n",
+       " 0.0031723442588595407,\n",
+       " 0.005296779362576293,\n",
+       " 0.001240389872726493,\n",
+       " 0.0022420126326408393,\n",
+       " 0.008049198254509362,\n",
+       " 0.005766675398598535,\n",
+       " 0.002018346115099913,\n",
+       " 0.00040347889183944146,\n",
+       " 0.002323231149883739,\n",
+       " 0.005276404360757913,\n",
+       " 0.0010179748080753716,\n",
+       " 0.0020653518967418158,\n",
+       " 0.002525766949960921,\n",
+       " 0.002602091590678559,\n",
+       " 0.004469621853555928,\n",
+       " 0.0033325524052119433,\n",
+       " 0.002411167369891406,\n",
+       " 0.0020871864710090542,\n",
+       " 0.0028318553226839094,\n",
+       " 0.003151657598639082,\n",
+       " 0.0017093401799035514,\n",
+       " 0.0024532231672671112,\n",
+       " 0.0031659305194626577,\n",
+       " 0.003324502422036938,\n",
+       " 0.002200867373414361,\n",
+       " 0.0013249463682937993,\n",
+       " 0.002547376595942833,\n",
+       " 0.0007047043109842622,\n",
+       " 0.004901558448862508,\n",
+       " 0.004402126870285928,\n",
+       " 0.00432028228522918,\n",
+       " 0.004888993157747264,\n",
+       " 0.003197698184770115,\n",
+       " 0.005023187064642121,\n",
+       " 0.0020428140610764416,\n",
+       " 0.0013714612625900149,\n",
+       " 0.005143333932294457,\n",
+       " 0.0032825310788787945,\n",
+       " 0.0018494233161887848,\n",
+       " 0.0034227989345841235,\n",
+       " 0.0015095246026016458,\n",
+       " 0.0,\n",
+       " 0.0035639501961971854,\n",
+       " 0.00332382872657298,\n",
+       " 0.0008955525233363756,\n",
+       " 0.004948815228893245,\n",
+       " 0.0027072342114630803,\n",
+       " 0.0015168336259394114,\n",
+       " 0.0033013989017636083,\n",
+       " 0.002871220610653868,\n",
+       " 0.0008744938236229176,\n",
+       " 0.003021271588119406,\n",
+       " 0.0005341049369327556,\n",
+       " 0.0012684172939345952,\n",
+       " 0.0008212274821604203,\n",
+       " 0.0033786044243834046,\n",
+       " 0.001745409282692735,\n",
+       " 0.00671806541000531,\n",
+       " 0.004087988871334552,\n",
+       " 0.0,\n",
+       " 0.00494710884395574,\n",
+       " 0.0019262713016998687,\n",
+       " 0.0012716317273103633,\n",
+       " 0.0028551107326911843,\n",
+       " 0.001549298684123598,\n",
+       " 0.003670619574369112,\n",
+       " 0.0031767882670731083,\n",
+       " 0.0012539086422196594,\n",
+       " 0.00416648889646404,\n",
+       " 0.002089566222911168,\n",
+       " 0.003599241380373394,\n",
+       " 0.004033633948370903,\n",
+       " 0.002436563645392268,\n",
+       " 0.0022463580919447525,\n",
+       " 0.0028187620713925757,\n",
+       " 0.000416578143810136,\n",
+       " 0.0023829984247913417,\n",
+       " 0.0028620417806163685,\n",
+       " 0.00024530510558946184,\n",
+       " 0.00027863412241497913,\n",
+       " 0.0011974094047577076,\n",
+       " 0.0015079350799653854,\n",
+       " 0.005220735210874934,\n",
+       " 0.0023402844270552577,\n",
+       " 0.0010936962991031287,\n",
+       " 0.002090898547317655,\n",
+       " 0.0016130689851440634,\n",
+       " 0.002365374540285579,\n",
+       " 0.0030511722264724285,\n",
+       " 0.0009250521098621181,\n",
+       " 0.005972369965942067,\n",
+       " 0.004339725699407765,\n",
+       " 0.005390026924710654,\n",
+       " 0.005240240681568712,\n",
+       " 0.002278049474622985,\n",
+       " 0.0022489996499079792,\n",
+       " 0.0037442463835546036,\n",
+       " 0.0041048881007586645,\n",
+       " 0.0016563678894406105,\n",
+       " 0.002216122014911903,\n",
+       " 0.0005004054117803182,\n",
+       " 0.0008061223650018603,\n",
+       " 0.0018428230832380663,\n",
+       " 0.0005126152123341872,\n",
+       " 0.0014052529370642277,\n",
+       " 0.0002864774230464631,\n",
+       " 0.00011876603447659669,\n",
+       " 0.00013319744972407094,\n",
+       " 0.0005868681379321745,\n",
+       " 0.0019172285351541087,\n",
+       " 0.00220506869545879,\n",
+       " 0.004087823553809173,\n",
+       " 0.003544636424954704,\n",
+       " 0.0008375720060634093,\n",
+       " 0.00020513069476209295,\n",
+       " 0.0011859809595842169,\n",
+       " 0.0017806578777558857,\n",
+       " 0.00040295973928172356,\n",
+       " 0.0018676996290644685,\n",
+       " 0.0002042165614660223,\n",
+       " 0.0022576709766513638,\n",
+       " 0.0003879284099988747,\n",
+       " 0.0023454381737356036,\n",
+       " 0.0021764424925253315,\n",
+       " 0.0003551878140180926,\n",
+       " 0.0015666416003980012,\n",
+       " 0.0033465494147374014,\n",
+       " 0.0023903413933074303,\n",
+       " 0.0015979731644789781,\n",
+       " 0.00142044030306258,\n",
+       " 0.0011983239667182274,\n",
+       " 0.0025091218446565205,\n",
+       " 0.003978570595612012,\n",
+       " 0.0041854683564332374,\n",
+       " 0.0025471150553290794,\n",
+       " 0.005986482115205491,\n",
+       " 0.0002566231439572061,\n",
+       " 0.0011896979871224105,\n",
+       " 0.0033537772593938797,\n",
+       " 0.005243466223998137,\n",
+       " 0.003737255834666014,\n",
+       " 0.001476128766481345,\n",
+       " 0.0016546853936443768,\n",
+       " 0.0024088362997870586,\n",
+       " 0.0010452077645414016,\n",
+       " 0.0007524224154150316,\n",
+       " 0.005553180309735833,\n",
+       " ...]"
+      ]
+     },
+     "execution_count": 10,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "BASE_DIR_CUDA = \"/data2/yutian.rong/projects/megatron-lm-musa-patch/examples/llama2/output/compare_cuda\"\n",
+    "BASE_DIR_MUSA = \"/data2/yutian.rong/projects/megatron-lm-musa-patch/examples/llama2/output/compare_musa\"\n",
+    "STEPS = 5000\n",
+    "\n",
+    "# ======== Mixtral ==========\n",
+    "# LOG_LEN = 14\n",
+    "# CUDA_FILE = \"2024-05-17_04:00:23/tp1_pp1_dp4_mbs1_numbs1_gbs4_gpus4.log.0.172.31.208.8\"\n",
+    "# CUDA_FILE = \"2024-05-23_03:37:40/tp1_pp1_dp2_mbs1_numbs1_gbs2_gpus2.log.0.172.31.208.6\" # 10b, 3 layers\n",
+    "CUDA_FILE = \"tp2_pp2_dp2_mbs2_numbs2_gbs8_gpus8.log.0.\" # 10b, 6 layers\n",
+    "# MUSA_FILE = \"2024-05-21_16:45:41/tp1_pp1_dp4_mbs1_numbs1_gbs4_gpus4.log.0.10.70.147.165\"  # done\n",
+    "# MUSA_FILE = \"2024-05-23_15:48:09/tp1_pp1_dp2_mbs1_numbs1_gbs2_gpus2.log.0.10.70.147.165\"  # 10b, 3 layers\n",
+    "MUSA_FILE = \"tp2_pp2_dp2_mbs2_numbs2_gbs8_gpus8.log.0.10.70.147.226\" # 10b, 6 layers\n",
+    "\n",
+    "cuda_info = _load_local_file(BASE_DIR_CUDA, CUDA_FILE)\n",
+    "# print(f\"cuda iterations: {len(cuda_info[1])}\")\n",
+    "musa_info = _load_local_file(BASE_DIR_MUSA, MUSA_FILE)\n",
+    "# print(f\"musa iterations: {len(musa_info[1])}\")\n",
+    "stat(cuda_info, musa_info)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.10.12"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 2
+}
diff --git a/megatron-lm-musa-patch/test/compare_diff.py b/megatron-lm-musa-patch/test/compare_diff.py
new file mode 100644
index 00000000..885af854
--- /dev/null
+++ b/megatron-lm-musa-patch/test/compare_diff.py
@@ -0,0 +1,130 @@
+#!/usr/bin/env python
+# encoding: utf-8
+
+import os
+import sys
+import paramiko
+from collections import OrderedDict
+import numpy as np
+import matplotlib.pyplot as plt
+
+
+def _process_logs(log_str):
+    loss_dict = OrderedDict()
+    lr_dict = OrderedDict()
+    logs = log_str.strip().split('\n')
+    for num, log in enumerate(logs):
+        log_split = log.split('|')
+        if len(log_split) != LOG_LEN:
+            continue
+        index = log_split[0].split()[3].split('/')[0]
+        loss = float(log_split[5].split(":")[1])
+        lr = float(log_split[3].split(":")[1].strip())
+        loss_dict[index] = loss
+        lr_dict[index] = lr
+    return loss_dict, lr_dict
+
+
+def _load_remote_file(host, user, port=None, file_path=""):
+    # prepare key file
+    private_key_file = os.path.expanduser('~/.ssh/id_rsa')
+    mykey = paramiko.RSAKey.from_private_key_file(private_key_file)
+    # setting client
+    s = paramiko.SSHClient()
+    s.load_system_host_keys()
+    s.set_missing_host_key_policy(paramiko.AutoAddPolicy())
+    # connect
+    port = port if port else 22
+    s.connect(host, port, user, pkey=mykey, timeout=200)
+    # read remote file
+    cmd = f'cat {file_path}'
+    stdin, stdout, stderr = s.exec_command(cmd)
+
+    output = stdout.read().decode()
+    s.close()
+    loss, lr = _process_logs(output)
+    return loss, lr
+
+
+def load_cuda_file(file_name):
+    host_cuda = "172.31.208.6"
+    user_cuda = "fan.mo"
+    file_path_cuda = os.path.join(BASE_DIR_CUDA, file_name)
+    cuda_loss, cuda_lr = _load_remote_file(host_cuda, user_cuda, file_path=file_path_cuda)
+    return cuda_loss, cuda_lr
+
+
+def load_musa_file(file_name):
+    host_musa = "10.1.0.27"
+    user_musa = "root"
+    file_path_musa = os.path.join(BASE_DIR_MUSA, file_name)
+    musa_loss, musa_lr = _load_remote_file(host_musa, user_musa, port=31968, file_path=file_path_musa)
+    return musa_loss, musa_lr
+
+
+def stat(cuda_info, musa_info):
+    cuda, cuda_lr = cuda_info
+    musa, musa_lr = musa_info
+    c_ks = len(cuda.keys())
+    m_ks = len(musa.keys())
+    ks = cuda.keys() if c_ks < m_ks else musa.keys()
+    x_axis, c_axis, m_axis, diff_ratios = [], [], [], []
+    c_lr, m_lr = [], []
+
+    # ==== stat ====
+    for i, k in enumerate(ks):
+        if STEPS > 1000 and i >= STEPS:
+            break
+        x_axis.append(int(k) - 1) # iter
+        c_loss = cuda[k]
+        m_loss = musa[k]
+        diff_ratio = abs(m_loss - c_loss) / c_loss * 100
+        c_axis.append(c_loss)
+        m_axis.append(m_loss)
+        diff_ratios.append(diff_ratio)
+        c_lr.append(cuda_lr[k])
+        m_lr.append(musa_lr[k])
+
+    # ==== plotting ====
+    plt.figure(figsize=(10, 8))
+    # loss
+    plt.subplot(2, 1, 1)
+    plt.plot(x_axis, c_axis, color='green', linestyle='-.')
+    plt.plot(x_axis, m_axis, color='orange', linestyle='-.')
+    plt.gca().xaxis.set_major_locator(plt.MultipleLocator(1000))
+    plt.title("loss compare")
+    plt.ylabel("loss")
+    plt.legend(["cuda", "musa"], loc='upper right')
+    # lr
+    plt.subplot(2, 1, 2)
+    plt.plot(x_axis, c_lr, color='green', linestyle='-.')
+    plt.plot(x_axis, m_lr, color='orange', linestyle='-.')
+    plt.gca().xaxis.set_major_locator(plt.MultipleLocator(1000))
+    plt.title("lr compare")
+    plt.xlabel("iterations")
+    plt.ylabel("lr")
+    plt.legend(["cuda", "musa"], loc='upper right')
+
+    plt.show()
+    print(f"diff: {np.mean(diff_ratios):.3f}(+-{np.var(diff_ratios):.3f})%")
+
+
+if __name__ == "__main__":
+    BASE_DIR_CUDA = "/nfs2/fan.mo/workspace/megatron-lm-musa-patch/examples/mixtral/output"
+    BASE_DIR_MUSA = "/home/dist/fan.mo/megatron-lm-musa-patch/examples/mixtral/output"
+    STEPS = int(os.getenv("STEPS", 3000))
+
+    # ======== Mixtral ==========
+    LOG_LEN = 14
+    # CUDA_FILE = "2024-05-17_04:00:23/tp1_pp1_dp4_mbs1_numbs1_gbs4_gpus4.log.0.172.31.208.8"
+    # CUDA_FILE = "2024-05-23_03:37:40/tp1_pp1_dp2_mbs1_numbs1_gbs2_gpus2.log.0.172.31.208.6" # 10b, 3 layers
+    CUDA_FILE = "2024-05-23_10:40:16/tp1_pp1_dp2_mbs1_numbs1_gbs2_gpus2.log.0.172.31.208.6" # 10b, 6 layers
+    # MUSA_FILE = "2024-05-21_16:45:41/tp1_pp1_dp4_mbs1_numbs1_gbs4_gpus4.log.0.10.70.147.165"  # done
+    # MUSA_FILE = "2024-05-23_15:48:09/tp1_pp1_dp2_mbs1_numbs1_gbs2_gpus2.log.0.10.70.147.165"  # 10b, 3 layers
+    MUSA_FILE = "2024-05-24_11:29:07/tp1_pp1_dp2_mbs1_numbs1_gbs2_gpus2.log.0.10.70.147.165" # 10b, 6 layers
+
+    cuda_info = load_cuda_file(CUDA_FILE)
+    print(f"cuda iterations: {len(cuda_info[1])}")
+    musa_info = load_musa_file(MUSA_FILE)
+    print(f"musa iterations: {len(musa_info[1])}")
+    stat(cuda_info, musa_info)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/test/compare_diff_local.py b/megatron-lm-musa-patch/test/compare_diff_local.py
new file mode 100644
index 00000000..bba4c5b2
--- /dev/null
+++ b/megatron-lm-musa-patch/test/compare_diff_local.py
@@ -0,0 +1,104 @@
+#!/usr/bin/env python
+# encoding: utf-8
+
+import os
+import sys
+import paramiko
+from collections import OrderedDict
+import numpy as np
+import matplotlib.pyplot as plt
+
+
+def _process_logs(logs):
+    # loss_dict = OrderedDict()
+    # lr_dict = OrderedDict()
+    res = {"lm_loss": {}, "z_loss": {}, "aux_loss": {}, "lr": {}}
+    need_keys = {"lm loss:" : "lm_loss", "z_loss:" : "z_loss", "load_balancing_loss:" : "aux_loss", "learning rate:": "lr"}
+    for num, log in enumerate(logs):
+        # log_split = log.split('|')
+        # if len(log_split) != LOG_LEN:
+        #     continue
+        log_split = log.split('] iteration')
+        if len(log_split) != 2:
+            continue
+        iteration = int(log_split[1].split("/")[0].strip())
+        for k,v in need_keys.items():
+            extract_value = float(log_split[1].split(k)[1].split("|")[0].strip())
+            res[v][iteration] = extract_value
+    return res
+
+
+def _load_local_file(base_dir, file):
+    with open(os.path.join(base_dir, file), "r") as f:
+        logs = f.readlines()
+    res = _process_logs(logs)
+    return res
+
+
+def stat(cuda_info, musa_info):
+    cuda, cuda_lr = cuda_info["lm_loss"], cuda_info["lr"]
+    musa, musa_lr = musa_info["lm_loss"], musa_info["lr"]
+    c_ks = len(cuda.keys())
+    m_ks = len(musa.keys())
+    ks = cuda.keys() if c_ks < m_ks else musa.keys()
+    x_axis, c_axis, m_axis, diff_ratios = [], [], [], []
+    c_lr, m_lr = [], []
+
+    # ==== stat ====
+    for i, k in enumerate(ks):
+        if STEPS > 9000 and i >= STEPS:
+            break
+        x_axis.append(int(k) - 1) # iter
+        c_loss = cuda[k]
+        m_loss = musa[k]
+        diff_ratio = abs(m_loss - c_loss) / c_loss * 100
+        c_axis.append(c_loss)
+        m_axis.append(m_loss)
+        diff_ratios.append(diff_ratio)
+        c_lr.append(cuda_lr[k])
+        m_lr.append(musa_lr[k])
+
+    # ==== plotting ====
+    plt.figure(figsize=(10, 8))
+    # loss
+    plt.subplot(2, 1, 1)
+    plt.plot(x_axis, c_axis, color='green', linestyle='-.')
+    plt.plot(x_axis, m_axis, color='orange', linestyle='-.')
+    plt.gca().xaxis.set_major_locator(plt.MultipleLocator(1000))
+    plt.title("loss compare")
+    plt.ylabel("loss")
+    plt.legend(["cuda", "musa"], loc='upper right')
+    # lr
+    plt.subplot(2, 1, 2)
+    plt.plot(x_axis, c_lr, color='green', linestyle='-.')
+    plt.plot(x_axis, m_lr, color='orange', linestyle='-.')
+    plt.gca().xaxis.set_major_locator(plt.MultipleLocator(1000))
+    plt.title("lr compare")
+    plt.xlabel("iterations")
+    plt.ylabel("lr")
+    plt.legend(["cuda", "musa"], loc='upper right')
+
+    plt.show()
+    print(f"diff: {np.mean(diff_ratios):.3f}(+-{np.var(diff_ratios):.3f})%")
+
+
+if __name__ == "__main__":
+    model = "mixtral"
+    BASE_DIR_CUDA = "/data2/yutian.rong/projects/megatron-lm-musa-patch/examples/mixtral/output/compare_cuda"
+    BASE_DIR_MUSA = "/data2/yutian.rong/projects/megatron-lm-musa-patch/examples/mixtral/output/compare_musa"
+    STEPS = int(os.getenv("STEPS", 5000))
+
+    # ======== Mixtral ==========
+    # LOG_LEN = 14
+    # CUDA_FILE = "2024-05-17_04:00:23/tp1_pp1_dp4_mbs1_numbs1_gbs4_gpus4.log.0.172.31.208.8"
+    # CUDA_FILE = "2024-05-23_03:37:40/tp1_pp1_dp2_mbs1_numbs1_gbs2_gpus2.log.0.172.31.208.6" # 10b, 3 layers
+    CUDA_FILE = "tp2_pp1_dp4_mbs2_numbs2_gbs16_gpus8.log.0.172.31.208.6" # 10b, 6 layers
+    # MUSA_FILE = "2024-05-21_16:45:41/tp1_pp1_dp4_mbs1_numbs1_gbs4_gpus4.log.0.10.70.147.165"  # done
+    # MUSA_FILE = "2024-05-23_15:48:09/tp1_pp1_dp2_mbs1_numbs1_gbs2_gpus2.log.0.10.70.147.165"  # 10b, 3 layers
+    MUSA_FILE = "tp2_pp1_dp4_mbs2_numbs2_gbs16_gpus8.log.0.10.70.147.226" # 10b, 6 layers
+
+    cuda_info = _load_local_file(BASE_DIR_CUDA, CUDA_FILE)
+    # print(f"cuda iterations: {len(cuda_info[1])}")
+    musa_info = _load_local_file(BASE_DIR_MUSA, MUSA_FILE)
+    # print(f"musa iterations: {len(musa_info[1])}")
+    stat(cuda_info, musa_info)
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/README.md b/megatron-lm-musa-patch/test/deepseek-v2/README.md
new file mode 100644
index 00000000..cd58a791
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/README.md
@@ -0,0 +1,10 @@
+# Deeoseek-v2
+We implement all kinds of aux loss mentioned in deepseek-v2 paper, which contains:
+- **seq-aux-loss**: used with args "--moe-router-load-balancing-type seq_aux_loss"
+- **moe-device-level-aux-loss-coeff**
+- **moe-comm-aux-loss-coeff**
+
+In **deepseekv2-lite**, we follow the setting in HuggingFace which only use pipeline parallel, and "device-level-loss", "comm-aux-loss" will not be used.
+
+### Innovation
+In addition to the original implementation, we added a device-level drop strategy to replace the expert-level drop strategy, which can avoid discarding too many tokens while maintaining balance, although this will apparently reduce the MFU.
\ No newline at end of file
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_cuda.sh b/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_cuda.sh
new file mode 100644
index 00000000..8157b622
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_cuda.sh
@@ -0,0 +1,224 @@
+#!/bin/bash
+
+# Runs the "175B" parameter model
+
+# Please change the following envrioment variables
+# base on the cluster configuration
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="cuda"
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|tail -n 1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+# export MUSA_LAUNCH_BLOCKING=1
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 2  # 60 
+    --hidden-size 5120
+    --num-attention-heads 128
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-6 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 102400
+    --ffn-hidden-size 12288  # 12288
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.006 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --no-bias-dropout-fusion
+    --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 1
+    --distributed-backend nccl
+    --multi-latent-attention
+    --qk-layernorm
+)
+
+MLA_ARGS=(
+    --q-lora-rank 1536
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 10000
+    --ckpt-format torch
+    --no-load-optim
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+
+NUM_LAYERS=$(echo "${MODEL_ARGS[@]}" | grep -oP '(?<=--num-layers )\d+')
+NUM_LAYERS_MINUS_ONE=$((NUM_LAYERS - 1))
+MOE_LAYER_FREQ="([0]*1+[1]*${NUM_LAYERS_MINUS_ONE})*1"
+
+
+MOE_ARGS=(
+    --num-experts 160
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-topk-limited-devices 3
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-router-topk 6
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    --moe-router-topk-scaling-factor 16
+    --moe-aux-loss-coeff 3e-3
+    --moe-expert-capacity-factor 1
+    --moe-device-level-capacity
+    --moe-device-level-aux-loss-coeff 5e-2 
+    --moe-comm-aux-loss-coeff 2e-2
+    --moe-ffn-hidden-size 1536
+    --moe-shared-expert-intermediate-size 3072
+    --moe-layer-freq "$MOE_LAYER_FREQ"
+    --moe-grouped-gemm
+)
+
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+)
+    
+# --moe-z-loss-coeff 1e-3
+# --moe-expert-capacity-factor 4.0 
+# --moe-pad-expert-input-to-capacity
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+echo $cmd
+$cmd
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_cuda.sh b/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_cuda.sh
new file mode 100644
index 00000000..46ec279a
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_cuda.sh
@@ -0,0 +1,220 @@
+#!/bin/bash
+
+# Runs the "175B" parameter model
+
+# Please change the following envrioment variables
+# base on the cluster configuration
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
+export OMP_NUM_THREADS=4
+export CUDA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export ACCELERATOR_BACKEND="cuda"
+# export NCCL_PROTOS=2
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export NCCL_AVOID_RECORD_STREAMS=0
+# export NCCL_DEBUG=INFO
+# export NCCL_SOCKET_IFNAME=ibs110
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|tail -n 1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+# export MUSA_LAUNCH_BLOCKING=1
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 27  # 60 
+    --hidden-size 2048
+    --num-attention-heads 16
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-6 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 102400 #102400
+    --ffn-hidden-size 10944  # 12288
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.006 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --no-bias-dropout-fusion
+    --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0
+    --distributed-backend nccl
+    --multi-latent-attention
+    # --decoder-first-pipeline-num-layers 2
+    --decoder-last-pipeline-num-layers 6
+    --qk-layernorm
+)
+
+MLA_ARGS=(
+    # --q-lora-rank None
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 10000
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --ckpt-format torch
+    --no-load-optim
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+NUM_LAYERS=$(echo "${MODEL_ARGS[@]}" | grep -oP '(?<=--num-layers )\d+')
+NUM_LAYERS_MINUS_ONE=$((NUM_LAYERS - 1))
+MOE_LAYER_FREQ="([0]*1+[1]*${NUM_LAYERS_MINUS_ONE})*1"
+
+MOE_ARGS=(
+    --num-experts 64
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-topk-limited-devices 1
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-router-topk 6
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    # --moe-router-topk-scaling-factor 1
+    --moe-aux-loss-coeff 3e-3
+    --moe-expert-capacity-factor 1
+    # --moe-device-level-capacity
+    # --moe-device-level-aux-loss-coeff 5e-2 
+    # --moe-comm-aux-loss-coeff 2e-2
+    --moe-ffn-hidden-size 1408
+    --moe-shared-expert-intermediate-size 2816
+    --moe-layer-freq "$MOE_LAYER_FREQ"
+    --moe-grouped-gemm
+)
+
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+)
+    
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+echo $cmd
+$cmd
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_musa.sh b/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_musa.sh
new file mode 100644
index 00000000..619d2e0c
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_lite_musa.sh
@@ -0,0 +1,227 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export PROFILER_WARMUP_STEPS=3
+# export MUSA_LAUNCH_BLOCKING=1
+# export PROFILER_PROFILE_MEMORY=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_ALGOS=1
+export MCCL_BUFFSIZE=20971520
+export MCCL_MAX_NCHANNELS=14
+export MCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export MCCL_IB_GID_INDEX=3
+export MUSA_BLOCK_SCHEDULE_MODE=1
+# export MUSA_BLOCK_ARBITRATION_MODE=2
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ip a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n1 | cut -d '/' -f1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 27  # 60 
+    --hidden-size 2048
+    --num-attention-heads 16
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-6 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 102400 #102400
+    --ffn-hidden-size 10944  # 12288
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.006 
+    --use-mcore-models 
+    # --no-gradient-accumulation-fusion 
+    --no-bias-dropout-fusion
+    # --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0
+    --distributed-backend nccl
+    --multi-latent-attention
+    --qk-layernorm
+    --decoder-last-pipeline-num-layers 6
+    --attn-recompute
+    --recompute-variance
+)
+
+MLA_ARGS=(
+    # --q-lora-rank None
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 100000
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    # --load /home/dist/huanghuang/deepseek_dev/ckpts/pp4ep1mbs1_deepseekv2-lite_nogroupgemm_ckpt_init
+    # --ckpt-format torch_dist 
+    # --auto-detect-ckpt-format
+    --ckpt-format torch
+    --no-load-optim
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+NUM_LAYERS=$(echo "${MODEL_ARGS[@]}" | grep -oP '(?<=--num-layers )\d+')
+NUM_LAYERS_MINUS_ONE=$((NUM_LAYERS - 1))
+MOE_LAYER_FREQ="([0]*1+[1]*${NUM_LAYERS_MINUS_ONE})*1"
+
+MOE_ARGS=(
+    --num-experts 64
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-score-function softmax
+    --moe-router-num-groups $EP_SIZE
+    --moe-router-group-topk 1
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-router-topk 6
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    # --moe-router-topk-scaling-factor 1
+    --moe-aux-loss-coeff 3e-3
+    --moe-expert-capacity-factor 1
+    # --moe-device-level-capacity
+    # --moe-device-level-aux-loss-coeff 5e-2 
+    # --moe-comm-aux-loss-coeff 2e-2
+    --moe-ffn-hidden-size 1408
+    --moe-shared-expert-intermediate-size 2816
+    --moe-layer-freq "$MOE_LAYER_FREQ"
+    # --moe-grouped-gemm
+)
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+)
+    
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+echo $cmd
+$cmd
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_musa.sh b/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_musa.sh
new file mode 100644
index 00000000..f56d71c7
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_musa.sh
@@ -0,0 +1,236 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export PROFILER_WARMUP_STEPS=3
+# export MUSA_LAUNCH_BLOCKING=1
+# export PROFILER_PROFILE_MEMORY=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_ALGOS=1
+export MCCL_BUFFSIZE=20971520
+export MUSA_BLOCK_SCHEDULE_MODE=1
+export MCCL_IB_GID_INDEX=3
+export MCCL_NET_SHARED_BUFFERS=0
+
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+# export MUSA_BLOCK_ARBITRATION_MODE=2
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ip a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n1 | cut -d '/' -f1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects ${LOG_REDIRECTS_LEVEL:-3}
+)
+
+MODEL_ARGS=(
+    --num-layers 2  # 60 
+    --hidden-size 5120
+    --num-attention-heads 128
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-6 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 102400 
+    --ffn-hidden-size 12288  # 12288 for dense, but for sequentialMLP, moe-ffn-hidden-size=1536 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+    --cross-entropy-loss-fusion
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std  0.006 # 0.02 in HF config, but 0.006 in the paper 
+    --use-mcore-models 
+    # --no-gradient-accumulation-fusion
+    --no-bias-dropout-fusion
+    # --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0
+    --distributed-backend nccl
+    --multi-latent-attention
+    --qk-layernorm
+    # --attn-recompute
+    # --recompute-variance
+    # --mlp-recompute
+)
+
+MLA_ARGS=(
+    --q-lora-rank 1536
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 100000 
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+NUM_LAYERS=$(echo "${MODEL_ARGS[@]}" | grep -oP '(?<=--num-layers )\d+')
+NUM_LAYERS_MINUS_ONE=$((NUM_LAYERS - 1))
+MOE_LAYER_FREQ="([0]*1+[1]*${NUM_LAYERS_MINUS_ONE})*1"
+
+MOE_ARGS=(
+    --num-experts 160
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-score-function softmax
+    --moe-router-num-groups $EP_SIZE
+    --moe-router-group-topk 3
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-router-topk 6
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    --moe-router-topk-scaling-factor 16 # pre-softmax need scaling
+    --moe-aux-loss-coeff 3e-3
+    --moe-expert-capacity-factor 1
+    --moe-device-level-capacity
+    --moe-device-level-aux-loss-coeff 5e-2 
+    --moe-comm-aux-loss-coeff 2e-2
+    --moe-ffn-hidden-size 1536
+    --moe-shared-expert-intermediate-size 3072
+    --moe-layer-freq "$MOE_LAYER_FREQ"
+    --moe-grouped-gemm
+    --moe-permute-fusion
+)
+
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+    --fp8-format hybrid
+    --fp8-param-gather
+)
+    
+# --moe-z-loss-coeff 1e-3
+# --moe-expert-capacity-factor 4.0 
+# --moe-pad-expert-input-to-capacity
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+echo $cmd
+$cmd
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_noaux_musa.sh b/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_noaux_musa.sh
new file mode 100644
index 00000000..76db08e4
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/deepseek-v2-lite/run_pretrain_deepseekv2_noaux_musa.sh
@@ -0,0 +1,214 @@
+#!/bin/bash
+
+# Runs the "175B" parameter model
+
+# Please change the following envrioment variables
+# base on the cluster configuration
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  EP_SIZE=$8
+  MICRO_BATCH_SIZE=$9
+  GLOBAL_BATCH_SIZE=${10}
+  TOKENIZED_MODEL=${11}
+  RDZV_ID=${12}
+set +u
+export ENABLE_PROFILER=0
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_KERNEL_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export MCCL_IB_GID_INDEX=3
+export MUSA_BLOCK_SCHEDULE_MODE=1
+export MCCL_ALGOS=1
+export MCCL_BUFFSIZE=20480000
+
+MEGATRON_PATH=${PATCH_HOME}/../Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n 1) # tail for cuda/ head for musa
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk -v node_addr="$NODE_ADDR" '{ranks[$1]=(FNR-1);} END {print ranks[node_addr];}' $HOSTFILE)
+export MASTER_PORT=12356
+# export MUSA_LAUNCH_BLOCKING=1
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT
+    --log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    --redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 2  # 60 
+    --hidden-size 5120
+    --num-attention-heads 128
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-6 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --vocab-size 102400 #102400
+    --ffn-hidden-size 1536  # 12288
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 24414062 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std  0.006 # 0.02 in HF config, but 0.006 in the paper 
+    --use-mcore-models 
+    --no-gradient-accumulation-fusion 
+    --no-bias-dropout-fusion
+    --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 1
+    --distributed-backend nccl
+    --multi-latent-attention
+    --qk-layernorm
+)
+
+MLA_ARGS=(
+    --q-lora-rank 1536
+    --kv-lora-rank 512
+    --qk-head-dim 128
+    --qk-pos-emb-head-dim 64
+    --v-head-dim 128
+    --rotary-scaling-factor 1
+)
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE 
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS=(
+    --data-path $DATA_PATH
+    --tokenizer-type NullTokenizer
+    # --tokenizer-model ${TOKENIZED_MODEL}
+    --split 1
+)
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --log-throughput
+    --save-interval 100000 
+    --eval-interval 1 
+    --save $CHECKPOINT_PATH 
+    --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+MOE_ARGS=(
+    --num-experts 160
+    --expert-model-parallel-size $EP_SIZE
+    --moe-token-dispatcher-type alltoall
+    --moe-router-topk-limited-devices 4
+    --moe-router-num-node-group 8
+    --moe-noaux-gamma 1e-3
+    --moe-router-load-balancing-type seq_aux_loss
+    --moe-complementary-seq-aux-loss
+    --moe-router-topk 6
+    --moe-router-pre-softmax #deepseek use pre-softmax
+    --moe-router-use-sigmoid #deepseek use sigmoid
+    --moe-router-norm-topk-prob #norm topk prob with sigmoid
+    --moe-router-topk-scaling-factor 2.5 # pre-softmax need scaling
+    --moe-aux-loss-coeff 3e-3
+    --moe-ffn-hidden-size 1536
+    --moe-shared-expert-intermediate-size 3072
+    # --moe-layer-freq "([0]*1+[1]*1)*1"
+    # --moe-grouped-gemm
+)
+
+TRANSFORMER_ENGINE_ARGS=(
+    --transformer-impl transformer_engine
+)
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_deepseekv2.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${MOE_ARGS[@]} \
+        ${MLA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]} \
+        ${TRANSFORMER_ENGINE_ARGS[@]}
+    "
+echo $cmd
+$cmd
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/pretrain_deepseekv2.py b/megatron-lm-musa-patch/test/deepseek-v2/pretrain_deepseekv2.py
new file mode 100644
index 00000000..37ef98c2
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/pretrain_deepseekv2.py
@@ -0,0 +1,305 @@
+# Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
+"""Pretrain GPT."""
+
+import os
+import torch
+from functools import partial
+from contextlib import nullcontext
+import inspect
+
+from typing import List, Optional, Tuple, Union
+# if os.getenv("ACCELERATOR_BACKEND", "musa") == "musa":
+if os.getenv("ACCELERATOR_BACKEND") == "musa":
+    import musa_patch
+else:
+    import cuda_patch
+from megatron.training import get_args
+from megatron.training import print_rank_0
+from megatron.training import get_timers
+from megatron.training import get_tokenizer
+from megatron.core import mpu
+from megatron.core.enums import ModelType
+from megatron.core.datasets.blended_megatron_dataset_builder import BlendedMegatronDatasetBuilder
+from megatron.core.datasets.utils import get_blend_from_list
+from megatron.core.datasets.gpt_dataset import GPTDatasetConfig
+from megatron.core.datasets.gpt_dataset import MockGPTDataset, GPTDataset
+from megatron.core.rerun_state_machine import get_rerun_state_machine
+import megatron.legacy.model
+from megatron.core.models.gpt import GPTModel
+from megatron.training import pretrain
+from megatron.core.utils import StragglerDetector
+from megatron.core.transformer.spec_utils import import_module
+from megatron.training.utils import (
+    get_batch_on_this_cp_rank,
+    get_batch_on_this_tp_rank,
+    get_blend_and_blend_per_split,
+)
+from megatron.training.arguments import core_transformer_config_from_args
+from megatron.training.yaml_arguments import core_transformer_config_from_yaml
+from megatron.core.models.gpt.gpt_layer_specs import (
+    get_gpt_decoder_block_spec,
+    get_gpt_layer_local_spec,
+    get_gpt_layer_with_transformer_engine_spec,
+)
+
+
+stimer = StragglerDetector()
+
+def model_provider(pre_process=True, post_process=True) -> Union[GPTModel, megatron.legacy.model.GPTModel]:
+    """Builds the model.
+
+    If you set the use_mcore_models to True, it will return the mcore GPT model and if not the legacy GPT model.
+
+    Args:
+        pre_process (bool, optional): Set to true if you need to compute embedings. Defaults to True.
+        post_process (bool, optional): Set to true if you need to want to compute output logits/loss. Defaults to True.
+
+
+    Returns:
+        Union[GPTModel, megatron.legacy.model.GPTModel]: The returned model
+    """
+    args = get_args()
+    use_te = args.transformer_impl == "transformer_engine"
+
+    if args.record_memory_history:
+        torch.cuda.memory._record_memory_history(True,
+            # keep 100,000 alloc/free events from before the snapshot
+            trace_alloc_max_entries=100000,
+
+            # record stack information for the trace events
+            trace_alloc_record_context=True)
+        
+    print_rank_0('building GPT model ...')
+    # Experimental loading arguments from yaml
+    if args.yaml_cfg is not None:
+        config = core_transformer_config_from_yaml(args, "language_model")
+    else:
+        config = core_transformer_config_from_args(args)
+
+    if args.use_legacy_models:
+        model = megatron.legacy.model.GPTModel(
+            config,
+            num_tokentypes=0,
+            parallel_output=True,
+            pre_process=pre_process,
+            post_process=post_process,
+        )
+    else: # using core models
+        if args.spec is not None:
+            transformer_layer_spec = import_module(args.spec)
+        else:
+            if args.num_experts:
+                # Define the decoder block spec
+                transformer_layer_spec = get_gpt_decoder_block_spec(config, use_transformer_engine=use_te)
+            else:
+                # Define the decoder layer spec
+                if use_te:
+                    transformer_layer_spec = get_gpt_layer_with_transformer_engine_spec(
+                        args.num_experts, args.moe_grouped_gemm,
+                        args.qk_layernorm, args.multi_latent_attention, args.moe_use_legacy_grouped_gemm)
+                else:
+                    transformer_layer_spec = get_gpt_layer_local_spec(
+                        args.num_experts, args.moe_grouped_gemm,
+                        args.qk_layernorm, args.multi_latent_attention, args.moe_use_legacy_grouped_gemm)
+
+        build_model_context = nullcontext
+        build_model_context_args = {}
+        if args.fp8_param_gather:
+            try:
+                from transformer_engine.pytorch import fp8_model_init
+
+                build_model_context = fp8_model_init
+                build_model_context_args["enabled"] = True
+
+                # Check if fp8_model_init supports preserve_high_precision_init_val
+                if "preserve_high_precision_init_val" in inspect.signature(fp8_model_init).parameters:
+                    build_model_context_args["preserve_high_precision_init_val"] = True
+            except:
+                raise RuntimeError("--fp8-param-gather requires `fp8_model_init` from TransformerEngine, but not found.")
+
+        with build_model_context(**build_model_context_args):
+            model = GPTModel(
+                config=config,
+                transformer_layer_spec=transformer_layer_spec,
+                vocab_size=args.padded_vocab_size,
+                max_sequence_length=args.max_position_embeddings,
+                pre_process=pre_process,
+                post_process=post_process,
+                fp16_lm_cross_entropy=args.fp16_lm_cross_entropy,
+                parallel_output=True,
+                share_embeddings_and_output_weights=not args.untie_embeddings_and_output_weights,
+                position_embedding_type=args.position_embedding_type,
+                rotary_percent=args.rotary_percent,
+                rotary_base=args.rotary_base,
+                rope_scaling=args.use_rope_scaling
+            )
+
+    return model
+
+
+def get_batch(data_iterator):
+    """Generate a batch."""
+
+    # TODO: this is pretty hacky, find a better way
+    if (not mpu.is_pipeline_first_stage()) and (not mpu.is_pipeline_last_stage()):
+        return None, None, None, None, None
+
+    # get batches based on the TP rank you are on
+    batch = get_batch_on_this_tp_rank(data_iterator)
+
+    # slice batch along sequence dimension for context parallelism
+    batch = get_batch_on_this_cp_rank(batch)
+
+    return batch.values()
+
+
+def loss_func(loss_mask: torch.Tensor, output_tensor: torch.Tensor):
+    """Loss function.
+
+    Args:
+        loss_mask (torch.Tensor): Used to mask out some portions of the loss
+        output_tensor (torch.Tensor): The tensor with the losses
+
+    Returns:
+        the loss scalar for this micro-batch
+        the number of non-padded tokens in this microbatch
+        a dict containing reporting metrics on the loss and number of tokens across
+            the data parallel ranks
+    """
+    args = get_args()
+
+    losses = output_tensor.float()
+    loss_mask = loss_mask.view(-1).float()
+    total_tokens = loss_mask.sum()
+    loss = torch.cat([torch.sum(losses.view(-1) * loss_mask).view(1), total_tokens.view(1)])
+
+    if args.context_parallel_size > 1:
+        torch.distributed.all_reduce(loss, group=mpu.get_context_parallel_group())
+
+    # Check individual rank losses are not NaN prior to DP all-reduce.
+    rerun_state_machine = get_rerun_state_machine()
+    if args.check_for_nan_in_loss_and_grad:
+        rerun_state_machine.validate_result(
+            result=loss[0],
+            rejection_func=torch.isnan,
+            message="found NaN in local forward loss calculation",
+            tolerance=0.0,        # forward pass calculations are determinisic
+            fatal=True,
+        )
+    # Check for spiky loss
+    if args.check_for_spiky_loss:
+        rerun_state_machine.validate_result(
+            result=loss[0],
+            rejection_func=partial(rerun_state_machine.is_spiky_loss, threshold=SPIKY_LOSS_PERC),
+            message="Spiky loss",
+            tolerance=0.0,        # forward pass calculations are determinisic
+            fatal=False,
+        )
+    # Reduce loss for logging.
+    reporting_loss = loss.clone().detach()
+    torch.distributed.all_reduce(reporting_loss, group=mpu.get_data_parallel_group())
+
+    local_num_tokens = loss[1].clone().detach().to(torch.int)
+    return (
+        loss[0] * args.context_parallel_size,
+        local_num_tokens,
+        {'lm loss': (reporting_loss[0], reporting_loss[1])},
+    )
+
+
+def forward_step(data_iterator, model: GPTModel):
+    """Forward training step.
+
+    Args:
+        data_iterator : Input data iterator
+        model (GPTModel): The GPT Model
+    """
+    args = get_args()
+    timers = get_timers()
+
+    # Get the batch.
+    timers('batch-generator', log_level=2).start()
+    global stimer
+    with stimer(bdata=True):
+        tokens, labels, loss_mask, attention_mask, position_ids = get_batch(
+            data_iterator)
+    timers('batch-generator').stop()
+
+    with stimer:
+        output_tensor = model(tokens, position_ids, attention_mask,
+                              labels=labels)
+
+    return output_tensor, partial(loss_func, loss_mask)
+
+
+def is_dataset_built_on_rank():
+    return (
+        mpu.is_pipeline_first_stage() or mpu.is_pipeline_last_stage()
+    ) and mpu.get_tensor_model_parallel_rank() == 0
+
+
+def core_gpt_dataset_config_from_args(args):
+    tokenizer = get_tokenizer()
+
+    return GPTDatasetConfig(
+        random_seed=args.seed,
+        sequence_length=args.seq_length,
+        blend=get_blend_from_list(args.data_path),
+        blend_per_split=[
+            get_blend_from_list(args.train_data_path),
+            get_blend_from_list(args.valid_data_path),
+            get_blend_from_list(args.test_data_path)
+        ],
+        split=args.split,
+        num_dataset_builder_threads=args.num_dataset_builder_threads,
+        path_to_cache=args.data_cache_path,
+        mmap_bin_files=args.mmap_bin_files,
+        tokenizer=tokenizer,
+        reset_position_ids=args.reset_position_ids,
+        reset_attention_mask=args.reset_attention_mask,
+        eod_mask_loss=args.eod_mask_loss,
+        create_attention_mask=args.create_attention_mask_in_dataloader,
+    )
+
+
+def train_valid_test_datasets_provider(train_val_test_num_samples):
+    """Build the train test and validation datasets.
+
+    Args:
+        train_val_test_num_samples : A list containing the number of samples in train test and validation.
+    """
+    args = get_args()
+
+    config = core_gpt_dataset_config_from_args(args)
+
+    if args.mock_data:
+        dataset_type = MockGPTDataset
+    else:
+        dataset_type = GPTDataset
+
+    print_rank_0("> building train, validation, and test datasets for GPT ...")
+
+    train_ds, valid_ds, test_ds = BlendedMegatronDatasetBuilder(
+        dataset_type,
+        train_val_test_num_samples,
+        is_dataset_built_on_rank,
+        config
+    ).build()
+
+    print_rank_0("> finished creating GPT datasets ...")
+
+    return train_ds, valid_ds, test_ds
+
+
+if __name__ == "__main__":
+
+    # Temporary for transition to core datasets
+    train_valid_test_datasets_provider.is_distributed = True
+
+    pretrain(
+        train_valid_test_datasets_provider,
+        model_provider,
+        ModelType.encoder_or_decoder,
+        forward_step,
+        args_defaults={'tokenizer_type': 'GPT2BPETokenizer'},
+    )
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2.sh b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2.sh
new file mode 100644
index 00000000..f73e8091
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=1
+EP_SIZE=8
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=32
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/yehua/llama2_dataset/llama_00_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/yehua/llama2_dataset/tokenizer.model
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_musa.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_cuda.sh b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_cuda.sh
new file mode 100644
index 00000000..75a4f8b7
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_cuda.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=1
+EP_SIZE=4
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=8
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/huang.huang/datasets/deepseek/deepseekv2_dataset/deepseek_train_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/yehua/llama2_dataset/tokenizer.model
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_cuda.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_lite_cuda.sh b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_lite_cuda.sh
new file mode 100644
index 00000000..04d35122
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_lite_cuda.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=4
+EP_SIZE=1
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=8
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/jfs/home/huang.huang/datasets/deepseek/deepseekv2_dataset/deepseek_train_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/yehua/llama2_dataset/tokenizer.model
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_lite_cuda.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_lite_cuda_n2.sh b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_lite_cuda_n2.sh
new file mode 100644
index 00000000..340a06fd
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_lite_cuda_n2.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=4
+EP_SIZE=1
+WORLD_SIZE=16
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=8
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/jfs/home/huang.huang/datasets/deepseek/deepseekv2_dataset/deepseek_train_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/yehua/llama2_dataset/tokenizer.model
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_lite_cuda.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_lite_musa.sh b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_lite_musa.sh
new file mode 100644
index 00000000..294c45c2
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_lite_musa.sh
@@ -0,0 +1,55 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=4
+EP_SIZE=2
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=4
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/huanghuang/dataset/deepseekv2_dataset/deepseek_train_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/huanghuang/dataset/deepseekv2_dataset/llama3_tokenizer
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_lite_musa.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+for host in ${hostlist[@]}; do
+    ssh $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'" 
+    echo "$host is killed."
+done
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
+
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_test.sh b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_test.sh
new file mode 100644
index 00000000..3e9f488f
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2_test.sh
@@ -0,0 +1,50 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=1
+EP_SIZE=8
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=32
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/llama2_dataset/llama_00_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/llama2_dataset/tokenizer.model
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_musa.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     export LOG_REDIRECTS_LEVEL=${LOG_REDIRECTS_LEVEL}; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2noaux.sh b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2noaux.sh
new file mode 100644
index 00000000..1e7ae8f7
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/run_deepseekv2noaux.sh
@@ -0,0 +1,57 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=1
+EP_SIZE=4
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=1
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  # DATA_PATH=/home/dist/musa_tmp_share/megatron_0.9-share-hh/data/mixtral_dataset/dedup-md5-pile-pile-cc_text_document
+  # DATA_PATH=/home/dist/musa_tmp_share/dataset/deepseekv2_dataset/deepseek_train_text_document
+  DATA_PATH=/home/dist/huanghuang/dataset/deepseekv2_dataset/deepseek_train_text_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  # TOKENIZED_MODEL=/home/dist/musa_tmp_share/dataset/llama3_tokenizer  
+  TOKENIZED_MODEL=/home/dist/huanghuang/dataset/deepseekv2_dataset/llama3_tokenizer
+  SCRIPT_FILE=./deepseek-v2-lite/run_pretrain_deepseekv2_noaux_musa.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE $EP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+for host in ${hostlist[@]}; do
+    ssh $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'" 
+    echo "$host is killed."
+done
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/deepseek-v2/stop_all.sh b/megatron-lm-musa-patch/test/deepseek-v2/stop_all.sh
new file mode 100755
index 00000000..e7274a3c
--- /dev/null
+++ b/megatron-lm-musa-patch/test/deepseek-v2/stop_all.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+HOSTFILE=./hostfile
+NUM_NODES=$(grep -v '^#\|^$' $HOSTFILE | wc -l)
+echo "NUM_NODES: $NUM_NODES"
+
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+    ssh -f -n $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'"  # /usr/local/bin/torchrun
+    ssh -f -n $host "pkill -f '/usr/local/bin/torchrun'"
+    echo "$host is killed."
+done
diff --git a/megatron-lm-musa-patch/test/llama3/8B/musa_tp1_pp1_seqlen4k_nolast_pipeline.sh b/megatron-lm-musa-patch/test/llama3/8B/musa_tp1_pp1_seqlen4k_nolast_pipeline.sh
new file mode 100644
index 00000000..c2b239c1
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/8B/musa_tp1_pp1_seqlen4k_nolast_pipeline.sh
@@ -0,0 +1,186 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  MICRO_BATCH_SIZE=$8
+  GLOBAL_BATCH_SIZE=${9}
+  TOKENIZED_MODEL=${10}
+  RDZV_ID=${11}
+set +u
+# Megatron Profiling config
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_EXECUTION_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export MUSA_BLOCK_SCHEDULE_MODE=1
+export MCCL_IB_GID_INDEX=3
+export MUSA_PRINT_ENV=1
+export MCCL_ALGOS=1
+export MUSA_EXECUTE_COUNT=1 
+export MCCL_BUFFSIZE=20480000
+#export MCCL_IB_HCA='mlx5_10:1,mlx5_12:1,mlx5_14:1,mlx5_16:1' # On MCCP vf, please comment this config
+
+MEGATRON_PATH=/home/Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ip a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n1 | cut -d '/' -f1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+# export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks[$NODE_ADDR];}' $HOSTFILE)
+export MASTER_PORT=14388
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+    #--log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    #--redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 32
+    --hidden-size 4096 
+    --ffn-hidden-size 14336
+    --num-attention-heads 32 
+    --group-query-attention 
+    --num-query-groups 8
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.008
+    --use-mcore-models 
+    --no-bias-dropout-fusion
+    # --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl local
+)
+# --no-bias-swiglu-fusion
+# --no-rope-fusion
+# --no-gradient-accumulation-fusion 
+# --transformer-impl local transformer_engine
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type HuggingFaceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 200000 
+    --eval-interval 1000 
+    # --save $CHECKPOINT_PATH 
+    # --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_gpt.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/test/llama3/8B/musa_tp1_pp2_seqlen4k_last_pipeline14.sh b/megatron-lm-musa-patch/test/llama3/8B/musa_tp1_pp2_seqlen4k_last_pipeline14.sh
new file mode 100644
index 00000000..82bb2db0
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/8B/musa_tp1_pp2_seqlen4k_last_pipeline14.sh
@@ -0,0 +1,187 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  MICRO_BATCH_SIZE=$8
+  GLOBAL_BATCH_SIZE=${9}
+  TOKENIZED_MODEL=${10}
+  RDZV_ID=${11}
+set +u
+# Megatron Profiling config
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_EXECUTION_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export MUSA_BLOCK_SCHEDULE_MODE=1
+export MCCL_IB_GID_INDEX=3
+export MUSA_PRINT_ENV=1
+export MCCL_ALGOS=1
+export MUSA_EXECUTE_COUNT=1 
+export MCCL_BUFFSIZE=20480000
+#export MCCL_IB_HCA='mlx5_10:1,mlx5_12:1,mlx5_14:1,mlx5_16:1' # On MCCP vf, please comment this config
+
+MEGATRON_PATH=/home/Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ip a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n1 | cut -d '/' -f1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+# export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks[$NODE_ADDR];}' $HOSTFILE)
+export MASTER_PORT=14388
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+    #--log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    #--redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 32
+    --hidden-size 4096 
+    --ffn-hidden-size 14336
+    --num-attention-heads 32 
+    --group-query-attention 
+    --num-query-groups 8
+    --seq-length 4096 
+    --max-position-embeddings 4096 
+    --norm-epsilon 1e-5 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.008
+    --use-mcore-models 
+    --no-bias-dropout-fusion
+    # --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl local
+)
+# --no-bias-swiglu-fusion
+# --no-rope-fusion
+# --no-gradient-accumulation-fusion 
+# --transformer-impl local transformer_engine
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE
+    --decoder-last-pipeline-num-layers 14
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type HuggingFaceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 200000 
+    --eval-interval 1000 
+    # --save $CHECKPOINT_PATH 
+    # --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_gpt.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/test/llama3/8B/musa_tp1_pp2_seqlen8k_last_pipeline14.sh b/megatron-lm-musa-patch/test/llama3/8B/musa_tp1_pp2_seqlen8k_last_pipeline14.sh
new file mode 100644
index 00000000..3322705c
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/8B/musa_tp1_pp2_seqlen8k_last_pipeline14.sh
@@ -0,0 +1,187 @@
+#!/bin/bash
+
+set -u
+  WORK_HOME=$1
+  PATCH_HOME=$2
+  EXPNAME=$3
+  HOSTFILE=$4
+  DATA_DIR=$5
+  TP_SIZE=$6
+  PP_SIZE=$7
+  MICRO_BATCH_SIZE=$8
+  GLOBAL_BATCH_SIZE=${9}
+  TOKENIZED_MODEL=${10}
+  RDZV_ID=${11}
+set +u
+# Megatron Profiling config
+# export ENABLE_PROFILER=1
+# export PROFILER_FREQ=4
+# export MUSA_LAUNCH_BLOCKING=1
+export OMP_NUM_THREADS=4
+export MUSA_VISIBLE_DEVICES='0,1,2,3,4,5,6,7'
+export MUSA_EXECUTION_TIMEOUT=3200000
+export ACCELERATOR_BACKEND="musa"
+export MCCL_PROTOS=2
+export MCCL_CHECK_POINTERS=0
+export CUDA_DEVICE_MAX_CONNECTIONS=1
+export MUSA_BLOCK_SCHEDULE_MODE=1
+export MCCL_IB_GID_INDEX=3
+export MUSA_PRINT_ENV=1
+export MCCL_ALGOS=1
+export MUSA_EXECUTE_COUNT=1 
+export MCCL_BUFFSIZE=20480000
+#export MCCL_IB_HCA='mlx5_10:1,mlx5_12:1,mlx5_14:1,mlx5_16:1' # On MCCP vf, please comment this config
+
+MEGATRON_PATH=/home/Megatron-LM
+export PYTHONPATH=${MEGATRON_PATH}:${PATCH_HOME}:$PYTHONPATH
+
+if [ ! -d "${MEGATRON_PATH}/build" ]; then
+    cd "${MEGATRON_PATH}"
+    python setup.py build_ext --inplace
+    cd -
+fi
+
+CHECKPOINT_PATH=$WORK_HOME/checkpoints/$EXPNAME
+mkdir -p $CHECKPOINT_PATH
+DATA_PATH=$DATA_DIR
+
+
+LOG_PATH=$WORK_HOME/logs/$EXPNAME
+mkdir -p $LOG_PATH
+cp $0 $LOG_PATH/
+TB_PATH=$WORK_HOME/tboard/$EXPNAME
+mkdir -p $TB_PATH
+WB_PATH=$WORK_HOME/wandb/$EXPNAME
+mkdir -p $WB_PATH
+
+
+export NODE_ADDR=$(ip a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk '{print $2;}'|tr -d "addr:"|head -n1 | cut -d '/' -f1)
+export GPUS_PER_NODE=8
+export NUM_NODES=$(cat $HOSTFILE | wc -l)
+export MASTER_ADDR=$(head -n1 $HOSTFILE | awk '{print $1;}')
+export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks["'$NODE_ADDR'"];}' $HOSTFILE)
+# export NODE_RANK=$(awk '{ranks[$1]=(FNR-1);}END{print ranks[$NODE_ADDR];}' $HOSTFILE)
+export MASTER_PORT=14388
+
+DISTRIBUTED_ARGS=(
+    --nproc_per_node $GPUS_PER_NODE 
+    --nnodes $NUM_NODES 
+    --node_rank $NODE_RANK 
+    --master_addr $MASTER_ADDR 
+    --master_port $MASTER_PORT 
+    #--log_dir $WORK_HOME/output_log/$RDZV_ID/$EXPNAME
+    #--redirects 3
+)
+
+MODEL_ARGS=(
+    --num-layers 32
+    --hidden-size 4096 
+    --ffn-hidden-size 14336
+    --num-attention-heads 32 
+    --group-query-attention 
+    --num-query-groups 8
+    --seq-length 8192 
+    --max-position-embeddings 8192 
+    --norm-epsilon 1e-5 
+    --attention-dropout 0.0 
+    --hidden-dropout 0.0 
+    --disable-bias-linear 
+    --position-embedding-type rope 
+    --no-position-embedding 
+    --swiglu 
+    --normalization RMSNorm
+    --untie-embeddings-and-output-weights
+)
+
+# 244140625 1T
+TRAINING_ARGS=(
+    --seed 42 
+    --micro-batch-size $MICRO_BATCH_SIZE 
+    --global-batch-size $GLOBAL_BATCH_SIZE  
+    --train-samples 24414062 
+    --init-method-std 0.008
+    --use-mcore-models 
+    --no-bias-dropout-fusion
+    # --no-bias-swiglu-fusion
+    --use-distributed-optimizer 
+    --use-flash-attn 
+    --sequence-parallel 
+    --recompute-granularity full 
+    --recompute-method block 
+    --recompute-num-layers 0 
+    --distributed-backend nccl 
+    --transformer-impl local
+)
+# --no-bias-swiglu-fusion
+# --no-rope-fusion
+# --no-gradient-accumulation-fusion 
+# --transformer-impl local transformer_engine
+REGULARIZATION_ARGS=(
+    --weight-decay 0.1 
+    --adam-beta1 0.9 
+    --adam-beta2 0.95 
+    --clip-grad 1.0 
+)
+
+WARMUP_STEPS=2000
+WARMUP_SAMPLES=$((WARMUP_STEPS * GLOBAL_BATCH_SIZE))
+
+LEARNING_RATE_ARGS=(
+    --lr 1.5e-5 
+    --lr-decay-style cosine 
+    --lr-warmup-samples ${WARMUP_SAMPLES} 
+    --min-lr 1.5e-6 
+    --initial-loss-scale 65536 
+    --min-loss-scale 1.0 
+)
+
+MODEL_PARALLEL_ARGS=(
+	--tensor-model-parallel-size $TP_SIZE  
+	--pipeline-model-parallel-size $PP_SIZE
+    --decoder-last-pipeline-num-layers 14
+)
+
+MIXED_PRECISION_ARGS=(
+    --bf16 
+    --attention-softmax-in-fp32 
+    --no-masked-softmax-fusion 
+    --accumulate-allreduce-grads-in-fp32
+)
+
+DATA_ARGS="
+    --data-path $DATA_PATH \
+    --tokenizer-type HuggingFaceTokenizer \
+    --tokenizer-model ${TOKENIZED_MODEL} \
+    --split 1
+"
+
+
+EVAL_AND_LOGGING_ARGS=(
+    --log-interval 1
+    --save-interval 200000 
+    --eval-interval 1000 
+    # --save $CHECKPOINT_PATH 
+    # --load $CHECKPOINT_PATH 
+    --eval-iters 0
+    --tensorboard-dir $TB_PATH 
+)
+
+# if [ -n "${WANDB_API_KEY}" ]; then
+#     EVAL_AND_LOGGING_ARGS+=(
+#         --wandb-project ${WANDB_PROJECT:-"Mixtral-Finetuning"}
+#         --wandb-exp-name ${WANDB_NAME:-"Mixtral_8x7B"} 
+#     )
+# fi
+
+cmd="torchrun ${DISTRIBUTED_ARGS[@]} $WORK_HOME/pretrain_gpt.py \
+        ${MODEL_ARGS[@]} \
+        ${TRAINING_ARGS[@]} \
+        ${REGULARIZATION_ARGS[@]}
+        ${LEARNING_RATE_ARGS[@]} \
+        ${MODEL_PARALLEL_ARGS[@]} \
+        ${MIXED_PRECISION_ARGS[@]}
+        ${DATA_ARGS[@]} \
+        ${EVAL_AND_LOGGING_ARGS[@]}
+    "
+echo $cmd
+eval $cmd
diff --git a/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp1_gbs1024.sh b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp1_gbs1024.sh
new file mode 100644
index 00000000..29d647e6
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp1_gbs1024.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=1
+WORLD_SIZE=16
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=64
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/dataset/llama3-datasets/wudao_llama3bpe_content_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/dataset/llama3_tokenizer
+  SCRIPT_FILE=./8B/musa_tp1_pp1_seqlen4k_nolast_pipeline.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; mkdir -p ./output/$CURRENT_TIME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # cmd_ssh=$cmd" &'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp1_gbs2048.sh b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp1_gbs2048.sh
new file mode 100644
index 00000000..24e97bcc
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp1_gbs2048.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=1
+WORLD_SIZE=16
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=128
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/dataset/llama3-datasets/wudao_llama3bpe_content_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/dataset/llama3_tokenizer
+  SCRIPT_FILE=./8B/musa_tp1_pp1_seqlen4k_nolast_pipeline.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; mkdir -p ./output/$CURRENT_TIME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # cmd_ssh=$cmd" &'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs1024_4k.sh b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs1024_4k.sh
new file mode 100644
index 00000000..dd5033d1
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs1024_4k.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=2
+WORLD_SIZE=16
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=128
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/dataset/llama3-datasets/wudao_llama3bpe_content_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/dataset/llama3_tokenizer
+  SCRIPT_FILE=./8B/musa_tp1_pp2_seqlen4k_last_pipeline14.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; mkdir -p ./output/$CURRENT_TIME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # cmd_ssh=$cmd" &'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs1024_8k.sh b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs1024_8k.sh
new file mode 100644
index 00000000..e5199b16
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs1024_8k.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=2
+WORLD_SIZE=16
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=128
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/dataset/llama3-datasets/wudao_llama3bpe_content_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/dataset/llama3_tokenizer
+  SCRIPT_FILE=./8B/musa_tp1_pp2_seqlen8k_last_pipeline14.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; mkdir -p ./output/$CURRENT_TIME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # cmd_ssh=$cmd" &'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs2048_4k.sh b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs2048_4k.sh
new file mode 100644
index 00000000..aea57011
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs2048_4k.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=2
+WORLD_SIZE=16
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=256
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/dataset/llama3-datasets/wudao_llama3bpe_content_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/dataset/llama3_tokenizer
+  SCRIPT_FILE=./8B/musa_tp1_pp2_seqlen4k_last_pipeline14.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; mkdir -p ./output/$CURRENT_TIME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # cmd_ssh=$cmd" &'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs2048_8k.sh b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs2048_8k.sh
new file mode 100644
index 00000000..fded0659
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/llama3_musa_16gpu_tp1_pp2_gbs2048_8k.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=2
+WORLD_SIZE=16
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=256
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/dataset/llama3-datasets/wudao_llama3bpe_content_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/dataset/llama3_tokenizer
+  SCRIPT_FILE=./8B/musa_tp1_pp2_seqlen8k_last_pipeline14.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; mkdir -p ./output/$CURRENT_TIME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # cmd_ssh=$cmd" &'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/llama3/llama3_musa_8gpu_tp1_pp2_gbs1024.sh b/megatron-lm-musa-patch/test/llama3/llama3_musa_8gpu_tp1_pp2_gbs1024.sh
new file mode 100644
index 00000000..a4ffbf10
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/llama3_musa_8gpu_tp1_pp2_gbs1024.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=2
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=256
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/dataset/llama3-datasets/wudao_llama3bpe_content_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/dataset/llama3_tokenizer
+  SCRIPT_FILE=./8B/musa_tp1_pp2_seqlen4k_last_pipeline14.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # cmd_ssh=$cmd" &'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/llama3/llama3_musa_8gpu_tp1_pp2_gbs2048.sh b/megatron-lm-musa-patch/test/llama3/llama3_musa_8gpu_tp1_pp2_gbs2048.sh
new file mode 100644
index 00000000..e9b2a9b1
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/llama3_musa_8gpu_tp1_pp2_gbs2048.sh
@@ -0,0 +1,49 @@
+#!/bin/bash
+
+CURRENT_TIME=$(date "+%Y-%m-%d_%H:%M:%S")
+echo $CURRENT_TIME
+mkdir -p ./output/$CURRENT_TIME
+
+TP_SIZE=1
+PP_SIZE=2
+WORLD_SIZE=8
+MICRO_BATCH_SIZE=1
+NUM_MICROBATCHES=512
+(( DP_SIZE = $WORLD_SIZE / ($TP_SIZE * $PP_SIZE) ))
+echo $DP_SIZE
+(( GLOBAL_BATCH_SIZE = $MICRO_BATCH_SIZE * $NUM_MICROBATCHES * $DP_SIZE ))
+echo $GLOBAL_BATCH_SIZE
+
+set -u
+  WORK_HOME="$PWD"
+  PATCH_HOME="$PWD"/../..
+  EXPNAME="tp${TP_SIZE}_pp${PP_SIZE}_dp${DP_SIZE}_mbs${MICRO_BATCH_SIZE}_numbs${NUM_MICROBATCHES}_gbs${GLOBAL_BATCH_SIZE}_gpus${WORLD_SIZE}"
+  DATA_PATH=/home/dist/dataset/llama3-datasets/wudao_llama3bpe_content_document
+  HOSTFILE=./hostfile
+  LOG_FILE=./output/$CURRENT_TIME/$EXPNAME.log
+  TOKENIZED_MODEL=/home/dist/dataset/llama3_tokenizer
+  SCRIPT_FILE=./8B/musa_tp1_pp2_seqlen4k_last_pipeline14.sh
+  RDZV_ID=$CURRENT_TIME
+set +u
+
+cmd="bash -c 'cd $WORK_HOME; \
+     bash $SCRIPT_FILE $WORK_HOME $PATCH_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" \
+     $TP_SIZE $PP_SIZE \
+     $MICRO_BATCH_SIZE $GLOBAL_BATCH_SIZE $TOKENIZED_MODEL $RDZV_ID"
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+hostlen=$(cat $HOSTFILE | wc -l )
+
+COUNT=0
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+  cmd_ssh=$cmd" > $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # cmd_ssh=$cmd" &'"
+  # cmd_ssh=$cmd" '"
+  echo $cmd_ssh
+  ssh -f -n $host $cmd_ssh
+  # echo $host, "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  # ssh -f -n $host "bash -c 'cd $FlagScale_HOME/megatron; nohup bash $SCRIPT_FILE $PROJ_HOME $EXPNAME $HOSTFILE \"$DATA_PATH\" >> $LOG_FILE.$COUNT.$host 2>&1 &'"
+  ((COUNT++))
+done
diff --git a/megatron-lm-musa-patch/test/llama3/pretrain_gpt.py b/megatron-lm-musa-patch/test/llama3/pretrain_gpt.py
new file mode 100644
index 00000000..41bb4184
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/pretrain_gpt.py
@@ -0,0 +1,274 @@
+# Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
+"""Pretrain GPT."""
+
+import os
+import torch
+from functools import partial
+from contextlib import nullcontext
+import inspect
+
+from typing import Union
+if os.getenv("ACCELERATOR_BACKEND", "musa") == "musa":
+    import musa_patch
+else:
+    pass
+from megatron.training import get_args
+from megatron.training import print_rank_0
+from megatron.training import get_timers
+from megatron.training import get_tokenizer
+from megatron.core import mpu
+from megatron.core.enums import ModelType
+from megatron.core.datasets.blended_megatron_dataset_builder import BlendedMegatronDatasetBuilder
+from megatron.core.datasets.utils import get_blend_from_list
+from megatron.core.datasets.gpt_dataset import GPTDatasetConfig
+from megatron.core.datasets.gpt_dataset import MockGPTDataset, GPTDataset
+import megatron.legacy.model
+from megatron.core.models.gpt import GPTModel
+from megatron.training import pretrain
+from megatron.core.utils import StragglerDetector
+from megatron.core.transformer.spec_utils import import_module
+from megatron.training.utils import (
+    get_batch_on_this_cp_rank,
+    get_batch_on_this_tp_rank,
+)
+from megatron.training.arguments import core_transformer_config_from_args
+from megatron.training.yaml_arguments import core_transformer_config_from_yaml
+from megatron.core.models.gpt.gpt_layer_specs import (
+    get_gpt_layer_local_spec,
+    get_gpt_layer_with_transformer_engine_spec,
+)
+
+
+stimer = StragglerDetector()
+
+def model_provider(pre_process=True, post_process=True) -> Union[GPTModel, megatron.legacy.model.GPTModel]:
+    """Builds the model.
+
+    If you set the use_legacy_models to True, it will return the legacy GPT model and if not the mcore GPT model.
+
+    Args:
+        pre_process (bool, optional): Set to true if you need to compute embedings. Defaults to True.
+        post_process (bool, optional): Set to true if you need to want to compute output logits/loss. Defaults to True.
+
+
+    Returns:
+        Union[GPTModel, megatron.legacy.model.GPTModel]: The returned model
+    """
+    args = get_args()
+    use_te = args.transformer_impl == "transformer_engine"
+
+    print_rank_0('building GPT model ...')
+    # Experimental loading arguments from yaml
+    if args.yaml_cfg is not None:
+        config = core_transformer_config_from_yaml(args, "language_model")
+    else:
+        config = core_transformer_config_from_args(args)
+
+    if args.use_legacy_models:
+        model = megatron.legacy.model.GPTModel(
+            config,
+            num_tokentypes=0,
+            parallel_output=True,
+            pre_process=pre_process,
+            post_process=post_process,
+        )
+    else: # using core models
+        if args.spec is not None:
+            transformer_layer_spec = import_module(args.spec)
+        else:
+            if use_te:
+                transformer_layer_spec = get_gpt_layer_with_transformer_engine_spec(args.num_experts, args.moe_grouped_gemm, args.qk_layernorm, args.fp8)
+            else:
+                transformer_layer_spec = get_gpt_layer_local_spec(args.num_experts, args.moe_grouped_gemm, args.qk_layernorm)
+
+        build_model_context = nullcontext
+        build_model_context_args = {}
+        if args.fp8_param_gather:
+            try:
+                from transformer_engine.pytorch import fp8_model_init
+
+                build_model_context = fp8_model_init
+                build_model_context_args["enabled"] = True
+
+                # Check if fp8_model_init supports preserve_high_precision_init_val
+                if "preserve_high_precision_init_val" in inspect.signature(fp8_model_init).parameters:
+                    build_model_context_args["preserve_high_precision_init_val"] = True
+            except:
+                raise RuntimeError("--fp8-param-gather requires `fp8_model_init` from TransformerEngine, but not found.")
+
+        with build_model_context(**build_model_context_args):
+            model = GPTModel(
+                config=config,
+                transformer_layer_spec=transformer_layer_spec,
+                vocab_size=args.padded_vocab_size,
+                max_sequence_length=args.max_position_embeddings,
+                pre_process=pre_process,
+                post_process=post_process,
+                fp16_lm_cross_entropy=args.fp16_lm_cross_entropy,
+                parallel_output=True,
+                share_embeddings_and_output_weights=not args.untie_embeddings_and_output_weights,
+                position_embedding_type=args.position_embedding_type,
+                rotary_percent=args.rotary_percent,
+                rotary_base=args.rotary_base
+            )
+
+    return model
+
+
+def get_batch(data_iterator):
+    """Generate a batch."""
+
+    # TODO: this is pretty hacky, find a better way
+    if (not mpu.is_pipeline_first_stage()) and (not mpu.is_pipeline_last_stage()):
+        return None, None, None, None, None
+
+    # get batches based on the TP rank you are on
+    batch = get_batch_on_this_tp_rank(data_iterator)
+
+    # slice batch along sequence dimension for context parallelism
+    batch = get_batch_on_this_cp_rank(batch)
+
+    return batch.values()
+
+
+def loss_func(loss_mask: torch.Tensor, output_tensor: torch.Tensor):
+    """Loss function.
+
+    Args:
+        loss_mask (torch.Tensor): Used to mask out some portions of the loss
+        output_tensor (torch.Tensor): The tensor with the losses
+
+    Returns:
+        the loss scalar for this micro-batch
+        the number of non-padded tokens in this microbatch
+        a dict containing reporting metrics on the loss and number of tokens across
+            the data parallel ranks
+    """
+    args = get_args()
+
+    losses = output_tensor.float()
+    loss_mask = loss_mask.view(-1).float()
+    total_tokens = loss_mask.sum()
+    loss = torch.cat([torch.sum(losses.view(-1) * loss_mask).view(1), total_tokens.view(1)])
+
+    if args.context_parallel_size > 1:
+        torch.distributed.all_reduce(loss, group=mpu.get_context_parallel_group())
+
+    # Check individual rank losses are not NaN prior to DP all-reduce.
+    if args.check_for_nan_in_loss_and_grad:
+        global_rank = torch.distributed.get_rank()
+        assert not loss[0].isnan(), (
+            f'Rank {global_rank}: found NaN in local forward loss calculation. '
+            f'Device: {torch.cuda.current_device()}, node: {os.uname()[1]}'
+        )
+
+    # Reduce loss for logging.
+    reporting_loss = loss.clone().detach()
+    torch.distributed.all_reduce(reporting_loss, group=mpu.get_data_parallel_group())
+
+    local_num_tokens = loss[1].clone().detach().to(torch.int)
+    return (
+        loss[0] * args.context_parallel_size,
+        local_num_tokens,
+        {'lm loss': (reporting_loss[0], reporting_loss[1])},
+    )
+
+
+def forward_step(data_iterator, model: GPTModel):
+    """Forward training step.
+
+    Args:
+        data_iterator : Input data iterator
+        model (GPTModel): The GPT Model
+    """
+    args = get_args()
+    timers = get_timers()
+
+    # Get the batch.
+    timers('batch-generator', log_level=2).start()
+    global stimer
+    with stimer(bdata=True):
+        tokens, labels, loss_mask, attention_mask, position_ids = get_batch(
+            data_iterator)
+    timers('batch-generator').stop()
+
+    with stimer:
+        output_tensor = model(tokens, position_ids, attention_mask,
+                              labels=labels)
+
+    return output_tensor, partial(loss_func, loss_mask)
+
+
+def is_dataset_built_on_rank():
+    return (
+        mpu.is_pipeline_first_stage() or mpu.is_pipeline_last_stage()
+    ) and mpu.get_tensor_model_parallel_rank() == 0
+
+
+def core_gpt_dataset_config_from_args(args):
+    tokenizer = get_tokenizer()
+
+    return GPTDatasetConfig(
+        random_seed=args.seed,
+        sequence_length=args.seq_length,
+        blend=get_blend_from_list(args.data_path),
+        blend_per_split=[
+            get_blend_from_list(args.train_data_path),
+            get_blend_from_list(args.valid_data_path),
+            get_blend_from_list(args.test_data_path)
+        ],
+        renormalize_blend_weights=args.renormalize_blend_weights,
+        split=args.split,
+        num_dataset_builder_threads=args.num_dataset_builder_threads,
+        path_to_cache=args.data_cache_path,
+        mmap_bin_files=args.mmap_bin_files,
+        tokenizer=tokenizer,
+        reset_position_ids=args.reset_position_ids,
+        reset_attention_mask=args.reset_attention_mask,
+        eod_mask_loss=args.eod_mask_loss,
+        create_attention_mask=args.create_attention_mask_in_dataloader,
+        s3_cache_path = args.s3_cache_path
+    )
+
+
+def train_valid_test_datasets_provider(train_val_test_num_samples):
+    """Build the train test and validation datasets.
+
+    Args:
+        train_val_test_num_samples : A list containing the number of samples in train test and validation.
+    """
+    args = get_args()
+
+    config = core_gpt_dataset_config_from_args(args)
+
+    if args.mock_data:
+        dataset_type = MockGPTDataset
+    else:
+        dataset_type = GPTDataset
+
+    print_rank_0("> building train, validation, and test datasets for GPT ...")
+
+    train_ds, valid_ds, test_ds = BlendedMegatronDatasetBuilder(
+        dataset_type,
+        train_val_test_num_samples,
+        is_dataset_built_on_rank,
+        config
+    ).build()
+
+    print_rank_0("> finished creating GPT datasets ...")
+
+    return train_ds, valid_ds, test_ds
+
+
+if __name__ == "__main__":
+
+    # Temporary for transition to core datasets
+    train_valid_test_datasets_provider.is_distributed = True
+
+    pretrain(
+        train_valid_test_datasets_provider,
+        model_provider,
+        ModelType.encoder_or_decoder,
+        forward_step,
+        args_defaults={'tokenizer_type': 'GPT2BPETokenizer'},
+    )
diff --git a/megatron-lm-musa-patch/test/llama3/stop_all.sh b/megatron-lm-musa-patch/test/llama3/stop_all.sh
new file mode 100644
index 00000000..13521bc9
--- /dev/null
+++ b/megatron-lm-musa-patch/test/llama3/stop_all.sh
@@ -0,0 +1,11 @@
+#!/bin/bash
+
+HOSTFILE=./hostfile
+NUM_NODES=$(grep -v '^#\|^$' $HOSTFILE | wc -l)
+echo "NUM_NODES: $NUM_NODES"
+
+hostlist=$(grep -v '^#\|^$' $HOSTFILE | awk '{print $1}' | xargs)
+for host in ${hostlist[@]}; do
+    ssh -f -n $host "pkill -f '/opt/conda/envs/py310/bin/torchrun'" 
+    echo "$host is killed."
+done
diff --git a/megatron-lm-musa-patch/test/test.sh b/megatron-lm-musa-patch/test/test.sh
new file mode 100644
index 00000000..1d30b318
--- /dev/null
+++ b/megatron-lm-musa-patch/test/test.sh
@@ -0,0 +1,4 @@
+export NCCL_PROTOS=2
+export CUDA_VISIBLE_DEVICES='4,5,6,7'
+
+torchrun --nproc_per_node=4 --nnodes=1 --node_rank=0 --master_addr="localhost" --master_port=10489 test_dist.py
diff --git a/megatron-lm-musa-patch/test/test_dist.py b/megatron-lm-musa-patch/test/test_dist.py
new file mode 100644
index 00000000..63d32d64
--- /dev/null
+++ b/megatron-lm-musa-patch/test/test_dist.py
@@ -0,0 +1,522 @@
+'''
+Test the NCCL communication performance
+'''
+import os
+import time
+
+from numpy import mean, percentile
+import pandas as pd
+import argparse
+
+import torch
+import torch.nn.parallel
+import torch.distributed as dist
+from torch.distributed import ReduceOp
+import torch.multiprocessing as mp
+
+try:
+    import torch_musa
+    _USE_MUSA = True
+    _sync = torch_musa._MUSAC._musa_synchronize
+    _DEVICE_PREFIX = 'musa'
+    _set_device = torch_musa.set_device
+    _BACKEND = 'mccl'
+    # _backend = 'gloo'
+    # _device_prefix = 'cpu'
+except Exception as e:
+    _USE_MUSA = False
+    _sync = torch.cuda.synchronize
+    _DEVICE_PREFIX = 'cuda'
+    _set_device = torch.cuda.set_device
+    _BACKEND = 'nccl'
+
+    print(f"torch_musa not imported. _USE_MUSA: {_USE_MUSA}")
+    print(e)
+
+_TENSOR_MODEL_PARALLEL_GROUP = None
+_TENSOR_MODEL_PARALLEL_GLOBAL_RANKS = None
+_EXPERT_MODEL_PARALLEL_GROUP = None
+_EXPERT_MODEL_PARALLEL_GROUP_RANKS = None
+
+LOCAL_RANK = int(os.environ['LOCAL_RANK'])
+WORLD_SIZE = int(os.environ['WORLD_SIZE'])
+WORLD_RANK = int(os.environ['RANK'])
+
+print(f"WORLD_RANK: {WORLD_RANK}")
+
+prefix_unit = {
+        'B':1,
+        'KB':1024,
+        'MB':1024*1024,
+        'GB':1024*1024*1024,
+        }
+
+def setup():
+    '''initialize the process group'''
+    dist.init_process_group(_BACKEND, rank=WORLD_RANK, world_size=WORLD_SIZE)
+
+def cleanup():
+    '''destroy all groups'''
+    dist.destroy_process_group()
+
+def get_tensor_model_parallel_group():
+    global _TENSOR_MODEL_PARALLEL_GROUP
+    return _TENSOR_MODEL_PARALLEL_GROUP
+
+def get_tensor_model_parallel_world_size():
+    return torch.distributed.get_world_size(group=get_tensor_model_parallel_group())
+
+def get_tensor_model_parallel_rank():
+    return torch.distributed.get_rank(group=get_tensor_model_parallel_group())
+
+
+def get_expert_model_parallel_group():
+    global _EXPERT_MODEL_PARALLEL_GROUP
+    return _EXPERT_MODEL_PARALLEL_GROUP
+
+def get_expert_model_parallel_world_size():
+    return torch.distributed.get_world_size(group=get_expert_model_parallel_group())
+
+def get_expert_model_parallel_rank():
+    return torch.distributed.get_rank(group=get_expert_model_parallel_group())
+
+
+from typing import List, Optional
+def generate_masked_orthogonal_rank_groups(
+    world_size: int, parallel_size: List[int], mask: List[bool],
+) -> List[List[int]]:
+    """Generate orthogonal parallel groups based on the parallel size and mask.
+
+    Arguments:
+        world_size (int): world size
+
+        parallel_size (List[int]):
+            The parallel size of each orthogonal parallel type. For example, if
+            tensor_parallel_size = 2, pipeline_model_parallel_group = 3, data_parallel_size = 4,
+            and the parallel mapping order is tp-pp-dp, then the parallel_size = [2, 3, 4].
+
+        mask (List[bool]):
+            The mask controls which parallel methods the generated groups represent. If mask[i] is
+            True, it means the generated group contains the i-th parallelism method. For example, 
+            if parallel_size = [tp_size, pp_size, dp_size], and mask = [True, False , True], then 
+            the generated group is the `tp-dp` group, if the mask = [False, True, False], then the 
+            generated group is the `pp` group.
+
+    Algorithm:
+        For orthogonal parallelism, such as tp/dp/pp/cp, the global_rank and
+        local_rank satisfy the following equation:
+            global_rank = tp_rank + dp_rank * tp_size + pp_rank * tp_size * dp_size (1)
+                tp_rank \in [0, tp_size)
+                dp_rank \in [0, dp_size)
+                pp_rank \in [0, pp_size)
+
+        If we want to get the `dp_group` (tp_size * pp_size groups of dp_size ranks each.
+        For example,  if the gpu size is 8 and order is 'tp-pp-dp', size is '2-2-2', and the 
+        dp_group here is [[0, 4], [1, 5], [2, 6], [3, 7]].)
+        The tp_rank and pp_rank will be combined to form the `dp_group_index`.
+            dp_group_index = tp_rank + pp_rank * tp_size (2)
+
+        So, Given that tp_rank and pp_rank satisfy equation (2), and dp_rank in
+        range(0, dp_size), the ranks in dp_group[dp_group_index] satisfies the
+        equation (1).
+        
+        This function solve this math problem.
+
+    For example, if the parallel_size = [tp_size, dp_size, pp_size] = [2, 3, 4],
+    and the mask = [False, True, False]. Then,
+        dp_group_index(0) = tp_rank(0) + pp_rank(0) * 2
+        dp_group_index(1) = tp_rank(1) + pp_rank(0) * 2
+        ...
+        dp_group_index(7) = tp_rank(1) + pp_rank(3) * 2
+
+        dp_group[0] = 0 + range(0, 3) * 2 + 0 = [0, 2, 4]
+        dp_group[1] = 1 + range(0, 3) * 2 + 0 = [1, 3, 5]
+        ...
+        dp_group[7] = 1 + range(0, 3) * 2 + 3 * 2 * 3 = [19, 21, 23]
+    """
+
+    def prefix_product(a: List[int], init=1) -> List[int]:
+        r = [init]
+        for v in a:
+            init = init * v
+            r.append(init)
+        return r
+
+    def inner_product(a: List[int], b: List[int]) -> int:
+        return sum([x * y for x, y in zip(a, b)])
+
+    def decompose(index, shape, stride=None):
+        ''' 
+        This function solve the math problem below:
+            There is an equation: 
+                index = sum(idx[i] * stride[i])
+            And given the value of index, stride.
+            Return the idx.
+        This function will used to get the pp/dp/pp_rank
+        from group_index and rank_in_group.
+        '''
+        if stride is None:
+            stride = prefix_product(shape)
+        idx = [(index // d) % s for s, d in zip(shape, stride)]
+        # stride is a prefix_product result. And the value of stride[-1]
+        # is not used.
+        assert (
+            sum([x * y for x, y in zip(idx, stride[:-1])]) == index
+        ), "idx {} with shape {} mismatch the return idx {}".format(index, shape, idx)
+        return idx
+
+    masked_shape = [s for s, m in zip(parallel_size, mask) if m]
+    unmasked_shape = [s for s, m in zip(parallel_size, mask) if not m]
+
+    global_stride = prefix_product(parallel_size)
+    masked_stride = [d for d, m in zip(global_stride, mask) if m]
+    unmasked_stride = [d for d, m in zip(global_stride, mask) if not m]
+
+    group_size = prefix_product(masked_shape)[-1]
+    num_of_group = world_size // group_size
+
+    ranks = []
+    for group_index in range(num_of_group):
+        # get indices from unmaksed for group_index.
+        decomposed_group_idx = decompose(group_index, unmasked_shape)
+        rank = []
+        for rank_in_group in range(group_size):
+            # get indices from masked for rank_in_group.
+            decomposed_rank_idx = decompose(rank_in_group, masked_shape)
+            rank.append(
+                inner_product(decomposed_rank_idx, masked_stride)
+                + inner_product(decomposed_group_idx, unmasked_stride)
+            )
+        ranks.append(rank)
+    return ranks
+
+
+class RankGenerator(object):
+    def __init__(self, tp: int, ep: int, dp: int, pp: int, cp: int, order: str) -> None:
+        self.tp = tp
+        self.ep = ep
+        self.dp = dp
+        self.pp = pp
+        self.cp = cp
+        self.world_size = tp * dp * pp * cp
+
+        self.name_to_size = {
+            "tp": self.tp,
+            "pp": self.pp,
+            "dp": self.dp,
+            "ep": self.ep,
+            "cp": self.cp,
+        }
+        self.order = order
+        order = order.lower()
+
+        if 'ep' in order:
+            if 'ep-dp' not in order and 'dp-ep' not in order:
+                raise RuntimeError(f"The ep and dp must be adjacent in order ({self.order}).")
+
+        for name in self.name_to_size.keys():
+            if name not in order and self.name_to_size[name] != 1:
+                raise RuntimeError(
+                    f"The size of ({name}) is ({self.name_to_size[name]}), but you haven't specified the order ({self.order})."
+                )
+            elif name not in order:
+                order = order + '-' + name
+
+        self.order_w_ep = order
+        self.order_wo_ep = '-'.join([token for token in order.split('-') if token != 'ep'])
+        self.ordered_size_wo_ep = []
+        self.ordered_size_w_ep = []
+
+        for token in order.split('-'):
+            if token == 'dp':
+                self.ordered_size_w_ep.append(self.dp // self.ep)
+                self.ordered_size_wo_ep.append(self.dp)
+            elif token == 'ep':
+                self.ordered_size_w_ep.append(self.ep)
+            else:
+                self.ordered_size_w_ep.append(self.name_to_size[token])
+                self.ordered_size_wo_ep.append(self.name_to_size[token])
+
+    def get_mask(self, order: str, token: str):
+        ordered_token = order.split('-')
+        token = token.split('-')
+        mask = [False] * len(ordered_token)
+        for t in token:
+            mask[ordered_token.index(t)] = True
+        return mask
+
+    def get_ranks(self, token, independent_ep=False):
+        '''Get rank group by input token.
+
+        Arguments:
+            token (str):
+                Specify the ranks type that want to get. If we want
+                to obtain multiple parallel types, we can use a hyphen
+                '-' to separate them. For example, if we want to obtain
+                the TP_DP group, the token should be 'tp-dp'.
+
+            independent_ep (bool: True):
+                This flag controls whether we treat EP and DP independently.
+                EP shares ranks with DP, if we want to get ranks related to
+                EP, we should set the flag. For example, get_ranks('dp', True)
+                will get DP modulo EP group, and get_ranks('dp', False) will
+                get full DP group.
+        '''
+        if independent_ep:
+            parallel_size = self.ordered_size_w_ep
+            order = self.order_w_ep
+        else:
+            parallel_size = self.ordered_size_wo_ep
+            order = self.order_wo_ep
+        mask = self.get_mask(order, token)
+        ranks = generate_masked_orthogonal_rank_groups(self.world_size, parallel_size, mask)
+        return ranks
+
+class _AllToAll(torch.autograd.Function):
+    @staticmethod
+    def forward(ctx, group, input, output_split_sizes, input_split_sizes):
+        ctx.group = group
+        ctx.output_split_sizes = output_split_sizes
+        ctx.input_split_sizes = input_split_sizes
+
+        world_size = torch.distributed.get_world_size(group=group)
+        # Bypass the function if we are using only 1 GPU.
+        if world_size == 1:
+            return input
+
+        input = input.contiguous()
+        if output_split_sizes is None:
+            # Equal split (all2all)
+            output = torch.empty_like(input)
+        else:
+            # Unequal split (all2all-v)
+            output = input.new_empty(
+                size=[sum(output_split_sizes)] + list(input.size()[1:]),
+                dtype=input.dtype,
+                device="cuda",
+            )
+        # print(f"{torch.distributed.get_rank()} trigger all to all {world_size} output {output.size()} input {input.size()} | {output_split_sizes} {input_split_sizes} \n")
+        torch.distributed.all_to_all_single(
+            output,
+            input,
+            output_split_sizes=output_split_sizes,
+            input_split_sizes=input_split_sizes,
+            group=group,
+        )
+        # print(f"{torch.distributed.get_rank()} trigger all to all done")
+        return output
+
+    @staticmethod
+    def backward(ctx, *grad_output):
+        print(f"{torch.distributed.get_rank()} trigger all to all bwd")
+        return (
+            None,
+            _AllToAll.apply(ctx.group, *grad_output, ctx.input_split_sizes, ctx.output_split_sizes),
+            None,
+            None,
+        )
+
+def _gather_along_last_dim(input_):
+    """Gather tensors and concatinate along the last dimension."""
+
+    world_size = get_tensor_model_parallel_world_size()
+    # Bypass the function if we are using only 1 GPU.
+    if world_size == 1:
+        return input_
+
+    # Size and dimension.
+    last_dim = input_.dim() - 1
+    rank = get_tensor_model_parallel_rank()
+
+    tensor_list = [torch.empty_like(input_) for _ in range(world_size)]
+    tensor_list[rank] = input_
+    torch.distributed.all_gather(tensor_list, input_, group=get_tensor_model_parallel_group())
+
+    # Note: torch.cat already creates a contiguous tensor.
+    output = torch.cat(tensor_list, dim=last_dim).contiguous()
+
+    return output
+
+def _reduce_scatter_along_last_dim(input_):
+    """Reduce-scatter tensors on the last dimension."""
+    num_dims = input_.dim()
+    permute_order = (num_dims - 1,) + tuple(range(num_dims - 1))
+
+    input_ = input_.permute(permute_order).contiguous()
+    output = _reduce_scatter_along_first_dim(input_)
+
+    permute_order = tuple(range(1, num_dims)) + (0,)
+    output = output.permute(permute_order).contiguous()
+    return output
+
+def _reduce_scatter_along_first_dim(input_):
+    """Reduce-scatter the input tensor across model parallel group."""
+    world_size = get_tensor_model_parallel_world_size()
+    # Bypass the function if we are using only 1 GPU.
+    if world_size == 1:
+        return input_
+
+    dim_size = list(input_.size())
+    assert (
+        dim_size[0] % world_size == 0
+    ), "First dimension of the tensor should be divisible by tensor parallel size"
+
+    dim_size[0] = dim_size[0] // world_size
+    output = torch.empty(dim_size, dtype=input_.dtype, device="musa")
+    torch.distributed._reduce_scatter_base(
+        output, input_.contiguous(), group=get_tensor_model_parallel_group()
+    )
+    return output
+
+class _AllGatherFromTensorParallelRegion(torch.autograd.Function):
+    """Gather the input from model parallel region and concatenate."""
+
+    @staticmethod
+    def symbolic(graph, input_):
+        return _gather_along_last_dim(input_)
+
+    @staticmethod
+    def forward(ctx, input_):
+        return _gather_along_last_dim(input_,)
+
+    @staticmethod
+    def backward(ctx, grad_output):
+        # print(f"{torch.distributed.get_rank()} trigger _reduce_scatter_along_last_dim {grad_output.size()}")
+        return _reduce_scatter_along_last_dim(grad_output)
+    
+class _ReduceScatterToTensorParallelRegion(torch.autograd.Function):
+    """Reduce scatter the input from the model parallel region."""
+
+    @staticmethod
+    def symbolic(graph, input_):
+        return _reduce_scatter_along_last_dim(input_)
+
+    @staticmethod
+    def forward(ctx, input_):
+        return _reduce_scatter_along_last_dim(input_,)
+
+    @staticmethod
+    def backward(ctx, grad_output):
+        return _gather_along_last_dim(grad_output)
+
+def all_gather_last_dim_from_tensor_parallel_region(input_):
+    return _AllGatherFromTensorParallelRegion.apply(input_)
+
+
+def reduce_scatter_last_dim_to_tensor_parallel_region(input_):
+    return _ReduceScatterToTensorParallelRegion.apply(input_)
+
+
+def setup_tp_group():
+    global _TENSOR_MODEL_PARALLEL_GROUP
+    global _TENSOR_MODEL_PARALLEL_GLOBAL_RANKS
+    assert WORLD_SIZE == 4, "only trigger tp2dp4 case"
+    rank_generator = RankGenerator(
+        tp=2,
+        ep=2,
+        dp=2,
+        pp=1,
+        cp=1,
+        order="tp-cp-ep-dp-pp"
+    )
+    from datetime import timedelta
+    timeout = timedelta(minutes=10)
+    for ranks in rank_generator.get_ranks('tp'):
+        group = torch.distributed.new_group(
+            ranks, timeout=timeout, pg_options=None
+        )
+        if LOCAL_RANK in ranks:
+            _TENSOR_MODEL_PARALLEL_GROUP = group
+            _TENSOR_MODEL_PARALLEL_GLOBAL_RANKS = ranks
+            print(torch.distributed.get_rank(), " ", _TENSOR_MODEL_PARALLEL_GLOBAL_RANKS)
+
+    global _EXPERT_MODEL_PARALLEL_GROUP
+    global _EXPERT_MODEL_PARALLEL_GROUP_RANKS
+    for ranks in rank_generator.get_ranks('ep', independent_ep=True):
+        group = torch.distributed.new_group(
+            ranks, pg_options=None
+        )
+        if LOCAL_RANK in ranks:
+            _EXPERT_MODEL_PARALLEL_GROUP = group
+            _EXPERT_MODEL_PARALLEL_GROUP_RANKS = ranks
+            print(torch.distributed.get_rank(), " ", _EXPERT_MODEL_PARALLEL_GROUP_RANKS)
+
+def mock_all2all_with_sp():
+    setup()
+    setup_tp_group()
+    
+    _set_device(LOCAL_RANK)
+    def all_to_all_sp2hp(input_):
+        world_size = get_tensor_model_parallel_world_size()
+        input_ = input_.reshape(-1, input_.shape[-1])
+        split_tensors = torch.split(
+            input_, split_size_or_sections=input_.shape[-1] // world_size, dim=1
+        )
+        tp_group = get_tensor_model_parallel_group()
+        concat_tensor = torch.cat(split_tensors, dim=0)
+        output = all_to_all(tp_group, concat_tensor)
+        return output
+
+
+    def all_to_all_hp2sp(input_):
+        world_size = get_tensor_model_parallel_world_size()
+        input_ = input_.reshape(-1, input_.shape[-1])
+        tp_group = get_tensor_model_parallel_group()
+        input_exchanged = all_to_all(tp_group, input_)
+        input_reshaped = input_exchanged.reshape(-1, input_exchanged.shape[-1])
+        split_tensors = torch.split(
+            input_reshaped, split_size_or_sections=input_reshaped.shape[0] // world_size, dim=0
+        )
+        output = torch.cat(split_tensors, dim=-1)
+        return output
+
+    
+    def all_to_all(group, input_, output_split_sizes_=None, input_split_sizes_=None):
+        return _AllToAll.apply(group, input_, output_split_sizes_, input_split_sizes_)
+    batch_size, seq_len, hidden_size = 2, 512, 768
+    tp_size = 2
+    
+    repeat_num = 100
+    depth = 100
+    if LOCAL_RANK == 0:
+        input_split_sizes_ = [128, 0]
+        output_split_sizes_ = [128, 128]
+    else:
+        input_split_sizes_ = [0, 128]
+        output_split_sizes_ = [0, 0]
+    hidden_states = torch.randn([0, 5]).to("cuda")   
+    # for i in range(repeat_num):
+    #     output = all_to_all(get_expert_model_parallel_group(), hidden_states, output_split_sizes_,  input_split_sizes_)
+    #     print(f">>>> {LOCAL_RANK} {i} {output.size()} |")
+    for i in range(repeat_num):
+        hidden_states = torch.randn([0, 5]).to("cuda")
+        print(f">>>> {LOCAL_RANK} {i} |","hidden_states ", hidden_states.size())
+        output = all_gather_last_dim_from_tensor_parallel_region(hidden_states)
+        print(f">>>> {LOCAL_RANK} {i} |", "output ", output.size())
+    # for _ in range(repeat_num):
+    #     hidden_states = torch.randn([seq_len // tp_size * batch_size, hidden_size]).musa()
+    #     weight = torch.nn.Linear(hidden_size, hidden_size, device="musa")
+    #     hidden_states = weight(hidden_states)
+    #     for i in range(depth):
+    #         # all 2 all
+    #         print(f"{i} 1 {hidden_states.size()}")
+    #         hidden_states = all_to_all_sp2hp(hidden_states)
+    #         print(f"{i} 2 {hidden_states.size()}")
+    #         hidden_states = all_to_all(get_expert_model_parallel_group(), hidden_states)
+    #         # all gather base
+    #         hidden_states = all_gather_last_dim_from_tensor_parallel_region(hidden_states)
+    #         print(f"{i} 3 {hidden_states.size()}")
+    #         # reduce scatter base
+    #         hidden_states = reduce_scatter_last_dim_to_tensor_parallel_region(hidden_states)
+    #         # all 2 all
+    #         hidden_states = all_to_all(get_expert_model_parallel_group(), hidden_states)
+    #         print(f"{i} 4 {hidden_states.size()}")
+    #         hidden_states = all_to_all_hp2sp(hidden_states)
+    #         print(f"{i} 5 {hidden_states.size()}")
+    #     loss = hidden_states.sum()
+    #     loss.backward()
+
+    print("done")
+
+if __name__ == "__main__":
+    mock_all2all_with_sp()
\ No newline at end of file
diff --git a/megatron/core/extensions/transformer_engine.py b/megatron/core/extensions/transformer_engine.py
index 1d5725cc..ab667855 100644
--- a/megatron/core/extensions/transformer_engine.py
+++ b/megatron/core/extensions/transformer_engine.py
@@ -1344,16 +1344,30 @@ try:
 
     from transformer_engine.pytorch.permutation import (
         moe_permute,
-        moe_sort_chunks_by_index,
+        # moe_sort_chunks_by_index,
         moe_unpermute,
     )
 
     fused_permute = moe_permute
     fused_unpermute = moe_unpermute
-    fused_sort_chunks_by_index = moe_sort_chunks_by_index
+    fused_sort_chunks_by_index = None #moe_sort_chunks_by_index
 
 except ImportError:
 
     fused_permute = None
     fused_unpermute = None
     fused_sort_chunks_by_index = None
+
+try:
+
+    from transformer_engine.pytorch.cross_entropy import parallel_cross_entropy
+
+    def te_parallel_cross_entropy(logits: torch.Tensor, labels: torch.Tensor):
+        """Wrapper function for TE's Cross Entropy Loss kernel"""
+        return parallel_cross_entropy(
+            logits, labels, 0.0, False, get_tensor_model_parallel_group(check_initialized=False)
+        )
+
+except ImportError:
+
+    te_parallel_cross_entropy = None
\ No newline at end of file
diff --git a/megatron/core/models/common/language_module/language_module.py b/megatron/core/models/common/language_module/language_module.py
index cb26be12..898e7f0b 100644
--- a/megatron/core/models/common/language_module/language_module.py
+++ b/megatron/core/models/common/language_module/language_module.py
@@ -13,7 +13,10 @@ from megatron.core.transformer.enums import AttnBackend
 from megatron.core.transformer.module import MegatronModule
 from megatron.core.transformer.transformer_config import TransformerConfig
 from megatron.core.utils import make_tp_sharded_tensor_for_checkpoint
-
+try:
+    from megatron.core.extensions.transformer_engine import te_parallel_cross_entropy
+except:
+    te_parallel_cross_entropy = None
 
 class LanguageModule(MegatronModule):
     """Base language module that has common helper functions used across GPT, BERT etc.
@@ -76,7 +79,10 @@ class LanguageModule(MegatronModule):
         # [b s] => [s b]
         labels = labels.transpose(0, 1).contiguous()
         if self.config.cross_entropy_loss_fusion:
-            loss = fused_vocab_parallel_cross_entropy(logits, labels)
+            # loss = fused_vocab_parallel_cross_entropy(logits, labels)
+            # HACK(yehua.zhang): replace fuse cross entropy to triton
+            labels = torch.as_strided(labels, labels.size(), (labels.size()[1], 1))
+            loss = te_parallel_cross_entropy(logits, labels)
         else:
             loss = tensor_parallel.vocab_parallel_cross_entropy(logits, labels)
 
diff --git a/megatron/core/optimizer/clip_grads.py b/megatron/core/optimizer/clip_grads.py
index 0f33f919..f5cb2c49 100644
--- a/megatron/core/optimizer/clip_grads.py
+++ b/megatron/core/optimizer/clip_grads.py
@@ -87,7 +87,7 @@ def get_grad_norm_fp32(
     # Calculate norm.
     if norm_type == inf:
         total_norm = max(grad.abs().max() for grad in grads_for_norm)
-        total_norm_cuda = torch.tensor([float(total_norm)], dtype=torch.float, device='cuda')
+        total_norm_cuda = torch.tensor([float(total_norm)], dtype=torch.float, device='musa')
         # Take max across all data-parallel GPUs if using FSDP and then all model-parallel GPUs.
         if data_parallel_group:
             torch.distributed.all_reduce(
@@ -100,7 +100,7 @@ def get_grad_norm_fp32(
 
     else:
         if norm_type == 2.0:
-            dummy_overflow_buf = torch.tensor([0], dtype=torch.int, device='cuda')
+            dummy_overflow_buf = torch.tensor([0], dtype=torch.int, device='musa')
             # Use apex's multi-tensor applier for efficiency reasons.
             # Multi-tensor applier takes a function and a list of list
             # and performs the operation on that list all in one kernel.
@@ -112,7 +112,7 @@ def get_grad_norm_fp32(
                     False,  # no per-parameter norm
                 )
             else:
-                grad_norm = torch.tensor([0], dtype=torch.float, device='cuda')
+                grad_norm = torch.tensor([0], dtype=torch.float, device='musa')
             # Since we will be summing across data parallel groups,
             # we need the pow(norm-type).
             total_norm = grad_norm**norm_type
@@ -171,7 +171,7 @@ def clip_grad_by_total_norm_fp32(
     # Scale.
     clip_coeff = max_norm / (total_norm + 1.0e-6)
     if clip_coeff < 1.0:
-        dummy_overflow_buf = torch.tensor([0], dtype=torch.int, device='cuda')
+        dummy_overflow_buf = torch.tensor([0], dtype=torch.int, device='musa')
         multi_tensor_applier(
             multi_tensor_scale_impl, dummy_overflow_buf, [grads, grads], clip_coeff
         )
@@ -203,7 +203,7 @@ def count_zeros_fp32(
     #   - grad should not be none
     #   - parameter should not be shared
     #   - should not be a replica due to tensor model parallelism
-    total_num_zeros = torch.tensor([0.0], dtype=torch.float, device='cuda')
+    total_num_zeros = torch.tensor([0.0], dtype=torch.float, device='musa')
     data_parallel_group = None
     for param in parameters:
         grad_attr = "decoupled_grad" if use_decoupled_grad else "grad"
diff --git a/megatron/core/tensor_parallel/cross_entropy.py b/megatron/core/tensor_parallel/cross_entropy.py
index 27c8f063..bd589083 100644
--- a/megatron/core/tensor_parallel/cross_entropy.py
+++ b/megatron/core/tensor_parallel/cross_entropy.py
@@ -59,6 +59,7 @@ class VocabParallelCrossEntropy:
         predicted_logits_1d = logits_2d[arange_1d, masked_target_1d]
         predicted_logits_1d = predicted_logits_1d.clone().contiguous()
         predicted_logits = predicted_logits_1d.view_as(target)
+        # print(f'target_mask is {target_mask.shape}, {target_mask.dtype}, predicted_logits is {predicted_logits.shape}, {predicted_logits.dtype}')
         predicted_logits[target_mask] = 0.0
 
         exp_logits = vocab_parallel_logits
diff --git a/megatron/core/tensor_parallel/mappings.py b/megatron/core/tensor_parallel/mappings.py
index cdd72068..66bf2083 100644
--- a/megatron/core/tensor_parallel/mappings.py
+++ b/megatron/core/tensor_parallel/mappings.py
@@ -439,6 +439,10 @@ class _AllToAll(torch.autograd.Function):
                 dtype=input.dtype,
                 device=torch.cuda.current_device(),
             )
+        # print(f'output_split_sizes is {output_split_sizes}')
+        # print(f'input_split_sizes is {input_split_sizes}')
+        # print(f'output is {output.shape}')
+        # print(f'input is {input.shape}')
         torch.distributed.all_to_all_single(
             output,
             input,
diff --git a/megatron/core/transformer/moe/experts.py b/megatron/core/transformer/moe/experts.py
index fc0cf3e6..2a857991 100644
--- a/megatron/core/transformer/moe/experts.py
+++ b/megatron/core/transformer/moe/experts.py
@@ -682,11 +682,12 @@ class TEGroupedMLP(MegatronModule):
             output (torch.Tensor): The output of the local experts.
         """
         tokens_per_expert = tokens_per_expert.tolist()
-        if self.config.fp8:
-            actual_tokens_per_expert = tokens_per_expert
-            permuted_local_hidden_states, tokens_per_expert = self.fp8_padding(
-                permuted_local_hidden_states, tokens_per_expert
-            )
+        # TODO(yehua.zhang): musa groupgemm do not need to padding
+        # if self.config.fp8:
+        #     actual_tokens_per_expert = tokens_per_expert
+        #     permuted_local_hidden_states, tokens_per_expert = self.fp8_padding(
+        #         permuted_local_hidden_states, tokens_per_expert
+        #     )
 
         intermediate_parallel, bias_parallel = self.linear_fc1(
             permuted_local_hidden_states, tokens_per_expert
@@ -734,8 +735,9 @@ class TEGroupedMLP(MegatronModule):
         output, output_bias = self.linear_fc2(intermediate_parallel, tokens_per_expert)
 
         # upad and concat the output
-        if self.config.fp8:
-            output = self.fp8_unpadding(output, actual_tokens_per_expert)
+        # TODO(yehua.zhang): musa groupgemm do not need to unpadding
+        # if self.config.fp8:
+        #     output = self.fp8_unpadding(output, actual_tokens_per_expert)
 
         return output, output_bias
 
diff --git a/megatron/core/transformer/moe/moe_utils.py b/megatron/core/transformer/moe/moe_utils.py
index cf7cf2b4..87886e38 100644
--- a/megatron/core/transformer/moe/moe_utils.py
+++ b/megatron/core/transformer/moe/moe_utils.py
@@ -354,7 +354,8 @@ def sort_chunks_by_idxs(
     input: torch.Tensor, split_sizes: torch.Tensor, sorted_idxs: torch.Tensor, fused: bool = False
 ):
     """Split and sort the input tensor based on the split_sizes and sorted indices."""
-    if fused:
+    # TODO(yehua.zhang) optimize the sort chunk kernel
+    if False:#fused:
         if not HAVE_TE or fused_sort_chunks_by_index is None:
             raise ValueError(
                 "fused_sort_chunks_by_index is not available. Please install TE >= 2.1.0."
@@ -403,7 +404,8 @@ def group_limited_topk(
         Tuple[torch.Tensor, torch.Tensor]: Probs and indices tensor.
     """
     # Organize the experts into groups
-    group_scores = scores.view(num_tokens, num_groups, -1).topk(2, dim=-1)[0].sum(dim=-1)
+    # TODO(yehua.zhang) delete the max
+    group_scores = scores.view(num_tokens, num_groups, -1).max(dim=-1).values #.topk(2, dim=-1)[0].sum(dim=-1)
     group_idx = torch.topk(group_scores, k=group_topk, dim=-1, sorted=False)[1]
     group_mask = torch.zeros_like(group_scores)
     group_mask.scatter_(1, group_idx, 1)
diff --git a/megatron/core/transformer/moe/router.py b/megatron/core/transformer/moe/router.py
index 5965c16d..75023684 100644
--- a/megatron/core/transformer/moe/router.py
+++ b/megatron/core/transformer/moe/router.py
@@ -112,9 +112,11 @@ class TopKRouter(Router):
                 torch.zeros(self.config.num_moe_experts, dtype=torch.float32),
                 persistent=False,
             )
+            self.local_tokens_per_expert = self.local_tokens_per_expert.cuda()
             self.register_buffer(
                 'expert_bias', torch.zeros(self.config.num_moe_experts, dtype=torch.float32)
             )
+            self.expert_bias = self.expert_bias.cuda()
         else:
             self.local_tokens_per_expert = None
             self.expert_bias = None
diff --git a/megatron/core/transformer/transformer_config.py b/megatron/core/transformer/transformer_config.py
index d92d86e7..36bbba73 100644
--- a/megatron/core/transformer/transformer_config.py
+++ b/megatron/core/transformer/transformer_config.py
@@ -755,8 +755,8 @@ class TransformerConfig(ModelParallelConfig):
                     "apply_rope_fusion is not available. Please install TE >= 1.4 or Apex."
                 )
 
-            if self.multi_latent_attention:
-                raise ValueError("multi_latent_attention does not support apply_rope_fusion.")
+            # if self.multi_latent_attention:
+            #     raise ValueError("multi_latent_attention does not support apply_rope_fusion.")
 
         if self.multi_latent_attention and self.rotary_interleaved:
             raise ValueError("rotary_interleaved does not work with multi_latent_attention.")
@@ -857,12 +857,12 @@ class TransformerConfig(ModelParallelConfig):
                 fused_unpermute,
             )
 
-            if (
-                fused_permute is None
-                or fused_sort_chunks_by_index is None
-                or fused_unpermute is None
-            ):
-                raise ValueError("fused permutation is not available. Please install TE >= 2.1.0.")
+            # if (
+            #     fused_permute is None
+            #     or fused_sort_chunks_by_index is None
+            #     or fused_unpermute is None
+            # ):
+            #     raise ValueError("fused permutation is not available. Please install TE >= 2.1.0.")
 
         if self.cp_comm_type is not None:
             if isinstance(self.cp_comm_type, list):
diff --git a/megatron/training/tokenizer/tokenizer.py b/megatron/training/tokenizer/tokenizer.py
index 620a0cbb..556e7cbf 100644
--- a/megatron/training/tokenizer/tokenizer.py
+++ b/megatron/training/tokenizer/tokenizer.py
@@ -129,7 +129,7 @@ class _HuggingFaceTokenizer(MegatronTokenizer):
             )
 
         # TODO(bnorick): download tokenizer once to lustre and use force offline to make sure all tasks read it from there
-        self._tokenizer = transformers.AutoTokenizer.from_pretrained(
+        self._tokenizer = transformers.AutoTokenizer.from_pretrained(trust_remote_code=True, 
             pretrained_model_name_or_path=pretrained_model_name_or_path, **kwargs
         )
         self._vocab = self._tokenizer.get_vocab()
diff --git a/megatron/training/training.py b/megatron/training/training.py
index 7cf6fcbd..768dcd2c 100644
--- a/megatron/training/training.py
+++ b/megatron/training/training.py
@@ -52,6 +52,7 @@ from megatron.core.rerun_state_machine import (
     RerunDataIterator,
     RerunMode,
 )
+from megatron.core.fp8_utils import get_fp8_scale_and_amax
 from megatron.training.initialize import initialize_megatron
 from megatron.training.initialize import write_args_to_tensorboard
 from megatron.training.initialize import set_jit_fusion_options
@@ -582,9 +583,9 @@ def get_model(model_provider_func, model_type=ModelType.encoder_or_decoder, wrap
     # GPU allocation.
     # For FSDP2, we don't allocate GPU memory here. We allocate GPU memory
     # in the fully_shard function of FSDP2 instead.
-    if not (args.use_torch_fsdp2 and args.use_cpu_initialization) and not args.init_model_with_meta_device:
-        for model_module in model:
-            model_module.cuda(torch.cuda.current_device())
+    # if not (args.use_torch_fsdp2 and args.use_cpu_initialization) and not args.init_model_with_meta_device:
+    #     for model_module in model:
+    #         model_module.cuda(torch.cuda.current_device())
 
     # Fp16 conversion.
     if args.fp16 or args.bf16:
@@ -595,15 +596,19 @@ def get_model(model_provider_func, model_type=ModelType.encoder_or_decoder, wrap
     # param) to its amax_history. The following logic will correct the amax_history back.
     for model_module in model:
         for param in model_module.parameters():
-            if is_float8tensor(param) and param._fp8_meta is not None:
-                fp8_meta = param._fp8_meta['scaling_fwd']
-                fp8_meta_index = param._fp8_meta_index
-                if hasattr(param, 'get_high_precision_init_val'):
-                    fp8_meta.amax_history[0][fp8_meta_index].copy_(
-                        param.get_high_precision_init_val().abs().max()
-                    )
-                else:
-                    fp8_meta.amax_history[0][fp8_meta_index] = 0
+            if is_float8tensor(param): #and param._fp8_meta is not None:
+                # TODO(yehua.zhang): move the fp8_meta_index
+                scale, amax = get_fp8_scale_and_amax(param)
+                # amax = 0
+                amax[0].zero_()
+                # fp8_meta = param._fp8_meta['scaling_fwd']
+                # fp8_meta_index = param._fp8_meta_index
+                # if hasattr(param, 'get_high_precision_init_val'):
+                #     fp8_meta.amax_history[0][fp8_meta_index].copy_(
+                #         param.get_high_precision_init_val().abs().max()
+                #     )
+                # else:
+                #     fp8_meta.amax_history[0][fp8_meta_index] = 0
 
     if wrap_with_ddp:
         if args.use_torch_fsdp2:
