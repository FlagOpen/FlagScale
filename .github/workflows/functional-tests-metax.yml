name: Functional Tests Metax

on:
  workflow_call:
    inputs:
      type:
        required: true
        type: string
      task:
        required: true
        type: string
      image:
        required: true
        type: string

jobs:
  functional-test:
    runs-on: [self-hosted, Linux, X64, metax-0, gpus-2]
    container:
      image: ${{ inputs.image }}
      ports:
        - 80
      volumes:
        - /home/flagscale_cicd/docker/docker_build/docker_data:/home/gitlab-runner/data
        - /home/flagscale_cicd/sccache:/root/.cache/sccache
      options: --ipc=host --privileged=true --group-add video --shm-size 100gb --hostname flagscale_cicd --user root --ulimit nofile=65535:65535 --ulimit memlock=-1 --device=/dev/dri --device=/dev/mxcd

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          ssh-strict: true
          ssh-user: git
          persist-credentials: true
          clean: true
          sparse-checkout-cone-mode: true
          fetch-tags: false
          show-progress: true
          lfs: false
          submodules: false
          set-safe-directory: true
          retry-on-intr: fail=5,delay=180000

      - name: Install sccache
        run: |
          set -eux
          SCCACHE_VERSION=0.8.1
          export CURL_OPTS="--connect-timeout 120 --max-time 600 --retry 5 --retry-delay 60"
          curl ${CURL_OPTS} -L https://github.com/mozilla/sccache/releases/download/v${SCCACHE_VERSION}/sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl.tar.gz \
            | tar xz
          mv sccache-v${SCCACHE_VERSION}-x86_64-unknown-linux-musl/sccache /usr/bin/sccache
          chmod +x /usr/bin/sccache
          echo "SCCACHE_DIR=/root/.cache/sccache" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=$(which sccache)" >> $GITHUB_ENV
          echo "PATH=/usr/bin/sccache:$PATH" >> $GITHUB_ENV
          sccache --version

      - name: Run Functional Test
        timeout-minutes: 90  # Automatically terminate the current step after 90 minutes
        run: |
          echo "USER: $USER"
          echo "UID: $(id -u)"
          echo "GID: $(id -g)"
          echo "Home: $HOME"
          echo "PWD: ${PWD}"
          whoami
          git config --global --add safe.directory /__w/FlagScale/FlagScale
          sccache --show-stats || true
          if [ "${{ inputs.type }}" = "inference" ]; then
            source /opt/conda/bin/activate flagscale-inference

            echo "[INFO] Configuring compiler cache (sccache) ..."
            export CC=/root/cu-bridge/bin/gcc
            export CXX=/root/cu-bridge/bin/g++
            export CMAKE_C_COMPILER_LAUNCHER=$(which sccache)
            export CMAKE_CXX_COMPILER_LAUNCHER=$(which sccache)
            export CMAKE_CUDA_COMPILER_LAUNCHER=$(which sccache)
            export CXXFLAGS="-I/opt/maca/include -I/opt/maca/include/mcr -I/opt/maca/include/common -I/opt/maca/include/mcsparse -I/opt/maca/include/mcsolver"

            echo "Original commit ID: ${{ github.event.pull_request.head.sha }}"
            echo "[INFO] Install VLLM and its dependencies ..."
            # configuration parameters
            MAX_RETRIES=5
            DELAYS=(1 1.5 2 2.5 3)
            COMMANDS=(
              "python tools/patch/unpatch.py --backend vllm FlagScale --task inference --device-type Metax_C550 --commit ${{ github.event.pull_request.head.sha }}"
              "cd build/Metax_C550/FlagScale/third_party/vllm"
              "source env.sh"
              "pip install scikit-build scikit-build-core"
              "pip install git+https://github.com/FlagOpen/FlagGems.git@v3.0"
              "python setup.py bdist_wheel"
              "pip uninstall vllm -y"
              "pip install dist/vllm-*-linux_x86_64.whl"
            )

            # Initialize state array
            declare -A command_status
            declare -A retry_count
            declare -A delay_index

            # Traverse all commands and initialize variables
            for i in "${!COMMANDS[@]}"; do
              command_status[$i]=false
              retry_count[$i]=0
              delay_index[$i]=0
            done

            # Continuously check if there are any unsuccessful commands that need to be retried
            while true; do
              all_successful=true

              for i in "${!COMMANDS[@]}"; do
                cmd="${COMMANDS[$i]}"

                if ! ${command_status[$i]} && [ ${retry_count[$i]} -lt $MAX_RETRIES ]; then
                  echo "Attempt to execute command (${retry_count[$i]}/$MAX_RETRIES times): ${cmd}"

                  if ! eval "$cmd"; then
                    echo "Command execution failed! We will retry in ${DELAYS[delay_index[$i]} minutes ..."
                    sleep $((${DELAYS[delay_index[$i]]} * 60))
                    ((retry_count[$i]++))
                    ((delay_index[$i]++))
                  else
                    command_status[$i]=true
                  fi
                  all_successful=false
                else
                  echo "Skip commands that have been successfully/have reached the maximum retry count: ${cmd}"
                fi
              done
              if [ "$all_successful" = true ]; then
                echo "All commands have been executed"
                break
              fi
            done

            if [ "$all_successful" = false ]; then
              exit 1
            fi

            source /opt/conda/bin/activate base
          else
            echo "Unknown backend type: ${{ inputs.type }}"
            exit 1
          fi
          cd /__w/FlagScale/FlagScale
          tests/scripts/functional_tests/test_task.sh --type ${{ inputs.type }} --task ${{ inputs.task }}
          exit_code=$?
          echo "Exit code: $exit_code"
          sccache --show-stats
        shell: bash
