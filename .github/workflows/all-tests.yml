name: All Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.event.pull_request.number }}-${{ github.actor }}
  cancel-in-progress: true

jobs:
  set-env:
    runs-on: ubuntu-latest
    outputs:
      ci_image: ${{ steps.set-env.outputs.ci_image }}  # Declare output variable
    steps:
      - name: Set Environment Variable
        id: set-env  # Assign an ID to this step
        run: |
          echo "ci_image=localhost:5000/flagscale:cuda-12.4.1-python-3.12-torch-2.5.1-commit-deed35e" >> $GITHUB_OUTPUT  # Set output variable

  # Megatron Report Clean
  megatron-report-clean:
    needs:
      - set-env
    uses: ./.github/workflows/report-clean.yml
    with:
      backend: megatron
      image: ${{ needs.set-env.outputs.ci_image }}

  # Megatron Unit Tests with Matrix
  megatron-unit-tests:
    needs:
      - set-env
      - megatron-report-clean
    uses: ./.github/workflows/unit-tests.yml
    strategy:
      matrix:
        subset:
          - data
          - dist_checkpointing
          - distributed
          - export
          - fusions
          - inference
          - models
          - pipeline_parallel
          - ssm
          - tensor_parallel
          - transformer/moe
          - transformer
          - ./
    name: "megatron-${{ matrix.subset == './' && 'root' || matrix.subset }}"
    with:
      backend: megatron
      subset: ${{ matrix.subset }}
      image: ${{ needs.set-env.outputs.ci_image }}

  # FlagScale Report Clean
  flagscale-report-clean:
    needs:
      - set-env
    uses: ./.github/workflows/report-clean.yml
    with:
      backend: flagscale
      image: ${{ needs.set-env.outputs.ci_image }}

  # Flagscale Unit Tests with Matrix
  flagscale-unit-tests:
    needs:
      - set-env
      - flagscale-report-clean
    uses: ./.github/workflows/unit-tests.yml
    strategy:
      matrix:
        subset:
          - runner
          - ./
    name: "flagscale-${{ matrix.subset == './' && 'root' || matrix.subset }}"
    with:
      backend: flagscale
      subset: ${{ matrix.subset }}
      image: ${{ needs.set-env.outputs.ci_image }}

  # Functional Tests with Mision and Type Matrix
  functional-tests-train:
    needs:
      - set-env
      - megatron-unit-tests
      - flagscale-unit-tests
    uses: ./.github/workflows/functional-tests.yml
    strategy:
      matrix:
        task:
          - aquila
          - mixtral
          - llava_onevision
    name: "train-${{ matrix.task }}"
    with:
      task: ${{ matrix.task }}
      type: train
      image: ${{ needs.set-env.outputs.ci_image }}

  functional-tests-hetero:
    needs:
      - set-env
      - functional-tests-train
    uses: ./.github/workflows/functional-tests.yml
    strategy:
      matrix:
        task:
          - aquila
    name: "hetero_train-${{ matrix.task }}"
    with:
      task: ${{ matrix.task }}
      type: hetero_train
      image: ${{ needs.set-env.outputs.ci_image }}

  functional-tests-serve:
    needs:
      - set-env
      - functional-tests-hetero
    uses: ./.github/workflows/functional-tests.yml
    strategy:
      matrix:
        task:
          - base
    name: "serve-${{ matrix.task }}"
    with:
      task: ${{ matrix.task }}
      type: serve
      image: ${{ needs.set-env.outputs.ci_image }}

  # Megatron Coverage Test
  megatron-coverage-test:
    needs:
      - set-env
      - functional-tests-serve
    if: ${{ github.event_name == 'pull_request' }}
    uses: ./.github/workflows/coverage-tests.yml
    with:
      backend: megatron
      image: ${{ needs.set-env.outputs.ci_image }}

  # Flagscale Coverage Test
  flagscale-coverage-test:
    needs:
      - set-env
      - functional-tests-serve
    if: ${{ github.event_name == 'pull_request' }}
    uses: ./.github/workflows/coverage-tests.yml
    with:
      backend: flagscale
      image: ${{ needs.set-env.outputs.ci_image }}

  # Check All Tests
  all-tests:
    needs:
      - megatron-unit-tests
      - flagscale-unit-tests
      - functional-tests-train
      - functional-tests-hetero
      - functional-tests-serve
      - megatron-coverage-test
      - flagscale-coverage-test
    runs-on: ubuntu-latest
    steps:
      - name: All Tests Completed
        run: echo "All tests completed successfully!"

# Add in the feature for inference
# functional-tests-inference:
#   needs:
#     - functional-tests-hetero
#   uses: ./.github/workflows/functional-tests.yml
#   strategy:
#     matrix:
#       task:
#         - from_vllm
#   name: "inference-${{ matrix.task }}"
#   with:
#     task: ${{ matrix.task }}
#     type: inference
