name: Push Meatx Docker Image 

on:
  push:
    branches: ["main"]
    paths:
      - '.github/workflows/*docker*.yml'
      # - 'hardware/Metax_C550/**'
  pull_request:
    branches: ["main"]
    paths:
      - '.github/workflows/*docker*.yml'
      # - 'hardware/Metax_C550/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.actor }}
  cancel-in-progress: true

jobs:
  set-env:
    runs-on: ubuntu-latest
    outputs:
      ci_image: ${{ steps.set-env.outputs.ci_image }} # Declare output variable
    steps:
      - name: Set Environment Variable
        id: set-env # Assign an ID to this step
        run: |
          echo "ci_image=localhost:5000/flagscale:maca.ai2.33.0.13-torch2.6-py310-ubuntu22.04-amd64-time2508051515" >> $GITHUB_OUTPUT  # Set output variable

  functional-tests-inference:
    needs:
      - set-env
    tasks:
      - deepseek_r1_distill_qwen-metax
      # TODO: Need update for flaggems@v3.0
      # - deepseek_r1_distill_qwen-flaggems-metax
      - opi_llama3_1_instruct-metax
      - opi_llama3_1_instruct-flaggems-metax
      - qwen3-metax
      - qwen3-flaggems-metax
    type: inference

  test-and-commit:
    needs:
      - functional-tests-inference
    container:
      image: ${{ needs.set-env.outputs.ci_image }}
      ports:
        - 80
      volumes:
        - /home/flagscale_cicd/docker/docker_build/docker_data:/home/gitlab-runner/data
        - /home/flagscale_cicd/sccache:/root/.cache/sccache
      options: --ipc=host --privileged=true --group-add video --shm-size 100gb --hostname flagscale_cicd --user root --ulimit nofile=65535:65535 --ulimit memlock=-1 --device=/dev/dri --device=/dev/mxcd

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
          ssh-strict: true
          ssh-user: git
          persist-credentials: true
          clean: true
          sparse-checkout-cone-mode: true
          fetch-tags: false
          show-progress: true
          lfs: false
          submodules: false
          set-safe-directory: true

      - name: Run Functional Test
        run: |
          echo "USER: $USER"
          echo "UID: $(id -u)"
          echo "GID: $(id -g)"
          echo "Home: $HOME"
          echo "PWD: ${PWD}"
          whoami
          git config --global --add safe.directory /__w/FlagScale/FlagScale
          if [ "${{ needs.type }}" = "inference" ]; then
            source /opt/conda/bin/activate flagscale-inference
            echo "Original commit ID: ${{ github.event.pull_request.head.sha }}"
            python tools/patch/unpatch.py --backend vllm FlagScale --task inference --device-type Metax_C550 --commit ${{ github.event.pull_request.head.sha }}
            cd build/Metax_C550/FlagScale/third_party/vllm
            source env.sh
            pip install scikit-build scikit-build-core
            pip install git+https://github.com/FlagOpen/FlagGems.git@v3.0
            python setup.py bdist_wheel
            pip uninstall vllm -y
            pip install dist/vllm-0.8.5+maca2.33.0.12torch2.6-cp310-cp310-linux_x86_64.whl
            cd ../..
            PYTHONPATH=./:$PYTHONPATH pip install . --verbose --no-build-isolation
            source /opt/conda/bin/activate base
          else
            echo "Unknown backend type: ${{ needs.type }}"
            exit 1
          fi
          cd /__w/FlagScale/FlagScale
          for task in ${{ needs.tasks }}
          do
            tests/scripts/functional_tests/test_task.sh --type ${{ needs.type }} --task ${{ task }}
            exit_code=$?
            echo "Exit code: $exit_code"
          done
        shell: bash

      # - name: Commit the state
      #   run: |
      #     docker commit test-container my-app:tested
      #     docker images my-app:tested

  # Check All Tests
  all-tests:
    needs:
      - test-and-commit
    runs-on: ubuntu-latest
    steps:
      - name: All Tests Completed
        run: echo "All tests completed successfully!"
