# .github/workflows/create-container-unit-tests.yml
name: Unit Tests

on:
  workflow_call:
    inputs:
      backend:
        required: true
        type: string
      subset:
        required: true
        type: string
      image:
        required: true
        type: string

jobs:
  unit-test:
    runs-on: self-hosted
    container:
      image: ${{ inputs.image }}
      ports:
        - 80
      volumes:
        - /home/flagscale_cicd/flask/static:/workspace/report
        - /home/flagscale_cicd/flask/config:/workspace/config
        - /home/flagscale_cicd/docker/docker_build/docker_data:/home/gitlab-runner/data
        - /home/flagscale_cicd/docker/docker_build/docker_tokenizers:/home/gitlab-runner/tokenizers
      options: --gpus all --shm-size=500g --hostname flagscale_cicd --user root --ulimit nofile=65535:65535
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          ssh-strict: true
          ssh-user: git
          persist-credentials: true
          clean: true
          sparse-checkout-cone-mode: true
          fetch-tags: false
          show-progress: true
          lfs: false
          submodules: false
          set-safe-directory: true

      - name: Unit Test Coverage Online Report
        run: |
          REPORT_ADDR=$(cat "/workspace/config/report_address")
          echo "After 'Run Unit Test' is completed/stopped, you can access the test coverage report at http://${REPORT_ADDR}/${{github.sha}}/cov-report-${{ inputs.backend }}/index.html"

      - name: Run Unit Test
        run: |
          pip install gitpython # TODO: Remove after updating the image

          git config --global --add safe.directory /__w/FlagScale/FlagScale
          if [ "${{ inputs.backend }}" = "megatron" ] || [ "${{ inputs.backend }}" = "flagscale" ]; then
            python tools/patch/unpatch.py --backend Megatron-LM
          elif [ "${{ inputs.backend }}" = "vllm" ]; then
            python tools/patch/unpatch.py --backend vllm
            source /root/miniconda3/bin/activate flagscale-inference
            pip install scikit-build scikit-build-core
            pip install --no-build-isolation git+https://github.com/FlagOpen/FlagGems.git@release_v1.0.0
            MAX_JOBS=$(nproc) pip install --no-build-isolation -v ./third_party/vllm/.
          else
            echo "Unknown backend type: ${{ inputs.backend }}"
            exit 1
          fi

          tests/scripts/unit_tests/test_subset.sh --backend ${{ inputs.backend }} --subset ${{ inputs.subset }} --id ${{ github.sha }}
        shell: bash
